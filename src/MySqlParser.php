<?php

/*
 * Generated from MySqlParser.g4 by ANTLR 4.13.1
 */

namespace MySqlAntl4 {
	use Antlr\Antlr4\Runtime\Atn\ATN;
	use Antlr\Antlr4\Runtime\Atn\ATNDeserializer;
	use Antlr\Antlr4\Runtime\Atn\ParserATNSimulator;
	use Antlr\Antlr4\Runtime\Dfa\DFA;
	use Antlr\Antlr4\Runtime\Error\Exceptions\FailedPredicateException;
	use Antlr\Antlr4\Runtime\Error\Exceptions\NoViableAltException;
	use Antlr\Antlr4\Runtime\PredictionContexts\PredictionContextCache;
	use Antlr\Antlr4\Runtime\Error\Exceptions\RecognitionException;
	use Antlr\Antlr4\Runtime\RuleContext;
	use Antlr\Antlr4\Runtime\Token;
	use Antlr\Antlr4\Runtime\TokenStream;
	use Antlr\Antlr4\Runtime\Vocabulary;
	use Antlr\Antlr4\Runtime\VocabularyImpl;
	use Antlr\Antlr4\Runtime\RuntimeMetaData;
	use Antlr\Antlr4\Runtime\Parser;

	final class MySqlParser extends Parser
	{
		public const SPACE = 1, SPEC_MYSQL_COMMENT = 2, COMMENT_INPUT = 3, LINE_COMMENT = 4, 
               ADD = 5, ALL = 6, ALTER = 7, ALWAYS = 8, ANALYZE = 9, AND = 10, 
               ARRAY = 11, AS = 12, ASC = 13, ATTRIBUTE = 14, BEFORE = 15, 
               BETWEEN = 16, BOTH = 17, BUCKETS = 18, BY = 19, CALL = 20, 
               CASCADE = 21, CASE = 22, CAST = 23, CHANGE = 24, CHARACTER = 25, 
               CHECK = 26, COLLATE = 27, COLUMN = 28, CONDITION = 29, CONSTRAINT = 30, 
               CONTINUE = 31, CONVERT = 32, CREATE = 33, CROSS = 34, CURRENT = 35, 
               CURRENT_ROLE = 36, CURRENT_USER = 37, CURSOR = 38, DATABASE = 39, 
               DATABASES = 40, DECLARE = 41, DEFAULT = 42, DELAYED = 43, 
               DELETE = 44, DESC = 45, DESCRIBE = 46, DETERMINISTIC = 47, 
               DIAGNOSTICS = 48, DISTINCT = 49, DISTINCTROW = 50, DROP = 51, 
               EACH = 52, ELSE = 53, ELSEIF = 54, EMPTY = 55, ENCLOSED = 56, 
               ENFORCED = 57, ESCAPED = 58, EXCEPT = 59, EXISTS = 60, EXIT = 61, 
               EXPLAIN = 62, FALSE = 63, FETCH = 64, FOR = 65, FORCE = 66, 
               FOREIGN = 67, FROM = 68, FULLTEXT = 69, GENERATED = 70, GET = 71, 
               GRANT = 72, GROUP = 73, HAVING = 74, HIGH_PRIORITY = 75, 
               HISTOGRAM = 76, IF = 77, IGNORE = 78, IGNORED = 79, IN = 80, 
               INDEX = 81, INFILE = 82, INNER = 83, INOUT = 84, INSERT = 85, 
               INTERVAL = 86, INTO = 87, IS = 88, ITERATE = 89, JOIN = 90, 
               KEY = 91, KEYS = 92, KILL = 93, LATERAL = 94, LEADING = 95, 
               LEAVE = 96, LEFT = 97, LIKE = 98, LIMIT = 99, LINEAR = 100, 
               LINES = 101, LOAD = 102, LOCK = 103, LOCKED = 104, LOOP = 105, 
               LOW_PRIORITY = 106, MASTER_BIND = 107, MASTER_SSL_VERIFY_SERVER_CERT = 108, 
               MATCH = 109, MAXVALUE = 110, MINVALUE = 111, MODIFIES = 112, 
               NATURAL = 113, NOT = 114, NO_WRITE_TO_BINLOG = 115, NULL_LITERAL = 116, 
               NUMBER = 117, ON = 118, OPTIMIZE = 119, OPTION = 120, OPTIONAL = 121, 
               OPTIONALLY = 122, OR = 123, ORDER = 124, OUT = 125, OUTER = 126, 
               OUTFILE = 127, OVER = 128, PARTITION = 129, PRIMARY = 130, 
               PROCEDURE = 131, PURGE = 132, RANGE = 133, READ = 134, READS = 135, 
               REFERENCES = 136, REGEXP = 137, RELEASE = 138, RENAME = 139, 
               REPEAT = 140, REPLACE = 141, REQUIRE = 142, RESIGNAL = 143, 
               RESTRICT = 144, RETAIN = 145, RETURN = 146, REVOKE = 147, 
               RIGHT = 148, RLIKE = 149, SCHEMA = 150, SCHEMAS = 151, SELECT = 152, 
               SET = 153, SEPARATOR = 154, SHOW = 155, SIGNAL = 156, SKIP_ = 157, 
               SKIP_QUERY_REWRITE = 158, SPATIAL = 159, SQL = 160, SQLEXCEPTION = 161, 
               SQLSTATE = 162, SQLWARNING = 163, SQL_BIG_RESULT = 164, SQL_CALC_FOUND_ROWS = 165, 
               SQL_SMALL_RESULT = 166, SSL = 167, STACKED = 168, STARTING = 169, 
               STATEMENT = 170, STRAIGHT_JOIN = 171, TABLE = 172, TERMINATED = 173, 
               THEN = 174, TO = 175, TRAILING = 176, TRIGGER = 177, TRUE = 178, 
               UNDO = 179, UNION = 180, UNIQUE = 181, UNLOCK = 182, UNSIGNED = 183, 
               UPDATE = 184, USAGE = 185, USE = 186, USING = 187, VALUES = 188, 
               WHEN = 189, WHERE = 190, WHILE = 191, WITH = 192, WRITE = 193, 
               XOR = 194, ZEROFILL = 195, TINYINT = 196, SMALLINT = 197, 
               MEDIUMINT = 198, MIDDLEINT = 199, INT = 200, INT1 = 201, 
               INT2 = 202, INT3 = 203, INT4 = 204, INT8 = 205, INTEGER = 206, 
               BIGINT = 207, REAL = 208, DOUBLE = 209, PRECISION = 210, 
               FLOAT = 211, FLOAT4 = 212, FLOAT8 = 213, DECIMAL = 214, DEC = 215, 
               NUMERIC = 216, DATE = 217, TIME = 218, TIMESTAMP = 219, DATETIME = 220, 
               YEAR = 221, CHAR = 222, VARCHAR = 223, NVARCHAR = 224, NATIONAL = 225, 
               BINARY = 226, VARBINARY = 227, TINYBLOB = 228, BLOB = 229, 
               MEDIUMBLOB = 230, LONG = 231, LONGBLOB = 232, TINYTEXT = 233, 
               TEXT = 234, MEDIUMTEXT = 235, LONGTEXT = 236, ENUM = 237, 
               VARYING = 238, SERIAL = 239, YEAR_MONTH = 240, DAY_HOUR = 241, 
               DAY_MINUTE = 242, DAY_SECOND = 243, HOUR_MINUTE = 244, HOUR_SECOND = 245, 
               MINUTE_SECOND = 246, SECOND_MICROSECOND = 247, MINUTE_MICROSECOND = 248, 
               HOUR_MICROSECOND = 249, DAY_MICROSECOND = 250, JSON_ARRAY = 251, 
               JSON_ARRAYAGG = 252, JSON_ARRAY_APPEND = 253, JSON_ARRAY_INSERT = 254, 
               JSON_CONTAINS = 255, JSON_CONTAINS_PATH = 256, JSON_DEPTH = 257, 
               JSON_EXTRACT = 258, JSON_INSERT = 259, JSON_KEYS = 260, JSON_LENGTH = 261, 
               JSON_MERGE = 262, JSON_MERGE_PATCH = 263, JSON_MERGE_PRESERVE = 264, 
               JSON_OBJECT = 265, JSON_OBJECTAGG = 266, JSON_OVERLAPS = 267, 
               JSON_PRETTY = 268, JSON_QUOTE = 269, JSON_REMOVE = 270, JSON_REPLACE = 271, 
               JSON_SCHEMA_VALID = 272, JSON_SCHEMA_VALIDATION_REPORT = 273, 
               JSON_SEARCH = 274, JSON_SET = 275, JSON_STORAGE_FREE = 276, 
               JSON_STORAGE_SIZE = 277, JSON_TABLE = 278, JSON_TYPE = 279, 
               JSON_UNQUOTE = 280, JSON_VALID = 281, JSON_VALUE = 282, NESTED = 283, 
               ORDINALITY = 284, PATH = 285, AVG = 286, BIT_AND = 287, BIT_OR = 288, 
               BIT_XOR = 289, COUNT = 290, CUME_DIST = 291, DENSE_RANK = 292, 
               FIRST_VALUE = 293, GROUP_CONCAT = 294, LAG = 295, LAST_VALUE = 296, 
               LEAD = 297, MAX = 298, MIN = 299, NTILE = 300, NTH_VALUE = 301, 
               PERCENT_RANK = 302, RANK = 303, ROW_NUMBER = 304, STD = 305, 
               STDDEV = 306, STDDEV_POP = 307, STDDEV_SAMP = 308, SUM = 309, 
               VAR_POP = 310, VAR_SAMP = 311, VARIANCE = 312, CURRENT_DATE = 313, 
               CURRENT_TIME = 314, CURRENT_TIMESTAMP = 315, LOCALTIME = 316, 
               CURDATE = 317, CURTIME = 318, DATE_ADD = 319, DATE_SUB = 320, 
               EXTRACT = 321, LOCALTIMESTAMP = 322, NOW = 323, POSITION = 324, 
               SUBSTR = 325, SUBSTRING = 326, SYSDATE = 327, TRIM = 328, 
               UTC_DATE = 329, UTC_TIME = 330, UTC_TIMESTAMP = 331, ACCOUNT = 332, 
               ACTION = 333, AFTER = 334, AGGREGATE = 335, ALGORITHM = 336, 
               ANY = 337, AT = 338, AUTHORS = 339, AUTOCOMMIT = 340, AUTOEXTEND_SIZE = 341, 
               AUTO_INCREMENT = 342, AVG_ROW_LENGTH = 343, BEGIN = 344, 
               BINLOG = 345, BIT = 346, BLOCK = 347, BOOL = 348, BOOLEAN = 349, 
               BTREE = 350, CACHE = 351, CASCADED = 352, CHAIN = 353, CHANGED = 354, 
               CHANNEL = 355, CHECKSUM = 356, PAGE_CHECKSUM = 357, CIPHER = 358, 
               CLASS_ORIGIN = 359, CLIENT = 360, CLOSE = 361, CLUSTERING = 362, 
               COALESCE = 363, CODE = 364, COLUMNS = 365, COLUMN_FORMAT = 366, 
               COLUMN_NAME = 367, COMMENT = 368, COMMIT = 369, COMPACT = 370, 
               COMPLETION = 371, COMPRESSED = 372, COMPRESSION = 373, CONCURRENT = 374, 
               CONNECT = 375, CONNECTION = 376, CONSISTENT = 377, CONSTRAINT_CATALOG = 378, 
               CONSTRAINT_SCHEMA = 379, CONSTRAINT_NAME = 380, CONTAINS = 381, 
               CONTEXT = 382, CONTRIBUTORS = 383, COPY = 384, CPU = 385, 
               CYCLE = 386, CURSOR_NAME = 387, DATA = 388, DATAFILE = 389, 
               DEALLOCATE = 390, DEFAULT_AUTH = 391, DEFINER = 392, DELAY_KEY_WRITE = 393, 
               DES_KEY_FILE = 394, DIRECTORY = 395, DISABLE = 396, DISCARD = 397, 
               DISK = 398, DO = 399, DUMPFILE = 400, DUPLICATE = 401, DYNAMIC = 402, 
               ENABLE = 403, ENCRYPTED = 404, ENCRYPTION = 405, ENCRYPTION_KEY_ID = 406, 
               END = 407, ENDS = 408, ENGINE = 409, ENGINES = 410, ERROR = 411, 
               ERRORS = 412, ESCAPE = 413, EVEN = 414, EVENT = 415, EVENTS = 416, 
               EVERY = 417, EXCHANGE = 418, EXCLUSIVE = 419, EXPIRE = 420, 
               EXPORT = 421, EXTENDED = 422, EXTENT_SIZE = 423, FAILED_LOGIN_ATTEMPTS = 424, 
               FAST = 425, FAULTS = 426, FIELDS = 427, FILE_BLOCK_SIZE = 428, 
               FILTER = 429, FIRST = 430, FIXED = 431, FLUSH = 432, FOLLOWING = 433, 
               FOLLOWS = 434, FOUND = 435, FULL = 436, FUNCTION = 437, GENERAL = 438, 
               GLOBAL = 439, GRANTS = 440, GROUP_REPLICATION = 441, HANDLER = 442, 
               HASH = 443, HELP = 444, HISTORY = 445, HOST = 446, HOSTS = 447, 
               IDENTIFIED = 448, IGNORE_SERVER_IDS = 449, IMPORT = 450, 
               INCREMENT = 451, INDEXES = 452, INITIAL_SIZE = 453, INPLACE = 454, 
               INSERT_METHOD = 455, INSTALL = 456, INSTANCE = 457, INSTANT = 458, 
               INVISIBLE = 459, INVOKER = 460, IO = 461, IO_THREAD = 462, 
               IPC = 463, ISOLATION = 464, ISSUER = 465, JSON = 466, KEY_BLOCK_SIZE = 467, 
               LANGUAGE = 468, LAST = 469, LEAVES = 470, LESS = 471, LEVEL = 472, 
               LIST = 473, LOCAL = 474, LOGFILE = 475, LOGS = 476, MASTER = 477, 
               MASTER_AUTO_POSITION = 478, MASTER_CONNECT_RETRY = 479, MASTER_DELAY = 480, 
               MASTER_HEARTBEAT_PERIOD = 481, MASTER_HOST = 482, MASTER_LOG_FILE = 483, 
               MASTER_LOG_POS = 484, MASTER_PASSWORD = 485, MASTER_PORT = 486, 
               MASTER_RETRY_COUNT = 487, MASTER_SSL = 488, MASTER_SSL_CA = 489, 
               MASTER_SSL_CAPATH = 490, MASTER_SSL_CERT = 491, MASTER_SSL_CIPHER = 492, 
               MASTER_SSL_CRL = 493, MASTER_SSL_CRLPATH = 494, MASTER_SSL_KEY = 495, 
               MASTER_TLS_VERSION = 496, MASTER_USER = 497, MAX_CONNECTIONS_PER_HOUR = 498, 
               MAX_QUERIES_PER_HOUR = 499, MAX_ROWS = 500, MAX_SIZE = 501, 
               MAX_UPDATES_PER_HOUR = 502, MAX_USER_CONNECTIONS = 503, MEDIUM = 504, 
               MEMBER = 505, MERGE = 506, MESSAGE_TEXT = 507, MID = 508, 
               MIGRATE = 509, MIN_ROWS = 510, MODE = 511, MODIFY = 512, 
               MUTEX = 513, MYSQL = 514, MYSQL_ERRNO = 515, NAME = 516, 
               NAMES = 517, NCHAR = 518, NEVER = 519, NEXT = 520, NO = 521, 
               NOCACHE = 522, NOCOPY = 523, NOCYCLE = 524, NOMAXVALUE = 525, 
               NOMINVALUE = 526, NOWAIT = 527, NODEGROUP = 528, NONE = 529, 
               ODBC = 530, OFFLINE = 531, OFFSET = 532, OF = 533, OJ = 534, 
               OLD_PASSWORD = 535, ONE = 536, ONLINE = 537, ONLY = 538, 
               OPEN = 539, OPTIMIZER_COSTS = 540, OPTIONS = 541, OWNER = 542, 
               PACK_KEYS = 543, PAGE = 544, PAGE_COMPRESSED = 545, PAGE_COMPRESSION_LEVEL = 546, 
               PARSER = 547, PARTIAL = 548, PARTITIONING = 549, PARTITIONS = 550, 
               PASSWORD = 551, PASSWORD_LOCK_TIME = 552, PHASE = 553, PLUGIN = 554, 
               PLUGIN_DIR = 555, PLUGINS = 556, PORT = 557, PRECEDES = 558, 
               PRECEDING = 559, PREPARE = 560, PRESERVE = 561, PREV = 562, 
               PROCESSLIST = 563, PROFILE = 564, PROFILES = 565, PROXY = 566, 
               QUERY = 567, QUICK = 568, REBUILD = 569, RECOVER = 570, RECURSIVE = 571, 
               REDO_BUFFER_SIZE = 572, REDUNDANT = 573, RELAY = 574, RELAY_LOG_FILE = 575, 
               RELAY_LOG_POS = 576, RELAYLOG = 577, REMOVE = 578, REORGANIZE = 579, 
               REPAIR = 580, REPLICATE_DO_DB = 581, REPLICATE_DO_TABLE = 582, 
               REPLICATE_IGNORE_DB = 583, REPLICATE_IGNORE_TABLE = 584, 
               REPLICATE_REWRITE_DB = 585, REPLICATE_WILD_DO_TABLE = 586, 
               REPLICATE_WILD_IGNORE_TABLE = 587, REPLICATION = 588, RESET = 589, 
               RESTART = 590, RESUME = 591, RETURNED_SQLSTATE = 592, RETURNING = 593, 
               RETURNS = 594, REUSE = 595, ROLE = 596, ROLLBACK = 597, ROLLUP = 598, 
               ROTATE = 599, ROW = 600, ROWS = 601, ROW_FORMAT = 602, RTREE = 603, 
               SAVEPOINT = 604, SCHEDULE = 605, SECURITY = 606, SEQUENCE = 607, 
               SERVER = 608, SESSION = 609, SHARE = 610, SHARED = 611, SIGNED = 612, 
               SIMPLE = 613, SLAVE = 614, SLOW = 615, SNAPSHOT = 616, SOCKET = 617, 
               SOME = 618, SONAME = 619, SOUNDS = 620, SOURCE = 621, SQL_AFTER_GTIDS = 622, 
               SQL_AFTER_MTS_GAPS = 623, SQL_BEFORE_GTIDS = 624, SQL_BUFFER_RESULT = 625, 
               SQL_CACHE = 626, SQL_NO_CACHE = 627, SQL_THREAD = 628, START = 629, 
               STARTS = 630, STATS_AUTO_RECALC = 631, STATS_PERSISTENT = 632, 
               STATS_SAMPLE_PAGES = 633, STATUS = 634, STOP = 635, STORAGE = 636, 
               STORED = 637, STRING = 638, SUBCLASS_ORIGIN = 639, SUBJECT = 640, 
               SUBPARTITION = 641, SUBPARTITIONS = 642, SUSPEND = 643, SWAPS = 644, 
               SWITCHES = 645, TABLE_NAME = 646, TABLESPACE = 647, TABLE_TYPE = 648, 
               TEMPORARY = 649, TEMPTABLE = 650, THAN = 651, TRADITIONAL = 652, 
               TRANSACTION = 653, TRANSACTIONAL = 654, TRIGGERS = 655, TRUNCATE = 656, 
               UNBOUNDED = 657, UNDEFINED = 658, UNDOFILE = 659, UNDO_BUFFER_SIZE = 660, 
               UNINSTALL = 661, UNKNOWN = 662, UNTIL = 663, UPGRADE = 664, 
               USER = 665, USE_FRM = 666, USER_RESOURCES = 667, VALIDATION = 668, 
               VALUE = 669, VARIABLES = 670, VIEW = 671, VIRTUAL = 672, 
               VISIBLE = 673, WAIT = 674, WARNINGS = 675, WINDOW = 676, 
               WITHOUT = 677, WORK = 678, WRAPPER = 679, X509 = 680, XA = 681, 
               XML = 682, YES = 683, EUR = 684, USA = 685, JIS = 686, ISO = 687, 
               INTERNAL = 688, QUARTER = 689, MONTH = 690, DAY = 691, HOUR = 692, 
               MINUTE = 693, WEEK = 694, SECOND = 695, MICROSECOND = 696, 
               ADMIN = 697, APPLICATION_PASSWORD_ADMIN = 698, AUDIT_ABORT_EXEMPT = 699, 
               AUDIT_ADMIN = 700, AUTHENTICATION_POLICY_ADMIN = 701, BACKUP_ADMIN = 702, 
               BINLOG_ADMIN = 703, BINLOG_ENCRYPTION_ADMIN = 704, CLONE_ADMIN = 705, 
               CONNECTION_ADMIN = 706, ENCRYPTION_KEY_ADMIN = 707, EXECUTE = 708, 
               FILE = 709, FIREWALL_ADMIN = 710, FIREWALL_EXEMPT = 711, 
               FIREWALL_USER = 712, FLUSH_OPTIMIZER_COSTS = 713, FLUSH_STATUS = 714, 
               FLUSH_TABLES = 715, FLUSH_USER_RESOURCES = 716, GROUP_REPLICATION_ADMIN = 717, 
               INNODB_REDO_LOG_ARCHIVE = 718, INNODB_REDO_LOG_ENABLE = 719, 
               INVOKE = 720, LAMBDA = 721, NDB_STORED_USER = 722, PASSWORDLESS_USER_ADMIN = 723, 
               PERSIST_RO_VARIABLES_ADMIN = 724, PRIVILEGES = 725, PROCESS = 726, 
               RELOAD = 727, REPLICATION_APPLIER = 728, REPLICATION_SLAVE_ADMIN = 729, 
               RESOURCE_GROUP_ADMIN = 730, RESOURCE_GROUP_USER = 731, ROLE_ADMIN = 732, 
               ROUTINE = 733, S3 = 734, SERVICE_CONNECTION_ADMIN = 735, 
               SESSION_VARIABLES_ADMIN = 736, SET_USER_ID = 737, SHOW_ROUTINE = 738, 
               SHUTDOWN = 739, SUPER = 740, SYSTEM_VARIABLES_ADMIN = 741, 
               TABLES = 742, TABLE_ENCRYPTION_ADMIN = 743, VERSION_TOKEN_ADMIN = 744, 
               XA_RECOVER_ADMIN = 745, ARMSCII8 = 746, ASCII = 747, BIG5 = 748, 
               CP1250 = 749, CP1251 = 750, CP1256 = 751, CP1257 = 752, CP850 = 753, 
               CP852 = 754, CP866 = 755, CP932 = 756, DEC8 = 757, EUCJPMS = 758, 
               EUCKR = 759, GB18030 = 760, GB2312 = 761, GBK = 762, GEOSTD8 = 763, 
               GREEK = 764, HEBREW = 765, HP8 = 766, KEYBCS2 = 767, KOI8R = 768, 
               KOI8U = 769, LATIN1 = 770, LATIN2 = 771, LATIN5 = 772, LATIN7 = 773, 
               MACCE = 774, MACROMAN = 775, SJIS = 776, SWE7 = 777, TIS620 = 778, 
               UCS2 = 779, UJIS = 780, UTF16 = 781, UTF16LE = 782, UTF32 = 783, 
               UTF8 = 784, UTF8MB3 = 785, UTF8MB4 = 786, ARCHIVE = 787, 
               BLACKHOLE = 788, CSV = 789, FEDERATED = 790, INNODB = 791, 
               MEMORY = 792, MRG_MYISAM = 793, MYISAM = 794, NDB = 795, 
               NDBCLUSTER = 796, PERFORMANCE_SCHEMA = 797, TOKUDB = 798, 
               REPEATABLE = 799, COMMITTED = 800, UNCOMMITTED = 801, SERIALIZABLE = 802, 
               GEOMETRYCOLLECTION = 803, GEOMCOLLECTION = 804, GEOMETRY = 805, 
               LINESTRING = 806, MULTILINESTRING = 807, MULTIPOINT = 808, 
               MULTIPOLYGON = 809, POINT = 810, POLYGON = 811, ABS = 812, 
               ACOS = 813, ADDDATE = 814, ADDTIME = 815, AES_DECRYPT = 816, 
               AES_ENCRYPT = 817, AREA = 818, ASBINARY = 819, ASIN = 820, 
               ASTEXT = 821, ASWKB = 822, ASWKT = 823, ASYMMETRIC_DECRYPT = 824, 
               ASYMMETRIC_DERIVE = 825, ASYMMETRIC_ENCRYPT = 826, ASYMMETRIC_SIGN = 827, 
               ASYMMETRIC_VERIFY = 828, ATAN = 829, ATAN2 = 830, BENCHMARK = 831, 
               BIN = 832, BIT_COUNT = 833, BIT_LENGTH = 834, BUFFER = 835, 
               CATALOG_NAME = 836, CEIL = 837, CEILING = 838, CENTROID = 839, 
               CHARACTER_LENGTH = 840, CHARSET = 841, CHAR_LENGTH = 842, 
               COERCIBILITY = 843, COLLATION = 844, COMPRESS = 845, CONCAT = 846, 
               CONCAT_WS = 847, CONNECTION_ID = 848, CONV = 849, CONVERT_TZ = 850, 
               COS = 851, COT = 852, CRC32 = 853, CREATE_ASYMMETRIC_PRIV_KEY = 854, 
               CREATE_ASYMMETRIC_PUB_KEY = 855, CREATE_DH_PARAMETERS = 856, 
               CREATE_DIGEST = 857, CROSSES = 858, DATEDIFF = 859, DATE_FORMAT = 860, 
               DAYNAME = 861, DAYOFMONTH = 862, DAYOFWEEK = 863, DAYOFYEAR = 864, 
               DECODE = 865, DEGREES = 866, DES_DECRYPT = 867, DES_ENCRYPT = 868, 
               DIMENSION = 869, DISJOINT = 870, ELT = 871, ENCODE = 872, 
               ENCRYPT = 873, ENDPOINT = 874, ENGINE_ATTRIBUTE = 875, ENVELOPE = 876, 
               EQUALS = 877, EXP = 878, EXPORT_SET = 879, EXTERIORRING = 880, 
               EXTRACTVALUE = 881, FIELD = 882, FIND_IN_SET = 883, FLOOR = 884, 
               FORMAT = 885, FOUND_ROWS = 886, FROM_BASE64 = 887, FROM_DAYS = 888, 
               FROM_UNIXTIME = 889, GEOMCOLLFROMTEXT = 890, GEOMCOLLFROMWKB = 891, 
               GEOMETRYCOLLECTIONFROMTEXT = 892, GEOMETRYCOLLECTIONFROMWKB = 893, 
               GEOMETRYFROMTEXT = 894, GEOMETRYFROMWKB = 895, GEOMETRYN = 896, 
               GEOMETRYTYPE = 897, GEOMFROMTEXT = 898, GEOMFROMWKB = 899, 
               GET_FORMAT = 900, GET_LOCK = 901, GLENGTH = 902, GREATEST = 903, 
               GTID_SUBSET = 904, GTID_SUBTRACT = 905, HEX = 906, IFNULL = 907, 
               INET6_ATON = 908, INET6_NTOA = 909, INET_ATON = 910, INET_NTOA = 911, 
               INSTR = 912, INTERIORRINGN = 913, INTERSECTS = 914, ISCLOSED = 915, 
               ISEMPTY = 916, ISNULL = 917, ISSIMPLE = 918, IS_FREE_LOCK = 919, 
               IS_IPV4 = 920, IS_IPV4_COMPAT = 921, IS_IPV4_MAPPED = 922, 
               IS_IPV6 = 923, IS_USED_LOCK = 924, LAST_INSERT_ID = 925, 
               LCASE = 926, LEAST = 927, LENGTH = 928, LINEFROMTEXT = 929, 
               LINEFROMWKB = 930, LINESTRINGFROMTEXT = 931, LINESTRINGFROMWKB = 932, 
               LN = 933, LOAD_FILE = 934, LOCATE = 935, LOG = 936, LOG10 = 937, 
               LOG2 = 938, LOWER = 939, LPAD = 940, LTRIM = 941, MAKEDATE = 942, 
               MAKETIME = 943, MAKE_SET = 944, MASTER_POS_WAIT = 945, MBRCONTAINS = 946, 
               MBRDISJOINT = 947, MBREQUAL = 948, MBRINTERSECTS = 949, MBROVERLAPS = 950, 
               MBRTOUCHES = 951, MBRWITHIN = 952, MD5 = 953, MLINEFROMTEXT = 954, 
               MLINEFROMWKB = 955, MONTHNAME = 956, MPOINTFROMTEXT = 957, 
               MPOINTFROMWKB = 958, MPOLYFROMTEXT = 959, MPOLYFROMWKB = 960, 
               MULTILINESTRINGFROMTEXT = 961, MULTILINESTRINGFROMWKB = 962, 
               MULTIPOINTFROMTEXT = 963, MULTIPOINTFROMWKB = 964, MULTIPOLYGONFROMTEXT = 965, 
               MULTIPOLYGONFROMWKB = 966, NAME_CONST = 967, NULLIF = 968, 
               NUMGEOMETRIES = 969, NUMINTERIORRINGS = 970, NUMPOINTS = 971, 
               OCT = 972, OCTET_LENGTH = 973, ORD = 974, OVERLAPS = 975, 
               PERIOD_ADD = 976, PERIOD_DIFF = 977, PI = 978, POINTFROMTEXT = 979, 
               POINTFROMWKB = 980, POINTN = 981, POLYFROMTEXT = 982, POLYFROMWKB = 983, 
               POLYGONFROMTEXT = 984, POLYGONFROMWKB = 985, POW = 986, POWER = 987, 
               QUOTE = 988, RADIANS = 989, RAND = 990, RANDOM = 991, RANDOM_BYTES = 992, 
               RELEASE_LOCK = 993, REVERSE = 994, ROUND = 995, ROW_COUNT = 996, 
               RPAD = 997, RTRIM = 998, SEC_TO_TIME = 999, SECONDARY_ENGINE_ATTRIBUTE = 1000, 
               SESSION_USER = 1001, SHA = 1002, SHA1 = 1003, SHA2 = 1004, 
               SCHEMA_NAME = 1005, SIGN = 1006, SIN = 1007, SLEEP = 1008, 
               SOUNDEX = 1009, SQL_THREAD_WAIT_AFTER_GTIDS = 1010, SQRT = 1011, 
               SRID = 1012, STARTPOINT = 1013, STRCMP = 1014, STR_TO_DATE = 1015, 
               ST_AREA = 1016, ST_ASBINARY = 1017, ST_ASTEXT = 1018, ST_ASWKB = 1019, 
               ST_ASWKT = 1020, ST_BUFFER = 1021, ST_CENTROID = 1022, ST_CONTAINS = 1023, 
               ST_CROSSES = 1024, ST_DIFFERENCE = 1025, ST_DIMENSION = 1026, 
               ST_DISJOINT = 1027, ST_DISTANCE = 1028, ST_ENDPOINT = 1029, 
               ST_ENVELOPE = 1030, ST_EQUALS = 1031, ST_EXTERIORRING = 1032, 
               ST_GEOMCOLLFROMTEXT = 1033, ST_GEOMCOLLFROMTXT = 1034, ST_GEOMCOLLFROMWKB = 1035, 
               ST_GEOMETRYCOLLECTIONFROMTEXT = 1036, ST_GEOMETRYCOLLECTIONFROMWKB = 1037, 
               ST_GEOMETRYFROMTEXT = 1038, ST_GEOMETRYFROMWKB = 1039, ST_GEOMETRYN = 1040, 
               ST_GEOMETRYTYPE = 1041, ST_GEOMFROMTEXT = 1042, ST_GEOMFROMWKB = 1043, 
               ST_INTERIORRINGN = 1044, ST_INTERSECTION = 1045, ST_INTERSECTS = 1046, 
               ST_ISCLOSED = 1047, ST_ISEMPTY = 1048, ST_ISSIMPLE = 1049, 
               ST_LINEFROMTEXT = 1050, ST_LINEFROMWKB = 1051, ST_LINESTRINGFROMTEXT = 1052, 
               ST_LINESTRINGFROMWKB = 1053, ST_NUMGEOMETRIES = 1054, ST_NUMINTERIORRING = 1055, 
               ST_NUMINTERIORRINGS = 1056, ST_NUMPOINTS = 1057, ST_OVERLAPS = 1058, 
               ST_POINTFROMTEXT = 1059, ST_POINTFROMWKB = 1060, ST_POINTN = 1061, 
               ST_POLYFROMTEXT = 1062, ST_POLYFROMWKB = 1063, ST_POLYGONFROMTEXT = 1064, 
               ST_POLYGONFROMWKB = 1065, ST_SRID = 1066, ST_STARTPOINT = 1067, 
               ST_SYMDIFFERENCE = 1068, ST_TOUCHES = 1069, ST_UNION = 1070, 
               ST_WITHIN = 1071, ST_X = 1072, ST_Y = 1073, SUBDATE = 1074, 
               SUBSTRING_INDEX = 1075, SUBTIME = 1076, SYSTEM_USER = 1077, 
               TAN = 1078, TIMEDIFF = 1079, TIMESTAMPADD = 1080, TIMESTAMPDIFF = 1081, 
               TIME_FORMAT = 1082, TIME_TO_SEC = 1083, TOUCHES = 1084, TO_BASE64 = 1085, 
               TO_DAYS = 1086, TO_SECONDS = 1087, TP_CONNECTION_ADMIN = 1088, 
               UCASE = 1089, UNCOMPRESS = 1090, UNCOMPRESSED_LENGTH = 1091, 
               UNHEX = 1092, UNIX_TIMESTAMP = 1093, UPDATEXML = 1094, UPPER = 1095, 
               UUID = 1096, UUID_SHORT = 1097, VALIDATE_PASSWORD_STRENGTH = 1098, 
               VERSION = 1099, WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS = 1100, 
               WEEKDAY = 1101, WEEKOFYEAR = 1102, WEIGHT_STRING = 1103, 
               WITHIN = 1104, YEARWEEK = 1105, Y_FUNCTION = 1106, X_FUNCTION = 1107, 
               VAR_ASSIGN = 1108, PLUS_ASSIGN = 1109, MINUS_ASSIGN = 1110, 
               MULT_ASSIGN = 1111, DIV_ASSIGN = 1112, MOD_ASSIGN = 1113, 
               AND_ASSIGN = 1114, XOR_ASSIGN = 1115, OR_ASSIGN = 1116, STAR = 1117, 
               DIVIDE = 1118, MODULE = 1119, PLUS = 1120, MINUS = 1121, 
               DIV = 1122, MOD = 1123, EQUAL_SYMBOL = 1124, GREATER_SYMBOL = 1125, 
               LESS_SYMBOL = 1126, EXCLAMATION_SYMBOL = 1127, BIT_NOT_OP = 1128, 
               BIT_OR_OP = 1129, BIT_AND_OP = 1130, BIT_XOR_OP = 1131, DOT = 1132, 
               LR_BRACKET = 1133, RR_BRACKET = 1134, COMMA = 1135, SEMI = 1136, 
               AT_SIGN = 1137, ZERO_DECIMAL = 1138, ONE_DECIMAL = 1139, 
               TWO_DECIMAL = 1140, SINGLE_QUOTE_SYMB = 1141, DOUBLE_QUOTE_SYMB = 1142, 
               REVERSE_QUOTE_SYMB = 1143, COLON_SYMB = 1144, CHARSET_REVERSE_QOUTE_STRING = 1145, 
               FILESIZE_LITERAL = 1146, START_NATIONAL_STRING_LITERAL = 1147, 
               STRING_LITERAL = 1148, DECIMAL_LITERAL = 1149, HEXADECIMAL_LITERAL = 1150, 
               REAL_LITERAL = 1151, NULL_SPEC_LITERAL = 1152, BIT_STRING = 1153, 
               STRING_CHARSET_NAME = 1154, DOT_ID = 1155, ID = 1156, REVERSE_QUOTE_ID = 1157, 
               HOST_IP_ADDRESS = 1158, LOCAL_ID = 1159, GLOBAL_ID = 1160, 
               ERROR_RECONGNIGION = 1161;

		public const RULE_root = 0, RULE_sqlStatements = 1, RULE_sqlStatement = 2, 
               RULE_emptyStatement_ = 3, RULE_ddlStatement = 4, RULE_dmlStatement = 5, 
               RULE_transactionStatement = 6, RULE_replicationStatement = 7, 
               RULE_preparedStatement = 8, RULE_compoundStatement = 9, RULE_administrationStatement = 10, 
               RULE_utilityStatement = 11, RULE_createDatabase = 12, RULE_createEvent = 13, 
               RULE_createIndex = 14, RULE_createLogfileGroup = 15, RULE_createProcedure = 16, 
               RULE_createFunction = 17, RULE_createRole = 18, RULE_createServer = 19, 
               RULE_createTable = 20, RULE_createTablespaceInnodb = 21, 
               RULE_createTablespaceNdb = 22, RULE_createTrigger = 23, RULE_withClause = 24, 
               RULE_commonTableExpressions = 25, RULE_cteName = 26, RULE_cteColumnName = 27, 
               RULE_createView = 28, RULE_createDatabaseOption = 29, RULE_charSet = 30, 
               RULE_currentUserExpression = 31, RULE_ownerStatement = 32, 
               RULE_scheduleExpression = 33, RULE_timestampValue = 34, RULE_intervalExpr = 35, 
               RULE_intervalType = 36, RULE_enableType = 37, RULE_indexType = 38, 
               RULE_indexOption = 39, RULE_procedureParameter = 40, RULE_functionParameter = 41, 
               RULE_routineOption = 42, RULE_serverOption = 43, RULE_createDefinitions = 44, 
               RULE_createDefinition = 45, RULE_columnDefinition = 46, RULE_columnConstraint = 47, 
               RULE_tableConstraint = 48, RULE_referenceDefinition = 49, 
               RULE_referenceAction = 50, RULE_referenceControlType = 51, 
               RULE_indexColumnDefinition = 52, RULE_tableOption = 53, RULE_tableType = 54, 
               RULE_tablespaceStorage = 55, RULE_partitionDefinitions = 56, 
               RULE_partitionFunctionDefinition = 57, RULE_subpartitionFunctionDefinition = 58, 
               RULE_partitionDefinition = 59, RULE_partitionDefinerAtom = 60, 
               RULE_partitionDefinerVector = 61, RULE_subpartitionDefinition = 62, 
               RULE_partitionOption = 63, RULE_alterDatabase = 64, RULE_alterEvent = 65, 
               RULE_alterFunction = 66, RULE_alterInstance = 67, RULE_alterLogfileGroup = 68, 
               RULE_alterProcedure = 69, RULE_alterServer = 70, RULE_alterTable = 71, 
               RULE_alterTablespace = 72, RULE_alterView = 73, RULE_alterSpecification = 74, 
               RULE_alterPartitionSpecification = 75, RULE_dropDatabase = 76, 
               RULE_dropEvent = 77, RULE_dropIndex = 78, RULE_dropLogfileGroup = 79, 
               RULE_dropProcedure = 80, RULE_dropFunction = 81, RULE_dropServer = 82, 
               RULE_dropTable = 83, RULE_dropTablespace = 84, RULE_dropTrigger = 85, 
               RULE_dropView = 86, RULE_dropRole = 87, RULE_setRole = 88, 
               RULE_renameTable = 89, RULE_renameTableClause = 90, RULE_truncateTable = 91, 
               RULE_callStatement = 92, RULE_deleteStatement = 93, RULE_doStatement = 94, 
               RULE_handlerStatement = 95, RULE_insertStatement = 96, RULE_loadDataStatement = 97, 
               RULE_loadXmlStatement = 98, RULE_replaceStatement = 99, RULE_selectStatement = 100, 
               RULE_updateStatement = 101, RULE_valuesStatement = 102, RULE_insertStatementValue = 103, 
               RULE_updatedElement = 104, RULE_assignmentField = 105, RULE_lockClause = 106, 
               RULE_singleDeleteStatement = 107, RULE_multipleDeleteStatement = 108, 
               RULE_handlerOpenStatement = 109, RULE_handlerReadIndexStatement = 110, 
               RULE_handlerReadStatement = 111, RULE_handlerCloseStatement = 112, 
               RULE_singleUpdateStatement = 113, RULE_multipleUpdateStatement = 114, 
               RULE_orderByClause = 115, RULE_orderByExpression = 116, RULE_tableSources = 117, 
               RULE_tableSource = 118, RULE_tableSourceItem = 119, RULE_indexHint = 120, 
               RULE_indexHintType = 121, RULE_joinPart = 122, RULE_joinSpec = 123, 
               RULE_queryExpression = 124, RULE_queryExpressionNointo = 125, 
               RULE_querySpecification = 126, RULE_querySpecificationNointo = 127, 
               RULE_unionParenthesis = 128, RULE_unionStatement = 129, RULE_lateralStatement = 130, 
               RULE_jsonTable = 131, RULE_jsonColumnList = 132, RULE_jsonColumn = 133, 
               RULE_jsonOnEmpty = 134, RULE_jsonOnError = 135, RULE_selectSpec = 136, 
               RULE_selectElements = 137, RULE_selectElement = 138, RULE_selectIntoExpression = 139, 
               RULE_selectFieldsInto = 140, RULE_selectLinesInto = 141, 
               RULE_fromClause = 142, RULE_groupByClause = 143, RULE_havingClause = 144, 
               RULE_windowClause = 145, RULE_groupByItem = 146, RULE_limitClause = 147, 
               RULE_limitClauseAtom = 148, RULE_startTransaction = 149, 
               RULE_beginWork = 150, RULE_commitWork = 151, RULE_rollbackWork = 152, 
               RULE_savepointStatement = 153, RULE_rollbackStatement = 154, 
               RULE_releaseStatement = 155, RULE_lockTables = 156, RULE_unlockTables = 157, 
               RULE_setAutocommitStatement = 158, RULE_setTransactionStatement = 159, 
               RULE_transactionMode = 160, RULE_lockTableElement = 161, 
               RULE_lockAction = 162, RULE_transactionOption = 163, RULE_transactionLevel = 164, 
               RULE_changeMaster = 165, RULE_changeReplicationFilter = 166, 
               RULE_purgeBinaryLogs = 167, RULE_resetMaster = 168, RULE_resetSlave = 169, 
               RULE_startSlave = 170, RULE_stopSlave = 171, RULE_startGroupReplication = 172, 
               RULE_stopGroupReplication = 173, RULE_masterOption = 174, 
               RULE_stringMasterOption = 175, RULE_decimalMasterOption = 176, 
               RULE_boolMasterOption = 177, RULE_channelOption = 178, RULE_replicationFilter = 179, 
               RULE_tablePair = 180, RULE_threadType = 181, RULE_untilOption = 182, 
               RULE_connectionOption = 183, RULE_gtuidSet = 184, RULE_xaStartTransaction = 185, 
               RULE_xaEndTransaction = 186, RULE_xaPrepareStatement = 187, 
               RULE_xaCommitWork = 188, RULE_xaRollbackWork = 189, RULE_xaRecoverWork = 190, 
               RULE_prepareStatement = 191, RULE_executeStatement = 192, 
               RULE_deallocatePrepare = 193, RULE_routineBody = 194, RULE_blockStatement = 195, 
               RULE_caseStatement = 196, RULE_ifStatement = 197, RULE_iterateStatement = 198, 
               RULE_leaveStatement = 199, RULE_loopStatement = 200, RULE_repeatStatement = 201, 
               RULE_returnStatement = 202, RULE_whileStatement = 203, RULE_cursorStatement = 204, 
               RULE_declareVariable = 205, RULE_declareCondition = 206, 
               RULE_declareCursor = 207, RULE_declareHandler = 208, RULE_handlerConditionValue = 209, 
               RULE_procedureSqlStatement = 210, RULE_caseAlternative = 211, 
               RULE_elifAlternative = 212, RULE_alterUser = 213, RULE_createUser = 214, 
               RULE_dropUser = 215, RULE_grantStatement = 216, RULE_roleOption = 217, 
               RULE_grantProxy = 218, RULE_renameUser = 219, RULE_revokeStatement = 220, 
               RULE_revokeProxy = 221, RULE_setPasswordStatement = 222, 
               RULE_userSpecification = 223, RULE_userAuthOption = 224, 
               RULE_authOptionClause = 225, RULE_authenticationRule = 226, 
               RULE_tlsOption = 227, RULE_userResourceOption = 228, RULE_userPasswordOption = 229, 
               RULE_userLockOption = 230, RULE_privelegeClause = 231, RULE_privilege = 232, 
               RULE_privilegeLevel = 233, RULE_renameUserClause = 234, RULE_analyzeTable = 235, 
               RULE_checkTable = 236, RULE_checksumTable = 237, RULE_optimizeTable = 238, 
               RULE_repairTable = 239, RULE_checkTableOption = 240, RULE_createUdfunction = 241, 
               RULE_installPlugin = 242, RULE_uninstallPlugin = 243, RULE_setStatement = 244, 
               RULE_showStatement = 245, RULE_variableClause = 246, RULE_showCommonEntity = 247, 
               RULE_showFilter = 248, RULE_showGlobalInfoClause = 249, RULE_showSchemaEntity = 250, 
               RULE_showProfileType = 251, RULE_binlogStatement = 252, RULE_cacheIndexStatement = 253, 
               RULE_flushStatement = 254, RULE_killStatement = 255, RULE_loadIndexIntoCache = 256, 
               RULE_resetStatement = 257, RULE_shutdownStatement = 258, 
               RULE_tableIndexes = 259, RULE_flushOption = 260, RULE_flushTableOption = 261, 
               RULE_loadedTableIndexes = 262, RULE_simpleDescribeStatement = 263, 
               RULE_fullDescribeStatement = 264, RULE_helpStatement = 265, 
               RULE_useStatement = 266, RULE_signalStatement = 267, RULE_resignalStatement = 268, 
               RULE_signalConditionInformation = 269, RULE_withStatement = 270, 
               RULE_tableStatement = 271, RULE_diagnosticsStatement = 272, 
               RULE_diagnosticsConditionInformationName = 273, RULE_describeObjectClause = 274, 
               RULE_fullId = 275, RULE_tableName = 276, RULE_roleName = 277, 
               RULE_fullColumnName = 278, RULE_indexColumnName = 279, RULE_simpleUserName = 280, 
               RULE_hostName = 281, RULE_userName = 282, RULE_mysqlVariable = 283, 
               RULE_charsetName = 284, RULE_collationName = 285, RULE_engineName = 286, 
               RULE_engineNameBase = 287, RULE_uuidSet = 288, RULE_xid = 289, 
               RULE_xuidStringId = 290, RULE_authPlugin = 291, RULE_uid = 292, 
               RULE_simpleId = 293, RULE_dottedId = 294, RULE_decimalLiteral = 295, 
               RULE_fileSizeLiteral = 296, RULE_stringLiteral = 297, RULE_booleanLiteral = 298, 
               RULE_hexadecimalLiteral = 299, RULE_nullNotnull = 300, RULE_constant = 301, 
               RULE_dataType = 302, RULE_collectionOptions = 303, RULE_convertedDataType = 304, 
               RULE_lengthOneDimension = 305, RULE_lengthTwoDimension = 306, 
               RULE_lengthTwoOptionalDimension = 307, RULE_uidList = 308, 
               RULE_fullColumnNameList = 309, RULE_tables = 310, RULE_indexColumnNames = 311, 
               RULE_expressions = 312, RULE_expressionsWithDefaults = 313, 
               RULE_constants = 314, RULE_simpleStrings = 315, RULE_userVariables = 316, 
               RULE_defaultValue = 317, RULE_currentTimestamp = 318, RULE_expressionOrDefault = 319, 
               RULE_ifExists = 320, RULE_ifNotExists = 321, RULE_orReplace = 322, 
               RULE_waitNowaitClause = 323, RULE_functionCall = 324, RULE_specificFunction = 325, 
               RULE_caseFuncAlternative = 326, RULE_levelsInWeightString = 327, 
               RULE_levelInWeightListElement = 328, RULE_aggregateWindowedFunction = 329, 
               RULE_nonAggregateWindowedFunction = 330, RULE_overClause = 331, 
               RULE_windowSpec = 332, RULE_windowName = 333, RULE_frameClause = 334, 
               RULE_frameUnits = 335, RULE_frameExtent = 336, RULE_frameBetween = 337, 
               RULE_frameRange = 338, RULE_partitionClause = 339, RULE_scalarFunctionName = 340, 
               RULE_passwordFunctionClause = 341, RULE_functionArgs = 342, 
               RULE_functionArg = 343, RULE_expression = 344, RULE_predicate = 345, 
               RULE_expressionAtom = 346, RULE_unaryOperator = 347, RULE_comparisonOperator = 348, 
               RULE_logicalOperator = 349, RULE_bitOperator = 350, RULE_multOperator = 351, 
               RULE_addOperator = 352, RULE_jsonOperator = 353, RULE_charsetNameBase = 354, 
               RULE_transactionLevelBase = 355, RULE_privilegesBase = 356, 
               RULE_intervalTypeBase = 357, RULE_dataTypeBase = 358, RULE_keywordsCanBeId = 359, 
               RULE_functionNameBase = 360;

		/**
		 * @var array<string>
		 */
		public const RULE_NAMES = [
			'root', 'sqlStatements', 'sqlStatement', 'emptyStatement_', 'ddlStatement', 
			'dmlStatement', 'transactionStatement', 'replicationStatement', 'preparedStatement', 
			'compoundStatement', 'administrationStatement', 'utilityStatement', 'createDatabase', 
			'createEvent', 'createIndex', 'createLogfileGroup', 'createProcedure', 
			'createFunction', 'createRole', 'createServer', 'createTable', 'createTablespaceInnodb', 
			'createTablespaceNdb', 'createTrigger', 'withClause', 'commonTableExpressions', 
			'cteName', 'cteColumnName', 'createView', 'createDatabaseOption', 'charSet', 
			'currentUserExpression', 'ownerStatement', 'scheduleExpression', 'timestampValue', 
			'intervalExpr', 'intervalType', 'enableType', 'indexType', 'indexOption', 
			'procedureParameter', 'functionParameter', 'routineOption', 'serverOption', 
			'createDefinitions', 'createDefinition', 'columnDefinition', 'columnConstraint', 
			'tableConstraint', 'referenceDefinition', 'referenceAction', 'referenceControlType', 
			'indexColumnDefinition', 'tableOption', 'tableType', 'tablespaceStorage', 
			'partitionDefinitions', 'partitionFunctionDefinition', 'subpartitionFunctionDefinition', 
			'partitionDefinition', 'partitionDefinerAtom', 'partitionDefinerVector', 
			'subpartitionDefinition', 'partitionOption', 'alterDatabase', 'alterEvent', 
			'alterFunction', 'alterInstance', 'alterLogfileGroup', 'alterProcedure', 
			'alterServer', 'alterTable', 'alterTablespace', 'alterView', 'alterSpecification', 
			'alterPartitionSpecification', 'dropDatabase', 'dropEvent', 'dropIndex', 
			'dropLogfileGroup', 'dropProcedure', 'dropFunction', 'dropServer', 'dropTable', 
			'dropTablespace', 'dropTrigger', 'dropView', 'dropRole', 'setRole', 'renameTable', 
			'renameTableClause', 'truncateTable', 'callStatement', 'deleteStatement', 
			'doStatement', 'handlerStatement', 'insertStatement', 'loadDataStatement', 
			'loadXmlStatement', 'replaceStatement', 'selectStatement', 'updateStatement', 
			'valuesStatement', 'insertStatementValue', 'updatedElement', 'assignmentField', 
			'lockClause', 'singleDeleteStatement', 'multipleDeleteStatement', 'handlerOpenStatement', 
			'handlerReadIndexStatement', 'handlerReadStatement', 'handlerCloseStatement', 
			'singleUpdateStatement', 'multipleUpdateStatement', 'orderByClause', 
			'orderByExpression', 'tableSources', 'tableSource', 'tableSourceItem', 
			'indexHint', 'indexHintType', 'joinPart', 'joinSpec', 'queryExpression', 
			'queryExpressionNointo', 'querySpecification', 'querySpecificationNointo', 
			'unionParenthesis', 'unionStatement', 'lateralStatement', 'jsonTable', 
			'jsonColumnList', 'jsonColumn', 'jsonOnEmpty', 'jsonOnError', 'selectSpec', 
			'selectElements', 'selectElement', 'selectIntoExpression', 'selectFieldsInto', 
			'selectLinesInto', 'fromClause', 'groupByClause', 'havingClause', 'windowClause', 
			'groupByItem', 'limitClause', 'limitClauseAtom', 'startTransaction', 
			'beginWork', 'commitWork', 'rollbackWork', 'savepointStatement', 'rollbackStatement', 
			'releaseStatement', 'lockTables', 'unlockTables', 'setAutocommitStatement', 
			'setTransactionStatement', 'transactionMode', 'lockTableElement', 'lockAction', 
			'transactionOption', 'transactionLevel', 'changeMaster', 'changeReplicationFilter', 
			'purgeBinaryLogs', 'resetMaster', 'resetSlave', 'startSlave', 'stopSlave', 
			'startGroupReplication', 'stopGroupReplication', 'masterOption', 'stringMasterOption', 
			'decimalMasterOption', 'boolMasterOption', 'channelOption', 'replicationFilter', 
			'tablePair', 'threadType', 'untilOption', 'connectionOption', 'gtuidSet', 
			'xaStartTransaction', 'xaEndTransaction', 'xaPrepareStatement', 'xaCommitWork', 
			'xaRollbackWork', 'xaRecoverWork', 'prepareStatement', 'executeStatement', 
			'deallocatePrepare', 'routineBody', 'blockStatement', 'caseStatement', 
			'ifStatement', 'iterateStatement', 'leaveStatement', 'loopStatement', 
			'repeatStatement', 'returnStatement', 'whileStatement', 'cursorStatement', 
			'declareVariable', 'declareCondition', 'declareCursor', 'declareHandler', 
			'handlerConditionValue', 'procedureSqlStatement', 'caseAlternative', 
			'elifAlternative', 'alterUser', 'createUser', 'dropUser', 'grantStatement', 
			'roleOption', 'grantProxy', 'renameUser', 'revokeStatement', 'revokeProxy', 
			'setPasswordStatement', 'userSpecification', 'userAuthOption', 'authOptionClause', 
			'authenticationRule', 'tlsOption', 'userResourceOption', 'userPasswordOption', 
			'userLockOption', 'privelegeClause', 'privilege', 'privilegeLevel', 'renameUserClause', 
			'analyzeTable', 'checkTable', 'checksumTable', 'optimizeTable', 'repairTable', 
			'checkTableOption', 'createUdfunction', 'installPlugin', 'uninstallPlugin', 
			'setStatement', 'showStatement', 'variableClause', 'showCommonEntity', 
			'showFilter', 'showGlobalInfoClause', 'showSchemaEntity', 'showProfileType', 
			'binlogStatement', 'cacheIndexStatement', 'flushStatement', 'killStatement', 
			'loadIndexIntoCache', 'resetStatement', 'shutdownStatement', 'tableIndexes', 
			'flushOption', 'flushTableOption', 'loadedTableIndexes', 'simpleDescribeStatement', 
			'fullDescribeStatement', 'helpStatement', 'useStatement', 'signalStatement', 
			'resignalStatement', 'signalConditionInformation', 'withStatement', 'tableStatement', 
			'diagnosticsStatement', 'diagnosticsConditionInformationName', 'describeObjectClause', 
			'fullId', 'tableName', 'roleName', 'fullColumnName', 'indexColumnName', 
			'simpleUserName', 'hostName', 'userName', 'mysqlVariable', 'charsetName', 
			'collationName', 'engineName', 'engineNameBase', 'uuidSet', 'xid', 'xuidStringId', 
			'authPlugin', 'uid', 'simpleId', 'dottedId', 'decimalLiteral', 'fileSizeLiteral', 
			'stringLiteral', 'booleanLiteral', 'hexadecimalLiteral', 'nullNotnull', 
			'constant', 'dataType', 'collectionOptions', 'convertedDataType', 'lengthOneDimension', 
			'lengthTwoDimension', 'lengthTwoOptionalDimension', 'uidList', 'fullColumnNameList', 
			'tables', 'indexColumnNames', 'expressions', 'expressionsWithDefaults', 
			'constants', 'simpleStrings', 'userVariables', 'defaultValue', 'currentTimestamp', 
			'expressionOrDefault', 'ifExists', 'ifNotExists', 'orReplace', 'waitNowaitClause', 
			'functionCall', 'specificFunction', 'caseFuncAlternative', 'levelsInWeightString', 
			'levelInWeightListElement', 'aggregateWindowedFunction', 'nonAggregateWindowedFunction', 
			'overClause', 'windowSpec', 'windowName', 'frameClause', 'frameUnits', 
			'frameExtent', 'frameBetween', 'frameRange', 'partitionClause', 'scalarFunctionName', 
			'passwordFunctionClause', 'functionArgs', 'functionArg', 'expression', 
			'predicate', 'expressionAtom', 'unaryOperator', 'comparisonOperator', 
			'logicalOperator', 'bitOperator', 'multOperator', 'addOperator', 'jsonOperator', 
			'charsetNameBase', 'transactionLevelBase', 'privilegesBase', 'intervalTypeBase', 
			'dataTypeBase', 'keywordsCanBeId', 'functionNameBase'
		];

		/**
		 * @var array<string|null>
		 */
		private const LITERAL_NAMES = [
		    null, null, null, null, null, "'ADD'", "'ALL'", "'ALTER'", "'ALWAYS'", 
		    "'ANALYZE'", "'AND'", "'ARRAY'", "'AS'", "'ASC'", "'ATTRIBUTE'", "'BEFORE'", 
		    "'BETWEEN'", "'BOTH'", "'BUCKETS'", "'BY'", "'CALL'", "'CASCADE'", 
		    "'CASE'", "'CAST'", "'CHANGE'", "'CHARACTER'", "'CHECK'", "'COLLATE'", 
		    "'COLUMN'", "'CONDITION'", "'CONSTRAINT'", "'CONTINUE'", "'CONVERT'", 
		    "'CREATE'", "'CROSS'", "'CURRENT'", "'CURRENT_ROLE'", "'CURRENT_USER'", 
		    "'CURSOR'", "'DATABASE'", "'DATABASES'", "'DECLARE'", "'DEFAULT'", 
		    "'DELAYED'", "'DELETE'", "'DESC'", "'DESCRIBE'", "'DETERMINISTIC'", 
		    "'DIAGNOSTICS'", "'DISTINCT'", "'DISTINCTROW'", "'DROP'", "'EACH'", 
		    "'ELSE'", "'ELSEIF'", "'EMPTY'", "'ENCLOSED'", "'ENFORCED'", "'ESCAPED'", 
		    "'EXCEPT'", "'EXISTS'", "'EXIT'", "'EXPLAIN'", "'FALSE'", "'FETCH'", 
		    "'FOR'", "'FORCE'", "'FOREIGN'", "'FROM'", "'FULLTEXT'", "'GENERATED'", 
		    "'GET'", "'GRANT'", "'GROUP'", "'HAVING'", "'HIGH_PRIORITY'", "'HISTOGRAM'", 
		    "'IF'", "'IGNORE'", "'IGNORED'", "'IN'", "'INDEX'", "'INFILE'", "'INNER'", 
		    "'INOUT'", "'INSERT'", "'INTERVAL'", "'INTO'", "'IS'", "'ITERATE'", 
		    "'JOIN'", "'KEY'", "'KEYS'", "'KILL'", "'LATERAL'", "'LEADING'", "'LEAVE'", 
		    "'LEFT'", "'LIKE'", "'LIMIT'", "'LINEAR'", "'LINES'", "'LOAD'", "'LOCK'", 
		    "'LOCKED'", "'LOOP'", "'LOW_PRIORITY'", "'MASTER_BIND'", "'MASTER_SSL_VERIFY_SERVER_CERT'", 
		    "'MATCH'", "'MAXVALUE'", "'MINVALUE'", "'MODIFIES'", "'NATURAL'", 
		    "'NOT'", "'NO_WRITE_TO_BINLOG'", "'NULL'", "'NUMBER'", "'ON'", "'OPTIMIZE'", 
		    "'OPTION'", "'OPTIONAL'", "'OPTIONALLY'", "'OR'", "'ORDER'", "'OUT'", 
		    "'OUTER'", "'OUTFILE'", "'OVER'", "'PARTITION'", "'PRIMARY'", "'PROCEDURE'", 
		    "'PURGE'", "'RANGE'", "'READ'", "'READS'", "'REFERENCES'", "'REGEXP'", 
		    "'RELEASE'", "'RENAME'", "'REPEAT'", "'REPLACE'", "'REQUIRE'", "'RESIGNAL'", 
		    "'RESTRICT'", "'RETAIN'", "'RETURN'", "'REVOKE'", "'RIGHT'", "'RLIKE'", 
		    "'SCHEMA'", "'SCHEMAS'", "'SELECT'", "'SET'", "'SEPARATOR'", "'SHOW'", 
		    "'SIGNAL'", "'SKIP'", "'SKIP_QUERY_REWRITE'", "'SPATIAL'", "'SQL'", 
		    "'SQLEXCEPTION'", "'SQLSTATE'", "'SQLWARNING'", "'SQL_BIG_RESULT'", 
		    "'SQL_CALC_FOUND_ROWS'", "'SQL_SMALL_RESULT'", "'SSL'", "'STACKED'", 
		    "'STARTING'", "'STATEMENT'", "'STRAIGHT_JOIN'", "'TABLE'", "'TERMINATED'", 
		    "'THEN'", "'TO'", "'TRAILING'", "'TRIGGER'", "'TRUE'", "'UNDO'", "'UNION'", 
		    "'UNIQUE'", "'UNLOCK'", "'UNSIGNED'", "'UPDATE'", "'USAGE'", "'USE'", 
		    "'USING'", "'VALUES'", "'WHEN'", "'WHERE'", "'WHILE'", "'WITH'", "'WRITE'", 
		    "'XOR'", "'ZEROFILL'", "'TINYINT'", "'SMALLINT'", "'MEDIUMINT'", "'MIDDLEINT'", 
		    "'INT'", "'INT1'", "'INT2'", "'INT3'", "'INT4'", "'INT8'", "'INTEGER'", 
		    "'BIGINT'", "'REAL'", "'DOUBLE'", "'PRECISION'", "'FLOAT'", "'FLOAT4'", 
		    "'FLOAT8'", "'DECIMAL'", "'DEC'", "'NUMERIC'", "'DATE'", "'TIME'", 
		    "'TIMESTAMP'", "'DATETIME'", "'YEAR'", "'CHAR'", "'VARCHAR'", "'NVARCHAR'", 
		    "'NATIONAL'", "'BINARY'", "'VARBINARY'", "'TINYBLOB'", "'BLOB'", "'MEDIUMBLOB'", 
		    "'LONG'", "'LONGBLOB'", "'TINYTEXT'", "'TEXT'", "'MEDIUMTEXT'", "'LONGTEXT'", 
		    "'ENUM'", "'VARYING'", "'SERIAL'", "'YEAR_MONTH'", "'DAY_HOUR'", "'DAY_MINUTE'", 
		    "'DAY_SECOND'", "'HOUR_MINUTE'", "'HOUR_SECOND'", "'MINUTE_SECOND'", 
		    "'SECOND_MICROSECOND'", "'MINUTE_MICROSECOND'", "'HOUR_MICROSECOND'", 
		    "'DAY_MICROSECOND'", "'JSON_ARRAY'", "'JSON_ARRAYAGG'", "'JSON_ARRAY_APPEND'", 
		    "'JSON_ARRAY_INSERT'", "'JSON_CONTAINS'", "'JSON_CONTAINS_PATH'", 
		    "'JSON_DEPTH'", "'JSON_EXTRACT'", "'JSON_INSERT'", "'JSON_KEYS'", 
		    "'JSON_LENGTH'", "'JSON_MERGE'", "'JSON_MERGE_PATCH'", "'JSON_MERGE_PRESERVE'", 
		    "'JSON_OBJECT'", "'JSON_OBJECTAGG'", "'JSON_OVERLAPS'", "'JSON_PRETTY'", 
		    "'JSON_QUOTE'", "'JSON_REMOVE'", "'JSON_REPLACE'", "'JSON_SCHEMA_VALID'", 
		    "'JSON_SCHEMA_VALIDATION_REPORT'", "'JSON_SEARCH'", "'JSON_SET'", 
		    "'JSON_STORAGE_FREE'", "'JSON_STORAGE_SIZE'", "'JSON_TABLE'", "'JSON_TYPE'", 
		    "'JSON_UNQUOTE'", "'JSON_VALID'", "'JSON_VALUE'", "'NESTED'", "'ORDINALITY'", 
		    "'PATH'", "'AVG'", "'BIT_AND'", "'BIT_OR'", "'BIT_XOR'", "'COUNT'", 
		    "'CUME_DIST'", "'DENSE_RANK'", "'FIRST_VALUE'", "'GROUP_CONCAT'", 
		    "'LAG'", "'LAST_VALUE'", "'LEAD'", "'MAX'", "'MIN'", "'NTILE'", "'NTH_VALUE'", 
		    "'PERCENT_RANK'", "'RANK'", "'ROW_NUMBER'", "'STD'", "'STDDEV'", "'STDDEV_POP'", 
		    "'STDDEV_SAMP'", "'SUM'", "'VAR_POP'", "'VAR_SAMP'", "'VARIANCE'", 
		    "'CURRENT_DATE'", "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", "'LOCALTIME'", 
		    "'CURDATE'", "'CURTIME'", "'DATE_ADD'", "'DATE_SUB'", "'EXTRACT'", 
		    "'LOCALTIMESTAMP'", "'NOW'", "'POSITION'", "'SUBSTR'", "'SUBSTRING'", 
		    "'SYSDATE'", "'TRIM'", "'UTC_DATE'", "'UTC_TIME'", "'UTC_TIMESTAMP'", 
		    "'ACCOUNT'", "'ACTION'", "'AFTER'", "'AGGREGATE'", "'ALGORITHM'", 
		    "'ANY'", "'AT'", "'AUTHORS'", "'AUTOCOMMIT'", "'AUTOEXTEND_SIZE'", 
		    "'AUTO_INCREMENT'", "'AVG_ROW_LENGTH'", "'BEGIN'", "'BINLOG'", "'BIT'", 
		    "'BLOCK'", "'BOOL'", "'BOOLEAN'", "'BTREE'", "'CACHE'", "'CASCADED'", 
		    "'CHAIN'", "'CHANGED'", "'CHANNEL'", "'CHECKSUM'", "'PAGE_CHECKSUM'", 
		    "'CIPHER'", "'CLASS_ORIGIN'", "'CLIENT'", "'CLOSE'", "'CLUSTERING'", 
		    "'COALESCE'", "'CODE'", "'COLUMNS'", "'COLUMN_FORMAT'", "'COLUMN_NAME'", 
		    "'COMMENT'", "'COMMIT'", "'COMPACT'", "'COMPLETION'", "'COMPRESSED'", 
		    "'COMPRESSION'", "'CONCURRENT'", "'CONNECT'", "'CONNECTION'", "'CONSISTENT'", 
		    "'CONSTRAINT_CATALOG'", "'CONSTRAINT_SCHEMA'", "'CONSTRAINT_NAME'", 
		    "'CONTAINS'", "'CONTEXT'", "'CONTRIBUTORS'", "'COPY'", "'CPU'", "'CYCLE'", 
		    "'CURSOR_NAME'", "'DATA'", "'DATAFILE'", "'DEALLOCATE'", "'DEFAULT_AUTH'", 
		    "'DEFINER'", "'DELAY_KEY_WRITE'", "'DES_KEY_FILE'", "'DIRECTORY'", 
		    "'DISABLE'", "'DISCARD'", "'DISK'", "'DO'", "'DUMPFILE'", "'DUPLICATE'", 
		    "'DYNAMIC'", "'ENABLE'", "'ENCRYPTED'", "'ENCRYPTION'", "'ENCRYPTION_KEY_ID'", 
		    "'END'", "'ENDS'", "'ENGINE'", "'ENGINES'", "'ERROR'", "'ERRORS'", 
		    "'ESCAPE'", "'EVEN'", "'EVENT'", "'EVENTS'", "'EVERY'", "'EXCHANGE'", 
		    "'EXCLUSIVE'", "'EXPIRE'", "'EXPORT'", "'EXTENDED'", "'EXTENT_SIZE'", 
		    "'FAILED_LOGIN_ATTEMPTS'", "'FAST'", "'FAULTS'", "'FIELDS'", "'FILE_BLOCK_SIZE'", 
		    "'FILTER'", "'FIRST'", "'FIXED'", "'FLUSH'", "'FOLLOWING'", "'FOLLOWS'", 
		    "'FOUND'", "'FULL'", "'FUNCTION'", "'GENERAL'", "'GLOBAL'", "'GRANTS'", 
		    "'GROUP_REPLICATION'", "'HANDLER'", "'HASH'", "'HELP'", "'HISTORY'", 
		    "'HOST'", "'HOSTS'", "'IDENTIFIED'", "'IGNORE_SERVER_IDS'", "'IMPORT'", 
		    "'INCREMENT'", "'INDEXES'", "'INITIAL_SIZE'", "'INPLACE'", "'INSERT_METHOD'", 
		    "'INSTALL'", "'INSTANCE'", "'INSTANT'", "'INVISIBLE'", "'INVOKER'", 
		    "'IO'", "'IO_THREAD'", "'IPC'", "'ISOLATION'", "'ISSUER'", "'JSON'", 
		    "'KEY_BLOCK_SIZE'", "'LANGUAGE'", "'LAST'", "'LEAVES'", "'LESS'", 
		    "'LEVEL'", "'LIST'", "'LOCAL'", "'LOGFILE'", "'LOGS'", "'MASTER'", 
		    "'MASTER_AUTO_POSITION'", "'MASTER_CONNECT_RETRY'", "'MASTER_DELAY'", 
		    "'MASTER_HEARTBEAT_PERIOD'", "'MASTER_HOST'", "'MASTER_LOG_FILE'", 
		    "'MASTER_LOG_POS'", "'MASTER_PASSWORD'", "'MASTER_PORT'", "'MASTER_RETRY_COUNT'", 
		    "'MASTER_SSL'", "'MASTER_SSL_CA'", "'MASTER_SSL_CAPATH'", "'MASTER_SSL_CERT'", 
		    "'MASTER_SSL_CIPHER'", "'MASTER_SSL_CRL'", "'MASTER_SSL_CRLPATH'", 
		    "'MASTER_SSL_KEY'", "'MASTER_TLS_VERSION'", "'MASTER_USER'", "'MAX_CONNECTIONS_PER_HOUR'", 
		    "'MAX_QUERIES_PER_HOUR'", "'MAX_ROWS'", "'MAX_SIZE'", "'MAX_UPDATES_PER_HOUR'", 
		    "'MAX_USER_CONNECTIONS'", "'MEDIUM'", "'MEMBER'", "'MERGE'", "'MESSAGE_TEXT'", 
		    "'MID'", "'MIGRATE'", "'MIN_ROWS'", "'MODE'", "'MODIFY'", "'MUTEX'", 
		    "'MYSQL'", "'MYSQL_ERRNO'", "'NAME'", "'NAMES'", "'NCHAR'", "'NEVER'", 
		    "'NEXT'", "'NO'", "'NOCACHE'", "'NOCOPY'", "'NOCYCLE'", "'NOMAXVALUE'", 
		    "'NOMINVALUE'", "'NOWAIT'", "'NODEGROUP'", "'NONE'", "'ODBC'", "'OFFLINE'", 
		    "'OFFSET'", "'OF'", "'OJ'", "'OLD_PASSWORD'", "'ONE'", "'ONLINE'", 
		    "'ONLY'", "'OPEN'", "'OPTIMIZER_COSTS'", "'OPTIONS'", "'OWNER'", "'PACK_KEYS'", 
		    "'PAGE'", "'PAGE_COMPRESSED'", "'PAGE_COMPRESSION_LEVEL'", "'PARSER'", 
		    "'PARTIAL'", "'PARTITIONING'", "'PARTITIONS'", "'PASSWORD'", "'PASSWORD_LOCK_TIME'", 
		    "'PHASE'", "'PLUGIN'", "'PLUGIN_DIR'", "'PLUGINS'", "'PORT'", "'PRECEDES'", 
		    "'PRECEDING'", "'PREPARE'", "'PRESERVE'", "'PREV'", "'PROCESSLIST'", 
		    "'PROFILE'", "'PROFILES'", "'PROXY'", "'QUERY'", "'QUICK'", "'REBUILD'", 
		    "'RECOVER'", "'RECURSIVE'", "'REDO_BUFFER_SIZE'", "'REDUNDANT'", "'RELAY'", 
		    "'RELAY_LOG_FILE'", "'RELAY_LOG_POS'", "'RELAYLOG'", "'REMOVE'", "'REORGANIZE'", 
		    "'REPAIR'", "'REPLICATE_DO_DB'", "'REPLICATE_DO_TABLE'", "'REPLICATE_IGNORE_DB'", 
		    "'REPLICATE_IGNORE_TABLE'", "'REPLICATE_REWRITE_DB'", "'REPLICATE_WILD_DO_TABLE'", 
		    "'REPLICATE_WILD_IGNORE_TABLE'", "'REPLICATION'", "'RESET'", "'RESTART'", 
		    "'RESUME'", "'RETURNED_SQLSTATE'", "'RETURNING'", "'RETURNS'", "'REUSE'", 
		    "'ROLE'", "'ROLLBACK'", "'ROLLUP'", "'ROTATE'", "'ROW'", "'ROWS'", 
		    "'ROW_FORMAT'", "'RTREE'", "'SAVEPOINT'", "'SCHEDULE'", "'SECURITY'", 
		    "'SEQUENCE'", "'SERVER'", "'SESSION'", "'SHARE'", "'SHARED'", "'SIGNED'", 
		    "'SIMPLE'", "'SLAVE'", "'SLOW'", "'SNAPSHOT'", "'SOCKET'", "'SOME'", 
		    "'SONAME'", "'SOUNDS'", "'SOURCE'", "'SQL_AFTER_GTIDS'", "'SQL_AFTER_MTS_GAPS'", 
		    "'SQL_BEFORE_GTIDS'", "'SQL_BUFFER_RESULT'", "'SQL_CACHE'", "'SQL_NO_CACHE'", 
		    "'SQL_THREAD'", "'START'", "'STARTS'", "'STATS_AUTO_RECALC'", "'STATS_PERSISTENT'", 
		    "'STATS_SAMPLE_PAGES'", "'STATUS'", "'STOP'", "'STORAGE'", "'STORED'", 
		    "'STRING'", "'SUBCLASS_ORIGIN'", "'SUBJECT'", "'SUBPARTITION'", "'SUBPARTITIONS'", 
		    "'SUSPEND'", "'SWAPS'", "'SWITCHES'", "'TABLE_NAME'", "'TABLESPACE'", 
		    "'TABLE_TYPE'", "'TEMPORARY'", "'TEMPTABLE'", "'THAN'", "'TRADITIONAL'", 
		    "'TRANSACTION'", "'TRANSACTIONAL'", "'TRIGGERS'", "'TRUNCATE'", "'UNBOUNDED'", 
		    "'UNDEFINED'", "'UNDOFILE'", "'UNDO_BUFFER_SIZE'", "'UNINSTALL'", 
		    "'UNKNOWN'", "'UNTIL'", "'UPGRADE'", "'USER'", "'USE_FRM'", "'USER_RESOURCES'", 
		    "'VALIDATION'", "'VALUE'", "'VARIABLES'", "'VIEW'", "'VIRTUAL'", "'VISIBLE'", 
		    "'WAIT'", "'WARNINGS'", "'WINDOW'", "'WITHOUT'", "'WORK'", "'WRAPPER'", 
		    "'X509'", "'XA'", "'XML'", "'YES'", "'EUR'", "'USA'", "'JIS'", "'ISO'", 
		    "'INTERNAL'", "'QUARTER'", "'MONTH'", "'DAY'", "'HOUR'", "'MINUTE'", 
		    "'WEEK'", "'SECOND'", "'MICROSECOND'", "'ADMIN'", "'APPLICATION_PASSWORD_ADMIN'", 
		    "'AUDIT_ABORT_EXEMPT'", "'AUDIT_ADMIN'", "'AUTHENTICATION_POLICY_ADMIN'", 
		    "'BACKUP_ADMIN'", "'BINLOG_ADMIN'", "'BINLOG_ENCRYPTION_ADMIN'", "'CLONE_ADMIN'", 
		    "'CONNECTION_ADMIN'", "'ENCRYPTION_KEY_ADMIN'", "'EXECUTE'", "'FILE'", 
		    "'FIREWALL_ADMIN'", "'FIREWALL_EXEMPT'", "'FIREWALL_USER'", "'FLUSH_OPTIMIZER_COSTS'", 
		    "'FLUSH_STATUS'", "'FLUSH_TABLES'", "'FLUSH_USER_RESOURCES'", "'GROUP_REPLICATION_ADMIN'", 
		    "'INNODB_REDO_LOG_ARCHIVE'", "'INNODB_REDO_LOG_ENABLE'", "'INVOKE'", 
		    "'LAMBDA'", "'NDB_STORED_USER'", "'PASSWORDLESS_USER_ADMIN'", "'PERSIST_RO_VARIABLES_ADMIN'", 
		    "'PRIVILEGES'", "'PROCESS'", "'RELOAD'", "'REPLICATION_APPLIER'", 
		    "'REPLICATION_SLAVE_ADMIN'", "'RESOURCE_GROUP_ADMIN'", "'RESOURCE_GROUP_USER'", 
		    "'ROLE_ADMIN'", "'ROUTINE'", "'S3'", "'SERVICE_CONNECTION_ADMIN'", 
		    null, "'SET_USER_ID'", "'SHOW_ROUTINE'", "'SHUTDOWN'", "'SUPER'", 
		    "'SYSTEM_VARIABLES_ADMIN'", "'TABLES'", "'TABLE_ENCRYPTION_ADMIN'", 
		    "'VERSION_TOKEN_ADMIN'", "'XA_RECOVER_ADMIN'", "'ARMSCII8'", "'ASCII'", 
		    "'BIG5'", "'CP1250'", "'CP1251'", "'CP1256'", "'CP1257'", "'CP850'", 
		    "'CP852'", "'CP866'", "'CP932'", "'DEC8'", "'EUCJPMS'", "'EUCKR'", 
		    "'GB18030'", "'GB2312'", "'GBK'", "'GEOSTD8'", "'GREEK'", "'HEBREW'", 
		    "'HP8'", "'KEYBCS2'", "'KOI8R'", "'KOI8U'", "'LATIN1'", "'LATIN2'", 
		    "'LATIN5'", "'LATIN7'", "'MACCE'", "'MACROMAN'", "'SJIS'", "'SWE7'", 
		    "'TIS620'", "'UCS2'", "'UJIS'", "'UTF16'", "'UTF16LE'", "'UTF32'", 
		    "'UTF8'", "'UTF8MB3'", "'UTF8MB4'", "'ARCHIVE'", "'BLACKHOLE'", "'CSV'", 
		    "'FEDERATED'", "'INNODB'", "'MEMORY'", "'MRG_MYISAM'", "'MYISAM'", 
		    "'NDB'", "'NDBCLUSTER'", "'PERFORMANCE_SCHEMA'", "'TOKUDB'", "'REPEATABLE'", 
		    "'COMMITTED'", "'UNCOMMITTED'", "'SERIALIZABLE'", "'GEOMETRYCOLLECTION'", 
		    "'GEOMCOLLECTION'", "'GEOMETRY'", "'LINESTRING'", "'MULTILINESTRING'", 
		    "'MULTIPOINT'", "'MULTIPOLYGON'", "'POINT'", "'POLYGON'", "'ABS'", 
		    "'ACOS'", "'ADDDATE'", "'ADDTIME'", "'AES_DECRYPT'", "'AES_ENCRYPT'", 
		    "'AREA'", "'ASBINARY'", "'ASIN'", "'ASTEXT'", "'ASWKB'", "'ASWKT'", 
		    "'ASYMMETRIC_DECRYPT'", "'ASYMMETRIC_DERIVE'", "'ASYMMETRIC_ENCRYPT'", 
		    "'ASYMMETRIC_SIGN'", "'ASYMMETRIC_VERIFY'", "'ATAN'", "'ATAN2'", "'BENCHMARK'", 
		    "'BIN'", "'BIT_COUNT'", "'BIT_LENGTH'", "'BUFFER'", "'CATALOG_NAME'", 
		    "'CEIL'", "'CEILING'", "'CENTROID'", "'CHARACTER_LENGTH'", "'CHARSET'", 
		    "'CHAR_LENGTH'", "'COERCIBILITY'", "'COLLATION'", "'COMPRESS'", "'CONCAT'", 
		    "'CONCAT_WS'", "'CONNECTION_ID'", "'CONV'", "'CONVERT_TZ'", "'COS'", 
		    "'COT'", "'CRC32'", "'CREATE_ASYMMETRIC_PRIV_KEY'", "'CREATE_ASYMMETRIC_PUB_KEY'", 
		    "'CREATE_DH_PARAMETERS'", "'CREATE_DIGEST'", "'CROSSES'", "'DATEDIFF'", 
		    "'DATE_FORMAT'", "'DAYNAME'", "'DAYOFMONTH'", "'DAYOFWEEK'", "'DAYOFYEAR'", 
		    "'DECODE'", "'DEGREES'", "'DES_DECRYPT'", "'DES_ENCRYPT'", "'DIMENSION'", 
		    "'DISJOINT'", "'ELT'", "'ENCODE'", "'ENCRYPT'", "'ENDPOINT'", "'ENGINE_ATTRIBUTE'", 
		    "'ENVELOPE'", "'EQUALS'", "'EXP'", "'EXPORT_SET'", "'EXTERIORRING'", 
		    "'EXTRACTVALUE'", "'FIELD'", "'FIND_IN_SET'", "'FLOOR'", "'FORMAT'", 
		    "'FOUND_ROWS'", "'FROM_BASE64'", "'FROM_DAYS'", "'FROM_UNIXTIME'", 
		    "'GEOMCOLLFROMTEXT'", "'GEOMCOLLFROMWKB'", "'GEOMETRYCOLLECTIONFROMTEXT'", 
		    "'GEOMETRYCOLLECTIONFROMWKB'", "'GEOMETRYFROMTEXT'", "'GEOMETRYFROMWKB'", 
		    "'GEOMETRYN'", "'GEOMETRYTYPE'", "'GEOMFROMTEXT'", "'GEOMFROMWKB'", 
		    "'GET_FORMAT'", "'GET_LOCK'", "'GLENGTH'", "'GREATEST'", "'GTID_SUBSET'", 
		    "'GTID_SUBTRACT'", "'HEX'", "'IFNULL'", "'INET6_ATON'", "'INET6_NTOA'", 
		    "'INET_ATON'", "'INET_NTOA'", "'INSTR'", "'INTERIORRINGN'", "'INTERSECTS'", 
		    "'ISCLOSED'", "'ISEMPTY'", "'ISNULL'", "'ISSIMPLE'", "'IS_FREE_LOCK'", 
		    "'IS_IPV4'", "'IS_IPV4_COMPAT'", "'IS_IPV4_MAPPED'", "'IS_IPV6'", 
		    "'IS_USED_LOCK'", "'LAST_INSERT_ID'", "'LCASE'", "'LEAST'", "'LENGTH'", 
		    "'LINEFROMTEXT'", "'LINEFROMWKB'", "'LINESTRINGFROMTEXT'", "'LINESTRINGFROMWKB'", 
		    "'LN'", "'LOAD_FILE'", "'LOCATE'", "'LOG'", "'LOG10'", "'LOG2'", "'LOWER'", 
		    "'LPAD'", "'LTRIM'", "'MAKEDATE'", "'MAKETIME'", "'MAKE_SET'", "'MASTER_POS_WAIT'", 
		    "'MBRCONTAINS'", "'MBRDISJOINT'", "'MBREQUAL'", "'MBRINTERSECTS'", 
		    "'MBROVERLAPS'", "'MBRTOUCHES'", "'MBRWITHIN'", "'MD5'", "'MLINEFROMTEXT'", 
		    "'MLINEFROMWKB'", "'MONTHNAME'", "'MPOINTFROMTEXT'", "'MPOINTFROMWKB'", 
		    "'MPOLYFROMTEXT'", "'MPOLYFROMWKB'", "'MULTILINESTRINGFROMTEXT'", 
		    "'MULTILINESTRINGFROMWKB'", "'MULTIPOINTFROMTEXT'", "'MULTIPOINTFROMWKB'", 
		    "'MULTIPOLYGONFROMTEXT'", "'MULTIPOLYGONFROMWKB'", "'NAME_CONST'", 
		    "'NULLIF'", "'NUMGEOMETRIES'", "'NUMINTERIORRINGS'", "'NUMPOINTS'", 
		    "'OCT'", "'OCTET_LENGTH'", "'ORD'", "'OVERLAPS'", "'PERIOD_ADD'", 
		    "'PERIOD_DIFF'", "'PI'", "'POINTFROMTEXT'", "'POINTFROMWKB'", "'POINTN'", 
		    "'POLYFROMTEXT'", "'POLYFROMWKB'", "'POLYGONFROMTEXT'", "'POLYGONFROMWKB'", 
		    "'POW'", "'POWER'", "'QUOTE'", "'RADIANS'", "'RAND'", "'RANDOM'", 
		    "'RANDOM_BYTES'", "'RELEASE_LOCK'", "'REVERSE'", "'ROUND'", "'ROW_COUNT'", 
		    "'RPAD'", "'RTRIM'", "'SEC_TO_TIME'", "'SECONDARY_ENGINE_ATTRIBUTE'", 
		    "'SESSION_USER'", "'SHA'", "'SHA1'", "'SHA2'", "'SCHEMA_NAME'", "'SIGN'", 
		    "'SIN'", "'SLEEP'", "'SOUNDEX'", "'SQL_THREAD_WAIT_AFTER_GTIDS'", 
		    "'SQRT'", "'SRID'", "'STARTPOINT'", "'STRCMP'", "'STR_TO_DATE'", "'ST_AREA'", 
		    "'ST_ASBINARY'", "'ST_ASTEXT'", "'ST_ASWKB'", "'ST_ASWKT'", "'ST_BUFFER'", 
		    "'ST_CENTROID'", "'ST_CONTAINS'", "'ST_CROSSES'", "'ST_DIFFERENCE'", 
		    "'ST_DIMENSION'", "'ST_DISJOINT'", "'ST_DISTANCE'", "'ST_ENDPOINT'", 
		    "'ST_ENVELOPE'", "'ST_EQUALS'", "'ST_EXTERIORRING'", "'ST_GEOMCOLLFROMTEXT'", 
		    "'ST_GEOMCOLLFROMTXT'", "'ST_GEOMCOLLFROMWKB'", "'ST_GEOMETRYCOLLECTIONFROMTEXT'", 
		    "'ST_GEOMETRYCOLLECTIONFROMWKB'", "'ST_GEOMETRYFROMTEXT'", "'ST_GEOMETRYFROMWKB'", 
		    "'ST_GEOMETRYN'", "'ST_GEOMETRYTYPE'", "'ST_GEOMFROMTEXT'", "'ST_GEOMFROMWKB'", 
		    "'ST_INTERIORRINGN'", "'ST_INTERSECTION'", "'ST_INTERSECTS'", "'ST_ISCLOSED'", 
		    "'ST_ISEMPTY'", "'ST_ISSIMPLE'", "'ST_LINEFROMTEXT'", "'ST_LINEFROMWKB'", 
		    "'ST_LINESTRINGFROMTEXT'", "'ST_LINESTRINGFROMWKB'", "'ST_NUMGEOMETRIES'", 
		    "'ST_NUMINTERIORRING'", "'ST_NUMINTERIORRINGS'", "'ST_NUMPOINTS'", 
		    "'ST_OVERLAPS'", "'ST_POINTFROMTEXT'", "'ST_POINTFROMWKB'", "'ST_POINTN'", 
		    "'ST_POLYFROMTEXT'", "'ST_POLYFROMWKB'", "'ST_POLYGONFROMTEXT'", "'ST_POLYGONFROMWKB'", 
		    "'ST_SRID'", "'ST_STARTPOINT'", "'ST_SYMDIFFERENCE'", "'ST_TOUCHES'", 
		    "'ST_UNION'", "'ST_WITHIN'", "'ST_X'", "'ST_Y'", "'SUBDATE'", "'SUBSTRING_INDEX'", 
		    "'SUBTIME'", "'SYSTEM_USER'", "'TAN'", "'TIMEDIFF'", "'TIMESTAMPADD'", 
		    "'TIMESTAMPDIFF'", "'TIME_FORMAT'", "'TIME_TO_SEC'", "'TOUCHES'", 
		    "'TO_BASE64'", "'TO_DAYS'", "'TO_SECONDS'", "'TP_CONNECTION_ADMIN'", 
		    "'UCASE'", "'UNCOMPRESS'", "'UNCOMPRESSED_LENGTH'", "'UNHEX'", "'UNIX_TIMESTAMP'", 
		    "'UPDATEXML'", "'UPPER'", "'UUID'", "'UUID_SHORT'", "'VALIDATE_PASSWORD_STRENGTH'", 
		    "'VERSION'", "'WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS'", "'WEEKDAY'", "'WEEKOFYEAR'", 
		    "'WEIGHT_STRING'", "'WITHIN'", "'YEARWEEK'", "'Y'", "'X'", "':='", 
		    "'+='", "'-='", "'*='", "'/='", "'%='", "'&='", "'^='", "'|='", "'*'", 
		    "'/'", "'%'", "'+'", "'-'", "'DIV'", "'MOD'", "'='", "'>'", "'<'", 
		    "'!'", "'~'", "'|'", "'&'", "'^'", "'.'", "'('", "')'", "','", "';'", 
		    "'@'", "'0'", "'1'", "'2'", "'''", "'\"'", "'`'", "':'"
		];

		/**
		 * @var array<string>
		 */
		private const SYMBOLIC_NAMES = [
		    null, "SPACE", "SPEC_MYSQL_COMMENT", "COMMENT_INPUT", "LINE_COMMENT", 
		    "ADD", "ALL", "ALTER", "ALWAYS", "ANALYZE", "AND", "ARRAY", "AS", 
		    "ASC", "ATTRIBUTE", "BEFORE", "BETWEEN", "BOTH", "BUCKETS", "BY", 
		    "CALL", "CASCADE", "CASE", "CAST", "CHANGE", "CHARACTER", "CHECK", 
		    "COLLATE", "COLUMN", "CONDITION", "CONSTRAINT", "CONTINUE", "CONVERT", 
		    "CREATE", "CROSS", "CURRENT", "CURRENT_ROLE", "CURRENT_USER", "CURSOR", 
		    "DATABASE", "DATABASES", "DECLARE", "DEFAULT", "DELAYED", "DELETE", 
		    "DESC", "DESCRIBE", "DETERMINISTIC", "DIAGNOSTICS", "DISTINCT", "DISTINCTROW", 
		    "DROP", "EACH", "ELSE", "ELSEIF", "EMPTY", "ENCLOSED", "ENFORCED", 
		    "ESCAPED", "EXCEPT", "EXISTS", "EXIT", "EXPLAIN", "FALSE", "FETCH", 
		    "FOR", "FORCE", "FOREIGN", "FROM", "FULLTEXT", "GENERATED", "GET", 
		    "GRANT", "GROUP", "HAVING", "HIGH_PRIORITY", "HISTOGRAM", "IF", "IGNORE", 
		    "IGNORED", "IN", "INDEX", "INFILE", "INNER", "INOUT", "INSERT", "INTERVAL", 
		    "INTO", "IS", "ITERATE", "JOIN", "KEY", "KEYS", "KILL", "LATERAL", 
		    "LEADING", "LEAVE", "LEFT", "LIKE", "LIMIT", "LINEAR", "LINES", "LOAD", 
		    "LOCK", "LOCKED", "LOOP", "LOW_PRIORITY", "MASTER_BIND", "MASTER_SSL_VERIFY_SERVER_CERT", 
		    "MATCH", "MAXVALUE", "MINVALUE", "MODIFIES", "NATURAL", "NOT", "NO_WRITE_TO_BINLOG", 
		    "NULL_LITERAL", "NUMBER", "ON", "OPTIMIZE", "OPTION", "OPTIONAL", 
		    "OPTIONALLY", "OR", "ORDER", "OUT", "OUTER", "OUTFILE", "OVER", "PARTITION", 
		    "PRIMARY", "PROCEDURE", "PURGE", "RANGE", "READ", "READS", "REFERENCES", 
		    "REGEXP", "RELEASE", "RENAME", "REPEAT", "REPLACE", "REQUIRE", "RESIGNAL", 
		    "RESTRICT", "RETAIN", "RETURN", "REVOKE", "RIGHT", "RLIKE", "SCHEMA", 
		    "SCHEMAS", "SELECT", "SET", "SEPARATOR", "SHOW", "SIGNAL", "SKIP_", 
		    "SKIP_QUERY_REWRITE", "SPATIAL", "SQL", "SQLEXCEPTION", "SQLSTATE", 
		    "SQLWARNING", "SQL_BIG_RESULT", "SQL_CALC_FOUND_ROWS", "SQL_SMALL_RESULT", 
		    "SSL", "STACKED", "STARTING", "STATEMENT", "STRAIGHT_JOIN", "TABLE", 
		    "TERMINATED", "THEN", "TO", "TRAILING", "TRIGGER", "TRUE", "UNDO", 
		    "UNION", "UNIQUE", "UNLOCK", "UNSIGNED", "UPDATE", "USAGE", "USE", 
		    "USING", "VALUES", "WHEN", "WHERE", "WHILE", "WITH", "WRITE", "XOR", 
		    "ZEROFILL", "TINYINT", "SMALLINT", "MEDIUMINT", "MIDDLEINT", "INT", 
		    "INT1", "INT2", "INT3", "INT4", "INT8", "INTEGER", "BIGINT", "REAL", 
		    "DOUBLE", "PRECISION", "FLOAT", "FLOAT4", "FLOAT8", "DECIMAL", "DEC", 
		    "NUMERIC", "DATE", "TIME", "TIMESTAMP", "DATETIME", "YEAR", "CHAR", 
		    "VARCHAR", "NVARCHAR", "NATIONAL", "BINARY", "VARBINARY", "TINYBLOB", 
		    "BLOB", "MEDIUMBLOB", "LONG", "LONGBLOB", "TINYTEXT", "TEXT", "MEDIUMTEXT", 
		    "LONGTEXT", "ENUM", "VARYING", "SERIAL", "YEAR_MONTH", "DAY_HOUR", 
		    "DAY_MINUTE", "DAY_SECOND", "HOUR_MINUTE", "HOUR_SECOND", "MINUTE_SECOND", 
		    "SECOND_MICROSECOND", "MINUTE_MICROSECOND", "HOUR_MICROSECOND", "DAY_MICROSECOND", 
		    "JSON_ARRAY", "JSON_ARRAYAGG", "JSON_ARRAY_APPEND", "JSON_ARRAY_INSERT", 
		    "JSON_CONTAINS", "JSON_CONTAINS_PATH", "JSON_DEPTH", "JSON_EXTRACT", 
		    "JSON_INSERT", "JSON_KEYS", "JSON_LENGTH", "JSON_MERGE", "JSON_MERGE_PATCH", 
		    "JSON_MERGE_PRESERVE", "JSON_OBJECT", "JSON_OBJECTAGG", "JSON_OVERLAPS", 
		    "JSON_PRETTY", "JSON_QUOTE", "JSON_REMOVE", "JSON_REPLACE", "JSON_SCHEMA_VALID", 
		    "JSON_SCHEMA_VALIDATION_REPORT", "JSON_SEARCH", "JSON_SET", "JSON_STORAGE_FREE", 
		    "JSON_STORAGE_SIZE", "JSON_TABLE", "JSON_TYPE", "JSON_UNQUOTE", "JSON_VALID", 
		    "JSON_VALUE", "NESTED", "ORDINALITY", "PATH", "AVG", "BIT_AND", "BIT_OR", 
		    "BIT_XOR", "COUNT", "CUME_DIST", "DENSE_RANK", "FIRST_VALUE", "GROUP_CONCAT", 
		    "LAG", "LAST_VALUE", "LEAD", "MAX", "MIN", "NTILE", "NTH_VALUE", "PERCENT_RANK", 
		    "RANK", "ROW_NUMBER", "STD", "STDDEV", "STDDEV_POP", "STDDEV_SAMP", 
		    "SUM", "VAR_POP", "VAR_SAMP", "VARIANCE", "CURRENT_DATE", "CURRENT_TIME", 
		    "CURRENT_TIMESTAMP", "LOCALTIME", "CURDATE", "CURTIME", "DATE_ADD", 
		    "DATE_SUB", "EXTRACT", "LOCALTIMESTAMP", "NOW", "POSITION", "SUBSTR", 
		    "SUBSTRING", "SYSDATE", "TRIM", "UTC_DATE", "UTC_TIME", "UTC_TIMESTAMP", 
		    "ACCOUNT", "ACTION", "AFTER", "AGGREGATE", "ALGORITHM", "ANY", "AT", 
		    "AUTHORS", "AUTOCOMMIT", "AUTOEXTEND_SIZE", "AUTO_INCREMENT", "AVG_ROW_LENGTH", 
		    "BEGIN", "BINLOG", "BIT", "BLOCK", "BOOL", "BOOLEAN", "BTREE", "CACHE", 
		    "CASCADED", "CHAIN", "CHANGED", "CHANNEL", "CHECKSUM", "PAGE_CHECKSUM", 
		    "CIPHER", "CLASS_ORIGIN", "CLIENT", "CLOSE", "CLUSTERING", "COALESCE", 
		    "CODE", "COLUMNS", "COLUMN_FORMAT", "COLUMN_NAME", "COMMENT", "COMMIT", 
		    "COMPACT", "COMPLETION", "COMPRESSED", "COMPRESSION", "CONCURRENT", 
		    "CONNECT", "CONNECTION", "CONSISTENT", "CONSTRAINT_CATALOG", "CONSTRAINT_SCHEMA", 
		    "CONSTRAINT_NAME", "CONTAINS", "CONTEXT", "CONTRIBUTORS", "COPY", 
		    "CPU", "CYCLE", "CURSOR_NAME", "DATA", "DATAFILE", "DEALLOCATE", "DEFAULT_AUTH", 
		    "DEFINER", "DELAY_KEY_WRITE", "DES_KEY_FILE", "DIRECTORY", "DISABLE", 
		    "DISCARD", "DISK", "DO", "DUMPFILE", "DUPLICATE", "DYNAMIC", "ENABLE", 
		    "ENCRYPTED", "ENCRYPTION", "ENCRYPTION_KEY_ID", "END", "ENDS", "ENGINE", 
		    "ENGINES", "ERROR", "ERRORS", "ESCAPE", "EVEN", "EVENT", "EVENTS", 
		    "EVERY", "EXCHANGE", "EXCLUSIVE", "EXPIRE", "EXPORT", "EXTENDED", 
		    "EXTENT_SIZE", "FAILED_LOGIN_ATTEMPTS", "FAST", "FAULTS", "FIELDS", 
		    "FILE_BLOCK_SIZE", "FILTER", "FIRST", "FIXED", "FLUSH", "FOLLOWING", 
		    "FOLLOWS", "FOUND", "FULL", "FUNCTION", "GENERAL", "GLOBAL", "GRANTS", 
		    "GROUP_REPLICATION", "HANDLER", "HASH", "HELP", "HISTORY", "HOST", 
		    "HOSTS", "IDENTIFIED", "IGNORE_SERVER_IDS", "IMPORT", "INCREMENT", 
		    "INDEXES", "INITIAL_SIZE", "INPLACE", "INSERT_METHOD", "INSTALL", 
		    "INSTANCE", "INSTANT", "INVISIBLE", "INVOKER", "IO", "IO_THREAD", 
		    "IPC", "ISOLATION", "ISSUER", "JSON", "KEY_BLOCK_SIZE", "LANGUAGE", 
		    "LAST", "LEAVES", "LESS", "LEVEL", "LIST", "LOCAL", "LOGFILE", "LOGS", 
		    "MASTER", "MASTER_AUTO_POSITION", "MASTER_CONNECT_RETRY", "MASTER_DELAY", 
		    "MASTER_HEARTBEAT_PERIOD", "MASTER_HOST", "MASTER_LOG_FILE", "MASTER_LOG_POS", 
		    "MASTER_PASSWORD", "MASTER_PORT", "MASTER_RETRY_COUNT", "MASTER_SSL", 
		    "MASTER_SSL_CA", "MASTER_SSL_CAPATH", "MASTER_SSL_CERT", "MASTER_SSL_CIPHER", 
		    "MASTER_SSL_CRL", "MASTER_SSL_CRLPATH", "MASTER_SSL_KEY", "MASTER_TLS_VERSION", 
		    "MASTER_USER", "MAX_CONNECTIONS_PER_HOUR", "MAX_QUERIES_PER_HOUR", 
		    "MAX_ROWS", "MAX_SIZE", "MAX_UPDATES_PER_HOUR", "MAX_USER_CONNECTIONS", 
		    "MEDIUM", "MEMBER", "MERGE", "MESSAGE_TEXT", "MID", "MIGRATE", "MIN_ROWS", 
		    "MODE", "MODIFY", "MUTEX", "MYSQL", "MYSQL_ERRNO", "NAME", "NAMES", 
		    "NCHAR", "NEVER", "NEXT", "NO", "NOCACHE", "NOCOPY", "NOCYCLE", "NOMAXVALUE", 
		    "NOMINVALUE", "NOWAIT", "NODEGROUP", "NONE", "ODBC", "OFFLINE", "OFFSET", 
		    "OF", "OJ", "OLD_PASSWORD", "ONE", "ONLINE", "ONLY", "OPEN", "OPTIMIZER_COSTS", 
		    "OPTIONS", "OWNER", "PACK_KEYS", "PAGE", "PAGE_COMPRESSED", "PAGE_COMPRESSION_LEVEL", 
		    "PARSER", "PARTIAL", "PARTITIONING", "PARTITIONS", "PASSWORD", "PASSWORD_LOCK_TIME", 
		    "PHASE", "PLUGIN", "PLUGIN_DIR", "PLUGINS", "PORT", "PRECEDES", "PRECEDING", 
		    "PREPARE", "PRESERVE", "PREV", "PROCESSLIST", "PROFILE", "PROFILES", 
		    "PROXY", "QUERY", "QUICK", "REBUILD", "RECOVER", "RECURSIVE", "REDO_BUFFER_SIZE", 
		    "REDUNDANT", "RELAY", "RELAY_LOG_FILE", "RELAY_LOG_POS", "RELAYLOG", 
		    "REMOVE", "REORGANIZE", "REPAIR", "REPLICATE_DO_DB", "REPLICATE_DO_TABLE", 
		    "REPLICATE_IGNORE_DB", "REPLICATE_IGNORE_TABLE", "REPLICATE_REWRITE_DB", 
		    "REPLICATE_WILD_DO_TABLE", "REPLICATE_WILD_IGNORE_TABLE", "REPLICATION", 
		    "RESET", "RESTART", "RESUME", "RETURNED_SQLSTATE", "RETURNING", "RETURNS", 
		    "REUSE", "ROLE", "ROLLBACK", "ROLLUP", "ROTATE", "ROW", "ROWS", "ROW_FORMAT", 
		    "RTREE", "SAVEPOINT", "SCHEDULE", "SECURITY", "SEQUENCE", "SERVER", 
		    "SESSION", "SHARE", "SHARED", "SIGNED", "SIMPLE", "SLAVE", "SLOW", 
		    "SNAPSHOT", "SOCKET", "SOME", "SONAME", "SOUNDS", "SOURCE", "SQL_AFTER_GTIDS", 
		    "SQL_AFTER_MTS_GAPS", "SQL_BEFORE_GTIDS", "SQL_BUFFER_RESULT", "SQL_CACHE", 
		    "SQL_NO_CACHE", "SQL_THREAD", "START", "STARTS", "STATS_AUTO_RECALC", 
		    "STATS_PERSISTENT", "STATS_SAMPLE_PAGES", "STATUS", "STOP", "STORAGE", 
		    "STORED", "STRING", "SUBCLASS_ORIGIN", "SUBJECT", "SUBPARTITION", 
		    "SUBPARTITIONS", "SUSPEND", "SWAPS", "SWITCHES", "TABLE_NAME", "TABLESPACE", 
		    "TABLE_TYPE", "TEMPORARY", "TEMPTABLE", "THAN", "TRADITIONAL", "TRANSACTION", 
		    "TRANSACTIONAL", "TRIGGERS", "TRUNCATE", "UNBOUNDED", "UNDEFINED", 
		    "UNDOFILE", "UNDO_BUFFER_SIZE", "UNINSTALL", "UNKNOWN", "UNTIL", "UPGRADE", 
		    "USER", "USE_FRM", "USER_RESOURCES", "VALIDATION", "VALUE", "VARIABLES", 
		    "VIEW", "VIRTUAL", "VISIBLE", "WAIT", "WARNINGS", "WINDOW", "WITHOUT", 
		    "WORK", "WRAPPER", "X509", "XA", "XML", "YES", "EUR", "USA", "JIS", 
		    "ISO", "INTERNAL", "QUARTER", "MONTH", "DAY", "HOUR", "MINUTE", "WEEK", 
		    "SECOND", "MICROSECOND", "ADMIN", "APPLICATION_PASSWORD_ADMIN", "AUDIT_ABORT_EXEMPT", 
		    "AUDIT_ADMIN", "AUTHENTICATION_POLICY_ADMIN", "BACKUP_ADMIN", "BINLOG_ADMIN", 
		    "BINLOG_ENCRYPTION_ADMIN", "CLONE_ADMIN", "CONNECTION_ADMIN", "ENCRYPTION_KEY_ADMIN", 
		    "EXECUTE", "FILE", "FIREWALL_ADMIN", "FIREWALL_EXEMPT", "FIREWALL_USER", 
		    "FLUSH_OPTIMIZER_COSTS", "FLUSH_STATUS", "FLUSH_TABLES", "FLUSH_USER_RESOURCES", 
		    "GROUP_REPLICATION_ADMIN", "INNODB_REDO_LOG_ARCHIVE", "INNODB_REDO_LOG_ENABLE", 
		    "INVOKE", "LAMBDA", "NDB_STORED_USER", "PASSWORDLESS_USER_ADMIN", 
		    "PERSIST_RO_VARIABLES_ADMIN", "PRIVILEGES", "PROCESS", "RELOAD", "REPLICATION_APPLIER", 
		    "REPLICATION_SLAVE_ADMIN", "RESOURCE_GROUP_ADMIN", "RESOURCE_GROUP_USER", 
		    "ROLE_ADMIN", "ROUTINE", "S3", "SERVICE_CONNECTION_ADMIN", "SESSION_VARIABLES_ADMIN", 
		    "SET_USER_ID", "SHOW_ROUTINE", "SHUTDOWN", "SUPER", "SYSTEM_VARIABLES_ADMIN", 
		    "TABLES", "TABLE_ENCRYPTION_ADMIN", "VERSION_TOKEN_ADMIN", "XA_RECOVER_ADMIN", 
		    "ARMSCII8", "ASCII", "BIG5", "CP1250", "CP1251", "CP1256", "CP1257", 
		    "CP850", "CP852", "CP866", "CP932", "DEC8", "EUCJPMS", "EUCKR", "GB18030", 
		    "GB2312", "GBK", "GEOSTD8", "GREEK", "HEBREW", "HP8", "KEYBCS2", "KOI8R", 
		    "KOI8U", "LATIN1", "LATIN2", "LATIN5", "LATIN7", "MACCE", "MACROMAN", 
		    "SJIS", "SWE7", "TIS620", "UCS2", "UJIS", "UTF16", "UTF16LE", "UTF32", 
		    "UTF8", "UTF8MB3", "UTF8MB4", "ARCHIVE", "BLACKHOLE", "CSV", "FEDERATED", 
		    "INNODB", "MEMORY", "MRG_MYISAM", "MYISAM", "NDB", "NDBCLUSTER", "PERFORMANCE_SCHEMA", 
		    "TOKUDB", "REPEATABLE", "COMMITTED", "UNCOMMITTED", "SERIALIZABLE", 
		    "GEOMETRYCOLLECTION", "GEOMCOLLECTION", "GEOMETRY", "LINESTRING", 
		    "MULTILINESTRING", "MULTIPOINT", "MULTIPOLYGON", "POINT", "POLYGON", 
		    "ABS", "ACOS", "ADDDATE", "ADDTIME", "AES_DECRYPT", "AES_ENCRYPT", 
		    "AREA", "ASBINARY", "ASIN", "ASTEXT", "ASWKB", "ASWKT", "ASYMMETRIC_DECRYPT", 
		    "ASYMMETRIC_DERIVE", "ASYMMETRIC_ENCRYPT", "ASYMMETRIC_SIGN", "ASYMMETRIC_VERIFY", 
		    "ATAN", "ATAN2", "BENCHMARK", "BIN", "BIT_COUNT", "BIT_LENGTH", "BUFFER", 
		    "CATALOG_NAME", "CEIL", "CEILING", "CENTROID", "CHARACTER_LENGTH", 
		    "CHARSET", "CHAR_LENGTH", "COERCIBILITY", "COLLATION", "COMPRESS", 
		    "CONCAT", "CONCAT_WS", "CONNECTION_ID", "CONV", "CONVERT_TZ", "COS", 
		    "COT", "CRC32", "CREATE_ASYMMETRIC_PRIV_KEY", "CREATE_ASYMMETRIC_PUB_KEY", 
		    "CREATE_DH_PARAMETERS", "CREATE_DIGEST", "CROSSES", "DATEDIFF", "DATE_FORMAT", 
		    "DAYNAME", "DAYOFMONTH", "DAYOFWEEK", "DAYOFYEAR", "DECODE", "DEGREES", 
		    "DES_DECRYPT", "DES_ENCRYPT", "DIMENSION", "DISJOINT", "ELT", "ENCODE", 
		    "ENCRYPT", "ENDPOINT", "ENGINE_ATTRIBUTE", "ENVELOPE", "EQUALS", "EXP", 
		    "EXPORT_SET", "EXTERIORRING", "EXTRACTVALUE", "FIELD", "FIND_IN_SET", 
		    "FLOOR", "FORMAT", "FOUND_ROWS", "FROM_BASE64", "FROM_DAYS", "FROM_UNIXTIME", 
		    "GEOMCOLLFROMTEXT", "GEOMCOLLFROMWKB", "GEOMETRYCOLLECTIONFROMTEXT", 
		    "GEOMETRYCOLLECTIONFROMWKB", "GEOMETRYFROMTEXT", "GEOMETRYFROMWKB", 
		    "GEOMETRYN", "GEOMETRYTYPE", "GEOMFROMTEXT", "GEOMFROMWKB", "GET_FORMAT", 
		    "GET_LOCK", "GLENGTH", "GREATEST", "GTID_SUBSET", "GTID_SUBTRACT", 
		    "HEX", "IFNULL", "INET6_ATON", "INET6_NTOA", "INET_ATON", "INET_NTOA", 
		    "INSTR", "INTERIORRINGN", "INTERSECTS", "ISCLOSED", "ISEMPTY", "ISNULL", 
		    "ISSIMPLE", "IS_FREE_LOCK", "IS_IPV4", "IS_IPV4_COMPAT", "IS_IPV4_MAPPED", 
		    "IS_IPV6", "IS_USED_LOCK", "LAST_INSERT_ID", "LCASE", "LEAST", "LENGTH", 
		    "LINEFROMTEXT", "LINEFROMWKB", "LINESTRINGFROMTEXT", "LINESTRINGFROMWKB", 
		    "LN", "LOAD_FILE", "LOCATE", "LOG", "LOG10", "LOG2", "LOWER", "LPAD", 
		    "LTRIM", "MAKEDATE", "MAKETIME", "MAKE_SET", "MASTER_POS_WAIT", "MBRCONTAINS", 
		    "MBRDISJOINT", "MBREQUAL", "MBRINTERSECTS", "MBROVERLAPS", "MBRTOUCHES", 
		    "MBRWITHIN", "MD5", "MLINEFROMTEXT", "MLINEFROMWKB", "MONTHNAME", 
		    "MPOINTFROMTEXT", "MPOINTFROMWKB", "MPOLYFROMTEXT", "MPOLYFROMWKB", 
		    "MULTILINESTRINGFROMTEXT", "MULTILINESTRINGFROMWKB", "MULTIPOINTFROMTEXT", 
		    "MULTIPOINTFROMWKB", "MULTIPOLYGONFROMTEXT", "MULTIPOLYGONFROMWKB", 
		    "NAME_CONST", "NULLIF", "NUMGEOMETRIES", "NUMINTERIORRINGS", "NUMPOINTS", 
		    "OCT", "OCTET_LENGTH", "ORD", "OVERLAPS", "PERIOD_ADD", "PERIOD_DIFF", 
		    "PI", "POINTFROMTEXT", "POINTFROMWKB", "POINTN", "POLYFROMTEXT", "POLYFROMWKB", 
		    "POLYGONFROMTEXT", "POLYGONFROMWKB", "POW", "POWER", "QUOTE", "RADIANS", 
		    "RAND", "RANDOM", "RANDOM_BYTES", "RELEASE_LOCK", "REVERSE", "ROUND", 
		    "ROW_COUNT", "RPAD", "RTRIM", "SEC_TO_TIME", "SECONDARY_ENGINE_ATTRIBUTE", 
		    "SESSION_USER", "SHA", "SHA1", "SHA2", "SCHEMA_NAME", "SIGN", "SIN", 
		    "SLEEP", "SOUNDEX", "SQL_THREAD_WAIT_AFTER_GTIDS", "SQRT", "SRID", 
		    "STARTPOINT", "STRCMP", "STR_TO_DATE", "ST_AREA", "ST_ASBINARY", "ST_ASTEXT", 
		    "ST_ASWKB", "ST_ASWKT", "ST_BUFFER", "ST_CENTROID", "ST_CONTAINS", 
		    "ST_CROSSES", "ST_DIFFERENCE", "ST_DIMENSION", "ST_DISJOINT", "ST_DISTANCE", 
		    "ST_ENDPOINT", "ST_ENVELOPE", "ST_EQUALS", "ST_EXTERIORRING", "ST_GEOMCOLLFROMTEXT", 
		    "ST_GEOMCOLLFROMTXT", "ST_GEOMCOLLFROMWKB", "ST_GEOMETRYCOLLECTIONFROMTEXT", 
		    "ST_GEOMETRYCOLLECTIONFROMWKB", "ST_GEOMETRYFROMTEXT", "ST_GEOMETRYFROMWKB", 
		    "ST_GEOMETRYN", "ST_GEOMETRYTYPE", "ST_GEOMFROMTEXT", "ST_GEOMFROMWKB", 
		    "ST_INTERIORRINGN", "ST_INTERSECTION", "ST_INTERSECTS", "ST_ISCLOSED", 
		    "ST_ISEMPTY", "ST_ISSIMPLE", "ST_LINEFROMTEXT", "ST_LINEFROMWKB", 
		    "ST_LINESTRINGFROMTEXT", "ST_LINESTRINGFROMWKB", "ST_NUMGEOMETRIES", 
		    "ST_NUMINTERIORRING", "ST_NUMINTERIORRINGS", "ST_NUMPOINTS", "ST_OVERLAPS", 
		    "ST_POINTFROMTEXT", "ST_POINTFROMWKB", "ST_POINTN", "ST_POLYFROMTEXT", 
		    "ST_POLYFROMWKB", "ST_POLYGONFROMTEXT", "ST_POLYGONFROMWKB", "ST_SRID", 
		    "ST_STARTPOINT", "ST_SYMDIFFERENCE", "ST_TOUCHES", "ST_UNION", "ST_WITHIN", 
		    "ST_X", "ST_Y", "SUBDATE", "SUBSTRING_INDEX", "SUBTIME", "SYSTEM_USER", 
		    "TAN", "TIMEDIFF", "TIMESTAMPADD", "TIMESTAMPDIFF", "TIME_FORMAT", 
		    "TIME_TO_SEC", "TOUCHES", "TO_BASE64", "TO_DAYS", "TO_SECONDS", "TP_CONNECTION_ADMIN", 
		    "UCASE", "UNCOMPRESS", "UNCOMPRESSED_LENGTH", "UNHEX", "UNIX_TIMESTAMP", 
		    "UPDATEXML", "UPPER", "UUID", "UUID_SHORT", "VALIDATE_PASSWORD_STRENGTH", 
		    "VERSION", "WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS", "WEEKDAY", "WEEKOFYEAR", 
		    "WEIGHT_STRING", "WITHIN", "YEARWEEK", "Y_FUNCTION", "X_FUNCTION", 
		    "VAR_ASSIGN", "PLUS_ASSIGN", "MINUS_ASSIGN", "MULT_ASSIGN", "DIV_ASSIGN", 
		    "MOD_ASSIGN", "AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN", "STAR", "DIVIDE", 
		    "MODULE", "PLUS", "MINUS", "DIV", "MOD", "EQUAL_SYMBOL", "GREATER_SYMBOL", 
		    "LESS_SYMBOL", "EXCLAMATION_SYMBOL", "BIT_NOT_OP", "BIT_OR_OP", "BIT_AND_OP", 
		    "BIT_XOR_OP", "DOT", "LR_BRACKET", "RR_BRACKET", "COMMA", "SEMI", 
		    "AT_SIGN", "ZERO_DECIMAL", "ONE_DECIMAL", "TWO_DECIMAL", "SINGLE_QUOTE_SYMB", 
		    "DOUBLE_QUOTE_SYMB", "REVERSE_QUOTE_SYMB", "COLON_SYMB", "CHARSET_REVERSE_QOUTE_STRING", 
		    "FILESIZE_LITERAL", "START_NATIONAL_STRING_LITERAL", "STRING_LITERAL", 
		    "DECIMAL_LITERAL", "HEXADECIMAL_LITERAL", "REAL_LITERAL", "NULL_SPEC_LITERAL", 
		    "BIT_STRING", "STRING_CHARSET_NAME", "DOT_ID", "ID", "REVERSE_QUOTE_ID", 
		    "HOST_IP_ADDRESS", "LOCAL_ID", "GLOBAL_ID", "ERROR_RECONGNIGION"
		];

		private const SERIALIZED_ATN =
			[4, 1, 1161, 7441, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 
		    4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 
		    9, 2, 10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 
		    7, 14, 2, 15, 7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 
		    19, 7, 19, 2, 20, 7, 20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 
		    2, 24, 7, 24, 2, 25, 7, 25, 2, 26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 
		    28, 2, 29, 7, 29, 2, 30, 7, 30, 2, 31, 7, 31, 2, 32, 7, 32, 2, 33, 
		    7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36, 7, 36, 2, 37, 7, 37, 2, 
		    38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7, 41, 2, 42, 7, 42, 
		    2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 2, 46, 7, 46, 2, 47, 7, 
		    47, 2, 48, 7, 48, 2, 49, 7, 49, 2, 50, 7, 50, 2, 51, 7, 51, 2, 52, 
		    7, 52, 2, 53, 7, 53, 2, 54, 7, 54, 2, 55, 7, 55, 2, 56, 7, 56, 2, 
		    57, 7, 57, 2, 58, 7, 58, 2, 59, 7, 59, 2, 60, 7, 60, 2, 61, 7, 61, 
		    2, 62, 7, 62, 2, 63, 7, 63, 2, 64, 7, 64, 2, 65, 7, 65, 2, 66, 7, 
		    66, 2, 67, 7, 67, 2, 68, 7, 68, 2, 69, 7, 69, 2, 70, 7, 70, 2, 71, 
		    7, 71, 2, 72, 7, 72, 2, 73, 7, 73, 2, 74, 7, 74, 2, 75, 7, 75, 2, 
		    76, 7, 76, 2, 77, 7, 77, 2, 78, 7, 78, 2, 79, 7, 79, 2, 80, 7, 80, 
		    2, 81, 7, 81, 2, 82, 7, 82, 2, 83, 7, 83, 2, 84, 7, 84, 2, 85, 7, 
		    85, 2, 86, 7, 86, 2, 87, 7, 87, 2, 88, 7, 88, 2, 89, 7, 89, 2, 90, 
		    7, 90, 2, 91, 7, 91, 2, 92, 7, 92, 2, 93, 7, 93, 2, 94, 7, 94, 2, 
		    95, 7, 95, 2, 96, 7, 96, 2, 97, 7, 97, 2, 98, 7, 98, 2, 99, 7, 99, 
		    2, 100, 7, 100, 2, 101, 7, 101, 2, 102, 7, 102, 2, 103, 7, 103, 2, 
		    104, 7, 104, 2, 105, 7, 105, 2, 106, 7, 106, 2, 107, 7, 107, 2, 108, 
		    7, 108, 2, 109, 7, 109, 2, 110, 7, 110, 2, 111, 7, 111, 2, 112, 7, 
		    112, 2, 113, 7, 113, 2, 114, 7, 114, 2, 115, 7, 115, 2, 116, 7, 116, 
		    2, 117, 7, 117, 2, 118, 7, 118, 2, 119, 7, 119, 2, 120, 7, 120, 2, 
		    121, 7, 121, 2, 122, 7, 122, 2, 123, 7, 123, 2, 124, 7, 124, 2, 125, 
		    7, 125, 2, 126, 7, 126, 2, 127, 7, 127, 2, 128, 7, 128, 2, 129, 7, 
		    129, 2, 130, 7, 130, 2, 131, 7, 131, 2, 132, 7, 132, 2, 133, 7, 133, 
		    2, 134, 7, 134, 2, 135, 7, 135, 2, 136, 7, 136, 2, 137, 7, 137, 2, 
		    138, 7, 138, 2, 139, 7, 139, 2, 140, 7, 140, 2, 141, 7, 141, 2, 142, 
		    7, 142, 2, 143, 7, 143, 2, 144, 7, 144, 2, 145, 7, 145, 2, 146, 7, 
		    146, 2, 147, 7, 147, 2, 148, 7, 148, 2, 149, 7, 149, 2, 150, 7, 150, 
		    2, 151, 7, 151, 2, 152, 7, 152, 2, 153, 7, 153, 2, 154, 7, 154, 2, 
		    155, 7, 155, 2, 156, 7, 156, 2, 157, 7, 157, 2, 158, 7, 158, 2, 159, 
		    7, 159, 2, 160, 7, 160, 2, 161, 7, 161, 2, 162, 7, 162, 2, 163, 7, 
		    163, 2, 164, 7, 164, 2, 165, 7, 165, 2, 166, 7, 166, 2, 167, 7, 167, 
		    2, 168, 7, 168, 2, 169, 7, 169, 2, 170, 7, 170, 2, 171, 7, 171, 2, 
		    172, 7, 172, 2, 173, 7, 173, 2, 174, 7, 174, 2, 175, 7, 175, 2, 176, 
		    7, 176, 2, 177, 7, 177, 2, 178, 7, 178, 2, 179, 7, 179, 2, 180, 7, 
		    180, 2, 181, 7, 181, 2, 182, 7, 182, 2, 183, 7, 183, 2, 184, 7, 184, 
		    2, 185, 7, 185, 2, 186, 7, 186, 2, 187, 7, 187, 2, 188, 7, 188, 2, 
		    189, 7, 189, 2, 190, 7, 190, 2, 191, 7, 191, 2, 192, 7, 192, 2, 193, 
		    7, 193, 2, 194, 7, 194, 2, 195, 7, 195, 2, 196, 7, 196, 2, 197, 7, 
		    197, 2, 198, 7, 198, 2, 199, 7, 199, 2, 200, 7, 200, 2, 201, 7, 201, 
		    2, 202, 7, 202, 2, 203, 7, 203, 2, 204, 7, 204, 2, 205, 7, 205, 2, 
		    206, 7, 206, 2, 207, 7, 207, 2, 208, 7, 208, 2, 209, 7, 209, 2, 210, 
		    7, 210, 2, 211, 7, 211, 2, 212, 7, 212, 2, 213, 7, 213, 2, 214, 7, 
		    214, 2, 215, 7, 215, 2, 216, 7, 216, 2, 217, 7, 217, 2, 218, 7, 218, 
		    2, 219, 7, 219, 2, 220, 7, 220, 2, 221, 7, 221, 2, 222, 7, 222, 2, 
		    223, 7, 223, 2, 224, 7, 224, 2, 225, 7, 225, 2, 226, 7, 226, 2, 227, 
		    7, 227, 2, 228, 7, 228, 2, 229, 7, 229, 2, 230, 7, 230, 2, 231, 7, 
		    231, 2, 232, 7, 232, 2, 233, 7, 233, 2, 234, 7, 234, 2, 235, 7, 235, 
		    2, 236, 7, 236, 2, 237, 7, 237, 2, 238, 7, 238, 2, 239, 7, 239, 2, 
		    240, 7, 240, 2, 241, 7, 241, 2, 242, 7, 242, 2, 243, 7, 243, 2, 244, 
		    7, 244, 2, 245, 7, 245, 2, 246, 7, 246, 2, 247, 7, 247, 2, 248, 7, 
		    248, 2, 249, 7, 249, 2, 250, 7, 250, 2, 251, 7, 251, 2, 252, 7, 252, 
		    2, 253, 7, 253, 2, 254, 7, 254, 2, 255, 7, 255, 2, 256, 7, 256, 2, 
		    257, 7, 257, 2, 258, 7, 258, 2, 259, 7, 259, 2, 260, 7, 260, 2, 261, 
		    7, 261, 2, 262, 7, 262, 2, 263, 7, 263, 2, 264, 7, 264, 2, 265, 7, 
		    265, 2, 266, 7, 266, 2, 267, 7, 267, 2, 268, 7, 268, 2, 269, 7, 269, 
		    2, 270, 7, 270, 2, 271, 7, 271, 2, 272, 7, 272, 2, 273, 7, 273, 2, 
		    274, 7, 274, 2, 275, 7, 275, 2, 276, 7, 276, 2, 277, 7, 277, 2, 278, 
		    7, 278, 2, 279, 7, 279, 2, 280, 7, 280, 2, 281, 7, 281, 2, 282, 7, 
		    282, 2, 283, 7, 283, 2, 284, 7, 284, 2, 285, 7, 285, 2, 286, 7, 286, 
		    2, 287, 7, 287, 2, 288, 7, 288, 2, 289, 7, 289, 2, 290, 7, 290, 2, 
		    291, 7, 291, 2, 292, 7, 292, 2, 293, 7, 293, 2, 294, 7, 294, 2, 295, 
		    7, 295, 2, 296, 7, 296, 2, 297, 7, 297, 2, 298, 7, 298, 2, 299, 7, 
		    299, 2, 300, 7, 300, 2, 301, 7, 301, 2, 302, 7, 302, 2, 303, 7, 303, 
		    2, 304, 7, 304, 2, 305, 7, 305, 2, 306, 7, 306, 2, 307, 7, 307, 2, 
		    308, 7, 308, 2, 309, 7, 309, 2, 310, 7, 310, 2, 311, 7, 311, 2, 312, 
		    7, 312, 2, 313, 7, 313, 2, 314, 7, 314, 2, 315, 7, 315, 2, 316, 7, 
		    316, 2, 317, 7, 317, 2, 318, 7, 318, 2, 319, 7, 319, 2, 320, 7, 320, 
		    2, 321, 7, 321, 2, 322, 7, 322, 2, 323, 7, 323, 2, 324, 7, 324, 2, 
		    325, 7, 325, 2, 326, 7, 326, 2, 327, 7, 327, 2, 328, 7, 328, 2, 329, 
		    7, 329, 2, 330, 7, 330, 2, 331, 7, 331, 2, 332, 7, 332, 2, 333, 7, 
		    333, 2, 334, 7, 334, 2, 335, 7, 335, 2, 336, 7, 336, 2, 337, 7, 337, 
		    2, 338, 7, 338, 2, 339, 7, 339, 2, 340, 7, 340, 2, 341, 7, 341, 2, 
		    342, 7, 342, 2, 343, 7, 343, 2, 344, 7, 344, 2, 345, 7, 345, 2, 346, 
		    7, 346, 2, 347, 7, 347, 2, 348, 7, 348, 2, 349, 7, 349, 2, 350, 7, 
		    350, 2, 351, 7, 351, 2, 352, 7, 352, 2, 353, 7, 353, 2, 354, 7, 354, 
		    2, 355, 7, 355, 2, 356, 7, 356, 2, 357, 7, 357, 2, 358, 7, 358, 2, 
		    359, 7, 359, 2, 360, 7, 360, 1, 0, 3, 0, 724, 8, 0, 1, 0, 1, 0, 3, 
		    0, 728, 8, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 3, 1, 735, 8, 1, 1, 1, 
		    3, 1, 738, 8, 1, 1, 1, 5, 1, 741, 8, 1, 10, 1, 12, 1, 744, 9, 1, 1, 
		    1, 1, 1, 1, 1, 3, 1, 749, 8, 1, 1, 1, 3, 1, 752, 8, 1, 1, 1, 3, 1, 
		    755, 8, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 3, 2, 764, 8, 
		    2, 1, 3, 1, 3, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 
		    4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 
		    4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 
		    4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 3, 4, 806, 8, 4, 1, 5, 
		    1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 
		    1, 5, 3, 5, 821, 8, 5, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 
		    6, 1, 6, 3, 6, 832, 8, 6, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 
		    1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 3, 7, 849, 8, 7, 1, 
		    8, 1, 8, 1, 8, 3, 8, 854, 8, 8, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 
		    1, 9, 1, 9, 1, 9, 1, 9, 3, 9, 866, 8, 9, 1, 10, 1, 10, 1, 10, 1, 10, 
		    1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 
		    10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 
		    1, 10, 1, 10, 3, 10, 893, 8, 10, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 
		    1, 11, 1, 11, 3, 11, 902, 8, 11, 1, 12, 1, 12, 1, 12, 3, 12, 907, 
		    8, 12, 1, 12, 1, 12, 5, 12, 911, 8, 12, 10, 12, 12, 12, 914, 9, 12, 
		    1, 13, 1, 13, 3, 13, 918, 8, 13, 1, 13, 1, 13, 3, 13, 922, 8, 13, 
		    1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 3, 13, 931, 8, 13, 
		    1, 13, 3, 13, 934, 8, 13, 1, 13, 3, 13, 937, 8, 13, 1, 13, 1, 13, 
		    3, 13, 941, 8, 13, 1, 13, 1, 13, 1, 13, 1, 14, 1, 14, 3, 14, 948, 
		    8, 14, 1, 14, 3, 14, 951, 8, 14, 1, 14, 1, 14, 1, 14, 3, 14, 956, 
		    8, 14, 1, 14, 1, 14, 1, 14, 1, 14, 5, 14, 962, 8, 14, 10, 14, 12, 
		    14, 965, 9, 14, 1, 14, 1, 14, 3, 14, 969, 8, 14, 1, 14, 1, 14, 1, 
		    14, 3, 14, 974, 8, 14, 1, 14, 5, 14, 977, 8, 14, 10, 14, 12, 14, 980, 
		    9, 14, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 
		    15, 3, 15, 991, 8, 15, 1, 15, 3, 15, 994, 8, 15, 1, 15, 1, 15, 3, 
		    15, 998, 8, 15, 1, 15, 3, 15, 1001, 8, 15, 1, 15, 1, 15, 3, 15, 1005, 
		    8, 15, 1, 15, 3, 15, 1008, 8, 15, 1, 15, 1, 15, 3, 15, 1012, 8, 15, 
		    1, 15, 3, 15, 1015, 8, 15, 1, 15, 3, 15, 1018, 8, 15, 1, 15, 1, 15, 
		    3, 15, 1022, 8, 15, 1, 15, 3, 15, 1025, 8, 15, 1, 15, 1, 15, 3, 15, 
		    1029, 8, 15, 1, 15, 1, 15, 1, 16, 1, 16, 3, 16, 1035, 8, 16, 1, 16, 
		    1, 16, 1, 16, 1, 16, 3, 16, 1041, 8, 16, 1, 16, 1, 16, 5, 16, 1045, 
		    8, 16, 10, 16, 12, 16, 1048, 9, 16, 1, 16, 1, 16, 5, 16, 1052, 8, 
		    16, 10, 16, 12, 16, 1055, 9, 16, 1, 16, 1, 16, 1, 17, 1, 17, 3, 17, 
		    1061, 8, 17, 1, 17, 3, 17, 1064, 8, 17, 1, 17, 1, 17, 3, 17, 1068, 
		    8, 17, 1, 17, 1, 17, 1, 17, 3, 17, 1073, 8, 17, 1, 17, 1, 17, 5, 17, 
		    1077, 8, 17, 10, 17, 12, 17, 1080, 9, 17, 1, 17, 1, 17, 1, 17, 1, 
		    17, 5, 17, 1086, 8, 17, 10, 17, 12, 17, 1089, 9, 17, 1, 17, 1, 17, 
		    3, 17, 1093, 8, 17, 1, 18, 1, 18, 1, 18, 3, 18, 1098, 8, 18, 1, 18, 
		    1, 18, 1, 18, 5, 18, 1103, 8, 18, 10, 18, 12, 18, 1106, 9, 18, 1, 
		    19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 
		    1, 19, 1, 19, 5, 19, 1120, 8, 19, 10, 19, 12, 19, 1123, 9, 19, 1, 
		    19, 1, 19, 1, 20, 1, 20, 3, 20, 1129, 8, 20, 1, 20, 1, 20, 3, 20, 
		    1133, 8, 20, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 
		    3, 20, 1143, 8, 20, 1, 20, 1, 20, 3, 20, 1147, 8, 20, 1, 20, 1, 20, 
		    3, 20, 1151, 8, 20, 1, 20, 1, 20, 3, 20, 1155, 8, 20, 1, 20, 1, 20, 
		    3, 20, 1159, 8, 20, 1, 20, 5, 20, 1162, 8, 20, 10, 20, 12, 20, 1165, 
		    9, 20, 3, 20, 1167, 8, 20, 1, 20, 3, 20, 1170, 8, 20, 1, 20, 3, 20, 
		    1173, 8, 20, 1, 20, 3, 20, 1176, 8, 20, 1, 20, 1, 20, 1, 20, 1, 20, 
		    3, 20, 1182, 8, 20, 1, 20, 1, 20, 3, 20, 1186, 8, 20, 1, 20, 1, 20, 
		    1, 20, 1, 20, 3, 20, 1192, 8, 20, 1, 20, 5, 20, 1195, 8, 20, 10, 20, 
		    12, 20, 1198, 9, 20, 3, 20, 1200, 8, 20, 1, 20, 3, 20, 1203, 8, 20, 
		    3, 20, 1205, 8, 20, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 
		    1, 21, 1, 21, 3, 21, 1216, 8, 21, 1, 21, 1, 21, 3, 21, 1220, 8, 21, 
		    1, 21, 3, 21, 1223, 8, 21, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 
		    1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 3, 22, 1237, 8, 22, 1, 22, 
		    3, 22, 1240, 8, 22, 1, 22, 1, 22, 3, 22, 1244, 8, 22, 1, 22, 3, 22, 
		    1247, 8, 22, 1, 22, 1, 22, 3, 22, 1251, 8, 22, 1, 22, 3, 22, 1254, 
		    8, 22, 1, 22, 1, 22, 3, 22, 1258, 8, 22, 1, 22, 3, 22, 1261, 8, 22, 
		    1, 22, 1, 22, 3, 22, 1265, 8, 22, 1, 22, 3, 22, 1268, 8, 22, 1, 22, 
		    3, 22, 1271, 8, 22, 1, 22, 1, 22, 3, 22, 1275, 8, 22, 1, 22, 3, 22, 
		    1278, 8, 22, 1, 22, 1, 22, 3, 22, 1282, 8, 22, 1, 22, 1, 22, 1, 23, 
		    1, 23, 3, 23, 1288, 8, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 
		    1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 3, 23, 1301, 8, 23, 1, 23, 1, 23, 
		    1, 24, 1, 24, 3, 24, 1307, 8, 24, 1, 24, 1, 24, 1, 25, 1, 25, 1, 25, 
		    1, 25, 1, 25, 5, 25, 1316, 8, 25, 10, 25, 12, 25, 1319, 9, 25, 1, 
		    25, 1, 25, 3, 25, 1323, 8, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 
		    1, 25, 3, 25, 1331, 8, 25, 1, 26, 1, 26, 1, 27, 1, 27, 1, 28, 1, 28, 
		    3, 28, 1339, 8, 28, 1, 28, 1, 28, 1, 28, 3, 28, 1344, 8, 28, 1, 28, 
		    3, 28, 1347, 8, 28, 1, 28, 1, 28, 1, 28, 3, 28, 1352, 8, 28, 1, 28, 
		    1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 3, 28, 1360, 8, 28, 1, 28, 1, 28, 
		    1, 28, 3, 28, 1365, 8, 28, 1, 28, 1, 28, 1, 28, 1, 28, 3, 28, 1371, 
		    8, 28, 1, 28, 1, 28, 1, 28, 3, 28, 1376, 8, 28, 1, 28, 1, 28, 3, 28, 
		    1380, 8, 28, 3, 28, 1382, 8, 28, 1, 29, 3, 29, 1385, 8, 29, 1, 29, 
		    1, 29, 3, 29, 1389, 8, 29, 1, 29, 1, 29, 3, 29, 1393, 8, 29, 1, 29, 
		    3, 29, 1396, 8, 29, 1, 29, 1, 29, 3, 29, 1400, 8, 29, 1, 29, 1, 29, 
		    3, 29, 1404, 8, 29, 1, 29, 1, 29, 3, 29, 1408, 8, 29, 1, 29, 1, 29, 
		    1, 29, 1, 29, 3, 29, 1414, 8, 29, 1, 29, 3, 29, 1417, 8, 29, 1, 30, 
		    1, 30, 1, 30, 1, 30, 1, 30, 3, 30, 1424, 8, 30, 1, 31, 1, 31, 1, 31, 
		    3, 31, 1429, 8, 31, 1, 32, 1, 32, 1, 32, 1, 32, 3, 32, 1435, 8, 32, 
		    1, 33, 1, 33, 1, 33, 5, 33, 1440, 8, 33, 10, 33, 12, 33, 1443, 9, 
		    33, 1, 33, 1, 33, 1, 33, 3, 33, 1448, 8, 33, 1, 33, 1, 33, 1, 33, 
		    1, 33, 5, 33, 1454, 8, 33, 10, 33, 12, 33, 1457, 9, 33, 3, 33, 1459, 
		    8, 33, 1, 33, 1, 33, 1, 33, 5, 33, 1464, 8, 33, 10, 33, 12, 33, 1467, 
		    9, 33, 3, 33, 1469, 8, 33, 3, 33, 1471, 8, 33, 1, 34, 1, 34, 1, 34, 
		    1, 34, 3, 34, 1477, 8, 34, 1, 35, 1, 35, 1, 35, 1, 35, 3, 35, 1483, 
		    8, 35, 1, 35, 1, 35, 1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 1, 
		    36, 1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 3, 36, 1500, 8, 36, 
		    1, 37, 1, 37, 1, 37, 1, 37, 1, 37, 3, 37, 1507, 8, 37, 1, 38, 1, 38, 
		    1, 38, 1, 39, 1, 39, 3, 39, 1514, 8, 39, 1, 39, 1, 39, 1, 39, 1, 39, 
		    1, 39, 1, 39, 1, 39, 1, 39, 1, 39, 1, 39, 3, 39, 1526, 8, 39, 1, 39, 
		    1, 39, 1, 39, 3, 39, 1531, 8, 39, 1, 39, 3, 39, 1534, 8, 39, 1, 40, 
		    3, 40, 1537, 8, 40, 1, 40, 1, 40, 1, 40, 1, 41, 1, 41, 1, 41, 1, 42, 
		    1, 42, 1, 42, 1, 42, 1, 42, 3, 42, 1550, 8, 42, 1, 42, 1, 42, 1, 42, 
		    1, 42, 1, 42, 1, 42, 1, 42, 1, 42, 1, 42, 1, 42, 1, 42, 3, 42, 1563, 
		    8, 42, 1, 42, 1, 42, 1, 42, 3, 42, 1568, 8, 42, 1, 43, 1, 43, 1, 43, 
		    1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 
		    43, 1, 43, 3, 43, 1584, 8, 43, 1, 44, 1, 44, 1, 44, 1, 44, 5, 44, 
		    1590, 8, 44, 10, 44, 12, 44, 1593, 9, 44, 1, 44, 1, 44, 1, 45, 1, 
		    45, 1, 45, 1, 45, 1, 45, 3, 45, 1602, 8, 45, 1, 45, 3, 45, 1605, 8, 
		    45, 1, 45, 3, 45, 1608, 8, 45, 1, 46, 1, 46, 5, 46, 1612, 8, 46, 10, 
		    46, 12, 46, 1615, 9, 46, 1, 46, 3, 46, 1618, 8, 46, 1, 46, 3, 46, 
		    1621, 8, 46, 1, 47, 1, 47, 1, 47, 1, 47, 1, 47, 1, 47, 1, 47, 1, 47, 
		    1, 47, 3, 47, 1632, 8, 47, 1, 47, 3, 47, 1635, 8, 47, 1, 47, 1, 47, 
		    1, 47, 3, 47, 1640, 8, 47, 1, 47, 1, 47, 1, 47, 1, 47, 1, 47, 1, 47, 
		    1, 47, 1, 47, 1, 47, 1, 47, 1, 47, 3, 47, 1653, 8, 47, 1, 47, 1, 47, 
		    1, 47, 1, 47, 1, 47, 3, 47, 1660, 8, 47, 1, 47, 1, 47, 1, 47, 1, 47, 
		    1, 47, 3, 47, 1667, 8, 47, 3, 47, 1669, 8, 47, 1, 47, 1, 47, 1, 47, 
		    1, 47, 1, 47, 3, 47, 1676, 8, 47, 1, 48, 1, 48, 3, 48, 1680, 8, 48, 
		    3, 48, 1682, 8, 48, 1, 48, 1, 48, 1, 48, 3, 48, 1687, 8, 48, 1, 48, 
		    3, 48, 1690, 8, 48, 1, 48, 1, 48, 5, 48, 1694, 8, 48, 10, 48, 12, 
		    48, 1697, 9, 48, 1, 48, 1, 48, 3, 48, 1701, 8, 48, 3, 48, 1703, 8, 
		    48, 1, 48, 1, 48, 3, 48, 1707, 8, 48, 1, 48, 3, 48, 1710, 8, 48, 1, 
		    48, 3, 48, 1713, 8, 48, 1, 48, 1, 48, 5, 48, 1717, 8, 48, 10, 48, 
		    12, 48, 1720, 9, 48, 1, 48, 1, 48, 3, 48, 1724, 8, 48, 3, 48, 1726, 
		    8, 48, 1, 48, 1, 48, 1, 48, 3, 48, 1731, 8, 48, 1, 48, 1, 48, 1, 48, 
		    1, 48, 1, 48, 3, 48, 1738, 8, 48, 3, 48, 1740, 8, 48, 1, 48, 1, 48, 
		    1, 48, 1, 48, 1, 48, 3, 48, 1747, 8, 48, 1, 49, 1, 49, 1, 49, 3, 49, 
		    1752, 8, 49, 1, 49, 1, 49, 3, 49, 1756, 8, 49, 1, 49, 3, 49, 1759, 
		    8, 49, 1, 50, 1, 50, 1, 50, 1, 50, 1, 50, 1, 50, 3, 50, 1767, 8, 50, 
		    1, 50, 1, 50, 1, 50, 1, 50, 1, 50, 1, 50, 3, 50, 1775, 8, 50, 3, 50, 
		    1777, 8, 50, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 
		    3, 51, 1787, 8, 51, 1, 52, 1, 52, 3, 52, 1791, 8, 52, 1, 52, 3, 52, 
		    1794, 8, 52, 1, 52, 1, 52, 5, 52, 1798, 8, 52, 10, 52, 12, 52, 1801, 
		    9, 52, 1, 52, 1, 52, 3, 52, 1805, 8, 52, 1, 52, 3, 52, 1808, 8, 52, 
		    1, 52, 1, 52, 5, 52, 1812, 8, 52, 10, 52, 12, 52, 1815, 9, 52, 3, 
		    52, 1817, 8, 52, 1, 53, 1, 53, 3, 53, 1821, 8, 53, 1, 53, 3, 53, 1824, 
		    8, 53, 1, 53, 1, 53, 3, 53, 1828, 8, 53, 1, 53, 1, 53, 1, 53, 3, 53, 
		    1833, 8, 53, 1, 53, 1, 53, 1, 53, 3, 53, 1838, 8, 53, 1, 53, 1, 53, 
		    1, 53, 3, 53, 1843, 8, 53, 1, 53, 1, 53, 3, 53, 1847, 8, 53, 1, 53, 
		    1, 53, 3, 53, 1851, 8, 53, 1, 53, 1, 53, 3, 53, 1855, 8, 53, 1, 53, 
		    1, 53, 3, 53, 1859, 8, 53, 1, 53, 1, 53, 3, 53, 1863, 8, 53, 1, 53, 
		    1, 53, 3, 53, 1867, 8, 53, 1, 53, 1, 53, 1, 53, 3, 53, 1872, 8, 53, 
		    1, 53, 1, 53, 1, 53, 3, 53, 1877, 8, 53, 1, 53, 1, 53, 1, 53, 3, 53, 
		    1882, 8, 53, 1, 53, 1, 53, 1, 53, 1, 53, 3, 53, 1888, 8, 53, 1, 53, 
		    1, 53, 1, 53, 3, 53, 1893, 8, 53, 1, 53, 1, 53, 1, 53, 3, 53, 1898, 
		    8, 53, 1, 53, 1, 53, 1, 53, 3, 53, 1903, 8, 53, 1, 53, 1, 53, 1, 53, 
		    3, 53, 1908, 8, 53, 1, 53, 1, 53, 1, 53, 3, 53, 1913, 8, 53, 1, 53, 
		    1, 53, 1, 53, 1, 53, 3, 53, 1919, 8, 53, 1, 53, 1, 53, 1, 53, 3, 53, 
		    1924, 8, 53, 1, 53, 1, 53, 1, 53, 3, 53, 1929, 8, 53, 1, 53, 1, 53, 
		    1, 53, 3, 53, 1934, 8, 53, 1, 53, 1, 53, 1, 53, 3, 53, 1939, 8, 53, 
		    1, 53, 1, 53, 1, 53, 3, 53, 1944, 8, 53, 1, 53, 1, 53, 1, 53, 3, 53, 
		    1949, 8, 53, 1, 53, 1, 53, 1, 53, 3, 53, 1954, 8, 53, 1, 53, 1, 53, 
		    1, 53, 1, 53, 1, 53, 3, 53, 1961, 8, 53, 1, 53, 1, 53, 1, 53, 3, 53, 
		    1966, 8, 53, 1, 53, 1, 53, 1, 53, 3, 53, 1971, 8, 53, 1, 53, 1, 53, 
		    1, 53, 3, 53, 1976, 8, 53, 1, 53, 1, 53, 3, 53, 1980, 8, 53, 1, 53, 
		    1, 53, 1, 53, 3, 53, 1985, 8, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 
		    1, 53, 3, 53, 1993, 8, 53, 1, 53, 1, 53, 1, 53, 3, 53, 1998, 8, 53, 
		    1, 53, 1, 53, 1, 53, 1, 53, 3, 53, 2004, 8, 53, 1, 54, 1, 54, 1, 55, 
		    1, 55, 1, 55, 1, 56, 1, 56, 1, 56, 1, 56, 1, 56, 3, 56, 2016, 8, 56, 
		    1, 56, 1, 56, 1, 56, 1, 56, 1, 56, 3, 56, 2023, 8, 56, 3, 56, 2025, 
		    8, 56, 1, 56, 1, 56, 1, 56, 1, 56, 5, 56, 2031, 8, 56, 10, 56, 12, 
		    56, 2034, 9, 56, 1, 56, 1, 56, 3, 56, 2038, 8, 56, 1, 57, 3, 57, 2041, 
		    8, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 3, 57, 2049, 8, 57, 
		    1, 57, 1, 57, 1, 57, 1, 57, 3, 57, 2055, 8, 57, 1, 57, 1, 57, 3, 57, 
		    2059, 8, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 
		    1, 57, 1, 57, 1, 57, 3, 57, 2072, 8, 57, 1, 57, 1, 57, 1, 57, 1, 57, 
		    1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 3, 57, 2084, 8, 57, 3, 57, 
		    2086, 8, 57, 1, 58, 3, 58, 2089, 8, 58, 1, 58, 1, 58, 1, 58, 1, 58, 
		    1, 58, 1, 58, 3, 58, 2097, 8, 58, 1, 58, 1, 58, 1, 58, 1, 58, 3, 58, 
		    2103, 8, 58, 1, 58, 1, 58, 1, 58, 1, 58, 3, 58, 2109, 8, 58, 1, 59, 
		    1, 59, 1, 59, 1, 59, 1, 59, 1, 59, 1, 59, 1, 59, 1, 59, 5, 59, 2120, 
		    8, 59, 10, 59, 12, 59, 2123, 9, 59, 1, 59, 1, 59, 5, 59, 2127, 8, 
		    59, 10, 59, 12, 59, 2130, 9, 59, 1, 59, 1, 59, 1, 59, 1, 59, 5, 59, 
		    2136, 8, 59, 10, 59, 12, 59, 2139, 9, 59, 1, 59, 1, 59, 3, 59, 2143, 
		    8, 59, 1, 59, 1, 59, 1, 59, 1, 59, 1, 59, 1, 59, 1, 59, 5, 59, 2152, 
		    8, 59, 10, 59, 12, 59, 2155, 9, 59, 1, 59, 1, 59, 1, 59, 1, 59, 5, 
		    59, 2161, 8, 59, 10, 59, 12, 59, 2164, 9, 59, 1, 59, 1, 59, 3, 59, 
		    2168, 8, 59, 1, 59, 1, 59, 1, 59, 1, 59, 1, 59, 1, 59, 1, 59, 1, 59, 
		    5, 59, 2178, 8, 59, 10, 59, 12, 59, 2181, 9, 59, 1, 59, 1, 59, 5, 
		    59, 2185, 8, 59, 10, 59, 12, 59, 2188, 9, 59, 1, 59, 1, 59, 1, 59, 
		    1, 59, 5, 59, 2194, 8, 59, 10, 59, 12, 59, 2197, 9, 59, 1, 59, 1, 
		    59, 3, 59, 2201, 8, 59, 1, 59, 1, 59, 1, 59, 1, 59, 1, 59, 1, 59, 
		    1, 59, 1, 59, 5, 59, 2211, 8, 59, 10, 59, 12, 59, 2214, 9, 59, 1, 
		    59, 1, 59, 5, 59, 2218, 8, 59, 10, 59, 12, 59, 2221, 9, 59, 1, 59, 
		    1, 59, 1, 59, 1, 59, 5, 59, 2227, 8, 59, 10, 59, 12, 59, 2230, 9, 
		    59, 1, 59, 1, 59, 3, 59, 2234, 8, 59, 1, 59, 1, 59, 1, 59, 5, 59, 
		    2239, 8, 59, 10, 59, 12, 59, 2242, 9, 59, 1, 59, 1, 59, 1, 59, 1, 
		    59, 5, 59, 2248, 8, 59, 10, 59, 12, 59, 2251, 9, 59, 1, 59, 1, 59, 
		    3, 59, 2255, 8, 59, 3, 59, 2257, 8, 59, 1, 60, 1, 60, 1, 60, 3, 60, 
		    2262, 8, 60, 1, 61, 1, 61, 1, 61, 1, 61, 4, 61, 2268, 8, 61, 11, 61, 
		    12, 61, 2269, 1, 61, 1, 61, 1, 62, 1, 62, 1, 62, 5, 62, 2277, 8, 62, 
		    10, 62, 12, 62, 2280, 9, 62, 1, 63, 3, 63, 2283, 8, 63, 1, 63, 3, 
		    63, 2286, 8, 63, 1, 63, 1, 63, 3, 63, 2290, 8, 63, 1, 63, 1, 63, 1, 
		    63, 3, 63, 2295, 8, 63, 1, 63, 1, 63, 1, 63, 1, 63, 3, 63, 2301, 8, 
		    63, 1, 63, 1, 63, 1, 63, 1, 63, 3, 63, 2307, 8, 63, 1, 63, 1, 63, 
		    1, 63, 3, 63, 2312, 8, 63, 1, 63, 1, 63, 1, 63, 3, 63, 2317, 8, 63, 
		    1, 63, 1, 63, 1, 63, 3, 63, 2322, 8, 63, 1, 63, 1, 63, 1, 63, 3, 63, 
		    2327, 8, 63, 1, 63, 3, 63, 2330, 8, 63, 1, 64, 1, 64, 1, 64, 3, 64, 
		    2335, 8, 64, 1, 64, 4, 64, 2338, 8, 64, 11, 64, 12, 64, 2339, 1, 64, 
		    1, 64, 1, 64, 1, 64, 1, 64, 1, 64, 1, 64, 1, 64, 3, 64, 2350, 8, 64, 
		    1, 65, 1, 65, 3, 65, 2354, 8, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 
		    3, 65, 2361, 8, 65, 1, 65, 1, 65, 1, 65, 3, 65, 2366, 8, 65, 1, 65, 
		    3, 65, 2369, 8, 65, 1, 65, 1, 65, 1, 65, 3, 65, 2374, 8, 65, 1, 65, 
		    3, 65, 2377, 8, 65, 1, 65, 1, 65, 3, 65, 2381, 8, 65, 1, 65, 1, 65, 
		    3, 65, 2385, 8, 65, 1, 66, 1, 66, 1, 66, 1, 66, 5, 66, 2391, 8, 66, 
		    10, 66, 12, 66, 2394, 9, 66, 1, 67, 1, 67, 1, 67, 1, 67, 1, 67, 1, 
		    67, 1, 67, 1, 68, 1, 68, 1, 68, 1, 68, 1, 68, 1, 68, 1, 68, 1, 68, 
		    1, 68, 3, 68, 2412, 8, 68, 1, 68, 3, 68, 2415, 8, 68, 1, 68, 3, 68, 
		    2418, 8, 68, 1, 68, 1, 68, 3, 68, 2422, 8, 68, 1, 68, 1, 68, 1, 69, 
		    1, 69, 1, 69, 1, 69, 5, 69, 2430, 8, 69, 10, 69, 12, 69, 2433, 9, 
		    69, 1, 70, 1, 70, 1, 70, 1, 70, 1, 70, 1, 70, 1, 70, 1, 70, 5, 70, 
		    2443, 8, 70, 10, 70, 12, 70, 2446, 9, 70, 1, 70, 1, 70, 1, 71, 1, 
		    71, 3, 71, 2452, 8, 71, 1, 71, 3, 71, 2455, 8, 71, 1, 71, 1, 71, 1, 
		    71, 3, 71, 2460, 8, 71, 1, 71, 1, 71, 1, 71, 5, 71, 2465, 8, 71, 10, 
		    71, 12, 71, 2468, 9, 71, 3, 71, 2470, 8, 71, 1, 71, 3, 71, 2473, 8, 
		    71, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 
		    3, 72, 2484, 8, 72, 1, 72, 3, 72, 2487, 8, 72, 1, 72, 1, 72, 3, 72, 
		    2491, 8, 72, 1, 72, 1, 72, 1, 73, 1, 73, 1, 73, 1, 73, 3, 73, 2499, 
		    8, 73, 1, 73, 3, 73, 2502, 8, 73, 1, 73, 1, 73, 1, 73, 3, 73, 2507, 
		    8, 73, 1, 73, 1, 73, 1, 73, 1, 73, 1, 73, 1, 73, 3, 73, 2515, 8, 73, 
		    1, 73, 1, 73, 1, 73, 1, 73, 3, 73, 2521, 8, 73, 1, 73, 1, 73, 3, 73, 
		    2525, 8, 73, 1, 74, 1, 74, 3, 74, 2529, 8, 74, 1, 74, 5, 74, 2532, 
		    8, 74, 10, 74, 12, 74, 2535, 9, 74, 1, 74, 1, 74, 3, 74, 2539, 8, 
		    74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 3, 74, 2546, 8, 74, 1, 74, 
		    1, 74, 3, 74, 2550, 8, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 
		    1, 74, 5, 74, 2559, 8, 74, 10, 74, 12, 74, 2562, 9, 74, 1, 74, 1, 
		    74, 1, 74, 1, 74, 1, 74, 3, 74, 2569, 8, 74, 1, 74, 3, 74, 2572, 8, 
		    74, 1, 74, 1, 74, 5, 74, 2576, 8, 74, 10, 74, 12, 74, 2579, 9, 74, 
		    1, 74, 1, 74, 1, 74, 3, 74, 2584, 8, 74, 3, 74, 2586, 8, 74, 1, 74, 
		    1, 74, 1, 74, 3, 74, 2591, 8, 74, 1, 74, 3, 74, 2594, 8, 74, 1, 74, 
		    1, 74, 5, 74, 2598, 8, 74, 10, 74, 12, 74, 2601, 9, 74, 1, 74, 1, 
		    74, 1, 74, 3, 74, 2606, 8, 74, 3, 74, 2608, 8, 74, 1, 74, 1, 74, 3, 
		    74, 2612, 8, 74, 1, 74, 3, 74, 2615, 8, 74, 1, 74, 3, 74, 2618, 8, 
		    74, 1, 74, 1, 74, 5, 74, 2622, 8, 74, 10, 74, 12, 74, 2625, 9, 74, 
		    1, 74, 1, 74, 1, 74, 3, 74, 2630, 8, 74, 1, 74, 3, 74, 2633, 8, 74, 
		    1, 74, 1, 74, 5, 74, 2637, 8, 74, 10, 74, 12, 74, 2640, 9, 74, 1, 
		    74, 1, 74, 1, 74, 3, 74, 2645, 8, 74, 3, 74, 2647, 8, 74, 1, 74, 1, 
		    74, 1, 74, 3, 74, 2652, 8, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 
		    1, 74, 3, 74, 2660, 8, 74, 3, 74, 2662, 8, 74, 1, 74, 1, 74, 1, 74, 
		    1, 74, 1, 74, 1, 74, 1, 74, 3, 74, 2671, 8, 74, 1, 74, 3, 74, 2674, 
		    8, 74, 1, 74, 3, 74, 2677, 8, 74, 1, 74, 1, 74, 1, 74, 3, 74, 2682, 
		    8, 74, 3, 74, 2684, 8, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 
		    1, 74, 3, 74, 2693, 8, 74, 1, 74, 3, 74, 2696, 8, 74, 1, 74, 3, 74, 
		    2699, 8, 74, 1, 74, 1, 74, 1, 74, 3, 74, 2704, 8, 74, 3, 74, 2706, 
		    8, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 3, 74, 2715, 
		    8, 74, 1, 74, 1, 74, 1, 74, 3, 74, 2720, 8, 74, 1, 74, 1, 74, 1, 74, 
		    1, 74, 1, 74, 1, 74, 3, 74, 2728, 8, 74, 1, 74, 1, 74, 3, 74, 2732, 
		    8, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 3, 74, 2740, 8, 74, 
		    1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 3, 74, 2750, 
		    8, 74, 1, 74, 1, 74, 1, 74, 3, 74, 2755, 8, 74, 1, 74, 1, 74, 1, 74, 
		    1, 74, 1, 74, 3, 74, 2762, 8, 74, 1, 74, 1, 74, 3, 74, 2766, 8, 74, 
		    1, 74, 1, 74, 3, 74, 2770, 8, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 
		    1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 
		    74, 1, 74, 1, 74, 3, 74, 2789, 8, 74, 1, 74, 1, 74, 1, 74, 1, 74, 
		    1, 74, 1, 74, 1, 74, 1, 74, 3, 74, 2799, 8, 74, 1, 74, 1, 74, 1, 74, 
		    1, 74, 3, 74, 2805, 8, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 
		    1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 3, 
		    74, 2822, 8, 74, 1, 74, 1, 74, 3, 74, 2826, 8, 74, 1, 74, 1, 74, 1, 
		    74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 3, 74, 2836, 8, 74, 1, 74, 
		    1, 74, 1, 74, 3, 74, 2841, 8, 74, 1, 74, 3, 74, 2844, 8, 74, 1, 74, 
		    1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 3, 74, 2853, 8, 74, 1, 74, 
		    1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 3, 74, 2864, 
		    8, 74, 1, 74, 1, 74, 1, 74, 1, 74, 5, 74, 2870, 8, 74, 10, 74, 12, 
		    74, 2873, 9, 74, 1, 74, 1, 74, 1, 74, 3, 74, 2878, 8, 74, 1, 75, 1, 
		    75, 1, 75, 1, 75, 1, 75, 1, 75, 5, 75, 2886, 8, 75, 10, 75, 12, 75, 
		    2889, 9, 75, 1, 75, 1, 75, 1, 75, 1, 75, 1, 75, 1, 75, 1, 75, 1, 75, 
		    1, 75, 3, 75, 2900, 8, 75, 1, 75, 1, 75, 1, 75, 1, 75, 1, 75, 3, 75, 
		    2907, 8, 75, 1, 75, 1, 75, 1, 75, 1, 75, 1, 75, 3, 75, 2914, 8, 75, 
		    1, 75, 1, 75, 1, 75, 1, 75, 1, 75, 1, 75, 1, 75, 1, 75, 1, 75, 1, 
		    75, 1, 75, 5, 75, 2927, 8, 75, 10, 75, 12, 75, 2930, 9, 75, 1, 75, 
		    1, 75, 1, 75, 1, 75, 1, 75, 1, 75, 1, 75, 1, 75, 1, 75, 1, 75, 3, 
		    75, 2942, 8, 75, 1, 75, 1, 75, 1, 75, 1, 75, 3, 75, 2948, 8, 75, 1, 
		    75, 1, 75, 1, 75, 1, 75, 3, 75, 2954, 8, 75, 1, 75, 1, 75, 1, 75, 
		    1, 75, 3, 75, 2960, 8, 75, 1, 75, 1, 75, 1, 75, 1, 75, 3, 75, 2966, 
		    8, 75, 1, 75, 1, 75, 1, 75, 1, 75, 3, 75, 2972, 8, 75, 1, 75, 1, 75, 
		    1, 75, 1, 75, 3, 75, 2978, 8, 75, 1, 76, 1, 76, 1, 76, 3, 76, 2983, 
		    8, 76, 1, 76, 1, 76, 1, 77, 1, 77, 1, 77, 3, 77, 2990, 8, 77, 1, 77, 
		    1, 77, 1, 78, 1, 78, 1, 78, 3, 78, 2997, 8, 78, 1, 78, 1, 78, 1, 78, 
		    1, 78, 1, 78, 3, 78, 3004, 8, 78, 1, 78, 1, 78, 1, 78, 3, 78, 3009, 
		    8, 78, 1, 78, 5, 78, 3012, 8, 78, 10, 78, 12, 78, 3015, 9, 78, 1, 
		    79, 1, 79, 1, 79, 1, 79, 1, 79, 1, 79, 1, 79, 1, 79, 1, 80, 1, 80, 
		    1, 80, 3, 80, 3028, 8, 80, 1, 80, 1, 80, 1, 81, 1, 81, 1, 81, 3, 81, 
		    3035, 8, 81, 1, 81, 1, 81, 1, 82, 1, 82, 1, 82, 3, 82, 3042, 8, 82, 
		    1, 82, 1, 82, 1, 83, 1, 83, 3, 83, 3048, 8, 83, 1, 83, 1, 83, 3, 83, 
		    3052, 8, 83, 1, 83, 1, 83, 3, 83, 3056, 8, 83, 1, 84, 1, 84, 1, 84, 
		    1, 84, 1, 84, 3, 84, 3063, 8, 84, 1, 84, 3, 84, 3066, 8, 84, 1, 85, 
		    1, 85, 1, 85, 3, 85, 3071, 8, 85, 1, 85, 1, 85, 1, 86, 1, 86, 1, 86, 
		    3, 86, 3078, 8, 86, 1, 86, 1, 86, 1, 86, 5, 86, 3083, 8, 86, 10, 86, 
		    12, 86, 3086, 9, 86, 1, 86, 3, 86, 3089, 8, 86, 1, 87, 1, 87, 1, 87, 
		    3, 87, 3094, 8, 87, 1, 87, 1, 87, 1, 87, 5, 87, 3099, 8, 87, 10, 87, 
		    12, 87, 3102, 9, 87, 1, 88, 1, 88, 1, 88, 1, 88, 1, 88, 1, 88, 1, 
		    88, 1, 88, 5, 88, 3112, 8, 88, 10, 88, 12, 88, 3115, 9, 88, 3, 88, 
		    3117, 8, 88, 1, 88, 1, 88, 1, 88, 3, 88, 3122, 8, 88, 1, 88, 1, 88, 
		    1, 88, 3, 88, 3127, 8, 88, 5, 88, 3129, 8, 88, 10, 88, 12, 88, 3132, 
		    9, 88, 1, 88, 1, 88, 1, 88, 3, 88, 3137, 8, 88, 1, 89, 1, 89, 1, 89, 
		    1, 89, 1, 89, 5, 89, 3144, 8, 89, 10, 89, 12, 89, 3147, 9, 89, 1, 
		    90, 1, 90, 1, 90, 1, 90, 1, 91, 1, 91, 3, 91, 3155, 8, 91, 1, 91, 
		    1, 91, 1, 92, 1, 92, 1, 92, 1, 92, 1, 92, 3, 92, 3164, 8, 92, 1, 92, 
		    3, 92, 3167, 8, 92, 1, 93, 1, 93, 3, 93, 3171, 8, 93, 1, 94, 1, 94, 
		    1, 94, 1, 95, 1, 95, 1, 95, 1, 95, 3, 95, 3180, 8, 95, 1, 96, 1, 96, 
		    3, 96, 3184, 8, 96, 1, 96, 3, 96, 3187, 8, 96, 1, 96, 3, 96, 3190, 
		    8, 96, 1, 96, 1, 96, 1, 96, 1, 96, 3, 96, 3196, 8, 96, 1, 96, 3, 96, 
		    3199, 8, 96, 1, 96, 1, 96, 3, 96, 3203, 8, 96, 1, 96, 3, 96, 3206, 
		    8, 96, 1, 96, 1, 96, 3, 96, 3210, 8, 96, 1, 96, 3, 96, 3213, 8, 96, 
		    1, 96, 1, 96, 1, 96, 1, 96, 5, 96, 3219, 8, 96, 10, 96, 12, 96, 3222, 
		    9, 96, 3, 96, 3224, 8, 96, 1, 96, 1, 96, 1, 96, 1, 96, 1, 96, 1, 96, 
		    1, 96, 5, 96, 3233, 8, 96, 10, 96, 12, 96, 3236, 9, 96, 3, 96, 3238, 
		    8, 96, 1, 97, 1, 97, 1, 97, 3, 97, 3243, 8, 97, 1, 97, 3, 97, 3246, 
		    8, 97, 1, 97, 1, 97, 1, 97, 3, 97, 3251, 8, 97, 1, 97, 1, 97, 1, 97, 
		    1, 97, 1, 97, 1, 97, 1, 97, 1, 97, 3, 97, 3261, 8, 97, 1, 97, 1, 97, 
		    1, 97, 3, 97, 3266, 8, 97, 1, 97, 1, 97, 4, 97, 3270, 8, 97, 11, 97, 
		    12, 97, 3271, 3, 97, 3274, 8, 97, 1, 97, 1, 97, 4, 97, 3278, 8, 97, 
		    11, 97, 12, 97, 3279, 3, 97, 3282, 8, 97, 1, 97, 1, 97, 1, 97, 1, 
		    97, 3, 97, 3288, 8, 97, 1, 97, 1, 97, 1, 97, 1, 97, 5, 97, 3294, 8, 
		    97, 10, 97, 12, 97, 3297, 9, 97, 1, 97, 1, 97, 3, 97, 3301, 8, 97, 
		    1, 97, 1, 97, 1, 97, 1, 97, 5, 97, 3307, 8, 97, 10, 97, 12, 97, 3310, 
		    9, 97, 3, 97, 3312, 8, 97, 1, 98, 1, 98, 1, 98, 3, 98, 3317, 8, 98, 
		    1, 98, 3, 98, 3320, 8, 98, 1, 98, 1, 98, 1, 98, 3, 98, 3325, 8, 98, 
		    1, 98, 1, 98, 1, 98, 1, 98, 1, 98, 1, 98, 3, 98, 3333, 8, 98, 1, 98, 
		    1, 98, 1, 98, 1, 98, 1, 98, 1, 98, 3, 98, 3341, 8, 98, 1, 98, 1, 98, 
		    1, 98, 1, 98, 3, 98, 3347, 8, 98, 1, 98, 1, 98, 1, 98, 1, 98, 5, 98, 
		    3353, 8, 98, 10, 98, 12, 98, 3356, 9, 98, 1, 98, 1, 98, 3, 98, 3360, 
		    8, 98, 1, 98, 1, 98, 1, 98, 1, 98, 5, 98, 3366, 8, 98, 10, 98, 12, 
		    98, 3369, 9, 98, 3, 98, 3371, 8, 98, 1, 99, 1, 99, 3, 99, 3375, 8, 
		    99, 1, 99, 3, 99, 3378, 8, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 
		    1, 99, 3, 99, 3386, 8, 99, 1, 99, 1, 99, 1, 99, 1, 99, 3, 99, 3392, 
		    8, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 5, 99, 3399, 8, 99, 10, 
		    99, 12, 99, 3402, 9, 99, 3, 99, 3404, 8, 99, 1, 100, 1, 100, 3, 100, 
		    3408, 8, 100, 1, 100, 1, 100, 3, 100, 3412, 8, 100, 1, 100, 1, 100, 
		    3, 100, 3416, 8, 100, 1, 100, 4, 100, 3419, 8, 100, 11, 100, 12, 100, 
		    3420, 1, 100, 1, 100, 3, 100, 3425, 8, 100, 1, 100, 1, 100, 3, 100, 
		    3429, 8, 100, 3, 100, 3431, 8, 100, 1, 100, 3, 100, 3434, 8, 100, 
		    1, 100, 3, 100, 3437, 8, 100, 1, 100, 3, 100, 3440, 8, 100, 1, 100, 
		    1, 100, 4, 100, 3444, 8, 100, 11, 100, 12, 100, 3445, 1, 100, 1, 100, 
		    3, 100, 3450, 8, 100, 1, 100, 3, 100, 3453, 8, 100, 1, 100, 3, 100, 
		    3456, 8, 100, 1, 100, 3, 100, 3459, 8, 100, 1, 100, 3, 100, 3462, 
		    8, 100, 1, 100, 1, 100, 1, 100, 4, 100, 3467, 8, 100, 11, 100, 12, 
		    100, 3468, 3, 100, 3471, 8, 100, 1, 101, 1, 101, 3, 101, 3475, 8, 
		    101, 1, 102, 1, 102, 1, 102, 3, 102, 3480, 8, 102, 1, 102, 1, 102, 
		    1, 102, 1, 102, 3, 102, 3486, 8, 102, 1, 102, 5, 102, 3489, 8, 102, 
		    10, 102, 12, 102, 3492, 9, 102, 1, 103, 1, 103, 1, 103, 1, 103, 3, 
		    103, 3498, 8, 103, 1, 103, 1, 103, 1, 103, 1, 103, 3, 103, 3504, 8, 
		    103, 1, 103, 5, 103, 3507, 8, 103, 10, 103, 12, 103, 3510, 9, 103, 
		    3, 103, 3512, 8, 103, 1, 104, 1, 104, 1, 104, 1, 104, 3, 104, 3518, 
		    8, 104, 1, 105, 1, 105, 3, 105, 3522, 8, 105, 1, 106, 1, 106, 1, 106, 
		    1, 106, 1, 106, 1, 106, 3, 106, 3530, 8, 106, 1, 107, 1, 107, 3, 107, 
		    3534, 8, 107, 1, 107, 3, 107, 3537, 8, 107, 1, 107, 3, 107, 3540, 
		    8, 107, 1, 107, 1, 107, 1, 107, 3, 107, 3545, 8, 107, 1, 107, 3, 107, 
		    3548, 8, 107, 1, 107, 1, 107, 1, 107, 1, 107, 1, 107, 3, 107, 3555, 
		    8, 107, 1, 107, 1, 107, 3, 107, 3559, 8, 107, 1, 107, 3, 107, 3562, 
		    8, 107, 1, 107, 1, 107, 3, 107, 3566, 8, 107, 1, 108, 1, 108, 3, 108, 
		    3570, 8, 108, 1, 108, 3, 108, 3573, 8, 108, 1, 108, 3, 108, 3576, 
		    8, 108, 1, 108, 1, 108, 1, 108, 3, 108, 3581, 8, 108, 1, 108, 1, 108, 
		    1, 108, 1, 108, 3, 108, 3587, 8, 108, 5, 108, 3589, 8, 108, 10, 108, 
		    12, 108, 3592, 9, 108, 1, 108, 1, 108, 1, 108, 1, 108, 1, 108, 1, 
		    108, 1, 108, 3, 108, 3601, 8, 108, 1, 108, 1, 108, 1, 108, 1, 108, 
		    3, 108, 3607, 8, 108, 5, 108, 3609, 8, 108, 10, 108, 12, 108, 3612, 
		    9, 108, 1, 108, 1, 108, 1, 108, 3, 108, 3617, 8, 108, 1, 108, 1, 108, 
		    3, 108, 3621, 8, 108, 1, 109, 1, 109, 1, 109, 1, 109, 3, 109, 3627, 
		    8, 109, 1, 109, 3, 109, 3630, 8, 109, 1, 110, 1, 110, 1, 110, 1, 110, 
		    1, 110, 1, 110, 1, 110, 1, 110, 1, 110, 1, 110, 3, 110, 3642, 8, 110, 
		    1, 110, 1, 110, 3, 110, 3646, 8, 110, 1, 110, 1, 110, 3, 110, 3650, 
		    8, 110, 1, 111, 1, 111, 1, 111, 1, 111, 1, 111, 1, 111, 3, 111, 3658, 
		    8, 111, 1, 111, 1, 111, 3, 111, 3662, 8, 111, 1, 112, 1, 112, 1, 112, 
		    1, 112, 1, 113, 1, 113, 3, 113, 3670, 8, 113, 1, 113, 3, 113, 3673, 
		    8, 113, 1, 113, 1, 113, 3, 113, 3677, 8, 113, 1, 113, 3, 113, 3680, 
		    8, 113, 1, 113, 1, 113, 1, 113, 1, 113, 5, 113, 3686, 8, 113, 10, 
		    113, 12, 113, 3689, 9, 113, 1, 113, 1, 113, 3, 113, 3693, 8, 113, 
		    1, 113, 3, 113, 3696, 8, 113, 1, 113, 3, 113, 3699, 8, 113, 1, 114, 
		    1, 114, 3, 114, 3703, 8, 114, 1, 114, 3, 114, 3706, 8, 114, 1, 114, 
		    1, 114, 1, 114, 1, 114, 1, 114, 5, 114, 3713, 8, 114, 10, 114, 12, 
		    114, 3716, 9, 114, 1, 114, 1, 114, 3, 114, 3720, 8, 114, 1, 115, 1, 
		    115, 1, 115, 1, 115, 1, 115, 5, 115, 3727, 8, 115, 10, 115, 12, 115, 
		    3730, 9, 115, 1, 116, 1, 116, 3, 116, 3734, 8, 116, 1, 117, 1, 117, 
		    1, 117, 5, 117, 3739, 8, 117, 10, 117, 12, 117, 3742, 9, 117, 1, 118, 
		    1, 118, 5, 118, 3746, 8, 118, 10, 118, 12, 118, 3749, 9, 118, 1, 118, 
		    1, 118, 1, 118, 5, 118, 3754, 8, 118, 10, 118, 12, 118, 3757, 9, 118, 
		    1, 118, 1, 118, 1, 118, 3, 118, 3762, 8, 118, 1, 119, 1, 119, 1, 119, 
		    1, 119, 1, 119, 1, 119, 3, 119, 3770, 8, 119, 1, 119, 3, 119, 3773, 
		    8, 119, 1, 119, 3, 119, 3776, 8, 119, 1, 119, 1, 119, 1, 119, 5, 119, 
		    3781, 8, 119, 10, 119, 12, 119, 3784, 9, 119, 3, 119, 3786, 8, 119, 
		    1, 119, 1, 119, 1, 119, 1, 119, 1, 119, 3, 119, 3793, 8, 119, 1, 119, 
		    3, 119, 3796, 8, 119, 1, 119, 1, 119, 1, 119, 1, 119, 1, 119, 1, 119, 
		    3, 119, 3804, 8, 119, 1, 120, 1, 120, 1, 120, 1, 120, 3, 120, 3810, 
		    8, 120, 1, 120, 1, 120, 1, 120, 1, 120, 1, 121, 1, 121, 1, 121, 1, 
		    121, 1, 121, 3, 121, 3821, 8, 121, 1, 122, 3, 122, 3824, 8, 122, 1, 
		    122, 1, 122, 3, 122, 3828, 8, 122, 1, 122, 1, 122, 5, 122, 3832, 8, 
		    122, 10, 122, 12, 122, 3835, 9, 122, 1, 122, 1, 122, 1, 122, 1, 122, 
		    5, 122, 3841, 8, 122, 10, 122, 12, 122, 3844, 9, 122, 1, 122, 1, 122, 
		    3, 122, 3848, 8, 122, 1, 122, 1, 122, 3, 122, 3852, 8, 122, 1, 122, 
		    1, 122, 5, 122, 3856, 8, 122, 10, 122, 12, 122, 3859, 9, 122, 1, 122, 
		    1, 122, 1, 122, 3, 122, 3864, 8, 122, 3, 122, 3866, 8, 122, 1, 122, 
		    1, 122, 3, 122, 3870, 8, 122, 1, 123, 1, 123, 1, 123, 1, 123, 1, 123, 
		    1, 123, 1, 123, 3, 123, 3879, 8, 123, 1, 124, 1, 124, 1, 124, 1, 124, 
		    1, 124, 1, 124, 1, 124, 1, 124, 3, 124, 3889, 8, 124, 1, 125, 1, 125, 
		    1, 125, 1, 125, 1, 125, 1, 125, 1, 125, 1, 125, 3, 125, 3899, 8, 125, 
		    1, 126, 1, 126, 5, 126, 3903, 8, 126, 10, 126, 12, 126, 3906, 9, 126, 
		    1, 126, 1, 126, 3, 126, 3910, 8, 126, 1, 126, 1, 126, 3, 126, 3914, 
		    8, 126, 1, 126, 3, 126, 3917, 8, 126, 1, 126, 3, 126, 3920, 8, 126, 
		    1, 126, 3, 126, 3923, 8, 126, 1, 126, 3, 126, 3926, 8, 126, 1, 126, 
		    1, 126, 5, 126, 3930, 8, 126, 10, 126, 12, 126, 3933, 9, 126, 1, 126, 
		    1, 126, 1, 126, 3, 126, 3938, 8, 126, 1, 126, 3, 126, 3941, 8, 126, 
		    1, 126, 3, 126, 3944, 8, 126, 1, 126, 3, 126, 3947, 8, 126, 1, 126, 
		    3, 126, 3950, 8, 126, 1, 126, 3, 126, 3953, 8, 126, 3, 126, 3955, 
		    8, 126, 1, 127, 1, 127, 5, 127, 3959, 8, 127, 10, 127, 12, 127, 3962, 
		    9, 127, 1, 127, 1, 127, 1, 127, 3, 127, 3967, 8, 127, 1, 127, 3, 127, 
		    3970, 8, 127, 1, 127, 3, 127, 3973, 8, 127, 1, 127, 3, 127, 3976, 
		    8, 127, 1, 127, 3, 127, 3979, 8, 127, 1, 128, 1, 128, 3, 128, 3983, 
		    8, 128, 1, 128, 1, 128, 1, 129, 1, 129, 3, 129, 3989, 8, 129, 1, 129, 
		    1, 129, 3, 129, 3993, 8, 129, 1, 130, 1, 130, 1, 130, 1, 130, 1, 130, 
		    1, 130, 3, 130, 4001, 8, 130, 1, 130, 1, 130, 3, 130, 4005, 8, 130, 
		    1, 130, 3, 130, 4008, 8, 130, 3, 130, 4010, 8, 130, 1, 131, 1, 131, 
		    1, 131, 1, 131, 1, 131, 1, 131, 1, 131, 1, 131, 1, 131, 1, 131, 1, 
		    131, 3, 131, 4023, 8, 131, 1, 131, 3, 131, 4026, 8, 131, 1, 132, 1, 
		    132, 1, 132, 5, 132, 4031, 8, 132, 10, 132, 12, 132, 4034, 9, 132, 
		    1, 133, 1, 133, 1, 133, 1, 133, 1, 133, 1, 133, 1, 133, 3, 133, 4043, 
		    8, 133, 1, 133, 3, 133, 4046, 8, 133, 1, 133, 1, 133, 1, 133, 3, 133, 
		    4051, 8, 133, 3, 133, 4053, 8, 133, 1, 133, 1, 133, 3, 133, 4057, 
		    8, 133, 1, 133, 1, 133, 1, 133, 1, 133, 1, 133, 1, 133, 3, 133, 4065, 
		    8, 133, 1, 134, 1, 134, 1, 134, 1, 134, 3, 134, 4071, 8, 134, 1, 134, 
		    1, 134, 1, 134, 1, 135, 1, 135, 1, 135, 1, 135, 3, 135, 4080, 8, 135, 
		    1, 135, 1, 135, 1, 135, 1, 136, 1, 136, 1, 136, 1, 136, 1, 136, 1, 
		    136, 1, 136, 1, 136, 3, 136, 4093, 8, 136, 1, 137, 1, 137, 3, 137, 
		    4097, 8, 137, 1, 137, 1, 137, 5, 137, 4101, 8, 137, 10, 137, 12, 137, 
		    4104, 9, 137, 1, 138, 1, 138, 1, 138, 1, 138, 1, 138, 1, 138, 3, 138, 
		    4112, 8, 138, 1, 138, 3, 138, 4115, 8, 138, 1, 138, 1, 138, 3, 138, 
		    4119, 8, 138, 1, 138, 3, 138, 4122, 8, 138, 1, 138, 1, 138, 3, 138, 
		    4126, 8, 138, 1, 138, 1, 138, 3, 138, 4130, 8, 138, 1, 138, 3, 138, 
		    4133, 8, 138, 3, 138, 4135, 8, 138, 1, 139, 1, 139, 1, 139, 1, 139, 
		    5, 139, 4141, 8, 139, 10, 139, 12, 139, 4144, 9, 139, 1, 139, 1, 139, 
		    1, 139, 1, 139, 1, 139, 1, 139, 1, 139, 1, 139, 1, 139, 3, 139, 4155, 
		    8, 139, 1, 139, 1, 139, 4, 139, 4159, 8, 139, 11, 139, 12, 139, 4160, 
		    3, 139, 4163, 8, 139, 1, 139, 1, 139, 4, 139, 4167, 8, 139, 11, 139, 
		    12, 139, 4168, 3, 139, 4171, 8, 139, 3, 139, 4173, 8, 139, 1, 140, 
		    1, 140, 1, 140, 1, 140, 3, 140, 4179, 8, 140, 1, 140, 1, 140, 1, 140, 
		    1, 140, 1, 140, 1, 140, 3, 140, 4187, 8, 140, 1, 141, 1, 141, 1, 141, 
		    1, 141, 1, 141, 1, 141, 3, 141, 4195, 8, 141, 1, 142, 1, 142, 3, 142, 
		    4199, 8, 142, 1, 142, 1, 142, 3, 142, 4203, 8, 142, 1, 143, 1, 143, 
		    1, 143, 1, 143, 1, 143, 5, 143, 4210, 8, 143, 10, 143, 12, 143, 4213, 
		    9, 143, 1, 143, 1, 143, 3, 143, 4217, 8, 143, 1, 144, 1, 144, 1, 144, 
		    1, 145, 1, 145, 1, 145, 1, 145, 1, 145, 1, 145, 1, 145, 1, 145, 1, 
		    145, 1, 145, 1, 145, 1, 145, 1, 145, 5, 145, 4235, 8, 145, 10, 145, 
		    12, 145, 4238, 9, 145, 1, 146, 1, 146, 3, 146, 4242, 8, 146, 1, 147, 
		    1, 147, 1, 147, 1, 147, 3, 147, 4248, 8, 147, 1, 147, 1, 147, 1, 147, 
		    1, 147, 1, 147, 3, 147, 4255, 8, 147, 1, 148, 1, 148, 1, 148, 3, 148, 
		    4260, 8, 148, 1, 149, 1, 149, 1, 149, 1, 149, 1, 149, 5, 149, 4267, 
		    8, 149, 10, 149, 12, 149, 4270, 9, 149, 3, 149, 4272, 8, 149, 1, 150, 
		    1, 150, 3, 150, 4276, 8, 150, 1, 151, 1, 151, 3, 151, 4280, 8, 151, 
		    1, 151, 1, 151, 3, 151, 4284, 8, 151, 1, 151, 3, 151, 4287, 8, 151, 
		    1, 151, 3, 151, 4290, 8, 151, 1, 151, 3, 151, 4293, 8, 151, 1, 152, 
		    1, 152, 3, 152, 4297, 8, 152, 1, 152, 1, 152, 3, 152, 4301, 8, 152, 
		    1, 152, 3, 152, 4304, 8, 152, 1, 152, 3, 152, 4307, 8, 152, 1, 152, 
		    3, 152, 4310, 8, 152, 1, 153, 1, 153, 1, 153, 1, 154, 1, 154, 3, 154, 
		    4317, 8, 154, 1, 154, 1, 154, 3, 154, 4321, 8, 154, 1, 154, 1, 154, 
		    1, 155, 1, 155, 1, 155, 1, 155, 1, 156, 1, 156, 1, 156, 1, 156, 1, 
		    156, 5, 156, 4334, 8, 156, 10, 156, 12, 156, 4337, 9, 156, 1, 156, 
		    3, 156, 4340, 8, 156, 1, 157, 1, 157, 1, 157, 1, 158, 1, 158, 1, 158, 
		    1, 158, 1, 158, 1, 159, 1, 159, 3, 159, 4352, 8, 159, 1, 159, 1, 159, 
		    1, 159, 1, 159, 5, 159, 4358, 8, 159, 10, 159, 12, 159, 4361, 9, 159, 
		    1, 160, 1, 160, 1, 160, 1, 160, 1, 160, 1, 160, 1, 160, 3, 160, 4370, 
		    8, 160, 1, 161, 1, 161, 3, 161, 4374, 8, 161, 1, 161, 3, 161, 4377, 
		    8, 161, 1, 161, 1, 161, 1, 162, 1, 162, 3, 162, 4383, 8, 162, 1, 162, 
		    3, 162, 4386, 8, 162, 1, 162, 3, 162, 4389, 8, 162, 1, 163, 1, 163, 
		    1, 163, 1, 163, 1, 163, 1, 163, 1, 163, 3, 163, 4398, 8, 163, 1, 164, 
		    1, 164, 1, 164, 1, 164, 1, 164, 1, 164, 1, 164, 3, 164, 4407, 8, 164, 
		    1, 165, 1, 165, 1, 165, 1, 165, 1, 165, 1, 165, 5, 165, 4415, 8, 165, 
		    10, 165, 12, 165, 4418, 9, 165, 1, 165, 3, 165, 4421, 8, 165, 1, 166, 
		    1, 166, 1, 166, 1, 166, 1, 166, 1, 166, 5, 166, 4429, 8, 166, 10, 
		    166, 12, 166, 4432, 9, 166, 1, 167, 1, 167, 1, 167, 1, 167, 1, 167, 
		    1, 167, 1, 167, 3, 167, 4441, 8, 167, 1, 168, 1, 168, 1, 168, 1, 169, 
		    1, 169, 1, 169, 3, 169, 4449, 8, 169, 1, 169, 3, 169, 4452, 8, 169, 
		    1, 170, 1, 170, 1, 170, 1, 170, 1, 170, 5, 170, 4459, 8, 170, 10, 
		    170, 12, 170, 4462, 9, 170, 3, 170, 4464, 8, 170, 1, 170, 1, 170, 
		    3, 170, 4468, 8, 170, 1, 170, 5, 170, 4471, 8, 170, 10, 170, 12, 170, 
		    4474, 9, 170, 1, 170, 3, 170, 4477, 8, 170, 1, 171, 1, 171, 1, 171, 
		    1, 171, 1, 171, 5, 171, 4484, 8, 171, 10, 171, 12, 171, 4487, 9, 171, 
		    3, 171, 4489, 8, 171, 1, 172, 1, 172, 1, 172, 1, 173, 1, 173, 1, 173, 
		    1, 174, 1, 174, 1, 174, 1, 174, 1, 174, 1, 174, 1, 174, 1, 174, 1, 
		    174, 1, 174, 1, 174, 1, 174, 1, 174, 1, 174, 1, 174, 1, 174, 1, 174, 
		    1, 174, 1, 174, 1, 174, 1, 174, 5, 174, 4518, 8, 174, 10, 174, 12, 
		    174, 4521, 9, 174, 3, 174, 4523, 8, 174, 1, 174, 3, 174, 4526, 8, 
		    174, 1, 175, 1, 175, 1, 176, 1, 176, 1, 177, 1, 177, 1, 178, 1, 178, 
		    1, 178, 1, 178, 1, 179, 1, 179, 1, 179, 1, 179, 1, 179, 1, 179, 1, 
		    179, 1, 179, 1, 179, 1, 179, 1, 179, 1, 179, 1, 179, 1, 179, 1, 179, 
		    1, 179, 1, 179, 1, 179, 1, 179, 1, 179, 1, 179, 1, 179, 1, 179, 1, 
		    179, 1, 179, 1, 179, 1, 179, 1, 179, 1, 179, 1, 179, 1, 179, 1, 179, 
		    1, 179, 1, 179, 1, 179, 1, 179, 1, 179, 1, 179, 1, 179, 1, 179, 1, 
		    179, 1, 179, 5, 179, 4580, 8, 179, 10, 179, 12, 179, 4583, 9, 179, 
		    1, 179, 1, 179, 3, 179, 4587, 8, 179, 1, 180, 1, 180, 1, 180, 1, 180, 
		    1, 180, 1, 180, 1, 181, 1, 181, 1, 182, 1, 182, 1, 182, 1, 182, 1, 
		    182, 1, 182, 1, 182, 1, 182, 1, 182, 1, 182, 1, 182, 1, 182, 1, 182, 
		    1, 182, 1, 182, 1, 182, 1, 182, 1, 182, 3, 182, 4615, 8, 182, 1, 183, 
		    1, 183, 1, 183, 1, 183, 1, 183, 1, 183, 1, 183, 1, 183, 1, 183, 1, 
		    183, 1, 183, 1, 183, 3, 183, 4629, 8, 183, 1, 184, 1, 184, 1, 184, 
		    5, 184, 4634, 8, 184, 10, 184, 12, 184, 4637, 9, 184, 1, 184, 3, 184, 
		    4640, 8, 184, 1, 185, 1, 185, 1, 185, 1, 185, 3, 185, 4646, 8, 185, 
		    1, 186, 1, 186, 1, 186, 1, 186, 1, 186, 1, 186, 3, 186, 4654, 8, 186, 
		    3, 186, 4656, 8, 186, 1, 187, 1, 187, 1, 187, 1, 187, 1, 188, 1, 188, 
		    1, 188, 1, 188, 1, 188, 3, 188, 4667, 8, 188, 1, 189, 1, 189, 1, 189, 
		    1, 189, 1, 190, 1, 190, 1, 190, 1, 190, 3, 190, 4677, 8, 190, 1, 191, 
		    1, 191, 1, 191, 1, 191, 1, 191, 3, 191, 4684, 8, 191, 1, 192, 1, 192, 
		    1, 192, 1, 192, 3, 192, 4690, 8, 192, 1, 193, 1, 193, 1, 193, 1, 193, 
		    1, 194, 1, 194, 3, 194, 4698, 8, 194, 1, 195, 1, 195, 1, 195, 3, 195, 
		    4703, 8, 195, 1, 195, 1, 195, 1, 195, 1, 195, 5, 195, 4709, 8, 195, 
		    10, 195, 12, 195, 4712, 9, 195, 1, 195, 1, 195, 1, 195, 5, 195, 4717, 
		    8, 195, 10, 195, 12, 195, 4720, 9, 195, 1, 195, 1, 195, 1, 195, 5, 
		    195, 4725, 8, 195, 10, 195, 12, 195, 4728, 9, 195, 1, 195, 1, 195, 
		    1, 195, 5, 195, 4733, 8, 195, 10, 195, 12, 195, 4736, 9, 195, 1, 195, 
		    5, 195, 4739, 8, 195, 10, 195, 12, 195, 4742, 9, 195, 1, 195, 1, 195, 
		    3, 195, 4746, 8, 195, 1, 196, 1, 196, 1, 196, 3, 196, 4751, 8, 196, 
		    1, 196, 4, 196, 4754, 8, 196, 11, 196, 12, 196, 4755, 1, 196, 1, 196, 
		    4, 196, 4760, 8, 196, 11, 196, 12, 196, 4761, 3, 196, 4764, 8, 196, 
		    1, 196, 1, 196, 1, 196, 1, 197, 1, 197, 1, 197, 1, 197, 4, 197, 4773, 
		    8, 197, 11, 197, 12, 197, 4774, 1, 197, 5, 197, 4778, 8, 197, 10, 
		    197, 12, 197, 4781, 9, 197, 1, 197, 1, 197, 4, 197, 4785, 8, 197, 
		    11, 197, 12, 197, 4786, 3, 197, 4789, 8, 197, 1, 197, 1, 197, 1, 197, 
		    1, 198, 1, 198, 1, 198, 1, 199, 1, 199, 1, 199, 1, 200, 1, 200, 1, 
		    200, 3, 200, 4803, 8, 200, 1, 200, 1, 200, 4, 200, 4807, 8, 200, 11, 
		    200, 12, 200, 4808, 1, 200, 1, 200, 1, 200, 3, 200, 4814, 8, 200, 
		    1, 201, 1, 201, 1, 201, 3, 201, 4819, 8, 201, 1, 201, 1, 201, 4, 201, 
		    4823, 8, 201, 11, 201, 12, 201, 4824, 1, 201, 1, 201, 1, 201, 1, 201, 
		    1, 201, 3, 201, 4832, 8, 201, 1, 202, 1, 202, 1, 202, 1, 203, 1, 203, 
		    1, 203, 3, 203, 4840, 8, 203, 1, 203, 1, 203, 1, 203, 1, 203, 4, 203, 
		    4846, 8, 203, 11, 203, 12, 203, 4847, 1, 203, 1, 203, 1, 203, 3, 203, 
		    4853, 8, 203, 1, 204, 1, 204, 1, 204, 1, 204, 3, 204, 4859, 8, 204, 
		    1, 204, 3, 204, 4862, 8, 204, 1, 204, 1, 204, 1, 204, 1, 204, 1, 204, 
		    1, 204, 3, 204, 4870, 8, 204, 1, 205, 1, 205, 1, 205, 1, 205, 1, 205, 
		    3, 205, 4877, 8, 205, 1, 206, 1, 206, 1, 206, 1, 206, 1, 206, 1, 206, 
		    1, 206, 3, 206, 4886, 8, 206, 1, 206, 3, 206, 4889, 8, 206, 1, 207, 
		    1, 207, 1, 207, 1, 207, 1, 207, 1, 207, 1, 208, 1, 208, 1, 208, 1, 
		    208, 1, 208, 1, 208, 1, 208, 5, 208, 4904, 8, 208, 10, 208, 12, 208, 
		    4907, 9, 208, 1, 208, 1, 208, 1, 209, 1, 209, 1, 209, 3, 209, 4914, 
		    8, 209, 1, 209, 1, 209, 1, 209, 1, 209, 1, 209, 1, 209, 3, 209, 4922, 
		    8, 209, 1, 210, 1, 210, 3, 210, 4926, 8, 210, 1, 210, 1, 210, 1, 211, 
		    1, 211, 1, 211, 3, 211, 4933, 8, 211, 1, 211, 1, 211, 4, 211, 4937, 
		    8, 211, 11, 211, 12, 211, 4938, 1, 212, 1, 212, 1, 212, 1, 212, 4, 
		    212, 4945, 8, 212, 11, 212, 12, 212, 4946, 1, 213, 1, 213, 1, 213, 
		    1, 213, 1, 213, 5, 213, 4954, 8, 213, 10, 213, 12, 213, 4957, 9, 213, 
		    1, 213, 1, 213, 1, 213, 3, 213, 4962, 8, 213, 1, 213, 1, 213, 1, 213, 
		    5, 213, 4967, 8, 213, 10, 213, 12, 213, 4970, 9, 213, 1, 213, 1, 213, 
		    1, 213, 1, 213, 3, 213, 4976, 8, 213, 1, 213, 5, 213, 4979, 8, 213, 
		    10, 213, 12, 213, 4982, 9, 213, 3, 213, 4984, 8, 213, 3, 213, 4986, 
		    8, 213, 1, 213, 1, 213, 4, 213, 4990, 8, 213, 11, 213, 12, 213, 4991, 
		    3, 213, 4994, 8, 213, 1, 213, 1, 213, 5, 213, 4998, 8, 213, 10, 213, 
		    12, 213, 5001, 9, 213, 1, 213, 1, 213, 1, 213, 1, 213, 3, 213, 5007, 
		    8, 213, 1, 213, 1, 213, 1, 213, 3, 213, 5012, 8, 213, 1, 213, 1, 213, 
		    3, 213, 5016, 8, 213, 1, 213, 1, 213, 1, 213, 1, 213, 3, 213, 5022, 
		    8, 213, 1, 214, 1, 214, 1, 214, 1, 214, 1, 214, 5, 214, 5029, 8, 214, 
		    10, 214, 12, 214, 5032, 9, 214, 1, 214, 1, 214, 1, 214, 3, 214, 5037, 
		    8, 214, 1, 214, 1, 214, 1, 214, 5, 214, 5042, 8, 214, 10, 214, 12, 
		    214, 5045, 9, 214, 1, 214, 1, 214, 1, 214, 3, 214, 5050, 8, 214, 1, 
		    214, 1, 214, 1, 214, 1, 214, 3, 214, 5056, 8, 214, 1, 214, 5, 214, 
		    5059, 8, 214, 10, 214, 12, 214, 5062, 9, 214, 3, 214, 5064, 8, 214, 
		    3, 214, 5066, 8, 214, 1, 214, 1, 214, 4, 214, 5070, 8, 214, 11, 214, 
		    12, 214, 5071, 3, 214, 5074, 8, 214, 1, 214, 1, 214, 5, 214, 5078, 
		    8, 214, 10, 214, 12, 214, 5081, 9, 214, 1, 214, 1, 214, 1, 214, 1, 
		    214, 3, 214, 5087, 8, 214, 3, 214, 5089, 8, 214, 1, 215, 1, 215, 1, 
		    215, 3, 215, 5094, 8, 215, 1, 215, 1, 215, 1, 215, 5, 215, 5099, 8, 
		    215, 10, 215, 12, 215, 5102, 9, 215, 1, 216, 1, 216, 1, 216, 1, 216, 
		    5, 216, 5108, 8, 216, 10, 216, 12, 216, 5111, 9, 216, 1, 216, 1, 216, 
		    3, 216, 5115, 8, 216, 1, 216, 1, 216, 1, 216, 1, 216, 1, 216, 5, 216, 
		    5122, 8, 216, 10, 216, 12, 216, 5125, 9, 216, 1, 216, 1, 216, 1, 216, 
		    1, 216, 3, 216, 5131, 8, 216, 1, 216, 5, 216, 5134, 8, 216, 10, 216, 
		    12, 216, 5137, 9, 216, 3, 216, 5139, 8, 216, 3, 216, 5141, 8, 216, 
		    1, 216, 1, 216, 1, 216, 1, 216, 5, 216, 5147, 8, 216, 10, 216, 12, 
		    216, 5150, 9, 216, 3, 216, 5152, 8, 216, 1, 216, 1, 216, 1, 216, 1, 
		    216, 1, 216, 1, 216, 3, 216, 5160, 8, 216, 1, 216, 1, 216, 1, 216, 
		    3, 216, 5165, 8, 216, 1, 216, 1, 216, 1, 216, 3, 216, 5170, 8, 216, 
		    5, 216, 5172, 8, 216, 10, 216, 12, 216, 5175, 9, 216, 1, 216, 1, 216, 
		    1, 216, 3, 216, 5180, 8, 216, 1, 216, 1, 216, 1, 216, 3, 216, 5185, 
		    8, 216, 5, 216, 5187, 8, 216, 10, 216, 12, 216, 5190, 9, 216, 1, 216, 
		    1, 216, 1, 216, 3, 216, 5195, 8, 216, 3, 216, 5197, 8, 216, 1, 217, 
		    1, 217, 1, 217, 1, 217, 1, 217, 1, 217, 1, 217, 5, 217, 5206, 8, 217, 
		    10, 217, 12, 217, 5209, 9, 217, 3, 217, 5211, 8, 217, 1, 217, 1, 217, 
		    1, 217, 5, 217, 5216, 8, 217, 10, 217, 12, 217, 5219, 9, 217, 3, 217, 
		    5221, 8, 217, 1, 218, 1, 218, 1, 218, 1, 218, 1, 218, 1, 218, 1, 218, 
		    1, 218, 5, 218, 5231, 8, 218, 10, 218, 12, 218, 5234, 9, 218, 1, 218, 
		    1, 218, 1, 218, 3, 218, 5239, 8, 218, 1, 219, 1, 219, 1, 219, 1, 219, 
		    1, 219, 5, 219, 5246, 8, 219, 10, 219, 12, 219, 5249, 9, 219, 1, 220, 
		    1, 220, 1, 220, 1, 220, 5, 220, 5255, 8, 220, 10, 220, 12, 220, 5258, 
		    9, 220, 1, 220, 1, 220, 3, 220, 5262, 8, 220, 1, 220, 1, 220, 1, 220, 
		    1, 220, 1, 220, 5, 220, 5269, 8, 220, 10, 220, 12, 220, 5272, 9, 220, 
		    1, 220, 1, 220, 1, 220, 3, 220, 5277, 8, 220, 1, 220, 1, 220, 1, 220, 
		    1, 220, 1, 220, 1, 220, 1, 220, 5, 220, 5286, 8, 220, 10, 220, 12, 
		    220, 5289, 9, 220, 1, 220, 1, 220, 1, 220, 3, 220, 5294, 8, 220, 1, 
		    220, 1, 220, 1, 220, 3, 220, 5299, 8, 220, 5, 220, 5301, 8, 220, 10, 
		    220, 12, 220, 5304, 9, 220, 1, 220, 1, 220, 1, 220, 3, 220, 5309, 
		    8, 220, 1, 220, 1, 220, 1, 220, 3, 220, 5314, 8, 220, 5, 220, 5316, 
		    8, 220, 10, 220, 12, 220, 5319, 9, 220, 3, 220, 5321, 8, 220, 1, 221, 
		    1, 221, 1, 221, 1, 221, 1, 221, 1, 221, 1, 221, 1, 221, 5, 221, 5331, 
		    8, 221, 10, 221, 12, 221, 5334, 9, 221, 1, 222, 1, 222, 1, 222, 1, 
		    222, 3, 222, 5340, 8, 222, 1, 222, 1, 222, 1, 222, 3, 222, 5345, 8, 
		    222, 1, 223, 1, 223, 1, 223, 1, 224, 1, 224, 1, 224, 1, 224, 1, 224, 
		    1, 224, 1, 224, 1, 224, 1, 224, 1, 224, 1, 224, 1, 224, 1, 224, 1, 
		    224, 1, 224, 1, 224, 1, 224, 1, 224, 1, 224, 1, 224, 1, 224, 1, 224, 
		    1, 224, 1, 224, 1, 224, 3, 224, 5375, 8, 224, 1, 225, 1, 225, 3, 225, 
		    5379, 8, 225, 1, 225, 1, 225, 1, 225, 3, 225, 5384, 8, 225, 1, 226, 
		    1, 226, 1, 226, 1, 226, 1, 226, 3, 226, 5391, 8, 226, 1, 226, 3, 226, 
		    5394, 8, 226, 1, 226, 1, 226, 1, 226, 1, 226, 3, 226, 5400, 8, 226, 
		    1, 227, 1, 227, 1, 227, 1, 227, 1, 227, 1, 227, 1, 227, 1, 227, 3, 
		    227, 5410, 8, 227, 1, 228, 1, 228, 1, 228, 1, 228, 1, 228, 1, 228, 
		    1, 228, 1, 228, 3, 228, 5420, 8, 228, 1, 229, 1, 229, 1, 229, 1, 229, 
		    1, 229, 1, 229, 1, 229, 1, 229, 3, 229, 5430, 8, 229, 1, 229, 1, 229, 
		    1, 229, 1, 229, 3, 229, 5436, 8, 229, 1, 229, 1, 229, 1, 229, 1, 229, 
		    1, 229, 1, 229, 1, 229, 3, 229, 5445, 8, 229, 1, 229, 1, 229, 1, 229, 
		    1, 229, 3, 229, 5451, 8, 229, 1, 229, 1, 229, 1, 229, 1, 229, 1, 229, 
		    3, 229, 5458, 8, 229, 3, 229, 5460, 8, 229, 1, 230, 1, 230, 1, 230, 
		    1, 231, 1, 231, 1, 231, 1, 231, 1, 231, 3, 231, 5470, 8, 231, 1, 232, 
		    1, 232, 3, 232, 5474, 8, 232, 1, 232, 1, 232, 3, 232, 5478, 8, 232, 
		    1, 232, 1, 232, 1, 232, 1, 232, 1, 232, 1, 232, 1, 232, 1, 232, 3, 
		    232, 5488, 8, 232, 1, 232, 1, 232, 1, 232, 3, 232, 5493, 8, 232, 1, 
		    232, 1, 232, 1, 232, 1, 232, 1, 232, 1, 232, 1, 232, 1, 232, 1, 232, 
		    1, 232, 1, 232, 1, 232, 1, 232, 1, 232, 1, 232, 1, 232, 1, 232, 1, 
		    232, 1, 232, 1, 232, 1, 232, 1, 232, 1, 232, 1, 232, 1, 232, 1, 232, 
		    1, 232, 1, 232, 1, 232, 1, 232, 1, 232, 1, 232, 1, 232, 1, 232, 1, 
		    232, 1, 232, 1, 232, 1, 232, 1, 232, 1, 232, 1, 232, 1, 232, 1, 232, 
		    1, 232, 1, 232, 1, 232, 1, 232, 1, 232, 1, 232, 1, 232, 1, 232, 1, 
		    232, 1, 232, 1, 232, 1, 232, 1, 232, 1, 232, 1, 232, 1, 232, 1, 232, 
		    1, 232, 1, 232, 1, 232, 1, 232, 1, 232, 1, 232, 1, 232, 1, 232, 1, 
		    232, 1, 232, 3, 232, 5565, 8, 232, 1, 233, 1, 233, 1, 233, 1, 233, 
		    1, 233, 1, 233, 1, 233, 1, 233, 1, 233, 1, 233, 1, 233, 1, 233, 1, 
		    233, 1, 233, 1, 233, 1, 233, 3, 233, 5583, 8, 233, 1, 234, 1, 234, 
		    1, 234, 1, 234, 1, 235, 1, 235, 3, 235, 5591, 8, 235, 1, 235, 1, 235, 
		    1, 235, 1, 235, 1, 235, 1, 235, 1, 235, 1, 235, 5, 235, 5601, 8, 235, 
		    10, 235, 12, 235, 5604, 9, 235, 1, 235, 1, 235, 1, 235, 1, 235, 3, 
		    235, 5610, 8, 235, 3, 235, 5612, 8, 235, 1, 235, 1, 235, 1, 235, 1, 
		    235, 1, 235, 1, 235, 5, 235, 5620, 8, 235, 10, 235, 12, 235, 5623, 
		    9, 235, 3, 235, 5625, 8, 235, 1, 236, 1, 236, 1, 236, 1, 236, 5, 236, 
		    5631, 8, 236, 10, 236, 12, 236, 5634, 9, 236, 1, 237, 1, 237, 1, 237, 
		    1, 237, 3, 237, 5640, 8, 237, 1, 238, 1, 238, 3, 238, 5644, 8, 238, 
		    1, 238, 1, 238, 1, 238, 1, 239, 1, 239, 3, 239, 5651, 8, 239, 1, 239, 
		    1, 239, 1, 239, 3, 239, 5656, 8, 239, 1, 239, 3, 239, 5659, 8, 239, 
		    1, 239, 3, 239, 5662, 8, 239, 1, 240, 1, 240, 1, 240, 1, 240, 1, 240, 
		    1, 240, 1, 240, 3, 240, 5671, 8, 240, 1, 241, 1, 241, 3, 241, 5675, 
		    8, 241, 1, 241, 1, 241, 3, 241, 5679, 8, 241, 1, 241, 1, 241, 1, 241, 
		    1, 241, 1, 241, 1, 241, 1, 242, 1, 242, 1, 242, 1, 242, 1, 242, 1, 
		    242, 1, 243, 1, 243, 1, 243, 1, 243, 1, 244, 1, 244, 1, 244, 1, 244, 
		    1, 244, 3, 244, 5702, 8, 244, 1, 244, 1, 244, 1, 244, 1, 244, 1, 244, 
		    3, 244, 5709, 8, 244, 5, 244, 5711, 8, 244, 10, 244, 12, 244, 5714, 
		    9, 244, 1, 244, 1, 244, 1, 244, 1, 244, 3, 244, 5720, 8, 244, 1, 244, 
		    1, 244, 1, 244, 1, 244, 1, 244, 3, 244, 5727, 8, 244, 1, 244, 3, 244, 
		    5730, 8, 244, 1, 244, 1, 244, 1, 244, 1, 244, 1, 244, 1, 244, 1, 244, 
		    1, 244, 1, 244, 1, 244, 1, 244, 1, 244, 5, 244, 5744, 8, 244, 10, 
		    244, 12, 244, 5747, 9, 244, 3, 244, 5749, 8, 244, 1, 245, 1, 245, 
		    1, 245, 1, 245, 1, 245, 1, 245, 1, 245, 1, 245, 3, 245, 5759, 8, 245, 
		    1, 245, 1, 245, 3, 245, 5763, 8, 245, 1, 245, 1, 245, 1, 245, 1, 245, 
		    3, 245, 5769, 8, 245, 1, 245, 3, 245, 5772, 8, 245, 1, 245, 1, 245, 
		    1, 245, 3, 245, 5777, 8, 245, 1, 245, 1, 245, 3, 245, 5781, 8, 245, 
		    1, 245, 1, 245, 1, 245, 1, 245, 1, 245, 3, 245, 5788, 8, 245, 1, 245, 
		    3, 245, 5791, 8, 245, 1, 245, 1, 245, 1, 245, 1, 245, 3, 245, 5797, 
		    8, 245, 1, 245, 1, 245, 1, 245, 1, 245, 1, 245, 1, 245, 1, 245, 1, 
		    245, 1, 245, 1, 245, 1, 245, 1, 245, 1, 245, 1, 245, 1, 245, 1, 245, 
		    1, 245, 1, 245, 1, 245, 1, 245, 1, 245, 1, 245, 3, 245, 5821, 8, 245, 
		    1, 245, 3, 245, 5824, 8, 245, 1, 245, 1, 245, 1, 245, 1, 245, 1, 245, 
		    1, 245, 1, 245, 1, 245, 1, 245, 1, 245, 3, 245, 5836, 8, 245, 1, 245, 
		    3, 245, 5839, 8, 245, 1, 245, 1, 245, 1, 245, 1, 245, 1, 245, 1, 245, 
		    1, 245, 1, 245, 3, 245, 5849, 8, 245, 1, 245, 1, 245, 1, 245, 1, 245, 
		    1, 245, 1, 245, 3, 245, 5857, 8, 245, 1, 245, 1, 245, 3, 245, 5861, 
		    8, 245, 1, 245, 1, 245, 1, 245, 1, 245, 1, 245, 3, 245, 5868, 8, 245, 
		    1, 245, 3, 245, 5871, 8, 245, 1, 245, 1, 245, 1, 245, 1, 245, 1, 245, 
		    5, 245, 5878, 8, 245, 10, 245, 12, 245, 5881, 9, 245, 1, 245, 1, 245, 
		    1, 245, 3, 245, 5886, 8, 245, 1, 245, 1, 245, 1, 245, 1, 245, 3, 245, 
		    5892, 8, 245, 1, 245, 1, 245, 1, 245, 1, 245, 1, 245, 1, 245, 1, 245, 
		    1, 245, 3, 245, 5902, 8, 245, 3, 245, 5904, 8, 245, 1, 246, 1, 246, 
		    1, 246, 1, 246, 3, 246, 5910, 8, 246, 1, 246, 3, 246, 5913, 8, 246, 
		    1, 246, 3, 246, 5916, 8, 246, 1, 247, 1, 247, 1, 247, 1, 247, 1, 247, 
		    1, 247, 1, 247, 1, 247, 1, 247, 1, 247, 3, 247, 5928, 8, 247, 1, 247, 
		    3, 247, 5931, 8, 247, 1, 248, 1, 248, 1, 248, 1, 248, 3, 248, 5937, 
		    8, 248, 1, 249, 3, 249, 5940, 8, 249, 1, 249, 1, 249, 1, 249, 1, 249, 
		    1, 249, 1, 249, 3, 249, 5948, 8, 249, 1, 249, 1, 249, 1, 249, 1, 249, 
		    1, 249, 1, 249, 3, 249, 5956, 8, 249, 1, 250, 1, 250, 1, 250, 1, 250, 
		    3, 250, 5962, 8, 250, 1, 250, 1, 250, 3, 250, 5966, 8, 250, 1, 251, 
		    1, 251, 1, 251, 1, 251, 1, 251, 1, 251, 1, 251, 1, 251, 1, 251, 1, 
		    251, 1, 251, 1, 251, 3, 251, 5980, 8, 251, 1, 252, 1, 252, 1, 252, 
		    1, 253, 1, 253, 1, 253, 1, 253, 1, 253, 5, 253, 5990, 8, 253, 10, 
		    253, 12, 253, 5993, 9, 253, 1, 253, 1, 253, 1, 253, 1, 253, 3, 253, 
		    5999, 8, 253, 1, 253, 3, 253, 6002, 8, 253, 1, 253, 1, 253, 1, 253, 
		    1, 254, 1, 254, 3, 254, 6009, 8, 254, 1, 254, 1, 254, 1, 254, 5, 254, 
		    6014, 8, 254, 10, 254, 12, 254, 6017, 9, 254, 1, 255, 1, 255, 3, 255, 
		    6021, 8, 255, 1, 255, 1, 255, 1, 256, 1, 256, 1, 256, 1, 256, 1, 256, 
		    1, 256, 1, 256, 5, 256, 6032, 8, 256, 10, 256, 12, 256, 6035, 9, 256, 
		    1, 257, 1, 257, 1, 257, 1, 257, 1, 258, 1, 258, 1, 259, 1, 259, 3, 
		    259, 6045, 8, 259, 1, 259, 1, 259, 1, 259, 1, 259, 3, 259, 6051, 8, 
		    259, 1, 260, 1, 260, 1, 260, 3, 260, 6056, 8, 260, 1, 260, 1, 260, 
		    1, 260, 1, 260, 1, 260, 1, 260, 1, 260, 1, 260, 1, 260, 1, 260, 1, 
		    260, 3, 260, 6069, 8, 260, 3, 260, 6071, 8, 260, 1, 260, 1, 260, 1, 
		    260, 3, 260, 6076, 8, 260, 1, 260, 1, 260, 3, 260, 6080, 8, 260, 1, 
		    260, 3, 260, 6083, 8, 260, 3, 260, 6085, 8, 260, 1, 261, 1, 261, 1, 
		    261, 1, 261, 1, 261, 3, 261, 6092, 8, 261, 1, 262, 1, 262, 1, 262, 
		    1, 262, 1, 262, 3, 262, 6099, 8, 262, 1, 262, 3, 262, 6102, 8, 262, 
		    1, 262, 3, 262, 6105, 8, 262, 1, 262, 1, 262, 1, 262, 1, 262, 3, 262, 
		    6111, 8, 262, 1, 262, 1, 262, 3, 262, 6115, 8, 262, 1, 263, 1, 263, 
		    1, 263, 1, 263, 3, 263, 6121, 8, 263, 1, 264, 1, 264, 1, 264, 1, 264, 
		    3, 264, 6127, 8, 264, 1, 264, 1, 264, 1, 265, 1, 265, 1, 265, 1, 266, 
		    1, 266, 1, 266, 1, 267, 1, 267, 1, 267, 3, 267, 6140, 8, 267, 1, 267, 
		    1, 267, 1, 267, 3, 267, 6145, 8, 267, 1, 267, 1, 267, 1, 267, 1, 267, 
		    5, 267, 6151, 8, 267, 10, 267, 12, 267, 6154, 9, 267, 3, 267, 6156, 
		    8, 267, 1, 268, 1, 268, 1, 268, 3, 268, 6161, 8, 268, 1, 268, 1, 268, 
		    1, 268, 3, 268, 6166, 8, 268, 1, 268, 1, 268, 1, 268, 1, 268, 5, 268, 
		    6172, 8, 268, 10, 268, 12, 268, 6175, 9, 268, 3, 268, 6177, 8, 268, 
		    1, 269, 1, 269, 1, 269, 1, 269, 1, 269, 1, 269, 3, 269, 6185, 8, 269, 
		    1, 270, 1, 270, 3, 270, 6189, 8, 270, 1, 270, 1, 270, 1, 270, 5, 270, 
		    6194, 8, 270, 10, 270, 12, 270, 6197, 9, 270, 1, 271, 1, 271, 1, 271, 
		    3, 271, 6202, 8, 271, 1, 271, 3, 271, 6205, 8, 271, 1, 272, 1, 272, 
		    3, 272, 6209, 8, 272, 1, 272, 1, 272, 1, 272, 1, 272, 1, 272, 1, 272, 
		    1, 272, 1, 272, 1, 272, 5, 272, 6220, 8, 272, 10, 272, 12, 272, 6223, 
		    9, 272, 1, 272, 1, 272, 1, 272, 3, 272, 6228, 8, 272, 1, 272, 1, 272, 
		    1, 272, 1, 272, 1, 272, 1, 272, 1, 272, 1, 272, 5, 272, 6238, 8, 272, 
		    10, 272, 12, 272, 6241, 9, 272, 3, 272, 6243, 8, 272, 1, 273, 1, 273, 
		    1, 274, 1, 274, 1, 274, 1, 274, 1, 274, 3, 274, 6252, 8, 274, 1, 274, 
		    1, 274, 1, 274, 3, 274, 6257, 8, 274, 1, 275, 1, 275, 1, 275, 1, 275, 
		    3, 275, 6263, 8, 275, 1, 276, 1, 276, 1, 277, 1, 277, 3, 277, 6269, 
		    8, 277, 1, 278, 1, 278, 1, 278, 3, 278, 6274, 8, 278, 3, 278, 6276, 
		    8, 278, 1, 278, 3, 278, 6279, 8, 278, 1, 278, 1, 278, 3, 278, 6283, 
		    8, 278, 3, 278, 6285, 8, 278, 1, 279, 1, 279, 3, 279, 6289, 8, 279, 
		    1, 279, 1, 279, 1, 279, 1, 279, 3, 279, 6295, 8, 279, 1, 279, 3, 279, 
		    6298, 8, 279, 1, 279, 3, 279, 6301, 8, 279, 1, 280, 1, 280, 1, 280, 
		    1, 280, 3, 280, 6307, 8, 280, 1, 281, 1, 281, 1, 282, 1, 282, 1, 282, 
		    1, 282, 1, 282, 3, 282, 6316, 8, 282, 1, 283, 1, 283, 1, 284, 1, 284, 
		    1, 284, 1, 284, 3, 284, 6324, 8, 284, 1, 285, 1, 285, 3, 285, 6328, 
		    8, 285, 1, 286, 1, 286, 1, 286, 3, 286, 6333, 8, 286, 1, 287, 1, 287, 
		    1, 288, 1, 288, 1, 288, 1, 288, 1, 288, 1, 288, 1, 288, 1, 288, 1, 
		    288, 1, 288, 1, 288, 1, 288, 1, 288, 1, 288, 4, 288, 6351, 8, 288, 
		    11, 288, 12, 288, 6352, 1, 289, 1, 289, 1, 289, 1, 289, 1, 289, 3, 
		    289, 6360, 8, 289, 3, 289, 6362, 8, 289, 1, 290, 1, 290, 1, 290, 4, 
		    290, 6367, 8, 290, 11, 290, 12, 290, 6368, 3, 290, 6371, 8, 290, 1, 
		    291, 1, 291, 3, 291, 6375, 8, 291, 1, 292, 1, 292, 1, 292, 3, 292, 
		    6380, 8, 292, 1, 293, 1, 293, 1, 293, 1, 293, 1, 293, 1, 293, 1, 293, 
		    1, 293, 1, 293, 3, 293, 6391, 8, 293, 1, 294, 1, 294, 1, 294, 3, 294, 
		    6396, 8, 294, 1, 295, 1, 295, 1, 296, 1, 296, 3, 296, 6402, 8, 296, 
		    1, 297, 3, 297, 6405, 8, 297, 1, 297, 1, 297, 3, 297, 6409, 8, 297, 
		    1, 297, 4, 297, 6412, 8, 297, 11, 297, 12, 297, 6413, 1, 297, 3, 297, 
		    6417, 8, 297, 1, 297, 1, 297, 3, 297, 6421, 8, 297, 1, 297, 1, 297, 
		    3, 297, 6425, 8, 297, 3, 297, 6427, 8, 297, 1, 298, 1, 298, 1, 299, 
		    3, 299, 6432, 8, 299, 1, 299, 1, 299, 1, 300, 3, 300, 6437, 8, 300, 
		    1, 300, 1, 300, 1, 301, 1, 301, 1, 301, 1, 301, 1, 301, 1, 301, 1, 
		    301, 1, 301, 1, 301, 3, 301, 6450, 8, 301, 1, 301, 3, 301, 6453, 8, 
		    301, 1, 302, 1, 302, 3, 302, 6457, 8, 302, 1, 302, 3, 302, 6460, 8, 
		    302, 1, 302, 3, 302, 6463, 8, 302, 1, 302, 1, 302, 1, 302, 3, 302, 
		    6468, 8, 302, 1, 302, 1, 302, 1, 302, 3, 302, 6473, 8, 302, 1, 302, 
		    1, 302, 1, 302, 1, 302, 3, 302, 6479, 8, 302, 1, 302, 3, 302, 6482, 
		    8, 302, 1, 302, 1, 302, 1, 302, 3, 302, 6487, 8, 302, 1, 302, 3, 302, 
		    6490, 8, 302, 1, 302, 1, 302, 1, 302, 3, 302, 6495, 8, 302, 1, 302, 
		    3, 302, 6498, 8, 302, 1, 302, 1, 302, 3, 302, 6502, 8, 302, 1, 302, 
		    5, 302, 6505, 8, 302, 10, 302, 12, 302, 6508, 9, 302, 1, 302, 1, 302, 
		    3, 302, 6512, 8, 302, 1, 302, 5, 302, 6515, 8, 302, 10, 302, 12, 302, 
		    6518, 9, 302, 1, 302, 1, 302, 3, 302, 6522, 8, 302, 1, 302, 3, 302, 
		    6525, 8, 302, 1, 302, 5, 302, 6528, 8, 302, 10, 302, 12, 302, 6531, 
		    9, 302, 1, 302, 1, 302, 3, 302, 6535, 8, 302, 1, 302, 5, 302, 6538, 
		    8, 302, 10, 302, 12, 302, 6541, 9, 302, 1, 302, 1, 302, 1, 302, 3, 
		    302, 6546, 8, 302, 1, 302, 1, 302, 1, 302, 3, 302, 6551, 8, 302, 1, 
		    302, 1, 302, 1, 302, 3, 302, 6556, 8, 302, 1, 302, 1, 302, 1, 302, 
		    3, 302, 6561, 8, 302, 1, 302, 1, 302, 3, 302, 6565, 8, 302, 1, 302, 
		    3, 302, 6568, 8, 302, 1, 302, 1, 302, 1, 302, 3, 302, 6573, 8, 302, 
		    1, 302, 1, 302, 3, 302, 6577, 8, 302, 1, 302, 1, 302, 3, 302, 6581, 
		    8, 302, 1, 303, 1, 303, 1, 303, 1, 303, 5, 303, 6587, 8, 303, 10, 
		    303, 12, 303, 6590, 9, 303, 1, 303, 1, 303, 1, 304, 1, 304, 3, 304, 
		    6596, 8, 304, 1, 304, 1, 304, 3, 304, 6600, 8, 304, 1, 304, 1, 304, 
		    1, 304, 3, 304, 6605, 8, 304, 1, 304, 1, 304, 1, 304, 3, 304, 6610, 
		    8, 304, 1, 304, 1, 304, 3, 304, 6614, 8, 304, 3, 304, 6616, 8, 304, 
		    1, 304, 3, 304, 6619, 8, 304, 1, 305, 1, 305, 1, 305, 1, 305, 1, 306, 
		    1, 306, 1, 306, 1, 306, 1, 306, 1, 306, 1, 307, 1, 307, 1, 307, 1, 
		    307, 3, 307, 6635, 8, 307, 1, 307, 1, 307, 1, 308, 1, 308, 1, 308, 
		    5, 308, 6642, 8, 308, 10, 308, 12, 308, 6645, 9, 308, 1, 309, 1, 309, 
		    1, 309, 5, 309, 6650, 8, 309, 10, 309, 12, 309, 6653, 9, 309, 1, 310, 
		    1, 310, 1, 310, 5, 310, 6658, 8, 310, 10, 310, 12, 310, 6661, 9, 310, 
		    1, 311, 1, 311, 1, 311, 1, 311, 5, 311, 6667, 8, 311, 10, 311, 12, 
		    311, 6670, 9, 311, 1, 311, 1, 311, 1, 312, 1, 312, 1, 312, 5, 312, 
		    6677, 8, 312, 10, 312, 12, 312, 6680, 9, 312, 1, 313, 1, 313, 1, 313, 
		    5, 313, 6685, 8, 313, 10, 313, 12, 313, 6688, 9, 313, 1, 314, 1, 314, 
		    1, 314, 5, 314, 6693, 8, 314, 10, 314, 12, 314, 6696, 9, 314, 1, 315, 
		    1, 315, 1, 315, 5, 315, 6701, 8, 315, 10, 315, 12, 315, 6704, 9, 315, 
		    1, 316, 1, 316, 1, 316, 5, 316, 6709, 8, 316, 10, 316, 12, 316, 6712, 
		    9, 316, 1, 317, 1, 317, 1, 317, 1, 317, 1, 317, 1, 317, 1, 317, 1, 
		    317, 1, 317, 3, 317, 6723, 8, 317, 1, 317, 1, 317, 1, 317, 1, 317, 
		    1, 317, 3, 317, 6730, 8, 317, 1, 317, 1, 317, 1, 317, 1, 317, 1, 317, 
		    1, 317, 1, 317, 1, 317, 3, 317, 6740, 8, 317, 1, 318, 1, 318, 1, 318, 
		    3, 318, 6745, 8, 318, 1, 318, 3, 318, 6748, 8, 318, 1, 318, 1, 318, 
		    1, 318, 3, 318, 6753, 8, 318, 1, 318, 3, 318, 6756, 8, 318, 1, 319, 
		    1, 319, 3, 319, 6760, 8, 319, 1, 320, 1, 320, 1, 320, 1, 321, 1, 321, 
		    1, 321, 1, 321, 1, 322, 1, 322, 1, 322, 1, 323, 1, 323, 1, 323, 3, 
		    323, 6775, 8, 323, 1, 324, 1, 324, 1, 324, 1, 324, 1, 324, 1, 324, 
		    3, 324, 6783, 8, 324, 1, 324, 1, 324, 1, 324, 1, 324, 1, 324, 3, 324, 
		    6790, 8, 324, 1, 324, 1, 324, 1, 324, 3, 324, 6795, 8, 324, 1, 325, 
		    1, 325, 1, 325, 3, 325, 6800, 8, 325, 1, 325, 1, 325, 1, 325, 1, 325, 
		    1, 325, 1, 325, 1, 325, 1, 325, 1, 325, 1, 325, 1, 325, 1, 325, 1, 
		    325, 1, 325, 1, 325, 1, 325, 1, 325, 1, 325, 1, 325, 1, 325, 1, 325, 
		    1, 325, 1, 325, 1, 325, 1, 325, 1, 325, 1, 325, 1, 325, 1, 325, 1, 
		    325, 4, 325, 6832, 8, 325, 11, 325, 12, 325, 6833, 1, 325, 1, 325, 
		    3, 325, 6838, 8, 325, 1, 325, 1, 325, 1, 325, 1, 325, 4, 325, 6844, 
		    8, 325, 11, 325, 12, 325, 6845, 1, 325, 1, 325, 3, 325, 6850, 8, 325, 
		    1, 325, 1, 325, 1, 325, 1, 325, 1, 325, 1, 325, 1, 325, 3, 325, 6859, 
		    8, 325, 1, 325, 1, 325, 1, 325, 1, 325, 1, 325, 1, 325, 3, 325, 6867, 
		    8, 325, 1, 325, 1, 325, 1, 325, 3, 325, 6872, 8, 325, 1, 325, 1, 325, 
		    1, 325, 1, 325, 1, 325, 1, 325, 3, 325, 6880, 8, 325, 1, 325, 1, 325, 
		    1, 325, 3, 325, 6885, 8, 325, 1, 325, 1, 325, 1, 325, 3, 325, 6890, 
		    8, 325, 3, 325, 6892, 8, 325, 1, 325, 1, 325, 1, 325, 1, 325, 1, 325, 
		    1, 325, 1, 325, 3, 325, 6901, 8, 325, 1, 325, 1, 325, 1, 325, 3, 325, 
		    6906, 8, 325, 1, 325, 1, 325, 1, 325, 1, 325, 1, 325, 1, 325, 3, 325, 
		    6914, 8, 325, 1, 325, 1, 325, 1, 325, 3, 325, 6919, 8, 325, 1, 325, 
		    1, 325, 1, 325, 1, 325, 1, 325, 1, 325, 3, 325, 6927, 8, 325, 1, 325, 
		    1, 325, 1, 325, 1, 325, 1, 325, 1, 325, 3, 325, 6935, 8, 325, 1, 325, 
		    3, 325, 6938, 8, 325, 1, 325, 1, 325, 1, 325, 1, 325, 1, 325, 1, 325, 
		    1, 325, 1, 325, 3, 325, 6948, 8, 325, 1, 325, 1, 325, 1, 325, 1, 325, 
		    1, 325, 1, 325, 1, 325, 1, 325, 1, 325, 1, 325, 1, 325, 1, 325, 1, 
		    325, 1, 325, 1, 325, 1, 325, 3, 325, 6966, 8, 325, 1, 325, 3, 325, 
		    6969, 8, 325, 1, 325, 3, 325, 6972, 8, 325, 1, 325, 1, 325, 3, 325, 
		    6976, 8, 325, 1, 326, 1, 326, 1, 326, 1, 326, 1, 326, 1, 327, 1, 327, 
		    1, 327, 1, 327, 5, 327, 6987, 8, 327, 10, 327, 12, 327, 6990, 9, 327, 
		    1, 327, 1, 327, 1, 327, 1, 327, 1, 327, 3, 327, 6997, 8, 327, 1, 328, 
		    1, 328, 3, 328, 7001, 8, 328, 1, 329, 1, 329, 1, 329, 3, 329, 7006, 
		    8, 329, 1, 329, 1, 329, 1, 329, 3, 329, 7011, 8, 329, 1, 329, 1, 329, 
		    1, 329, 1, 329, 3, 329, 7017, 8, 329, 1, 329, 1, 329, 1, 329, 3, 329, 
		    7022, 8, 329, 1, 329, 1, 329, 3, 329, 7026, 8, 329, 1, 329, 1, 329, 
		    1, 329, 3, 329, 7031, 8, 329, 1, 329, 1, 329, 1, 329, 3, 329, 7036, 
		    8, 329, 1, 329, 1, 329, 1, 329, 3, 329, 7041, 8, 329, 1, 329, 1, 329, 
		    1, 329, 1, 329, 1, 329, 1, 329, 5, 329, 7049, 8, 329, 10, 329, 12, 
		    329, 7052, 9, 329, 3, 329, 7054, 8, 329, 1, 329, 1, 329, 3, 329, 7058, 
		    8, 329, 1, 329, 1, 329, 3, 329, 7062, 8, 329, 1, 330, 1, 330, 1, 330, 
		    1, 330, 1, 330, 3, 330, 7069, 8, 330, 1, 330, 1, 330, 3, 330, 7073, 
		    8, 330, 1, 330, 1, 330, 1, 330, 1, 330, 1, 330, 1, 330, 1, 330, 1, 
		    330, 1, 330, 1, 330, 1, 330, 1, 330, 1, 330, 1, 330, 1, 330, 1, 330, 
		    1, 330, 1, 330, 1, 330, 1, 330, 1, 330, 1, 330, 1, 330, 1, 330, 1, 
		    330, 1, 330, 1, 330, 3, 330, 7102, 8, 330, 1, 331, 1, 331, 1, 331, 
		    1, 331, 1, 331, 1, 331, 3, 331, 7110, 8, 331, 1, 332, 3, 332, 7113, 
		    8, 332, 1, 332, 3, 332, 7116, 8, 332, 1, 332, 3, 332, 7119, 8, 332, 
		    1, 332, 3, 332, 7122, 8, 332, 1, 333, 1, 333, 1, 334, 1, 334, 1, 334, 
		    1, 335, 1, 335, 1, 336, 1, 336, 3, 336, 7133, 8, 336, 1, 337, 1, 337, 
		    1, 337, 1, 337, 1, 337, 1, 338, 1, 338, 1, 338, 1, 338, 1, 338, 1, 
		    338, 1, 338, 3, 338, 7147, 8, 338, 1, 339, 1, 339, 1, 339, 1, 339, 
		    1, 339, 5, 339, 7154, 8, 339, 10, 339, 12, 339, 7157, 9, 339, 1, 340, 
		    1, 340, 1, 340, 1, 340, 1, 340, 1, 340, 1, 340, 1, 340, 1, 340, 1, 
		    340, 1, 340, 1, 340, 1, 340, 1, 340, 1, 340, 1, 340, 1, 340, 1, 340, 
		    1, 340, 1, 340, 1, 340, 1, 340, 1, 340, 1, 340, 3, 340, 7183, 8, 340, 
		    1, 341, 1, 341, 1, 341, 1, 341, 1, 341, 1, 342, 1, 342, 1, 342, 1, 
		    342, 3, 342, 7194, 8, 342, 1, 342, 1, 342, 1, 342, 1, 342, 1, 342, 
		    3, 342, 7201, 8, 342, 5, 342, 7203, 8, 342, 10, 342, 12, 342, 7206, 
		    9, 342, 1, 343, 1, 343, 1, 343, 1, 343, 3, 343, 7212, 8, 343, 1, 344, 
		    1, 344, 1, 344, 1, 344, 1, 344, 1, 344, 3, 344, 7220, 8, 344, 1, 344, 
		    1, 344, 1, 344, 3, 344, 7225, 8, 344, 1, 344, 1, 344, 1, 344, 1, 344, 
		    5, 344, 7231, 8, 344, 10, 344, 12, 344, 7234, 9, 344, 1, 345, 1, 345, 
		    1, 345, 1, 345, 1, 345, 1, 345, 1, 345, 1, 345, 1, 345, 3, 345, 7245, 
		    8, 345, 1, 345, 1, 345, 1, 345, 1, 345, 1, 345, 1, 345, 1, 345, 1, 
		    345, 1, 345, 1, 345, 1, 345, 3, 345, 7258, 8, 345, 1, 345, 1, 345, 
		    1, 345, 1, 345, 3, 345, 7264, 8, 345, 1, 345, 1, 345, 1, 345, 1, 345, 
		    3, 345, 7270, 8, 345, 1, 345, 1, 345, 1, 345, 1, 345, 1, 345, 1, 345, 
		    1, 345, 1, 345, 1, 345, 1, 345, 1, 345, 1, 345, 1, 345, 1, 345, 3, 
		    345, 7286, 8, 345, 1, 345, 1, 345, 1, 345, 1, 345, 3, 345, 7292, 8, 
		    345, 1, 345, 1, 345, 1, 345, 1, 345, 1, 345, 1, 345, 1, 345, 5, 345, 
		    7301, 8, 345, 10, 345, 12, 345, 7304, 9, 345, 1, 346, 1, 346, 1, 346, 
		    1, 346, 1, 346, 1, 346, 1, 346, 1, 346, 1, 346, 1, 346, 1, 346, 1, 
		    346, 1, 346, 1, 346, 1, 346, 1, 346, 1, 346, 5, 346, 7323, 8, 346, 
		    10, 346, 12, 346, 7326, 9, 346, 1, 346, 1, 346, 1, 346, 1, 346, 1, 
		    346, 1, 346, 1, 346, 4, 346, 7335, 8, 346, 11, 346, 12, 346, 7336, 
		    1, 346, 1, 346, 1, 346, 1, 346, 1, 346, 1, 346, 1, 346, 1, 346, 1, 
		    346, 1, 346, 1, 346, 1, 346, 1, 346, 1, 346, 1, 346, 3, 346, 7354, 
		    8, 346, 1, 346, 1, 346, 1, 346, 1, 346, 1, 346, 1, 346, 1, 346, 1, 
		    346, 1, 346, 1, 346, 1, 346, 1, 346, 1, 346, 1, 346, 1, 346, 1, 346, 
		    1, 346, 1, 346, 1, 346, 5, 346, 7375, 8, 346, 10, 346, 12, 346, 7378, 
		    9, 346, 1, 347, 1, 347, 1, 348, 1, 348, 1, 348, 1, 348, 1, 348, 1, 
		    348, 1, 348, 1, 348, 1, 348, 1, 348, 1, 348, 1, 348, 1, 348, 1, 348, 
		    3, 348, 7396, 8, 348, 1, 349, 1, 349, 1, 349, 1, 349, 1, 349, 1, 349, 
		    1, 349, 3, 349, 7405, 8, 349, 1, 350, 1, 350, 1, 350, 1, 350, 1, 350, 
		    1, 350, 1, 350, 3, 350, 7414, 8, 350, 1, 351, 1, 351, 1, 352, 1, 352, 
		    1, 353, 1, 353, 1, 353, 1, 353, 1, 353, 3, 353, 7425, 8, 353, 1, 354, 
		    1, 354, 1, 355, 1, 355, 1, 356, 1, 356, 1, 357, 1, 357, 1, 358, 1, 
		    358, 1, 359, 1, 359, 1, 360, 1, 360, 1, 360, 0, 3, 688, 690, 692, 
		    361, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 
		    34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 
		    68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 
		    102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 
		    130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 
		    158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 
		    186, 188, 190, 192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 
		    214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 
		    242, 244, 246, 248, 250, 252, 254, 256, 258, 260, 262, 264, 266, 268, 
		    270, 272, 274, 276, 278, 280, 282, 284, 286, 288, 290, 292, 294, 296, 
		    298, 300, 302, 304, 306, 308, 310, 312, 314, 316, 318, 320, 322, 324, 
		    326, 328, 330, 332, 334, 336, 338, 340, 342, 344, 346, 348, 350, 352, 
		    354, 356, 358, 360, 362, 364, 366, 368, 370, 372, 374, 376, 378, 380, 
		    382, 384, 386, 388, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 
		    410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 
		    438, 440, 442, 444, 446, 448, 450, 452, 454, 456, 458, 460, 462, 464, 
		    466, 468, 470, 472, 474, 476, 478, 480, 482, 484, 486, 488, 490, 492, 
		    494, 496, 498, 500, 502, 504, 506, 508, 510, 512, 514, 516, 518, 520, 
		    522, 524, 526, 528, 530, 532, 534, 536, 538, 540, 542, 544, 546, 548, 
		    550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 574, 576, 
		    578, 580, 582, 584, 586, 588, 590, 592, 594, 596, 598, 600, 602, 604, 
		    606, 608, 610, 612, 614, 616, 618, 620, 622, 624, 626, 628, 630, 632, 
		    634, 636, 638, 640, 642, 644, 646, 648, 650, 652, 654, 656, 658, 660, 
		    662, 664, 666, 668, 670, 672, 674, 676, 678, 680, 682, 684, 686, 688, 
		    690, 692, 694, 696, 698, 700, 702, 704, 706, 708, 710, 712, 714, 716, 
		    718, 720, 0, 144, 2, 0, 39, 39, 150, 150, 2, 0, 531, 531, 537, 537, 
		    3, 0, 69, 69, 159, 159, 181, 181, 3, 0, 42, 42, 384, 384, 454, 454, 
		    4, 0, 42, 42, 419, 419, 529, 529, 611, 611, 2, 0, 514, 514, 1148, 
		    1148, 2, 0, 78, 78, 141, 141, 2, 0, 15, 15, 334, 334, 3, 0, 44, 44, 
		    85, 85, 184, 184, 2, 0, 434, 434, 558, 558, 3, 0, 506, 506, 650, 650, 
		    658, 658, 2, 0, 392, 392, 460, 460, 2, 0, 352, 352, 474, 474, 2, 0, 
		    42, 42, 1138, 1139, 2, 0, 350, 350, 443, 443, 2, 0, 459, 459, 673, 
		    673, 3, 0, 80, 80, 84, 84, 125, 125, 3, 0, 42, 42, 402, 402, 431, 
		    431, 3, 0, 42, 42, 398, 398, 792, 792, 2, 0, 637, 637, 672, 672, 2, 
		    0, 81, 81, 91, 91, 3, 0, 436, 436, 548, 548, 613, 613, 2, 0, 69, 69, 
		    159, 159, 1, 0, 356, 357, 1, 0, 1138, 1139, 2, 0, 1148, 1148, 1156, 
		    1156, 2, 0, 81, 81, 388, 388, 2, 0, 545, 545, 1148, 1148, 2, 0, 546, 
		    546, 1148, 1148, 3, 0, 430, 430, 469, 469, 521, 521, 7, 0, 42, 42, 
		    370, 370, 372, 372, 402, 402, 431, 431, 573, 573, 1156, 1156, 2, 0, 
		    514, 514, 530, 530, 1, 0, 1139, 1140, 2, 0, 5, 5, 51, 51, 4, 0, 42, 
		    42, 384, 384, 454, 454, 458, 458, 2, 0, 26, 26, 30, 30, 2, 0, 12, 
		    12, 175, 175, 2, 0, 192, 192, 677, 677, 2, 0, 21, 21, 144, 144, 3, 
		    0, 43, 43, 75, 75, 106, 106, 2, 0, 106, 106, 374, 374, 2, 0, 365, 
		    365, 427, 427, 2, 0, 101, 101, 601, 601, 2, 0, 43, 43, 106, 106, 2, 
		    0, 6, 6, 49, 49, 2, 0, 188, 188, 669, 669, 4, 0, 430, 430, 469, 469, 
		    520, 520, 562, 562, 2, 0, 430, 430, 520, 520, 2, 0, 13, 13, 45, 45, 
		    3, 0, 66, 66, 78, 78, 186, 186, 2, 0, 34, 34, 83, 83, 2, 0, 97, 97, 
		    148, 148, 2, 0, 6, 6, 49, 50, 1, 0, 626, 627, 2, 0, 172, 172, 742, 
		    742, 2, 0, 439, 439, 609, 609, 2, 0, 226, 226, 477, 477, 5, 0, 107, 
		    107, 482, 483, 485, 485, 489, 497, 575, 575, 4, 0, 479, 480, 484, 
		    484, 486, 487, 576, 576, 3, 0, 108, 108, 478, 478, 488, 488, 2, 0, 
		    462, 462, 628, 628, 2, 0, 622, 622, 624, 624, 2, 0, 344, 344, 629, 
		    629, 2, 0, 90, 90, 591, 591, 2, 0, 51, 51, 390, 390, 3, 0, 31, 31, 
		    61, 61, 179, 179, 3, 0, 131, 131, 172, 172, 437, 437, 3, 0, 12, 12, 
		    19, 19, 187, 187, 2, 0, 42, 42, 121, 121, 2, 0, 103, 103, 182, 182, 
		    2, 0, 360, 360, 614, 614, 2, 0, 40, 40, 671, 671, 2, 0, 115, 115, 
		    474, 474, 2, 0, 422, 422, 568, 568, 4, 0, 206, 206, 208, 208, 214, 
		    214, 638, 638, 2, 0, 1108, 1108, 1124, 1124, 2, 0, 345, 345, 577, 
		    577, 2, 0, 68, 68, 80, 80, 6, 0, 131, 131, 172, 172, 177, 177, 415, 
		    415, 437, 437, 671, 671, 2, 0, 513, 513, 634, 634, 2, 0, 412, 412, 
		    675, 675, 2, 0, 131, 131, 437, 437, 3, 0, 81, 81, 92, 92, 452, 452, 
		    3, 0, 439, 439, 474, 474, 609, 609, 2, 0, 634, 634, 670, 670, 2, 0, 
		    376, 376, 567, 567, 6, 0, 226, 226, 409, 409, 411, 411, 438, 438, 
		    574, 574, 615, 615, 2, 0, 45, 46, 62, 62, 3, 0, 422, 422, 550, 550, 
		    885, 885, 2, 0, 466, 466, 652, 652, 10, 0, 359, 359, 367, 367, 378, 
		    380, 387, 387, 507, 507, 515, 515, 639, 639, 646, 646, 836, 836, 1005, 
		    1005, 2, 0, 35, 35, 168, 168, 2, 0, 117, 117, 996, 996, 11, 0, 359, 
		    359, 367, 367, 378, 380, 387, 387, 507, 507, 515, 515, 592, 592, 639, 
		    639, 646, 646, 836, 836, 1005, 1005, 2, 0, 1137, 1137, 1158, 1159, 
		    1, 0, 1159, 1160, 2, 0, 375, 375, 787, 798, 3, 0, 1138, 1140, 1149, 
		    1149, 1151, 1151, 2, 0, 63, 63, 178, 178, 2, 0, 116, 116, 1152, 1152, 
		    5, 0, 25, 25, 222, 224, 231, 231, 233, 236, 518, 518, 2, 0, 25, 25, 
		    222, 222, 2, 0, 25, 25, 222, 223, 1, 0, 196, 207, 3, 0, 183, 183, 
		    195, 195, 612, 612, 2, 0, 211, 216, 431, 431, 6, 0, 217, 217, 228, 
		    228, 230, 230, 232, 232, 239, 239, 348, 349, 4, 0, 218, 221, 226, 
		    227, 229, 229, 346, 346, 2, 0, 153, 153, 237, 237, 2, 0, 466, 466, 
		    803, 811, 3, 0, 211, 211, 226, 226, 518, 518, 6, 0, 200, 200, 206, 
		    206, 209, 209, 217, 218, 220, 221, 466, 466, 1, 0, 214, 215, 2, 0, 
		    183, 183, 612, 612, 2, 0, 200, 200, 206, 206, 2, 0, 315, 316, 322, 
		    322, 3, 0, 150, 150, 313, 316, 331, 331, 1, 0, 325, 326, 3, 0, 17, 
		    17, 95, 95, 176, 176, 2, 0, 222, 222, 226, 226, 2, 0, 217, 218, 220, 
		    220, 3, 0, 13, 13, 45, 45, 994, 994, 3, 0, 286, 286, 298, 299, 309, 
		    309, 3, 0, 287, 289, 305, 308, 310, 312, 2, 0, 295, 295, 297, 297, 
		    2, 0, 293, 293, 296, 296, 2, 0, 291, 292, 302, 304, 2, 0, 133, 133, 
		    601, 601, 2, 0, 433, 433, 559, 559, 2, 0, 535, 535, 551, 551, 2, 0, 
		    114, 114, 1127, 1127, 3, 0, 63, 63, 178, 178, 662, 662, 2, 0, 137, 
		    137, 149, 149, 3, 0, 6, 6, 337, 337, 618, 618, 3, 0, 114, 114, 1120, 
		    1121, 1127, 1128, 2, 0, 1117, 1119, 1122, 1123, 1, 0, 1120, 1121, 
		    2, 0, 226, 226, 746, 786, 1, 0, 799, 802, 5, 0, 708, 709, 725, 727, 
		    733, 733, 739, 740, 742, 742, 1, 0, 689, 696, 3, 0, 217, 221, 234, 
		    234, 237, 237, 59, 0, 11, 11, 14, 14, 18, 18, 29, 29, 35, 35, 37, 
		    37, 42, 42, 48, 48, 55, 55, 57, 57, 59, 59, 73, 73, 79, 79, 94, 94, 
		    117, 117, 121, 121, 124, 124, 130, 130, 158, 158, 168, 168, 239, 239, 
		    283, 290, 294, 294, 298, 299, 305, 312, 332, 385, 387, 403, 405, 405, 
		    407, 432, 434, 450, 452, 458, 460, 521, 523, 523, 527, 544, 547, 558, 
		    560, 589, 591, 592, 594, 606, 608, 636, 638, 672, 674, 675, 677, 682, 
		    684, 688, 697, 697, 699, 707, 710, 712, 717, 718, 720, 724, 728, 732, 
		    734, 734, 736, 738, 741, 741, 743, 745, 792, 792, 836, 836, 875, 875, 
		    1000, 1000, 1005, 1005, 1088, 1088, 23, 0, 39, 39, 97, 97, 148, 148, 
		    150, 150, 217, 219, 221, 221, 251, 282, 290, 293, 295, 297, 300, 304, 
		    324, 324, 459, 459, 673, 673, 689, 696, 736, 736, 803, 803, 806, 835, 
		    837, 874, 876, 999, 1001, 1004, 1006, 1087, 1089, 1107, 1123, 1123, 
		    8759, 0, 723, 1, 0, 0, 0, 2, 742, 1, 0, 0, 0, 4, 763, 1, 0, 0, 0, 
		    6, 765, 1, 0, 0, 0, 8, 805, 1, 0, 0, 0, 10, 820, 1, 0, 0, 0, 12, 831, 
		    1, 0, 0, 0, 14, 848, 1, 0, 0, 0, 16, 853, 1, 0, 0, 0, 18, 865, 1, 
		    0, 0, 0, 20, 892, 1, 0, 0, 0, 22, 901, 1, 0, 0, 0, 24, 903, 1, 0, 
		    0, 0, 26, 915, 1, 0, 0, 0, 28, 945, 1, 0, 0, 0, 30, 981, 1, 0, 0, 
		    0, 32, 1032, 1, 0, 0, 0, 34, 1058, 1, 0, 0, 0, 36, 1094, 1, 0, 0, 
		    0, 38, 1107, 1, 0, 0, 0, 40, 1204, 1, 0, 0, 0, 42, 1206, 1, 0, 0, 
		    0, 44, 1224, 1, 0, 0, 0, 46, 1285, 1, 0, 0, 0, 48, 1304, 1, 0, 0, 
		    0, 50, 1310, 1, 0, 0, 0, 52, 1332, 1, 0, 0, 0, 54, 1334, 1, 0, 0, 
		    0, 56, 1336, 1, 0, 0, 0, 58, 1416, 1, 0, 0, 0, 60, 1423, 1, 0, 0, 
		    0, 62, 1425, 1, 0, 0, 0, 64, 1430, 1, 0, 0, 0, 66, 1470, 1, 0, 0, 
		    0, 68, 1476, 1, 0, 0, 0, 70, 1478, 1, 0, 0, 0, 72, 1499, 1, 0, 0, 
		    0, 74, 1506, 1, 0, 0, 0, 76, 1508, 1, 0, 0, 0, 78, 1533, 1, 0, 0, 
		    0, 80, 1536, 1, 0, 0, 0, 82, 1541, 1, 0, 0, 0, 84, 1567, 1, 0, 0, 
		    0, 86, 1583, 1, 0, 0, 0, 88, 1585, 1, 0, 0, 0, 90, 1607, 1, 0, 0, 
		    0, 92, 1609, 1, 0, 0, 0, 94, 1675, 1, 0, 0, 0, 96, 1746, 1, 0, 0, 
		    0, 98, 1748, 1, 0, 0, 0, 100, 1776, 1, 0, 0, 0, 102, 1786, 1, 0, 0, 
		    0, 104, 1816, 1, 0, 0, 0, 106, 2003, 1, 0, 0, 0, 108, 2005, 1, 0, 
		    0, 0, 110, 2007, 1, 0, 0, 0, 112, 2010, 1, 0, 0, 0, 114, 2085, 1, 
		    0, 0, 0, 116, 2108, 1, 0, 0, 0, 118, 2256, 1, 0, 0, 0, 120, 2261, 
		    1, 0, 0, 0, 122, 2263, 1, 0, 0, 0, 124, 2273, 1, 0, 0, 0, 126, 2329, 
		    1, 0, 0, 0, 128, 2349, 1, 0, 0, 0, 130, 2351, 1, 0, 0, 0, 132, 2386, 
		    1, 0, 0, 0, 134, 2395, 1, 0, 0, 0, 136, 2402, 1, 0, 0, 0, 138, 2425, 
		    1, 0, 0, 0, 140, 2434, 1, 0, 0, 0, 142, 2449, 1, 0, 0, 0, 144, 2474, 
		    1, 0, 0, 0, 146, 2494, 1, 0, 0, 0, 148, 2877, 1, 0, 0, 0, 150, 2977, 
		    1, 0, 0, 0, 152, 2979, 1, 0, 0, 0, 154, 2986, 1, 0, 0, 0, 156, 2993, 
		    1, 0, 0, 0, 158, 3016, 1, 0, 0, 0, 160, 3024, 1, 0, 0, 0, 162, 3031, 
		    1, 0, 0, 0, 164, 3038, 1, 0, 0, 0, 166, 3045, 1, 0, 0, 0, 168, 3057, 
		    1, 0, 0, 0, 170, 3067, 1, 0, 0, 0, 172, 3074, 1, 0, 0, 0, 174, 3090, 
		    1, 0, 0, 0, 176, 3136, 1, 0, 0, 0, 178, 3138, 1, 0, 0, 0, 180, 3148, 
		    1, 0, 0, 0, 182, 3152, 1, 0, 0, 0, 184, 3158, 1, 0, 0, 0, 186, 3170, 
		    1, 0, 0, 0, 188, 3172, 1, 0, 0, 0, 190, 3179, 1, 0, 0, 0, 192, 3181, 
		    1, 0, 0, 0, 194, 3239, 1, 0, 0, 0, 196, 3313, 1, 0, 0, 0, 198, 3372, 
		    1, 0, 0, 0, 200, 3470, 1, 0, 0, 0, 202, 3474, 1, 0, 0, 0, 204, 3476, 
		    1, 0, 0, 0, 206, 3511, 1, 0, 0, 0, 208, 3513, 1, 0, 0, 0, 210, 3521, 
		    1, 0, 0, 0, 212, 3529, 1, 0, 0, 0, 214, 3531, 1, 0, 0, 0, 216, 3567, 
		    1, 0, 0, 0, 218, 3622, 1, 0, 0, 0, 220, 3631, 1, 0, 0, 0, 222, 3651, 
		    1, 0, 0, 0, 224, 3663, 1, 0, 0, 0, 226, 3667, 1, 0, 0, 0, 228, 3700, 
		    1, 0, 0, 0, 230, 3721, 1, 0, 0, 0, 232, 3731, 1, 0, 0, 0, 234, 3735, 
		    1, 0, 0, 0, 236, 3761, 1, 0, 0, 0, 238, 3803, 1, 0, 0, 0, 240, 3805, 
		    1, 0, 0, 0, 242, 3820, 1, 0, 0, 0, 244, 3869, 1, 0, 0, 0, 246, 3878, 
		    1, 0, 0, 0, 248, 3888, 1, 0, 0, 0, 250, 3898, 1, 0, 0, 0, 252, 3954, 
		    1, 0, 0, 0, 254, 3956, 1, 0, 0, 0, 256, 3980, 1, 0, 0, 0, 258, 3986, 
		    1, 0, 0, 0, 260, 3994, 1, 0, 0, 0, 262, 4011, 1, 0, 0, 0, 264, 4027, 
		    1, 0, 0, 0, 266, 4064, 1, 0, 0, 0, 268, 4070, 1, 0, 0, 0, 270, 4079, 
		    1, 0, 0, 0, 272, 4092, 1, 0, 0, 0, 274, 4096, 1, 0, 0, 0, 276, 4134, 
		    1, 0, 0, 0, 278, 4172, 1, 0, 0, 0, 280, 4186, 1, 0, 0, 0, 282, 4194, 
		    1, 0, 0, 0, 284, 4198, 1, 0, 0, 0, 286, 4204, 1, 0, 0, 0, 288, 4218, 
		    1, 0, 0, 0, 290, 4221, 1, 0, 0, 0, 292, 4239, 1, 0, 0, 0, 294, 4243, 
		    1, 0, 0, 0, 296, 4259, 1, 0, 0, 0, 298, 4261, 1, 0, 0, 0, 300, 4273, 
		    1, 0, 0, 0, 302, 4277, 1, 0, 0, 0, 304, 4294, 1, 0, 0, 0, 306, 4311, 
		    1, 0, 0, 0, 308, 4314, 1, 0, 0, 0, 310, 4324, 1, 0, 0, 0, 312, 4328, 
		    1, 0, 0, 0, 314, 4341, 1, 0, 0, 0, 316, 4344, 1, 0, 0, 0, 318, 4349, 
		    1, 0, 0, 0, 320, 4369, 1, 0, 0, 0, 322, 4371, 1, 0, 0, 0, 324, 4388, 
		    1, 0, 0, 0, 326, 4397, 1, 0, 0, 0, 328, 4406, 1, 0, 0, 0, 330, 4408, 
		    1, 0, 0, 0, 332, 4422, 1, 0, 0, 0, 334, 4433, 1, 0, 0, 0, 336, 4442, 
		    1, 0, 0, 0, 338, 4445, 1, 0, 0, 0, 340, 4453, 1, 0, 0, 0, 342, 4478, 
		    1, 0, 0, 0, 344, 4490, 1, 0, 0, 0, 346, 4493, 1, 0, 0, 0, 348, 4525, 
		    1, 0, 0, 0, 350, 4527, 1, 0, 0, 0, 352, 4529, 1, 0, 0, 0, 354, 4531, 
		    1, 0, 0, 0, 356, 4533, 1, 0, 0, 0, 358, 4586, 1, 0, 0, 0, 360, 4588, 
		    1, 0, 0, 0, 362, 4594, 1, 0, 0, 0, 364, 4614, 1, 0, 0, 0, 366, 4628, 
		    1, 0, 0, 0, 368, 4639, 1, 0, 0, 0, 370, 4641, 1, 0, 0, 0, 372, 4647, 
		    1, 0, 0, 0, 374, 4657, 1, 0, 0, 0, 376, 4661, 1, 0, 0, 0, 378, 4668, 
		    1, 0, 0, 0, 380, 4672, 1, 0, 0, 0, 382, 4678, 1, 0, 0, 0, 384, 4685, 
		    1, 0, 0, 0, 386, 4691, 1, 0, 0, 0, 388, 4697, 1, 0, 0, 0, 390, 4702, 
		    1, 0, 0, 0, 392, 4747, 1, 0, 0, 0, 394, 4768, 1, 0, 0, 0, 396, 4793, 
		    1, 0, 0, 0, 398, 4796, 1, 0, 0, 0, 400, 4802, 1, 0, 0, 0, 402, 4818, 
		    1, 0, 0, 0, 404, 4833, 1, 0, 0, 0, 406, 4839, 1, 0, 0, 0, 408, 4869, 
		    1, 0, 0, 0, 410, 4871, 1, 0, 0, 0, 412, 4878, 1, 0, 0, 0, 414, 4890, 
		    1, 0, 0, 0, 416, 4896, 1, 0, 0, 0, 418, 4921, 1, 0, 0, 0, 420, 4925, 
		    1, 0, 0, 0, 422, 4929, 1, 0, 0, 0, 424, 4940, 1, 0, 0, 0, 426, 5021, 
		    1, 0, 0, 0, 428, 5088, 1, 0, 0, 0, 430, 5090, 1, 0, 0, 0, 432, 5196, 
		    1, 0, 0, 0, 434, 5220, 1, 0, 0, 0, 436, 5222, 1, 0, 0, 0, 438, 5240, 
		    1, 0, 0, 0, 440, 5320, 1, 0, 0, 0, 442, 5322, 1, 0, 0, 0, 444, 5335, 
		    1, 0, 0, 0, 446, 5346, 1, 0, 0, 0, 448, 5374, 1, 0, 0, 0, 450, 5378, 
		    1, 0, 0, 0, 452, 5399, 1, 0, 0, 0, 454, 5409, 1, 0, 0, 0, 456, 5419, 
		    1, 0, 0, 0, 458, 5459, 1, 0, 0, 0, 460, 5461, 1, 0, 0, 0, 462, 5464, 
		    1, 0, 0, 0, 464, 5564, 1, 0, 0, 0, 466, 5582, 1, 0, 0, 0, 468, 5584, 
		    1, 0, 0, 0, 470, 5588, 1, 0, 0, 0, 472, 5626, 1, 0, 0, 0, 474, 5635, 
		    1, 0, 0, 0, 476, 5641, 1, 0, 0, 0, 478, 5648, 1, 0, 0, 0, 480, 5670, 
		    1, 0, 0, 0, 482, 5672, 1, 0, 0, 0, 484, 5686, 1, 0, 0, 0, 486, 5692, 
		    1, 0, 0, 0, 488, 5748, 1, 0, 0, 0, 490, 5903, 1, 0, 0, 0, 492, 5915, 
		    1, 0, 0, 0, 494, 5930, 1, 0, 0, 0, 496, 5936, 1, 0, 0, 0, 498, 5955, 
		    1, 0, 0, 0, 500, 5965, 1, 0, 0, 0, 502, 5979, 1, 0, 0, 0, 504, 5981, 
		    1, 0, 0, 0, 506, 5984, 1, 0, 0, 0, 508, 6006, 1, 0, 0, 0, 510, 6018, 
		    1, 0, 0, 0, 512, 6024, 1, 0, 0, 0, 514, 6036, 1, 0, 0, 0, 516, 6040, 
		    1, 0, 0, 0, 518, 6042, 1, 0, 0, 0, 520, 6084, 1, 0, 0, 0, 522, 6091, 
		    1, 0, 0, 0, 524, 6093, 1, 0, 0, 0, 526, 6116, 1, 0, 0, 0, 528, 6122, 
		    1, 0, 0, 0, 530, 6130, 1, 0, 0, 0, 532, 6133, 1, 0, 0, 0, 534, 6136, 
		    1, 0, 0, 0, 536, 6157, 1, 0, 0, 0, 538, 6178, 1, 0, 0, 0, 540, 6186, 
		    1, 0, 0, 0, 542, 6198, 1, 0, 0, 0, 544, 6206, 1, 0, 0, 0, 546, 6244, 
		    1, 0, 0, 0, 548, 6256, 1, 0, 0, 0, 550, 6258, 1, 0, 0, 0, 552, 6264, 
		    1, 0, 0, 0, 554, 6268, 1, 0, 0, 0, 556, 6284, 1, 0, 0, 0, 558, 6297, 
		    1, 0, 0, 0, 560, 6306, 1, 0, 0, 0, 562, 6308, 1, 0, 0, 0, 564, 6315, 
		    1, 0, 0, 0, 566, 6317, 1, 0, 0, 0, 568, 6323, 1, 0, 0, 0, 570, 6327, 
		    1, 0, 0, 0, 572, 6332, 1, 0, 0, 0, 574, 6334, 1, 0, 0, 0, 576, 6336, 
		    1, 0, 0, 0, 578, 6354, 1, 0, 0, 0, 580, 6370, 1, 0, 0, 0, 582, 6374, 
		    1, 0, 0, 0, 584, 6379, 1, 0, 0, 0, 586, 6390, 1, 0, 0, 0, 588, 6395, 
		    1, 0, 0, 0, 590, 6397, 1, 0, 0, 0, 592, 6401, 1, 0, 0, 0, 594, 6426, 
		    1, 0, 0, 0, 596, 6428, 1, 0, 0, 0, 598, 6431, 1, 0, 0, 0, 600, 6436, 
		    1, 0, 0, 0, 602, 6452, 1, 0, 0, 0, 604, 6580, 1, 0, 0, 0, 606, 6582, 
		    1, 0, 0, 0, 608, 6615, 1, 0, 0, 0, 610, 6620, 1, 0, 0, 0, 612, 6624, 
		    1, 0, 0, 0, 614, 6630, 1, 0, 0, 0, 616, 6638, 1, 0, 0, 0, 618, 6646, 
		    1, 0, 0, 0, 620, 6654, 1, 0, 0, 0, 622, 6662, 1, 0, 0, 0, 624, 6673, 
		    1, 0, 0, 0, 626, 6681, 1, 0, 0, 0, 628, 6689, 1, 0, 0, 0, 630, 6697, 
		    1, 0, 0, 0, 632, 6705, 1, 0, 0, 0, 634, 6739, 1, 0, 0, 0, 636, 6755, 
		    1, 0, 0, 0, 638, 6759, 1, 0, 0, 0, 640, 6761, 1, 0, 0, 0, 642, 6764, 
		    1, 0, 0, 0, 644, 6768, 1, 0, 0, 0, 646, 6774, 1, 0, 0, 0, 648, 6794, 
		    1, 0, 0, 0, 650, 6975, 1, 0, 0, 0, 652, 6977, 1, 0, 0, 0, 654, 6996, 
		    1, 0, 0, 0, 656, 6998, 1, 0, 0, 0, 658, 7061, 1, 0, 0, 0, 660, 7101, 
		    1, 0, 0, 0, 662, 7103, 1, 0, 0, 0, 664, 7112, 1, 0, 0, 0, 666, 7123, 
		    1, 0, 0, 0, 668, 7125, 1, 0, 0, 0, 670, 7128, 1, 0, 0, 0, 672, 7132, 
		    1, 0, 0, 0, 674, 7134, 1, 0, 0, 0, 676, 7146, 1, 0, 0, 0, 678, 7148, 
		    1, 0, 0, 0, 680, 7182, 1, 0, 0, 0, 682, 7184, 1, 0, 0, 0, 684, 7193, 
		    1, 0, 0, 0, 686, 7211, 1, 0, 0, 0, 688, 7224, 1, 0, 0, 0, 690, 7235, 
		    1, 0, 0, 0, 692, 7353, 1, 0, 0, 0, 694, 7379, 1, 0, 0, 0, 696, 7395, 
		    1, 0, 0, 0, 698, 7404, 1, 0, 0, 0, 700, 7413, 1, 0, 0, 0, 702, 7415, 
		    1, 0, 0, 0, 704, 7417, 1, 0, 0, 0, 706, 7424, 1, 0, 0, 0, 708, 7426, 
		    1, 0, 0, 0, 710, 7428, 1, 0, 0, 0, 712, 7430, 1, 0, 0, 0, 714, 7432, 
		    1, 0, 0, 0, 716, 7434, 1, 0, 0, 0, 718, 7436, 1, 0, 0, 0, 720, 7438, 
		    1, 0, 0, 0, 722, 724, 3, 2, 1, 0, 723, 722, 1, 0, 0, 0, 723, 724, 
		    1, 0, 0, 0, 724, 727, 1, 0, 0, 0, 725, 726, 5, 1121, 0, 0, 726, 728, 
		    5, 1121, 0, 0, 727, 725, 1, 0, 0, 0, 727, 728, 1, 0, 0, 0, 728, 729, 
		    1, 0, 0, 0, 729, 730, 5, 0, 0, 1, 730, 1, 1, 0, 0, 0, 731, 734, 3, 
		    4, 2, 0, 732, 733, 5, 1121, 0, 0, 733, 735, 5, 1121, 0, 0, 734, 732, 
		    1, 0, 0, 0, 734, 735, 1, 0, 0, 0, 735, 737, 1, 0, 0, 0, 736, 738, 
		    5, 1136, 0, 0, 737, 736, 1, 0, 0, 0, 737, 738, 1, 0, 0, 0, 738, 741, 
		    1, 0, 0, 0, 739, 741, 3, 6, 3, 0, 740, 731, 1, 0, 0, 0, 740, 739, 
		    1, 0, 0, 0, 741, 744, 1, 0, 0, 0, 742, 740, 1, 0, 0, 0, 742, 743, 
		    1, 0, 0, 0, 743, 754, 1, 0, 0, 0, 744, 742, 1, 0, 0, 0, 745, 751, 
		    3, 4, 2, 0, 746, 747, 5, 1121, 0, 0, 747, 749, 5, 1121, 0, 0, 748, 
		    746, 1, 0, 0, 0, 748, 749, 1, 0, 0, 0, 749, 750, 1, 0, 0, 0, 750, 
		    752, 5, 1136, 0, 0, 751, 748, 1, 0, 0, 0, 751, 752, 1, 0, 0, 0, 752, 
		    755, 1, 0, 0, 0, 753, 755, 3, 6, 3, 0, 754, 745, 1, 0, 0, 0, 754, 
		    753, 1, 0, 0, 0, 755, 3, 1, 0, 0, 0, 756, 764, 3, 8, 4, 0, 757, 764, 
		    3, 10, 5, 0, 758, 764, 3, 12, 6, 0, 759, 764, 3, 14, 7, 0, 760, 764, 
		    3, 16, 8, 0, 761, 764, 3, 20, 10, 0, 762, 764, 3, 22, 11, 0, 763, 
		    756, 1, 0, 0, 0, 763, 757, 1, 0, 0, 0, 763, 758, 1, 0, 0, 0, 763, 
		    759, 1, 0, 0, 0, 763, 760, 1, 0, 0, 0, 763, 761, 1, 0, 0, 0, 763, 
		    762, 1, 0, 0, 0, 764, 5, 1, 0, 0, 0, 765, 766, 5, 1136, 0, 0, 766, 
		    7, 1, 0, 0, 0, 767, 806, 3, 24, 12, 0, 768, 806, 3, 26, 13, 0, 769, 
		    806, 3, 28, 14, 0, 770, 806, 3, 30, 15, 0, 771, 806, 3, 32, 16, 0, 
		    772, 806, 3, 34, 17, 0, 773, 806, 3, 38, 19, 0, 774, 806, 3, 40, 20, 
		    0, 775, 806, 3, 42, 21, 0, 776, 806, 3, 44, 22, 0, 777, 806, 3, 46, 
		    23, 0, 778, 806, 3, 56, 28, 0, 779, 806, 3, 36, 18, 0, 780, 806, 3, 
		    128, 64, 0, 781, 806, 3, 130, 65, 0, 782, 806, 3, 132, 66, 0, 783, 
		    806, 3, 134, 67, 0, 784, 806, 3, 136, 68, 0, 785, 806, 3, 138, 69, 
		    0, 786, 806, 3, 140, 70, 0, 787, 806, 3, 142, 71, 0, 788, 806, 3, 
		    144, 72, 0, 789, 806, 3, 146, 73, 0, 790, 806, 3, 152, 76, 0, 791, 
		    806, 3, 154, 77, 0, 792, 806, 3, 156, 78, 0, 793, 806, 3, 158, 79, 
		    0, 794, 806, 3, 160, 80, 0, 795, 806, 3, 162, 81, 0, 796, 806, 3, 
		    164, 82, 0, 797, 806, 3, 166, 83, 0, 798, 806, 3, 168, 84, 0, 799, 
		    806, 3, 170, 85, 0, 800, 806, 3, 172, 86, 0, 801, 806, 3, 174, 87, 
		    0, 802, 806, 3, 176, 88, 0, 803, 806, 3, 178, 89, 0, 804, 806, 3, 
		    182, 91, 0, 805, 767, 1, 0, 0, 0, 805, 768, 1, 0, 0, 0, 805, 769, 
		    1, 0, 0, 0, 805, 770, 1, 0, 0, 0, 805, 771, 1, 0, 0, 0, 805, 772, 
		    1, 0, 0, 0, 805, 773, 1, 0, 0, 0, 805, 774, 1, 0, 0, 0, 805, 775, 
		    1, 0, 0, 0, 805, 776, 1, 0, 0, 0, 805, 777, 1, 0, 0, 0, 805, 778, 
		    1, 0, 0, 0, 805, 779, 1, 0, 0, 0, 805, 780, 1, 0, 0, 0, 805, 781, 
		    1, 0, 0, 0, 805, 782, 1, 0, 0, 0, 805, 783, 1, 0, 0, 0, 805, 784, 
		    1, 0, 0, 0, 805, 785, 1, 0, 0, 0, 805, 786, 1, 0, 0, 0, 805, 787, 
		    1, 0, 0, 0, 805, 788, 1, 0, 0, 0, 805, 789, 1, 0, 0, 0, 805, 790, 
		    1, 0, 0, 0, 805, 791, 1, 0, 0, 0, 805, 792, 1, 0, 0, 0, 805, 793, 
		    1, 0, 0, 0, 805, 794, 1, 0, 0, 0, 805, 795, 1, 0, 0, 0, 805, 796, 
		    1, 0, 0, 0, 805, 797, 1, 0, 0, 0, 805, 798, 1, 0, 0, 0, 805, 799, 
		    1, 0, 0, 0, 805, 800, 1, 0, 0, 0, 805, 801, 1, 0, 0, 0, 805, 802, 
		    1, 0, 0, 0, 805, 803, 1, 0, 0, 0, 805, 804, 1, 0, 0, 0, 806, 9, 1, 
		    0, 0, 0, 807, 821, 3, 200, 100, 0, 808, 821, 3, 192, 96, 0, 809, 821, 
		    3, 202, 101, 0, 810, 821, 3, 186, 93, 0, 811, 821, 3, 198, 99, 0, 
		    812, 821, 3, 184, 92, 0, 813, 821, 3, 194, 97, 0, 814, 821, 3, 196, 
		    98, 0, 815, 821, 3, 188, 94, 0, 816, 821, 3, 190, 95, 0, 817, 821, 
		    3, 204, 102, 0, 818, 821, 3, 540, 270, 0, 819, 821, 3, 542, 271, 0, 
		    820, 807, 1, 0, 0, 0, 820, 808, 1, 0, 0, 0, 820, 809, 1, 0, 0, 0, 
		    820, 810, 1, 0, 0, 0, 820, 811, 1, 0, 0, 0, 820, 812, 1, 0, 0, 0, 
		    820, 813, 1, 0, 0, 0, 820, 814, 1, 0, 0, 0, 820, 815, 1, 0, 0, 0, 
		    820, 816, 1, 0, 0, 0, 820, 817, 1, 0, 0, 0, 820, 818, 1, 0, 0, 0, 
		    820, 819, 1, 0, 0, 0, 821, 11, 1, 0, 0, 0, 822, 832, 3, 298, 149, 
		    0, 823, 832, 3, 300, 150, 0, 824, 832, 3, 302, 151, 0, 825, 832, 3, 
		    304, 152, 0, 826, 832, 3, 306, 153, 0, 827, 832, 3, 308, 154, 0, 828, 
		    832, 3, 310, 155, 0, 829, 832, 3, 312, 156, 0, 830, 832, 3, 314, 157, 
		    0, 831, 822, 1, 0, 0, 0, 831, 823, 1, 0, 0, 0, 831, 824, 1, 0, 0, 
		    0, 831, 825, 1, 0, 0, 0, 831, 826, 1, 0, 0, 0, 831, 827, 1, 0, 0, 
		    0, 831, 828, 1, 0, 0, 0, 831, 829, 1, 0, 0, 0, 831, 830, 1, 0, 0, 
		    0, 832, 13, 1, 0, 0, 0, 833, 849, 3, 330, 165, 0, 834, 849, 3, 332, 
		    166, 0, 835, 849, 3, 334, 167, 0, 836, 849, 3, 336, 168, 0, 837, 849, 
		    3, 338, 169, 0, 838, 849, 3, 340, 170, 0, 839, 849, 3, 342, 171, 0, 
		    840, 849, 3, 344, 172, 0, 841, 849, 3, 346, 173, 0, 842, 849, 3, 370, 
		    185, 0, 843, 849, 3, 372, 186, 0, 844, 849, 3, 374, 187, 0, 845, 849, 
		    3, 376, 188, 0, 846, 849, 3, 378, 189, 0, 847, 849, 3, 380, 190, 0, 
		    848, 833, 1, 0, 0, 0, 848, 834, 1, 0, 0, 0, 848, 835, 1, 0, 0, 0, 
		    848, 836, 1, 0, 0, 0, 848, 837, 1, 0, 0, 0, 848, 838, 1, 0, 0, 0, 
		    848, 839, 1, 0, 0, 0, 848, 840, 1, 0, 0, 0, 848, 841, 1, 0, 0, 0, 
		    848, 842, 1, 0, 0, 0, 848, 843, 1, 0, 0, 0, 848, 844, 1, 0, 0, 0, 
		    848, 845, 1, 0, 0, 0, 848, 846, 1, 0, 0, 0, 848, 847, 1, 0, 0, 0, 
		    849, 15, 1, 0, 0, 0, 850, 854, 3, 382, 191, 0, 851, 854, 3, 384, 192, 
		    0, 852, 854, 3, 386, 193, 0, 853, 850, 1, 0, 0, 0, 853, 851, 1, 0, 
		    0, 0, 853, 852, 1, 0, 0, 0, 854, 17, 1, 0, 0, 0, 855, 866, 3, 390, 
		    195, 0, 856, 866, 3, 392, 196, 0, 857, 866, 3, 394, 197, 0, 858, 866, 
		    3, 398, 199, 0, 859, 866, 3, 400, 200, 0, 860, 866, 3, 402, 201, 0, 
		    861, 866, 3, 406, 203, 0, 862, 866, 3, 396, 198, 0, 863, 866, 3, 404, 
		    202, 0, 864, 866, 3, 408, 204, 0, 865, 855, 1, 0, 0, 0, 865, 856, 
		    1, 0, 0, 0, 865, 857, 1, 0, 0, 0, 865, 858, 1, 0, 0, 0, 865, 859, 
		    1, 0, 0, 0, 865, 860, 1, 0, 0, 0, 865, 861, 1, 0, 0, 0, 865, 862, 
		    1, 0, 0, 0, 865, 863, 1, 0, 0, 0, 865, 864, 1, 0, 0, 0, 866, 19, 1, 
		    0, 0, 0, 867, 893, 3, 426, 213, 0, 868, 893, 3, 428, 214, 0, 869, 
		    893, 3, 430, 215, 0, 870, 893, 3, 432, 216, 0, 871, 893, 3, 436, 218, 
		    0, 872, 893, 3, 438, 219, 0, 873, 893, 3, 440, 220, 0, 874, 893, 3, 
		    442, 221, 0, 875, 893, 3, 470, 235, 0, 876, 893, 3, 472, 236, 0, 877, 
		    893, 3, 474, 237, 0, 878, 893, 3, 476, 238, 0, 879, 893, 3, 478, 239, 
		    0, 880, 893, 3, 482, 241, 0, 881, 893, 3, 484, 242, 0, 882, 893, 3, 
		    486, 243, 0, 883, 893, 3, 488, 244, 0, 884, 893, 3, 490, 245, 0, 885, 
		    893, 3, 504, 252, 0, 886, 893, 3, 506, 253, 0, 887, 893, 3, 508, 254, 
		    0, 888, 893, 3, 510, 255, 0, 889, 893, 3, 512, 256, 0, 890, 893, 3, 
		    514, 257, 0, 891, 893, 3, 516, 258, 0, 892, 867, 1, 0, 0, 0, 892, 
		    868, 1, 0, 0, 0, 892, 869, 1, 0, 0, 0, 892, 870, 1, 0, 0, 0, 892, 
		    871, 1, 0, 0, 0, 892, 872, 1, 0, 0, 0, 892, 873, 1, 0, 0, 0, 892, 
		    874, 1, 0, 0, 0, 892, 875, 1, 0, 0, 0, 892, 876, 1, 0, 0, 0, 892, 
		    877, 1, 0, 0, 0, 892, 878, 1, 0, 0, 0, 892, 879, 1, 0, 0, 0, 892, 
		    880, 1, 0, 0, 0, 892, 881, 1, 0, 0, 0, 892, 882, 1, 0, 0, 0, 892, 
		    883, 1, 0, 0, 0, 892, 884, 1, 0, 0, 0, 892, 885, 1, 0, 0, 0, 892, 
		    886, 1, 0, 0, 0, 892, 887, 1, 0, 0, 0, 892, 888, 1, 0, 0, 0, 892, 
		    889, 1, 0, 0, 0, 892, 890, 1, 0, 0, 0, 892, 891, 1, 0, 0, 0, 893, 
		    21, 1, 0, 0, 0, 894, 902, 3, 526, 263, 0, 895, 902, 3, 528, 264, 0, 
		    896, 902, 3, 530, 265, 0, 897, 902, 3, 532, 266, 0, 898, 902, 3, 534, 
		    267, 0, 899, 902, 3, 536, 268, 0, 900, 902, 3, 544, 272, 0, 901, 894, 
		    1, 0, 0, 0, 901, 895, 1, 0, 0, 0, 901, 896, 1, 0, 0, 0, 901, 897, 
		    1, 0, 0, 0, 901, 898, 1, 0, 0, 0, 901, 899, 1, 0, 0, 0, 901, 900, 
		    1, 0, 0, 0, 902, 23, 1, 0, 0, 0, 903, 904, 5, 33, 0, 0, 904, 906, 
		    7, 0, 0, 0, 905, 907, 3, 642, 321, 0, 906, 905, 1, 0, 0, 0, 906, 907, 
		    1, 0, 0, 0, 907, 908, 1, 0, 0, 0, 908, 912, 3, 584, 292, 0, 909, 911, 
		    3, 58, 29, 0, 910, 909, 1, 0, 0, 0, 911, 914, 1, 0, 0, 0, 912, 910, 
		    1, 0, 0, 0, 912, 913, 1, 0, 0, 0, 913, 25, 1, 0, 0, 0, 914, 912, 1, 
		    0, 0, 0, 915, 917, 5, 33, 0, 0, 916, 918, 3, 64, 32, 0, 917, 916, 
		    1, 0, 0, 0, 917, 918, 1, 0, 0, 0, 918, 919, 1, 0, 0, 0, 919, 921, 
		    5, 415, 0, 0, 920, 922, 3, 642, 321, 0, 921, 920, 1, 0, 0, 0, 921, 
		    922, 1, 0, 0, 0, 922, 923, 1, 0, 0, 0, 923, 924, 3, 550, 275, 0, 924, 
		    925, 5, 118, 0, 0, 925, 926, 5, 605, 0, 0, 926, 933, 3, 66, 33, 0, 
		    927, 928, 5, 118, 0, 0, 928, 930, 5, 371, 0, 0, 929, 931, 5, 114, 
		    0, 0, 930, 929, 1, 0, 0, 0, 930, 931, 1, 0, 0, 0, 931, 932, 1, 0, 
		    0, 0, 932, 934, 5, 561, 0, 0, 933, 927, 1, 0, 0, 0, 933, 934, 1, 0, 
		    0, 0, 934, 936, 1, 0, 0, 0, 935, 937, 3, 74, 37, 0, 936, 935, 1, 0, 
		    0, 0, 936, 937, 1, 0, 0, 0, 937, 940, 1, 0, 0, 0, 938, 939, 5, 368, 
		    0, 0, 939, 941, 5, 1148, 0, 0, 940, 938, 1, 0, 0, 0, 940, 941, 1, 
		    0, 0, 0, 941, 942, 1, 0, 0, 0, 942, 943, 5, 399, 0, 0, 943, 944, 3, 
		    388, 194, 0, 944, 27, 1, 0, 0, 0, 945, 947, 5, 33, 0, 0, 946, 948, 
		    7, 1, 0, 0, 947, 946, 1, 0, 0, 0, 947, 948, 1, 0, 0, 0, 948, 950, 
		    1, 0, 0, 0, 949, 951, 7, 2, 0, 0, 950, 949, 1, 0, 0, 0, 950, 951, 
		    1, 0, 0, 0, 951, 952, 1, 0, 0, 0, 952, 953, 5, 81, 0, 0, 953, 955, 
		    3, 584, 292, 0, 954, 956, 3, 76, 38, 0, 955, 954, 1, 0, 0, 0, 955, 
		    956, 1, 0, 0, 0, 956, 957, 1, 0, 0, 0, 957, 958, 5, 118, 0, 0, 958, 
		    959, 3, 552, 276, 0, 959, 963, 3, 622, 311, 0, 960, 962, 3, 78, 39, 
		    0, 961, 960, 1, 0, 0, 0, 962, 965, 1, 0, 0, 0, 963, 961, 1, 0, 0, 
		    0, 963, 964, 1, 0, 0, 0, 964, 978, 1, 0, 0, 0, 965, 963, 1, 0, 0, 
		    0, 966, 968, 5, 336, 0, 0, 967, 969, 5, 1124, 0, 0, 968, 967, 1, 0, 
		    0, 0, 968, 969, 1, 0, 0, 0, 969, 970, 1, 0, 0, 0, 970, 977, 7, 3, 
		    0, 0, 971, 973, 5, 103, 0, 0, 972, 974, 5, 1124, 0, 0, 973, 972, 1, 
		    0, 0, 0, 973, 974, 1, 0, 0, 0, 974, 975, 1, 0, 0, 0, 975, 977, 7, 
		    4, 0, 0, 976, 966, 1, 0, 0, 0, 976, 971, 1, 0, 0, 0, 977, 980, 1, 
		    0, 0, 0, 978, 976, 1, 0, 0, 0, 978, 979, 1, 0, 0, 0, 979, 29, 1, 0, 
		    0, 0, 980, 978, 1, 0, 0, 0, 981, 982, 5, 33, 0, 0, 982, 983, 5, 475, 
		    0, 0, 983, 984, 5, 73, 0, 0, 984, 985, 3, 584, 292, 0, 985, 986, 5, 
		    5, 0, 0, 986, 987, 5, 659, 0, 0, 987, 993, 5, 1148, 0, 0, 988, 990, 
		    5, 453, 0, 0, 989, 991, 5, 1124, 0, 0, 990, 989, 1, 0, 0, 0, 990, 
		    991, 1, 0, 0, 0, 991, 992, 1, 0, 0, 0, 992, 994, 3, 592, 296, 0, 993, 
		    988, 1, 0, 0, 0, 993, 994, 1, 0, 0, 0, 994, 1000, 1, 0, 0, 0, 995, 
		    997, 5, 660, 0, 0, 996, 998, 5, 1124, 0, 0, 997, 996, 1, 0, 0, 0, 
		    997, 998, 1, 0, 0, 0, 998, 999, 1, 0, 0, 0, 999, 1001, 3, 592, 296, 
		    0, 1000, 995, 1, 0, 0, 0, 1000, 1001, 1, 0, 0, 0, 1001, 1007, 1, 0, 
		    0, 0, 1002, 1004, 5, 572, 0, 0, 1003, 1005, 5, 1124, 0, 0, 1004, 1003, 
		    1, 0, 0, 0, 1004, 1005, 1, 0, 0, 0, 1005, 1006, 1, 0, 0, 0, 1006, 
		    1008, 3, 592, 296, 0, 1007, 1002, 1, 0, 0, 0, 1007, 1008, 1, 0, 0, 
		    0, 1008, 1014, 1, 0, 0, 0, 1009, 1011, 5, 528, 0, 0, 1010, 1012, 5, 
		    1124, 0, 0, 1011, 1010, 1, 0, 0, 0, 1011, 1012, 1, 0, 0, 0, 1012, 
		    1013, 1, 0, 0, 0, 1013, 1015, 3, 584, 292, 0, 1014, 1009, 1, 0, 0, 
		    0, 1014, 1015, 1, 0, 0, 0, 1015, 1017, 1, 0, 0, 0, 1016, 1018, 5, 
		    674, 0, 0, 1017, 1016, 1, 0, 0, 0, 1017, 1018, 1, 0, 0, 0, 1018, 1024, 
		    1, 0, 0, 0, 1019, 1021, 5, 368, 0, 0, 1020, 1022, 5, 1124, 0, 0, 1021, 
		    1020, 1, 0, 0, 0, 1021, 1022, 1, 0, 0, 0, 1022, 1023, 1, 0, 0, 0, 
		    1023, 1025, 5, 1148, 0, 0, 1024, 1019, 1, 0, 0, 0, 1024, 1025, 1, 
		    0, 0, 0, 1025, 1026, 1, 0, 0, 0, 1026, 1028, 5, 409, 0, 0, 1027, 1029, 
		    5, 1124, 0, 0, 1028, 1027, 1, 0, 0, 0, 1028, 1029, 1, 0, 0, 0, 1029, 
		    1030, 1, 0, 0, 0, 1030, 1031, 3, 572, 286, 0, 1031, 31, 1, 0, 0, 0, 
		    1032, 1034, 5, 33, 0, 0, 1033, 1035, 3, 64, 32, 0, 1034, 1033, 1, 
		    0, 0, 0, 1034, 1035, 1, 0, 0, 0, 1035, 1036, 1, 0, 0, 0, 1036, 1037, 
		    5, 131, 0, 0, 1037, 1038, 3, 550, 275, 0, 1038, 1040, 5, 1133, 0, 
		    0, 1039, 1041, 3, 80, 40, 0, 1040, 1039, 1, 0, 0, 0, 1040, 1041, 1, 
		    0, 0, 0, 1041, 1046, 1, 0, 0, 0, 1042, 1043, 5, 1135, 0, 0, 1043, 
		    1045, 3, 80, 40, 0, 1044, 1042, 1, 0, 0, 0, 1045, 1048, 1, 0, 0, 0, 
		    1046, 1044, 1, 0, 0, 0, 1046, 1047, 1, 0, 0, 0, 1047, 1049, 1, 0, 
		    0, 0, 1048, 1046, 1, 0, 0, 0, 1049, 1053, 5, 1134, 0, 0, 1050, 1052, 
		    3, 84, 42, 0, 1051, 1050, 1, 0, 0, 0, 1052, 1055, 1, 0, 0, 0, 1053, 
		    1051, 1, 0, 0, 0, 1053, 1054, 1, 0, 0, 0, 1054, 1056, 1, 0, 0, 0, 
		    1055, 1053, 1, 0, 0, 0, 1056, 1057, 3, 388, 194, 0, 1057, 33, 1, 0, 
		    0, 0, 1058, 1060, 5, 33, 0, 0, 1059, 1061, 3, 64, 32, 0, 1060, 1059, 
		    1, 0, 0, 0, 1060, 1061, 1, 0, 0, 0, 1061, 1063, 1, 0, 0, 0, 1062, 
		    1064, 5, 335, 0, 0, 1063, 1062, 1, 0, 0, 0, 1063, 1064, 1, 0, 0, 0, 
		    1064, 1065, 1, 0, 0, 0, 1065, 1067, 5, 437, 0, 0, 1066, 1068, 3, 642, 
		    321, 0, 1067, 1066, 1, 0, 0, 0, 1067, 1068, 1, 0, 0, 0, 1068, 1069, 
		    1, 0, 0, 0, 1069, 1070, 3, 550, 275, 0, 1070, 1072, 5, 1133, 0, 0, 
		    1071, 1073, 3, 82, 41, 0, 1072, 1071, 1, 0, 0, 0, 1072, 1073, 1, 0, 
		    0, 0, 1073, 1078, 1, 0, 0, 0, 1074, 1075, 5, 1135, 0, 0, 1075, 1077, 
		    3, 82, 41, 0, 1076, 1074, 1, 0, 0, 0, 1077, 1080, 1, 0, 0, 0, 1078, 
		    1076, 1, 0, 0, 0, 1078, 1079, 1, 0, 0, 0, 1079, 1081, 1, 0, 0, 0, 
		    1080, 1078, 1, 0, 0, 0, 1081, 1082, 5, 1134, 0, 0, 1082, 1083, 5, 
		    594, 0, 0, 1083, 1087, 3, 604, 302, 0, 1084, 1086, 3, 84, 42, 0, 1085, 
		    1084, 1, 0, 0, 0, 1086, 1089, 1, 0, 0, 0, 1087, 1085, 1, 0, 0, 0, 
		    1087, 1088, 1, 0, 0, 0, 1088, 1092, 1, 0, 0, 0, 1089, 1087, 1, 0, 
		    0, 0, 1090, 1093, 3, 388, 194, 0, 1091, 1093, 3, 404, 202, 0, 1092, 
		    1090, 1, 0, 0, 0, 1092, 1091, 1, 0, 0, 0, 1093, 35, 1, 0, 0, 0, 1094, 
		    1095, 5, 33, 0, 0, 1095, 1097, 5, 596, 0, 0, 1096, 1098, 3, 642, 321, 
		    0, 1097, 1096, 1, 0, 0, 0, 1097, 1098, 1, 0, 0, 0, 1098, 1099, 1, 
		    0, 0, 0, 1099, 1104, 3, 554, 277, 0, 1100, 1101, 5, 1135, 0, 0, 1101, 
		    1103, 3, 554, 277, 0, 1102, 1100, 1, 0, 0, 0, 1103, 1106, 1, 0, 0, 
		    0, 1104, 1102, 1, 0, 0, 0, 1104, 1105, 1, 0, 0, 0, 1105, 37, 1, 0, 
		    0, 0, 1106, 1104, 1, 0, 0, 0, 1107, 1108, 5, 33, 0, 0, 1108, 1109, 
		    5, 608, 0, 0, 1109, 1110, 3, 584, 292, 0, 1110, 1111, 5, 67, 0, 0, 
		    1111, 1112, 5, 388, 0, 0, 1112, 1113, 5, 679, 0, 0, 1113, 1114, 7, 
		    5, 0, 0, 1114, 1115, 5, 541, 0, 0, 1115, 1116, 5, 1133, 0, 0, 1116, 
		    1121, 3, 86, 43, 0, 1117, 1118, 5, 1135, 0, 0, 1118, 1120, 3, 86, 
		    43, 0, 1119, 1117, 1, 0, 0, 0, 1120, 1123, 1, 0, 0, 0, 1121, 1119, 
		    1, 0, 0, 0, 1121, 1122, 1, 0, 0, 0, 1122, 1124, 1, 0, 0, 0, 1123, 
		    1121, 1, 0, 0, 0, 1124, 1125, 5, 1134, 0, 0, 1125, 39, 1, 0, 0, 0, 
		    1126, 1128, 5, 33, 0, 0, 1127, 1129, 5, 649, 0, 0, 1128, 1127, 1, 
		    0, 0, 0, 1128, 1129, 1, 0, 0, 0, 1129, 1130, 1, 0, 0, 0, 1130, 1132, 
		    5, 172, 0, 0, 1131, 1133, 3, 642, 321, 0, 1132, 1131, 1, 0, 0, 0, 
		    1132, 1133, 1, 0, 0, 0, 1133, 1134, 1, 0, 0, 0, 1134, 1142, 3, 552, 
		    276, 0, 1135, 1136, 5, 98, 0, 0, 1136, 1143, 3, 552, 276, 0, 1137, 
		    1138, 5, 1133, 0, 0, 1138, 1139, 5, 98, 0, 0, 1139, 1140, 3, 552, 
		    276, 0, 1140, 1141, 5, 1134, 0, 0, 1141, 1143, 1, 0, 0, 0, 1142, 1135, 
		    1, 0, 0, 0, 1142, 1137, 1, 0, 0, 0, 1143, 1205, 1, 0, 0, 0, 1144, 
		    1146, 5, 33, 0, 0, 1145, 1147, 5, 649, 0, 0, 1146, 1145, 1, 0, 0, 
		    0, 1146, 1147, 1, 0, 0, 0, 1147, 1148, 1, 0, 0, 0, 1148, 1150, 5, 
		    172, 0, 0, 1149, 1151, 3, 642, 321, 0, 1150, 1149, 1, 0, 0, 0, 1150, 
		    1151, 1, 0, 0, 0, 1151, 1152, 1, 0, 0, 0, 1152, 1154, 3, 552, 276, 
		    0, 1153, 1155, 3, 88, 44, 0, 1154, 1153, 1, 0, 0, 0, 1154, 1155, 1, 
		    0, 0, 0, 1155, 1166, 1, 0, 0, 0, 1156, 1163, 3, 106, 53, 0, 1157, 
		    1159, 5, 1135, 0, 0, 1158, 1157, 1, 0, 0, 0, 1158, 1159, 1, 0, 0, 
		    0, 1159, 1160, 1, 0, 0, 0, 1160, 1162, 3, 106, 53, 0, 1161, 1158, 
		    1, 0, 0, 0, 1162, 1165, 1, 0, 0, 0, 1163, 1161, 1, 0, 0, 0, 1163, 
		    1164, 1, 0, 0, 0, 1164, 1167, 1, 0, 0, 0, 1165, 1163, 1, 0, 0, 0, 
		    1166, 1156, 1, 0, 0, 0, 1166, 1167, 1, 0, 0, 0, 1167, 1169, 1, 0, 
		    0, 0, 1168, 1170, 3, 112, 56, 0, 1169, 1168, 1, 0, 0, 0, 1169, 1170, 
		    1, 0, 0, 0, 1170, 1172, 1, 0, 0, 0, 1171, 1173, 7, 6, 0, 0, 1172, 
		    1171, 1, 0, 0, 0, 1172, 1173, 1, 0, 0, 0, 1173, 1175, 1, 0, 0, 0, 
		    1174, 1176, 5, 12, 0, 0, 1175, 1174, 1, 0, 0, 0, 1175, 1176, 1, 0, 
		    0, 0, 1176, 1177, 1, 0, 0, 0, 1177, 1178, 3, 200, 100, 0, 1178, 1205, 
		    1, 0, 0, 0, 1179, 1181, 5, 33, 0, 0, 1180, 1182, 5, 649, 0, 0, 1181, 
		    1180, 1, 0, 0, 0, 1181, 1182, 1, 0, 0, 0, 1182, 1183, 1, 0, 0, 0, 
		    1183, 1185, 5, 172, 0, 0, 1184, 1186, 3, 642, 321, 0, 1185, 1184, 
		    1, 0, 0, 0, 1185, 1186, 1, 0, 0, 0, 1186, 1187, 1, 0, 0, 0, 1187, 
		    1188, 3, 552, 276, 0, 1188, 1199, 3, 88, 44, 0, 1189, 1196, 3, 106, 
		    53, 0, 1190, 1192, 5, 1135, 0, 0, 1191, 1190, 1, 0, 0, 0, 1191, 1192, 
		    1, 0, 0, 0, 1192, 1193, 1, 0, 0, 0, 1193, 1195, 3, 106, 53, 0, 1194, 
		    1191, 1, 0, 0, 0, 1195, 1198, 1, 0, 0, 0, 1196, 1194, 1, 0, 0, 0, 
		    1196, 1197, 1, 0, 0, 0, 1197, 1200, 1, 0, 0, 0, 1198, 1196, 1, 0, 
		    0, 0, 1199, 1189, 1, 0, 0, 0, 1199, 1200, 1, 0, 0, 0, 1200, 1202, 
		    1, 0, 0, 0, 1201, 1203, 3, 112, 56, 0, 1202, 1201, 1, 0, 0, 0, 1202, 
		    1203, 1, 0, 0, 0, 1203, 1205, 1, 0, 0, 0, 1204, 1126, 1, 0, 0, 0, 
		    1204, 1144, 1, 0, 0, 0, 1204, 1179, 1, 0, 0, 0, 1205, 41, 1, 0, 0, 
		    0, 1206, 1207, 5, 33, 0, 0, 1207, 1208, 5, 647, 0, 0, 1208, 1209, 
		    3, 584, 292, 0, 1209, 1210, 5, 5, 0, 0, 1210, 1211, 5, 389, 0, 0, 
		    1211, 1215, 5, 1148, 0, 0, 1212, 1213, 5, 428, 0, 0, 1213, 1214, 5, 
		    1124, 0, 0, 1214, 1216, 3, 592, 296, 0, 1215, 1212, 1, 0, 0, 0, 1215, 
		    1216, 1, 0, 0, 0, 1216, 1222, 1, 0, 0, 0, 1217, 1219, 5, 409, 0, 0, 
		    1218, 1220, 5, 1124, 0, 0, 1219, 1218, 1, 0, 0, 0, 1219, 1220, 1, 
		    0, 0, 0, 1220, 1221, 1, 0, 0, 0, 1221, 1223, 3, 572, 286, 0, 1222, 
		    1217, 1, 0, 0, 0, 1222, 1223, 1, 0, 0, 0, 1223, 43, 1, 0, 0, 0, 1224, 
		    1225, 5, 33, 0, 0, 1225, 1226, 5, 647, 0, 0, 1226, 1227, 3, 584, 292, 
		    0, 1227, 1228, 5, 5, 0, 0, 1228, 1229, 5, 389, 0, 0, 1229, 1230, 5, 
		    1148, 0, 0, 1230, 1231, 5, 186, 0, 0, 1231, 1232, 5, 475, 0, 0, 1232, 
		    1233, 5, 73, 0, 0, 1233, 1239, 3, 584, 292, 0, 1234, 1236, 5, 423, 
		    0, 0, 1235, 1237, 5, 1124, 0, 0, 1236, 1235, 1, 0, 0, 0, 1236, 1237, 
		    1, 0, 0, 0, 1237, 1238, 1, 0, 0, 0, 1238, 1240, 3, 592, 296, 0, 1239, 
		    1234, 1, 0, 0, 0, 1239, 1240, 1, 0, 0, 0, 1240, 1246, 1, 0, 0, 0, 
		    1241, 1243, 5, 453, 0, 0, 1242, 1244, 5, 1124, 0, 0, 1243, 1242, 1, 
		    0, 0, 0, 1243, 1244, 1, 0, 0, 0, 1244, 1245, 1, 0, 0, 0, 1245, 1247, 
		    3, 592, 296, 0, 1246, 1241, 1, 0, 0, 0, 1246, 1247, 1, 0, 0, 0, 1247, 
		    1253, 1, 0, 0, 0, 1248, 1250, 5, 341, 0, 0, 1249, 1251, 5, 1124, 0, 
		    0, 1250, 1249, 1, 0, 0, 0, 1250, 1251, 1, 0, 0, 0, 1251, 1252, 1, 
		    0, 0, 0, 1252, 1254, 3, 592, 296, 0, 1253, 1248, 1, 0, 0, 0, 1253, 
		    1254, 1, 0, 0, 0, 1254, 1260, 1, 0, 0, 0, 1255, 1257, 5, 501, 0, 0, 
		    1256, 1258, 5, 1124, 0, 0, 1257, 1256, 1, 0, 0, 0, 1257, 1258, 1, 
		    0, 0, 0, 1258, 1259, 1, 0, 0, 0, 1259, 1261, 3, 592, 296, 0, 1260, 
		    1255, 1, 0, 0, 0, 1260, 1261, 1, 0, 0, 0, 1261, 1267, 1, 0, 0, 0, 
		    1262, 1264, 5, 528, 0, 0, 1263, 1265, 5, 1124, 0, 0, 1264, 1263, 1, 
		    0, 0, 0, 1264, 1265, 1, 0, 0, 0, 1265, 1266, 1, 0, 0, 0, 1266, 1268, 
		    3, 584, 292, 0, 1267, 1262, 1, 0, 0, 0, 1267, 1268, 1, 0, 0, 0, 1268, 
		    1270, 1, 0, 0, 0, 1269, 1271, 5, 674, 0, 0, 1270, 1269, 1, 0, 0, 0, 
		    1270, 1271, 1, 0, 0, 0, 1271, 1277, 1, 0, 0, 0, 1272, 1274, 5, 368, 
		    0, 0, 1273, 1275, 5, 1124, 0, 0, 1274, 1273, 1, 0, 0, 0, 1274, 1275, 
		    1, 0, 0, 0, 1275, 1276, 1, 0, 0, 0, 1276, 1278, 5, 1148, 0, 0, 1277, 
		    1272, 1, 0, 0, 0, 1277, 1278, 1, 0, 0, 0, 1278, 1279, 1, 0, 0, 0, 
		    1279, 1281, 5, 409, 0, 0, 1280, 1282, 5, 1124, 0, 0, 1281, 1280, 1, 
		    0, 0, 0, 1281, 1282, 1, 0, 0, 0, 1282, 1283, 1, 0, 0, 0, 1283, 1284, 
		    3, 572, 286, 0, 1284, 45, 1, 0, 0, 0, 1285, 1287, 5, 33, 0, 0, 1286, 
		    1288, 3, 64, 32, 0, 1287, 1286, 1, 0, 0, 0, 1287, 1288, 1, 0, 0, 0, 
		    1288, 1289, 1, 0, 0, 0, 1289, 1290, 5, 177, 0, 0, 1290, 1291, 3, 550, 
		    275, 0, 1291, 1292, 7, 7, 0, 0, 1292, 1293, 7, 8, 0, 0, 1293, 1294, 
		    5, 118, 0, 0, 1294, 1295, 3, 552, 276, 0, 1295, 1296, 5, 65, 0, 0, 
		    1296, 1297, 5, 52, 0, 0, 1297, 1300, 5, 600, 0, 0, 1298, 1299, 7, 
		    9, 0, 0, 1299, 1301, 3, 550, 275, 0, 1300, 1298, 1, 0, 0, 0, 1300, 
		    1301, 1, 0, 0, 0, 1301, 1302, 1, 0, 0, 0, 1302, 1303, 3, 388, 194, 
		    0, 1303, 47, 1, 0, 0, 0, 1304, 1306, 5, 192, 0, 0, 1305, 1307, 5, 
		    571, 0, 0, 1306, 1305, 1, 0, 0, 0, 1306, 1307, 1, 0, 0, 0, 1307, 1308, 
		    1, 0, 0, 0, 1308, 1309, 3, 50, 25, 0, 1309, 49, 1, 0, 0, 0, 1310, 
		    1322, 3, 52, 26, 0, 1311, 1312, 5, 1133, 0, 0, 1312, 1317, 3, 54, 
		    27, 0, 1313, 1314, 5, 1135, 0, 0, 1314, 1316, 3, 54, 27, 0, 1315, 
		    1313, 1, 0, 0, 0, 1316, 1319, 1, 0, 0, 0, 1317, 1315, 1, 0, 0, 0, 
		    1317, 1318, 1, 0, 0, 0, 1318, 1320, 1, 0, 0, 0, 1319, 1317, 1, 0, 
		    0, 0, 1320, 1321, 5, 1134, 0, 0, 1321, 1323, 1, 0, 0, 0, 1322, 1311, 
		    1, 0, 0, 0, 1322, 1323, 1, 0, 0, 0, 1323, 1324, 1, 0, 0, 0, 1324, 
		    1325, 5, 12, 0, 0, 1325, 1326, 5, 1133, 0, 0, 1326, 1327, 3, 10, 5, 
		    0, 1327, 1330, 5, 1134, 0, 0, 1328, 1329, 5, 1135, 0, 0, 1329, 1331, 
		    3, 50, 25, 0, 1330, 1328, 1, 0, 0, 0, 1330, 1331, 1, 0, 0, 0, 1331, 
		    51, 1, 0, 0, 0, 1332, 1333, 3, 584, 292, 0, 1333, 53, 1, 0, 0, 0, 
		    1334, 1335, 3, 584, 292, 0, 1335, 55, 1, 0, 0, 0, 1336, 1338, 5, 33, 
		    0, 0, 1337, 1339, 3, 644, 322, 0, 1338, 1337, 1, 0, 0, 0, 1338, 1339, 
		    1, 0, 0, 0, 1339, 1343, 1, 0, 0, 0, 1340, 1341, 5, 336, 0, 0, 1341, 
		    1342, 5, 1124, 0, 0, 1342, 1344, 7, 10, 0, 0, 1343, 1340, 1, 0, 0, 
		    0, 1343, 1344, 1, 0, 0, 0, 1344, 1346, 1, 0, 0, 0, 1345, 1347, 3, 
		    64, 32, 0, 1346, 1345, 1, 0, 0, 0, 1346, 1347, 1, 0, 0, 0, 1347, 1351, 
		    1, 0, 0, 0, 1348, 1349, 5, 160, 0, 0, 1349, 1350, 5, 606, 0, 0, 1350, 
		    1352, 7, 11, 0, 0, 1351, 1348, 1, 0, 0, 0, 1351, 1352, 1, 0, 0, 0, 
		    1352, 1353, 1, 0, 0, 0, 1353, 1354, 5, 671, 0, 0, 1354, 1359, 3, 550, 
		    275, 0, 1355, 1356, 5, 1133, 0, 0, 1356, 1357, 3, 616, 308, 0, 1357, 
		    1358, 5, 1134, 0, 0, 1358, 1360, 1, 0, 0, 0, 1359, 1355, 1, 0, 0, 
		    0, 1359, 1360, 1, 0, 0, 0, 1360, 1361, 1, 0, 0, 0, 1361, 1381, 5, 
		    12, 0, 0, 1362, 1364, 5, 1133, 0, 0, 1363, 1365, 3, 48, 24, 0, 1364, 
		    1363, 1, 0, 0, 0, 1364, 1365, 1, 0, 0, 0, 1365, 1366, 1, 0, 0, 0, 
		    1366, 1367, 3, 200, 100, 0, 1367, 1368, 5, 1134, 0, 0, 1368, 1382, 
		    1, 0, 0, 0, 1369, 1371, 3, 48, 24, 0, 1370, 1369, 1, 0, 0, 0, 1370, 
		    1371, 1, 0, 0, 0, 1371, 1372, 1, 0, 0, 0, 1372, 1379, 3, 200, 100, 
		    0, 1373, 1375, 5, 192, 0, 0, 1374, 1376, 7, 12, 0, 0, 1375, 1374, 
		    1, 0, 0, 0, 1375, 1376, 1, 0, 0, 0, 1376, 1377, 1, 0, 0, 0, 1377, 
		    1378, 5, 26, 0, 0, 1378, 1380, 5, 120, 0, 0, 1379, 1373, 1, 0, 0, 
		    0, 1379, 1380, 1, 0, 0, 0, 1380, 1382, 1, 0, 0, 0, 1381, 1362, 1, 
		    0, 0, 0, 1381, 1370, 1, 0, 0, 0, 1382, 57, 1, 0, 0, 0, 1383, 1385, 
		    5, 42, 0, 0, 1384, 1383, 1, 0, 0, 0, 1384, 1385, 1, 0, 0, 0, 1385, 
		    1386, 1, 0, 0, 0, 1386, 1388, 3, 60, 30, 0, 1387, 1389, 5, 1124, 0, 
		    0, 1388, 1387, 1, 0, 0, 0, 1388, 1389, 1, 0, 0, 0, 1389, 1392, 1, 
		    0, 0, 0, 1390, 1393, 3, 568, 284, 0, 1391, 1393, 5, 42, 0, 0, 1392, 
		    1390, 1, 0, 0, 0, 1392, 1391, 1, 0, 0, 0, 1393, 1417, 1, 0, 0, 0, 
		    1394, 1396, 5, 42, 0, 0, 1395, 1394, 1, 0, 0, 0, 1395, 1396, 1, 0, 
		    0, 0, 1396, 1397, 1, 0, 0, 0, 1397, 1399, 5, 27, 0, 0, 1398, 1400, 
		    5, 1124, 0, 0, 1399, 1398, 1, 0, 0, 0, 1399, 1400, 1, 0, 0, 0, 1400, 
		    1401, 1, 0, 0, 0, 1401, 1417, 3, 570, 285, 0, 1402, 1404, 5, 42, 0, 
		    0, 1403, 1402, 1, 0, 0, 0, 1403, 1404, 1, 0, 0, 0, 1404, 1405, 1, 
		    0, 0, 0, 1405, 1407, 5, 405, 0, 0, 1406, 1408, 5, 1124, 0, 0, 1407, 
		    1406, 1, 0, 0, 0, 1407, 1408, 1, 0, 0, 0, 1408, 1409, 1, 0, 0, 0, 
		    1409, 1417, 5, 1148, 0, 0, 1410, 1411, 5, 134, 0, 0, 1411, 1413, 5, 
		    538, 0, 0, 1412, 1414, 5, 1124, 0, 0, 1413, 1412, 1, 0, 0, 0, 1413, 
		    1414, 1, 0, 0, 0, 1414, 1415, 1, 0, 0, 0, 1415, 1417, 7, 13, 0, 0, 
		    1416, 1384, 1, 0, 0, 0, 1416, 1395, 1, 0, 0, 0, 1416, 1403, 1, 0, 
		    0, 0, 1416, 1410, 1, 0, 0, 0, 1417, 59, 1, 0, 0, 0, 1418, 1419, 5, 
		    25, 0, 0, 1419, 1424, 5, 153, 0, 0, 1420, 1424, 5, 841, 0, 0, 1421, 
		    1422, 5, 222, 0, 0, 1422, 1424, 5, 153, 0, 0, 1423, 1418, 1, 0, 0, 
		    0, 1423, 1420, 1, 0, 0, 0, 1423, 1421, 1, 0, 0, 0, 1424, 61, 1, 0, 
		    0, 0, 1425, 1428, 5, 37, 0, 0, 1426, 1427, 5, 1133, 0, 0, 1427, 1429, 
		    5, 1134, 0, 0, 1428, 1426, 1, 0, 0, 0, 1428, 1429, 1, 0, 0, 0, 1429, 
		    63, 1, 0, 0, 0, 1430, 1431, 5, 392, 0, 0, 1431, 1434, 5, 1124, 0, 
		    0, 1432, 1435, 3, 564, 282, 0, 1433, 1435, 3, 62, 31, 0, 1434, 1432, 
		    1, 0, 0, 0, 1434, 1433, 1, 0, 0, 0, 1435, 65, 1, 0, 0, 0, 1436, 1437, 
		    5, 338, 0, 0, 1437, 1441, 3, 68, 34, 0, 1438, 1440, 3, 70, 35, 0, 
		    1439, 1438, 1, 0, 0, 0, 1440, 1443, 1, 0, 0, 0, 1441, 1439, 1, 0, 
		    0, 0, 1441, 1442, 1, 0, 0, 0, 1442, 1471, 1, 0, 0, 0, 1443, 1441, 
		    1, 0, 0, 0, 1444, 1447, 5, 417, 0, 0, 1445, 1448, 3, 590, 295, 0, 
		    1446, 1448, 3, 688, 344, 0, 1447, 1445, 1, 0, 0, 0, 1447, 1446, 1, 
		    0, 0, 0, 1448, 1449, 1, 0, 0, 0, 1449, 1458, 3, 72, 36, 0, 1450, 1451, 
		    5, 630, 0, 0, 1451, 1455, 3, 68, 34, 0, 1452, 1454, 3, 70, 35, 0, 
		    1453, 1452, 1, 0, 0, 0, 1454, 1457, 1, 0, 0, 0, 1455, 1453, 1, 0, 
		    0, 0, 1455, 1456, 1, 0, 0, 0, 1456, 1459, 1, 0, 0, 0, 1457, 1455, 
		    1, 0, 0, 0, 1458, 1450, 1, 0, 0, 0, 1458, 1459, 1, 0, 0, 0, 1459, 
		    1468, 1, 0, 0, 0, 1460, 1461, 5, 408, 0, 0, 1461, 1465, 3, 68, 34, 
		    0, 1462, 1464, 3, 70, 35, 0, 1463, 1462, 1, 0, 0, 0, 1464, 1467, 1, 
		    0, 0, 0, 1465, 1463, 1, 0, 0, 0, 1465, 1466, 1, 0, 0, 0, 1466, 1469, 
		    1, 0, 0, 0, 1467, 1465, 1, 0, 0, 0, 1468, 1460, 1, 0, 0, 0, 1468, 
		    1469, 1, 0, 0, 0, 1469, 1471, 1, 0, 0, 0, 1470, 1436, 1, 0, 0, 0, 
		    1470, 1444, 1, 0, 0, 0, 1471, 67, 1, 0, 0, 0, 1472, 1477, 5, 315, 
		    0, 0, 1473, 1477, 3, 594, 297, 0, 1474, 1477, 3, 590, 295, 0, 1475, 
		    1477, 3, 688, 344, 0, 1476, 1472, 1, 0, 0, 0, 1476, 1473, 1, 0, 0, 
		    0, 1476, 1474, 1, 0, 0, 0, 1476, 1475, 1, 0, 0, 0, 1477, 69, 1, 0, 
		    0, 0, 1478, 1479, 5, 1120, 0, 0, 1479, 1482, 5, 86, 0, 0, 1480, 1483, 
		    3, 590, 295, 0, 1481, 1483, 3, 688, 344, 0, 1482, 1480, 1, 0, 0, 0, 
		    1482, 1481, 1, 0, 0, 0, 1483, 1484, 1, 0, 0, 0, 1484, 1485, 3, 72, 
		    36, 0, 1485, 71, 1, 0, 0, 0, 1486, 1500, 3, 714, 357, 0, 1487, 1500, 
		    5, 221, 0, 0, 1488, 1500, 5, 240, 0, 0, 1489, 1500, 5, 241, 0, 0, 
		    1490, 1500, 5, 242, 0, 0, 1491, 1500, 5, 243, 0, 0, 1492, 1500, 5, 
		    244, 0, 0, 1493, 1500, 5, 245, 0, 0, 1494, 1500, 5, 246, 0, 0, 1495, 
		    1500, 5, 247, 0, 0, 1496, 1500, 5, 248, 0, 0, 1497, 1500, 5, 249, 
		    0, 0, 1498, 1500, 5, 250, 0, 0, 1499, 1486, 1, 0, 0, 0, 1499, 1487, 
		    1, 0, 0, 0, 1499, 1488, 1, 0, 0, 0, 1499, 1489, 1, 0, 0, 0, 1499, 
		    1490, 1, 0, 0, 0, 1499, 1491, 1, 0, 0, 0, 1499, 1492, 1, 0, 0, 0, 
		    1499, 1493, 1, 0, 0, 0, 1499, 1494, 1, 0, 0, 0, 1499, 1495, 1, 0, 
		    0, 0, 1499, 1496, 1, 0, 0, 0, 1499, 1497, 1, 0, 0, 0, 1499, 1498, 
		    1, 0, 0, 0, 1500, 73, 1, 0, 0, 0, 1501, 1507, 5, 403, 0, 0, 1502, 
		    1507, 5, 396, 0, 0, 1503, 1504, 5, 396, 0, 0, 1504, 1505, 5, 118, 
		    0, 0, 1505, 1507, 5, 614, 0, 0, 1506, 1501, 1, 0, 0, 0, 1506, 1502, 
		    1, 0, 0, 0, 1506, 1503, 1, 0, 0, 0, 1507, 75, 1, 0, 0, 0, 1508, 1509, 
		    5, 187, 0, 0, 1509, 1510, 7, 14, 0, 0, 1510, 77, 1, 0, 0, 0, 1511, 
		    1513, 5, 467, 0, 0, 1512, 1514, 5, 1124, 0, 0, 1513, 1512, 1, 0, 0, 
		    0, 1513, 1514, 1, 0, 0, 0, 1514, 1515, 1, 0, 0, 0, 1515, 1534, 3, 
		    592, 296, 0, 1516, 1534, 3, 76, 38, 0, 1517, 1518, 5, 192, 0, 0, 1518, 
		    1519, 5, 547, 0, 0, 1519, 1534, 3, 584, 292, 0, 1520, 1521, 5, 368, 
		    0, 0, 1521, 1534, 5, 1148, 0, 0, 1522, 1534, 7, 15, 0, 0, 1523, 1525, 
		    5, 875, 0, 0, 1524, 1526, 5, 1124, 0, 0, 1525, 1524, 1, 0, 0, 0, 1525, 
		    1526, 1, 0, 0, 0, 1526, 1527, 1, 0, 0, 0, 1527, 1534, 5, 1148, 0, 
		    0, 1528, 1530, 5, 1000, 0, 0, 1529, 1531, 5, 1124, 0, 0, 1530, 1529, 
		    1, 0, 0, 0, 1530, 1531, 1, 0, 0, 0, 1531, 1532, 1, 0, 0, 0, 1532, 
		    1534, 5, 1148, 0, 0, 1533, 1511, 1, 0, 0, 0, 1533, 1516, 1, 0, 0, 
		    0, 1533, 1517, 1, 0, 0, 0, 1533, 1520, 1, 0, 0, 0, 1533, 1522, 1, 
		    0, 0, 0, 1533, 1523, 1, 0, 0, 0, 1533, 1528, 1, 0, 0, 0, 1534, 79, 
		    1, 0, 0, 0, 1535, 1537, 7, 16, 0, 0, 1536, 1535, 1, 0, 0, 0, 1536, 
		    1537, 1, 0, 0, 0, 1537, 1538, 1, 0, 0, 0, 1538, 1539, 3, 584, 292, 
		    0, 1539, 1540, 3, 604, 302, 0, 1540, 81, 1, 0, 0, 0, 1541, 1542, 3, 
		    584, 292, 0, 1542, 1543, 3, 604, 302, 0, 1543, 83, 1, 0, 0, 0, 1544, 
		    1545, 5, 368, 0, 0, 1545, 1568, 5, 1148, 0, 0, 1546, 1547, 5, 468, 
		    0, 0, 1547, 1568, 5, 160, 0, 0, 1548, 1550, 5, 114, 0, 0, 1549, 1548, 
		    1, 0, 0, 0, 1549, 1550, 1, 0, 0, 0, 1550, 1551, 1, 0, 0, 0, 1551, 
		    1568, 5, 47, 0, 0, 1552, 1553, 5, 381, 0, 0, 1553, 1563, 5, 160, 0, 
		    0, 1554, 1555, 5, 521, 0, 0, 1555, 1563, 5, 160, 0, 0, 1556, 1557, 
		    5, 135, 0, 0, 1557, 1558, 5, 160, 0, 0, 1558, 1563, 5, 388, 0, 0, 
		    1559, 1560, 5, 112, 0, 0, 1560, 1561, 5, 160, 0, 0, 1561, 1563, 5, 
		    388, 0, 0, 1562, 1552, 1, 0, 0, 0, 1562, 1554, 1, 0, 0, 0, 1562, 1556, 
		    1, 0, 0, 0, 1562, 1559, 1, 0, 0, 0, 1563, 1568, 1, 0, 0, 0, 1564, 
		    1565, 5, 160, 0, 0, 1565, 1566, 5, 606, 0, 0, 1566, 1568, 7, 11, 0, 
		    0, 1567, 1544, 1, 0, 0, 0, 1567, 1546, 1, 0, 0, 0, 1567, 1549, 1, 
		    0, 0, 0, 1567, 1562, 1, 0, 0, 0, 1567, 1564, 1, 0, 0, 0, 1568, 85, 
		    1, 0, 0, 0, 1569, 1570, 5, 446, 0, 0, 1570, 1584, 5, 1148, 0, 0, 1571, 
		    1572, 5, 39, 0, 0, 1572, 1584, 5, 1148, 0, 0, 1573, 1574, 5, 665, 
		    0, 0, 1574, 1584, 5, 1148, 0, 0, 1575, 1576, 5, 551, 0, 0, 1576, 1584, 
		    5, 1148, 0, 0, 1577, 1578, 5, 617, 0, 0, 1578, 1584, 5, 1148, 0, 0, 
		    1579, 1580, 5, 542, 0, 0, 1580, 1584, 5, 1148, 0, 0, 1581, 1582, 5, 
		    557, 0, 0, 1582, 1584, 3, 590, 295, 0, 1583, 1569, 1, 0, 0, 0, 1583, 
		    1571, 1, 0, 0, 0, 1583, 1573, 1, 0, 0, 0, 1583, 1575, 1, 0, 0, 0, 
		    1583, 1577, 1, 0, 0, 0, 1583, 1579, 1, 0, 0, 0, 1583, 1581, 1, 0, 
		    0, 0, 1584, 87, 1, 0, 0, 0, 1585, 1586, 5, 1133, 0, 0, 1586, 1591, 
		    3, 90, 45, 0, 1587, 1588, 5, 1135, 0, 0, 1588, 1590, 3, 90, 45, 0, 
		    1589, 1587, 1, 0, 0, 0, 1590, 1593, 1, 0, 0, 0, 1591, 1589, 1, 0, 
		    0, 0, 1591, 1592, 1, 0, 0, 0, 1592, 1594, 1, 0, 0, 0, 1593, 1591, 
		    1, 0, 0, 0, 1594, 1595, 5, 1134, 0, 0, 1595, 89, 1, 0, 0, 0, 1596, 
		    1597, 3, 556, 278, 0, 1597, 1598, 3, 92, 46, 0, 1598, 1608, 1, 0, 
		    0, 0, 1599, 1601, 3, 96, 48, 0, 1600, 1602, 5, 114, 0, 0, 1601, 1600, 
		    1, 0, 0, 0, 1601, 1602, 1, 0, 0, 0, 1602, 1604, 1, 0, 0, 0, 1603, 
		    1605, 5, 57, 0, 0, 1604, 1603, 1, 0, 0, 0, 1604, 1605, 1, 0, 0, 0, 
		    1605, 1608, 1, 0, 0, 0, 1606, 1608, 3, 104, 52, 0, 1607, 1596, 1, 
		    0, 0, 0, 1607, 1599, 1, 0, 0, 0, 1607, 1606, 1, 0, 0, 0, 1608, 91, 
		    1, 0, 0, 0, 1609, 1613, 3, 604, 302, 0, 1610, 1612, 3, 94, 47, 0, 
		    1611, 1610, 1, 0, 0, 0, 1612, 1615, 1, 0, 0, 0, 1613, 1611, 1, 0, 
		    0, 0, 1613, 1614, 1, 0, 0, 0, 1614, 1617, 1, 0, 0, 0, 1615, 1613, 
		    1, 0, 0, 0, 1616, 1618, 5, 114, 0, 0, 1617, 1616, 1, 0, 0, 0, 1617, 
		    1618, 1, 0, 0, 0, 1618, 1620, 1, 0, 0, 0, 1619, 1621, 5, 57, 0, 0, 
		    1620, 1619, 1, 0, 0, 0, 1620, 1621, 1, 0, 0, 0, 1621, 93, 1, 0, 0, 
		    0, 1622, 1676, 3, 600, 300, 0, 1623, 1624, 5, 42, 0, 0, 1624, 1676, 
		    3, 634, 317, 0, 1625, 1676, 5, 673, 0, 0, 1626, 1676, 5, 459, 0, 0, 
		    1627, 1632, 5, 342, 0, 0, 1628, 1629, 5, 118, 0, 0, 1629, 1630, 5, 
		    184, 0, 0, 1630, 1632, 3, 636, 318, 0, 1631, 1627, 1, 0, 0, 0, 1631, 
		    1628, 1, 0, 0, 0, 1632, 1676, 1, 0, 0, 0, 1633, 1635, 5, 130, 0, 0, 
		    1634, 1633, 1, 0, 0, 0, 1634, 1635, 1, 0, 0, 0, 1635, 1636, 1, 0, 
		    0, 0, 1636, 1676, 5, 91, 0, 0, 1637, 1639, 5, 181, 0, 0, 1638, 1640, 
		    5, 91, 0, 0, 1639, 1638, 1, 0, 0, 0, 1639, 1640, 1, 0, 0, 0, 1640, 
		    1676, 1, 0, 0, 0, 1641, 1642, 5, 368, 0, 0, 1642, 1676, 5, 1148, 0, 
		    0, 1643, 1644, 5, 366, 0, 0, 1644, 1676, 7, 17, 0, 0, 1645, 1646, 
		    5, 636, 0, 0, 1646, 1676, 7, 18, 0, 0, 1647, 1676, 3, 98, 49, 0, 1648, 
		    1649, 5, 27, 0, 0, 1649, 1676, 3, 570, 285, 0, 1650, 1651, 5, 70, 
		    0, 0, 1651, 1653, 5, 8, 0, 0, 1652, 1650, 1, 0, 0, 0, 1652, 1653, 
		    1, 0, 0, 0, 1653, 1654, 1, 0, 0, 0, 1654, 1655, 5, 12, 0, 0, 1655, 
		    1656, 5, 1133, 0, 0, 1656, 1657, 3, 688, 344, 0, 1657, 1659, 5, 1134, 
		    0, 0, 1658, 1660, 7, 19, 0, 0, 1659, 1658, 1, 0, 0, 0, 1659, 1660, 
		    1, 0, 0, 0, 1660, 1676, 1, 0, 0, 0, 1661, 1662, 5, 239, 0, 0, 1662, 
		    1663, 5, 42, 0, 0, 1663, 1676, 5, 669, 0, 0, 1664, 1666, 5, 30, 0, 
		    0, 1665, 1667, 3, 584, 292, 0, 1666, 1665, 1, 0, 0, 0, 1666, 1667, 
		    1, 0, 0, 0, 1667, 1669, 1, 0, 0, 0, 1668, 1664, 1, 0, 0, 0, 1668, 
		    1669, 1, 0, 0, 0, 1669, 1670, 1, 0, 0, 0, 1670, 1671, 5, 26, 0, 0, 
		    1671, 1672, 5, 1133, 0, 0, 1672, 1673, 3, 688, 344, 0, 1673, 1674, 
		    5, 1134, 0, 0, 1674, 1676, 1, 0, 0, 0, 1675, 1622, 1, 0, 0, 0, 1675, 
		    1623, 1, 0, 0, 0, 1675, 1625, 1, 0, 0, 0, 1675, 1626, 1, 0, 0, 0, 
		    1675, 1631, 1, 0, 0, 0, 1675, 1634, 1, 0, 0, 0, 1675, 1637, 1, 0, 
		    0, 0, 1675, 1641, 1, 0, 0, 0, 1675, 1643, 1, 0, 0, 0, 1675, 1645, 
		    1, 0, 0, 0, 1675, 1647, 1, 0, 0, 0, 1675, 1648, 1, 0, 0, 0, 1675, 
		    1652, 1, 0, 0, 0, 1675, 1661, 1, 0, 0, 0, 1675, 1668, 1, 0, 0, 0, 
		    1676, 95, 1, 0, 0, 0, 1677, 1679, 5, 30, 0, 0, 1678, 1680, 3, 584, 
		    292, 0, 1679, 1678, 1, 0, 0, 0, 1679, 1680, 1, 0, 0, 0, 1680, 1682, 
		    1, 0, 0, 0, 1681, 1677, 1, 0, 0, 0, 1681, 1682, 1, 0, 0, 0, 1682, 
		    1683, 1, 0, 0, 0, 1683, 1684, 5, 130, 0, 0, 1684, 1686, 5, 91, 0, 
		    0, 1685, 1687, 3, 584, 292, 0, 1686, 1685, 1, 0, 0, 0, 1686, 1687, 
		    1, 0, 0, 0, 1687, 1689, 1, 0, 0, 0, 1688, 1690, 3, 76, 38, 0, 1689, 
		    1688, 1, 0, 0, 0, 1689, 1690, 1, 0, 0, 0, 1690, 1691, 1, 0, 0, 0, 
		    1691, 1695, 3, 622, 311, 0, 1692, 1694, 3, 78, 39, 0, 1693, 1692, 
		    1, 0, 0, 0, 1694, 1697, 1, 0, 0, 0, 1695, 1693, 1, 0, 0, 0, 1695, 
		    1696, 1, 0, 0, 0, 1696, 1747, 1, 0, 0, 0, 1697, 1695, 1, 0, 0, 0, 
		    1698, 1700, 5, 30, 0, 0, 1699, 1701, 3, 584, 292, 0, 1700, 1699, 1, 
		    0, 0, 0, 1700, 1701, 1, 0, 0, 0, 1701, 1703, 1, 0, 0, 0, 1702, 1698, 
		    1, 0, 0, 0, 1702, 1703, 1, 0, 0, 0, 1703, 1704, 1, 0, 0, 0, 1704, 
		    1706, 5, 181, 0, 0, 1705, 1707, 7, 20, 0, 0, 1706, 1705, 1, 0, 0, 
		    0, 1706, 1707, 1, 0, 0, 0, 1707, 1709, 1, 0, 0, 0, 1708, 1710, 3, 
		    584, 292, 0, 1709, 1708, 1, 0, 0, 0, 1709, 1710, 1, 0, 0, 0, 1710, 
		    1712, 1, 0, 0, 0, 1711, 1713, 3, 76, 38, 0, 1712, 1711, 1, 0, 0, 0, 
		    1712, 1713, 1, 0, 0, 0, 1713, 1714, 1, 0, 0, 0, 1714, 1718, 3, 622, 
		    311, 0, 1715, 1717, 3, 78, 39, 0, 1716, 1715, 1, 0, 0, 0, 1717, 1720, 
		    1, 0, 0, 0, 1718, 1716, 1, 0, 0, 0, 1718, 1719, 1, 0, 0, 0, 1719, 
		    1747, 1, 0, 0, 0, 1720, 1718, 1, 0, 0, 0, 1721, 1723, 5, 30, 0, 0, 
		    1722, 1724, 3, 584, 292, 0, 1723, 1722, 1, 0, 0, 0, 1723, 1724, 1, 
		    0, 0, 0, 1724, 1726, 1, 0, 0, 0, 1725, 1721, 1, 0, 0, 0, 1725, 1726, 
		    1, 0, 0, 0, 1726, 1727, 1, 0, 0, 0, 1727, 1728, 5, 67, 0, 0, 1728, 
		    1730, 5, 91, 0, 0, 1729, 1731, 3, 584, 292, 0, 1730, 1729, 1, 0, 0, 
		    0, 1730, 1731, 1, 0, 0, 0, 1731, 1732, 1, 0, 0, 0, 1732, 1733, 3, 
		    622, 311, 0, 1733, 1734, 3, 98, 49, 0, 1734, 1747, 1, 0, 0, 0, 1735, 
		    1737, 5, 30, 0, 0, 1736, 1738, 3, 584, 292, 0, 1737, 1736, 1, 0, 0, 
		    0, 1737, 1738, 1, 0, 0, 0, 1738, 1740, 1, 0, 0, 0, 1739, 1735, 1, 
		    0, 0, 0, 1739, 1740, 1, 0, 0, 0, 1740, 1741, 1, 0, 0, 0, 1741, 1742, 
		    5, 26, 0, 0, 1742, 1743, 5, 1133, 0, 0, 1743, 1744, 3, 688, 344, 0, 
		    1744, 1745, 5, 1134, 0, 0, 1745, 1747, 1, 0, 0, 0, 1746, 1681, 1, 
		    0, 0, 0, 1746, 1702, 1, 0, 0, 0, 1746, 1725, 1, 0, 0, 0, 1746, 1739, 
		    1, 0, 0, 0, 1747, 97, 1, 0, 0, 0, 1748, 1749, 5, 136, 0, 0, 1749, 
		    1751, 3, 552, 276, 0, 1750, 1752, 3, 622, 311, 0, 1751, 1750, 1, 0, 
		    0, 0, 1751, 1752, 1, 0, 0, 0, 1752, 1755, 1, 0, 0, 0, 1753, 1754, 
		    5, 109, 0, 0, 1754, 1756, 7, 21, 0, 0, 1755, 1753, 1, 0, 0, 0, 1755, 
		    1756, 1, 0, 0, 0, 1756, 1758, 1, 0, 0, 0, 1757, 1759, 3, 100, 50, 
		    0, 1758, 1757, 1, 0, 0, 0, 1758, 1759, 1, 0, 0, 0, 1759, 99, 1, 0, 
		    0, 0, 1760, 1761, 5, 118, 0, 0, 1761, 1762, 5, 44, 0, 0, 1762, 1766, 
		    3, 102, 51, 0, 1763, 1764, 5, 118, 0, 0, 1764, 1765, 5, 184, 0, 0, 
		    1765, 1767, 3, 102, 51, 0, 1766, 1763, 1, 0, 0, 0, 1766, 1767, 1, 
		    0, 0, 0, 1767, 1777, 1, 0, 0, 0, 1768, 1769, 5, 118, 0, 0, 1769, 1770, 
		    5, 184, 0, 0, 1770, 1774, 3, 102, 51, 0, 1771, 1772, 5, 118, 0, 0, 
		    1772, 1773, 5, 44, 0, 0, 1773, 1775, 3, 102, 51, 0, 1774, 1771, 1, 
		    0, 0, 0, 1774, 1775, 1, 0, 0, 0, 1775, 1777, 1, 0, 0, 0, 1776, 1760, 
		    1, 0, 0, 0, 1776, 1768, 1, 0, 0, 0, 1777, 101, 1, 0, 0, 0, 1778, 1787, 
		    5, 144, 0, 0, 1779, 1787, 5, 21, 0, 0, 1780, 1781, 5, 153, 0, 0, 1781, 
		    1787, 5, 116, 0, 0, 1782, 1783, 5, 521, 0, 0, 1783, 1787, 5, 333, 
		    0, 0, 1784, 1785, 5, 153, 0, 0, 1785, 1787, 5, 42, 0, 0, 1786, 1778, 
		    1, 0, 0, 0, 1786, 1779, 1, 0, 0, 0, 1786, 1780, 1, 0, 0, 0, 1786, 
		    1782, 1, 0, 0, 0, 1786, 1784, 1, 0, 0, 0, 1787, 103, 1, 0, 0, 0, 1788, 
		    1790, 7, 20, 0, 0, 1789, 1791, 3, 584, 292, 0, 1790, 1789, 1, 0, 0, 
		    0, 1790, 1791, 1, 0, 0, 0, 1791, 1793, 1, 0, 0, 0, 1792, 1794, 3, 
		    76, 38, 0, 1793, 1792, 1, 0, 0, 0, 1793, 1794, 1, 0, 0, 0, 1794, 1795, 
		    1, 0, 0, 0, 1795, 1799, 3, 622, 311, 0, 1796, 1798, 3, 78, 39, 0, 
		    1797, 1796, 1, 0, 0, 0, 1798, 1801, 1, 0, 0, 0, 1799, 1797, 1, 0, 
		    0, 0, 1799, 1800, 1, 0, 0, 0, 1800, 1817, 1, 0, 0, 0, 1801, 1799, 
		    1, 0, 0, 0, 1802, 1804, 7, 22, 0, 0, 1803, 1805, 7, 20, 0, 0, 1804, 
		    1803, 1, 0, 0, 0, 1804, 1805, 1, 0, 0, 0, 1805, 1807, 1, 0, 0, 0, 
		    1806, 1808, 3, 584, 292, 0, 1807, 1806, 1, 0, 0, 0, 1807, 1808, 1, 
		    0, 0, 0, 1808, 1809, 1, 0, 0, 0, 1809, 1813, 3, 622, 311, 0, 1810, 
		    1812, 3, 78, 39, 0, 1811, 1810, 1, 0, 0, 0, 1812, 1815, 1, 0, 0, 0, 
		    1813, 1811, 1, 0, 0, 0, 1813, 1814, 1, 0, 0, 0, 1814, 1817, 1, 0, 
		    0, 0, 1815, 1813, 1, 0, 0, 0, 1816, 1788, 1, 0, 0, 0, 1816, 1802, 
		    1, 0, 0, 0, 1817, 105, 1, 0, 0, 0, 1818, 1820, 5, 409, 0, 0, 1819, 
		    1821, 5, 1124, 0, 0, 1820, 1819, 1, 0, 0, 0, 1820, 1821, 1, 0, 0, 
		    0, 1821, 1823, 1, 0, 0, 0, 1822, 1824, 3, 572, 286, 0, 1823, 1822, 
		    1, 0, 0, 0, 1823, 1824, 1, 0, 0, 0, 1824, 2004, 1, 0, 0, 0, 1825, 
		    1827, 5, 875, 0, 0, 1826, 1828, 5, 1124, 0, 0, 1827, 1826, 1, 0, 0, 
		    0, 1827, 1828, 1, 0, 0, 0, 1828, 1829, 1, 0, 0, 0, 1829, 2004, 5, 
		    1148, 0, 0, 1830, 1832, 5, 341, 0, 0, 1831, 1833, 5, 1124, 0, 0, 1832, 
		    1831, 1, 0, 0, 0, 1832, 1833, 1, 0, 0, 0, 1833, 1834, 1, 0, 0, 0, 
		    1834, 2004, 3, 590, 295, 0, 1835, 1837, 5, 342, 0, 0, 1836, 1838, 
		    5, 1124, 0, 0, 1837, 1836, 1, 0, 0, 0, 1837, 1838, 1, 0, 0, 0, 1838, 
		    1839, 1, 0, 0, 0, 1839, 2004, 3, 590, 295, 0, 1840, 1842, 5, 343, 
		    0, 0, 1841, 1843, 5, 1124, 0, 0, 1842, 1841, 1, 0, 0, 0, 1842, 1843, 
		    1, 0, 0, 0, 1843, 1844, 1, 0, 0, 0, 1844, 2004, 3, 590, 295, 0, 1845, 
		    1847, 5, 42, 0, 0, 1846, 1845, 1, 0, 0, 0, 1846, 1847, 1, 0, 0, 0, 
		    1847, 1848, 1, 0, 0, 0, 1848, 1850, 3, 60, 30, 0, 1849, 1851, 5, 1124, 
		    0, 0, 1850, 1849, 1, 0, 0, 0, 1850, 1851, 1, 0, 0, 0, 1851, 1854, 
		    1, 0, 0, 0, 1852, 1855, 3, 568, 284, 0, 1853, 1855, 5, 42, 0, 0, 1854, 
		    1852, 1, 0, 0, 0, 1854, 1853, 1, 0, 0, 0, 1855, 2004, 1, 0, 0, 0, 
		    1856, 1858, 7, 23, 0, 0, 1857, 1859, 5, 1124, 0, 0, 1858, 1857, 1, 
		    0, 0, 0, 1858, 1859, 1, 0, 0, 0, 1859, 1860, 1, 0, 0, 0, 1860, 2004, 
		    7, 24, 0, 0, 1861, 1863, 5, 42, 0, 0, 1862, 1861, 1, 0, 0, 0, 1862, 
		    1863, 1, 0, 0, 0, 1863, 1864, 1, 0, 0, 0, 1864, 1866, 5, 27, 0, 0, 
		    1865, 1867, 5, 1124, 0, 0, 1866, 1865, 1, 0, 0, 0, 1866, 1867, 1, 
		    0, 0, 0, 1867, 1868, 1, 0, 0, 0, 1868, 2004, 3, 570, 285, 0, 1869, 
		    1871, 5, 368, 0, 0, 1870, 1872, 5, 1124, 0, 0, 1871, 1870, 1, 0, 0, 
		    0, 1871, 1872, 1, 0, 0, 0, 1872, 1873, 1, 0, 0, 0, 1873, 2004, 5, 
		    1148, 0, 0, 1874, 1876, 5, 373, 0, 0, 1875, 1877, 5, 1124, 0, 0, 1876, 
		    1875, 1, 0, 0, 0, 1876, 1877, 1, 0, 0, 0, 1877, 1878, 1, 0, 0, 0, 
		    1878, 2004, 7, 25, 0, 0, 1879, 1881, 5, 376, 0, 0, 1880, 1882, 5, 
		    1124, 0, 0, 1881, 1880, 1, 0, 0, 0, 1881, 1882, 1, 0, 0, 0, 1882, 
		    1883, 1, 0, 0, 0, 1883, 2004, 5, 1148, 0, 0, 1884, 1885, 7, 26, 0, 
		    0, 1885, 1887, 5, 395, 0, 0, 1886, 1888, 5, 1124, 0, 0, 1887, 1886, 
		    1, 0, 0, 0, 1887, 1888, 1, 0, 0, 0, 1888, 1889, 1, 0, 0, 0, 1889, 
		    2004, 5, 1148, 0, 0, 1890, 1892, 5, 393, 0, 0, 1891, 1893, 5, 1124, 
		    0, 0, 1892, 1891, 1, 0, 0, 0, 1892, 1893, 1, 0, 0, 0, 1893, 1894, 
		    1, 0, 0, 0, 1894, 2004, 7, 24, 0, 0, 1895, 1897, 5, 405, 0, 0, 1896, 
		    1898, 5, 1124, 0, 0, 1897, 1896, 1, 0, 0, 0, 1897, 1898, 1, 0, 0, 
		    0, 1898, 1899, 1, 0, 0, 0, 1899, 2004, 5, 1148, 0, 0, 1900, 1902, 
		    7, 27, 0, 0, 1901, 1903, 5, 1124, 0, 0, 1902, 1901, 1, 0, 0, 0, 1902, 
		    1903, 1, 0, 0, 0, 1903, 1904, 1, 0, 0, 0, 1904, 2004, 7, 24, 0, 0, 
		    1905, 1907, 7, 28, 0, 0, 1906, 1908, 5, 1124, 0, 0, 1907, 1906, 1, 
		    0, 0, 0, 1907, 1908, 1, 0, 0, 0, 1908, 1909, 1, 0, 0, 0, 1909, 2004, 
		    3, 590, 295, 0, 1910, 1912, 5, 406, 0, 0, 1911, 1913, 5, 1124, 0, 
		    0, 1912, 1911, 1, 0, 0, 0, 1912, 1913, 1, 0, 0, 0, 1913, 1914, 1, 
		    0, 0, 0, 1914, 2004, 3, 590, 295, 0, 1915, 1916, 5, 81, 0, 0, 1916, 
		    1918, 5, 395, 0, 0, 1917, 1919, 5, 1124, 0, 0, 1918, 1917, 1, 0, 0, 
		    0, 1918, 1919, 1, 0, 0, 0, 1919, 1920, 1, 0, 0, 0, 1920, 2004, 5, 
		    1148, 0, 0, 1921, 1923, 5, 455, 0, 0, 1922, 1924, 5, 1124, 0, 0, 1923, 
		    1922, 1, 0, 0, 0, 1923, 1924, 1, 0, 0, 0, 1924, 1925, 1, 0, 0, 0, 
		    1925, 2004, 7, 29, 0, 0, 1926, 1928, 5, 467, 0, 0, 1927, 1929, 5, 
		    1124, 0, 0, 1928, 1927, 1, 0, 0, 0, 1928, 1929, 1, 0, 0, 0, 1929, 
		    1930, 1, 0, 0, 0, 1930, 2004, 3, 592, 296, 0, 1931, 1933, 5, 500, 
		    0, 0, 1932, 1934, 5, 1124, 0, 0, 1933, 1932, 1, 0, 0, 0, 1933, 1934, 
		    1, 0, 0, 0, 1934, 1935, 1, 0, 0, 0, 1935, 2004, 3, 590, 295, 0, 1936, 
		    1938, 5, 510, 0, 0, 1937, 1939, 5, 1124, 0, 0, 1938, 1937, 1, 0, 0, 
		    0, 1938, 1939, 1, 0, 0, 0, 1939, 1940, 1, 0, 0, 0, 1940, 2004, 3, 
		    590, 295, 0, 1941, 1943, 5, 543, 0, 0, 1942, 1944, 5, 1124, 0, 0, 
		    1943, 1942, 1, 0, 0, 0, 1943, 1944, 1, 0, 0, 0, 1944, 1945, 1, 0, 
		    0, 0, 1945, 2004, 7, 13, 0, 0, 1946, 1948, 5, 551, 0, 0, 1947, 1949, 
		    5, 1124, 0, 0, 1948, 1947, 1, 0, 0, 0, 1948, 1949, 1, 0, 0, 0, 1949, 
		    1950, 1, 0, 0, 0, 1950, 2004, 5, 1148, 0, 0, 1951, 1953, 5, 602, 0, 
		    0, 1952, 1954, 5, 1124, 0, 0, 1953, 1952, 1, 0, 0, 0, 1953, 1954, 
		    1, 0, 0, 0, 1954, 1955, 1, 0, 0, 0, 1955, 2004, 7, 30, 0, 0, 1956, 
		    1957, 5, 629, 0, 0, 1957, 2004, 5, 653, 0, 0, 1958, 1960, 5, 1000, 
		    0, 0, 1959, 1961, 5, 1124, 0, 0, 1960, 1959, 1, 0, 0, 0, 1960, 1961, 
		    1, 0, 0, 0, 1961, 1962, 1, 0, 0, 0, 1962, 2004, 5, 1148, 0, 0, 1963, 
		    1965, 5, 631, 0, 0, 1964, 1966, 5, 1124, 0, 0, 1965, 1964, 1, 0, 0, 
		    0, 1965, 1966, 1, 0, 0, 0, 1966, 1967, 1, 0, 0, 0, 1967, 2004, 7, 
		    13, 0, 0, 1968, 1970, 5, 632, 0, 0, 1969, 1971, 5, 1124, 0, 0, 1970, 
		    1969, 1, 0, 0, 0, 1970, 1971, 1, 0, 0, 0, 1971, 1972, 1, 0, 0, 0, 
		    1972, 2004, 7, 13, 0, 0, 1973, 1975, 5, 633, 0, 0, 1974, 1976, 5, 
		    1124, 0, 0, 1975, 1974, 1, 0, 0, 0, 1975, 1976, 1, 0, 0, 0, 1976, 
		    1979, 1, 0, 0, 0, 1977, 1980, 5, 42, 0, 0, 1978, 1980, 3, 590, 295, 
		    0, 1979, 1977, 1, 0, 0, 0, 1979, 1978, 1, 0, 0, 0, 1980, 2004, 1, 
		    0, 0, 0, 1981, 1982, 5, 647, 0, 0, 1982, 1984, 3, 584, 292, 0, 1983, 
		    1985, 3, 110, 55, 0, 1984, 1983, 1, 0, 0, 0, 1984, 1985, 1, 0, 0, 
		    0, 1985, 2004, 1, 0, 0, 0, 1986, 1987, 5, 648, 0, 0, 1987, 1988, 5, 
		    1124, 0, 0, 1988, 2004, 3, 108, 54, 0, 1989, 2004, 3, 110, 55, 0, 
		    1990, 1992, 5, 654, 0, 0, 1991, 1993, 5, 1124, 0, 0, 1992, 1991, 1, 
		    0, 0, 0, 1992, 1993, 1, 0, 0, 0, 1993, 1994, 1, 0, 0, 0, 1994, 2004, 
		    7, 24, 0, 0, 1995, 1997, 5, 180, 0, 0, 1996, 1998, 5, 1124, 0, 0, 
		    1997, 1996, 1, 0, 0, 0, 1997, 1998, 1, 0, 0, 0, 1998, 1999, 1, 0, 
		    0, 0, 1999, 2000, 5, 1133, 0, 0, 2000, 2001, 3, 620, 310, 0, 2001, 
		    2002, 5, 1134, 0, 0, 2002, 2004, 1, 0, 0, 0, 2003, 1818, 1, 0, 0, 
		    0, 2003, 1825, 1, 0, 0, 0, 2003, 1830, 1, 0, 0, 0, 2003, 1835, 1, 
		    0, 0, 0, 2003, 1840, 1, 0, 0, 0, 2003, 1846, 1, 0, 0, 0, 2003, 1856, 
		    1, 0, 0, 0, 2003, 1862, 1, 0, 0, 0, 2003, 1869, 1, 0, 0, 0, 2003, 
		    1874, 1, 0, 0, 0, 2003, 1879, 1, 0, 0, 0, 2003, 1884, 1, 0, 0, 0, 
		    2003, 1890, 1, 0, 0, 0, 2003, 1895, 1, 0, 0, 0, 2003, 1900, 1, 0, 
		    0, 0, 2003, 1905, 1, 0, 0, 0, 2003, 1910, 1, 0, 0, 0, 2003, 1915, 
		    1, 0, 0, 0, 2003, 1921, 1, 0, 0, 0, 2003, 1926, 1, 0, 0, 0, 2003, 
		    1931, 1, 0, 0, 0, 2003, 1936, 1, 0, 0, 0, 2003, 1941, 1, 0, 0, 0, 
		    2003, 1946, 1, 0, 0, 0, 2003, 1951, 1, 0, 0, 0, 2003, 1956, 1, 0, 
		    0, 0, 2003, 1958, 1, 0, 0, 0, 2003, 1963, 1, 0, 0, 0, 2003, 1968, 
		    1, 0, 0, 0, 2003, 1973, 1, 0, 0, 0, 2003, 1981, 1, 0, 0, 0, 2003, 
		    1986, 1, 0, 0, 0, 2003, 1989, 1, 0, 0, 0, 2003, 1990, 1, 0, 0, 0, 
		    2003, 1995, 1, 0, 0, 0, 2004, 107, 1, 0, 0, 0, 2005, 2006, 7, 31, 
		    0, 0, 2006, 109, 1, 0, 0, 0, 2007, 2008, 5, 636, 0, 0, 2008, 2009, 
		    7, 18, 0, 0, 2009, 111, 1, 0, 0, 0, 2010, 2011, 5, 129, 0, 0, 2011, 
		    2012, 5, 19, 0, 0, 2012, 2015, 3, 114, 57, 0, 2013, 2014, 5, 550, 
		    0, 0, 2014, 2016, 3, 590, 295, 0, 2015, 2013, 1, 0, 0, 0, 2015, 2016, 
		    1, 0, 0, 0, 2016, 2024, 1, 0, 0, 0, 2017, 2018, 5, 641, 0, 0, 2018, 
		    2019, 5, 19, 0, 0, 2019, 2022, 3, 116, 58, 0, 2020, 2021, 5, 642, 
		    0, 0, 2021, 2023, 3, 590, 295, 0, 2022, 2020, 1, 0, 0, 0, 2022, 2023, 
		    1, 0, 0, 0, 2023, 2025, 1, 0, 0, 0, 2024, 2017, 1, 0, 0, 0, 2024, 
		    2025, 1, 0, 0, 0, 2025, 2037, 1, 0, 0, 0, 2026, 2027, 5, 1133, 0, 
		    0, 2027, 2032, 3, 118, 59, 0, 2028, 2029, 5, 1135, 0, 0, 2029, 2031, 
		    3, 118, 59, 0, 2030, 2028, 1, 0, 0, 0, 2031, 2034, 1, 0, 0, 0, 2032, 
		    2030, 1, 0, 0, 0, 2032, 2033, 1, 0, 0, 0, 2033, 2035, 1, 0, 0, 0, 
		    2034, 2032, 1, 0, 0, 0, 2035, 2036, 5, 1134, 0, 0, 2036, 2038, 1, 
		    0, 0, 0, 2037, 2026, 1, 0, 0, 0, 2037, 2038, 1, 0, 0, 0, 2038, 113, 
		    1, 0, 0, 0, 2039, 2041, 5, 100, 0, 0, 2040, 2039, 1, 0, 0, 0, 2040, 
		    2041, 1, 0, 0, 0, 2041, 2042, 1, 0, 0, 0, 2042, 2043, 5, 443, 0, 0, 
		    2043, 2044, 5, 1133, 0, 0, 2044, 2045, 3, 688, 344, 0, 2045, 2046, 
		    5, 1134, 0, 0, 2046, 2086, 1, 0, 0, 0, 2047, 2049, 5, 100, 0, 0, 2048, 
		    2047, 1, 0, 0, 0, 2048, 2049, 1, 0, 0, 0, 2049, 2050, 1, 0, 0, 0, 
		    2050, 2054, 5, 91, 0, 0, 2051, 2052, 5, 336, 0, 0, 2052, 2053, 5, 
		    1124, 0, 0, 2053, 2055, 7, 32, 0, 0, 2054, 2051, 1, 0, 0, 0, 2054, 
		    2055, 1, 0, 0, 0, 2055, 2056, 1, 0, 0, 0, 2056, 2058, 5, 1133, 0, 
		    0, 2057, 2059, 3, 616, 308, 0, 2058, 2057, 1, 0, 0, 0, 2058, 2059, 
		    1, 0, 0, 0, 2059, 2060, 1, 0, 0, 0, 2060, 2086, 5, 1134, 0, 0, 2061, 
		    2071, 5, 133, 0, 0, 2062, 2063, 5, 1133, 0, 0, 2063, 2064, 3, 688, 
		    344, 0, 2064, 2065, 5, 1134, 0, 0, 2065, 2072, 1, 0, 0, 0, 2066, 2067, 
		    5, 365, 0, 0, 2067, 2068, 5, 1133, 0, 0, 2068, 2069, 3, 616, 308, 
		    0, 2069, 2070, 5, 1134, 0, 0, 2070, 2072, 1, 0, 0, 0, 2071, 2062, 
		    1, 0, 0, 0, 2071, 2066, 1, 0, 0, 0, 2072, 2086, 1, 0, 0, 0, 2073, 
		    2083, 5, 473, 0, 0, 2074, 2075, 5, 1133, 0, 0, 2075, 2076, 3, 688, 
		    344, 0, 2076, 2077, 5, 1134, 0, 0, 2077, 2084, 1, 0, 0, 0, 2078, 2079, 
		    5, 365, 0, 0, 2079, 2080, 5, 1133, 0, 0, 2080, 2081, 3, 616, 308, 
		    0, 2081, 2082, 5, 1134, 0, 0, 2082, 2084, 1, 0, 0, 0, 2083, 2074, 
		    1, 0, 0, 0, 2083, 2078, 1, 0, 0, 0, 2084, 2086, 1, 0, 0, 0, 2085, 
		    2040, 1, 0, 0, 0, 2085, 2048, 1, 0, 0, 0, 2085, 2061, 1, 0, 0, 0, 
		    2085, 2073, 1, 0, 0, 0, 2086, 115, 1, 0, 0, 0, 2087, 2089, 5, 100, 
		    0, 0, 2088, 2087, 1, 0, 0, 0, 2088, 2089, 1, 0, 0, 0, 2089, 2090, 
		    1, 0, 0, 0, 2090, 2091, 5, 443, 0, 0, 2091, 2092, 5, 1133, 0, 0, 2092, 
		    2093, 3, 688, 344, 0, 2093, 2094, 5, 1134, 0, 0, 2094, 2109, 1, 0, 
		    0, 0, 2095, 2097, 5, 100, 0, 0, 2096, 2095, 1, 0, 0, 0, 2096, 2097, 
		    1, 0, 0, 0, 2097, 2098, 1, 0, 0, 0, 2098, 2102, 5, 91, 0, 0, 2099, 
		    2100, 5, 336, 0, 0, 2100, 2101, 5, 1124, 0, 0, 2101, 2103, 7, 32, 
		    0, 0, 2102, 2099, 1, 0, 0, 0, 2102, 2103, 1, 0, 0, 0, 2103, 2104, 
		    1, 0, 0, 0, 2104, 2105, 5, 1133, 0, 0, 2105, 2106, 3, 616, 308, 0, 
		    2106, 2107, 5, 1134, 0, 0, 2107, 2109, 1, 0, 0, 0, 2108, 2088, 1, 
		    0, 0, 0, 2108, 2096, 1, 0, 0, 0, 2109, 117, 1, 0, 0, 0, 2110, 2111, 
		    5, 129, 0, 0, 2111, 2112, 3, 584, 292, 0, 2112, 2113, 5, 188, 0, 0, 
		    2113, 2114, 5, 471, 0, 0, 2114, 2115, 5, 651, 0, 0, 2115, 2116, 5, 
		    1133, 0, 0, 2116, 2121, 3, 120, 60, 0, 2117, 2118, 5, 1135, 0, 0, 
		    2118, 2120, 3, 120, 60, 0, 2119, 2117, 1, 0, 0, 0, 2120, 2123, 1, 
		    0, 0, 0, 2121, 2119, 1, 0, 0, 0, 2121, 2122, 1, 0, 0, 0, 2122, 2124, 
		    1, 0, 0, 0, 2123, 2121, 1, 0, 0, 0, 2124, 2128, 5, 1134, 0, 0, 2125, 
		    2127, 3, 126, 63, 0, 2126, 2125, 1, 0, 0, 0, 2127, 2130, 1, 0, 0, 
		    0, 2128, 2126, 1, 0, 0, 0, 2128, 2129, 1, 0, 0, 0, 2129, 2142, 1, 
		    0, 0, 0, 2130, 2128, 1, 0, 0, 0, 2131, 2132, 5, 1133, 0, 0, 2132, 
		    2137, 3, 124, 62, 0, 2133, 2134, 5, 1135, 0, 0, 2134, 2136, 3, 124, 
		    62, 0, 2135, 2133, 1, 0, 0, 0, 2136, 2139, 1, 0, 0, 0, 2137, 2135, 
		    1, 0, 0, 0, 2137, 2138, 1, 0, 0, 0, 2138, 2140, 1, 0, 0, 0, 2139, 
		    2137, 1, 0, 0, 0, 2140, 2141, 5, 1134, 0, 0, 2141, 2143, 1, 0, 0, 
		    0, 2142, 2131, 1, 0, 0, 0, 2142, 2143, 1, 0, 0, 0, 2143, 2257, 1, 
		    0, 0, 0, 2144, 2145, 5, 129, 0, 0, 2145, 2146, 3, 584, 292, 0, 2146, 
		    2147, 5, 188, 0, 0, 2147, 2148, 5, 471, 0, 0, 2148, 2149, 5, 651, 
		    0, 0, 2149, 2153, 3, 120, 60, 0, 2150, 2152, 3, 126, 63, 0, 2151, 
		    2150, 1, 0, 0, 0, 2152, 2155, 1, 0, 0, 0, 2153, 2151, 1, 0, 0, 0, 
		    2153, 2154, 1, 0, 0, 0, 2154, 2167, 1, 0, 0, 0, 2155, 2153, 1, 0, 
		    0, 0, 2156, 2157, 5, 1133, 0, 0, 2157, 2162, 3, 124, 62, 0, 2158, 
		    2159, 5, 1135, 0, 0, 2159, 2161, 3, 124, 62, 0, 2160, 2158, 1, 0, 
		    0, 0, 2161, 2164, 1, 0, 0, 0, 2162, 2160, 1, 0, 0, 0, 2162, 2163, 
		    1, 0, 0, 0, 2163, 2165, 1, 0, 0, 0, 2164, 2162, 1, 0, 0, 0, 2165, 
		    2166, 5, 1134, 0, 0, 2166, 2168, 1, 0, 0, 0, 2167, 2156, 1, 0, 0, 
		    0, 2167, 2168, 1, 0, 0, 0, 2168, 2257, 1, 0, 0, 0, 2169, 2170, 5, 
		    129, 0, 0, 2170, 2171, 3, 584, 292, 0, 2171, 2172, 5, 188, 0, 0, 2172, 
		    2173, 5, 80, 0, 0, 2173, 2174, 5, 1133, 0, 0, 2174, 2179, 3, 120, 
		    60, 0, 2175, 2176, 5, 1135, 0, 0, 2176, 2178, 3, 120, 60, 0, 2177, 
		    2175, 1, 0, 0, 0, 2178, 2181, 1, 0, 0, 0, 2179, 2177, 1, 0, 0, 0, 
		    2179, 2180, 1, 0, 0, 0, 2180, 2182, 1, 0, 0, 0, 2181, 2179, 1, 0, 
		    0, 0, 2182, 2186, 5, 1134, 0, 0, 2183, 2185, 3, 126, 63, 0, 2184, 
		    2183, 1, 0, 0, 0, 2185, 2188, 1, 0, 0, 0, 2186, 2184, 1, 0, 0, 0, 
		    2186, 2187, 1, 0, 0, 0, 2187, 2200, 1, 0, 0, 0, 2188, 2186, 1, 0, 
		    0, 0, 2189, 2190, 5, 1133, 0, 0, 2190, 2195, 3, 124, 62, 0, 2191, 
		    2192, 5, 1135, 0, 0, 2192, 2194, 3, 124, 62, 0, 2193, 2191, 1, 0, 
		    0, 0, 2194, 2197, 1, 0, 0, 0, 2195, 2193, 1, 0, 0, 0, 2195, 2196, 
		    1, 0, 0, 0, 2196, 2198, 1, 0, 0, 0, 2197, 2195, 1, 0, 0, 0, 2198, 
		    2199, 5, 1134, 0, 0, 2199, 2201, 1, 0, 0, 0, 2200, 2189, 1, 0, 0, 
		    0, 2200, 2201, 1, 0, 0, 0, 2201, 2257, 1, 0, 0, 0, 2202, 2203, 5, 
		    129, 0, 0, 2203, 2204, 3, 584, 292, 0, 2204, 2205, 5, 188, 0, 0, 2205, 
		    2206, 5, 80, 0, 0, 2206, 2207, 5, 1133, 0, 0, 2207, 2212, 3, 122, 
		    61, 0, 2208, 2209, 5, 1135, 0, 0, 2209, 2211, 3, 122, 61, 0, 2210, 
		    2208, 1, 0, 0, 0, 2211, 2214, 1, 0, 0, 0, 2212, 2210, 1, 0, 0, 0, 
		    2212, 2213, 1, 0, 0, 0, 2213, 2215, 1, 0, 0, 0, 2214, 2212, 1, 0, 
		    0, 0, 2215, 2219, 5, 1134, 0, 0, 2216, 2218, 3, 126, 63, 0, 2217, 
		    2216, 1, 0, 0, 0, 2218, 2221, 1, 0, 0, 0, 2219, 2217, 1, 0, 0, 0, 
		    2219, 2220, 1, 0, 0, 0, 2220, 2233, 1, 0, 0, 0, 2221, 2219, 1, 0, 
		    0, 0, 2222, 2223, 5, 1133, 0, 0, 2223, 2228, 3, 124, 62, 0, 2224, 
		    2225, 5, 1135, 0, 0, 2225, 2227, 3, 124, 62, 0, 2226, 2224, 1, 0, 
		    0, 0, 2227, 2230, 1, 0, 0, 0, 2228, 2226, 1, 0, 0, 0, 2228, 2229, 
		    1, 0, 0, 0, 2229, 2231, 1, 0, 0, 0, 2230, 2228, 1, 0, 0, 0, 2231, 
		    2232, 5, 1134, 0, 0, 2232, 2234, 1, 0, 0, 0, 2233, 2222, 1, 0, 0, 
		    0, 2233, 2234, 1, 0, 0, 0, 2234, 2257, 1, 0, 0, 0, 2235, 2236, 5, 
		    129, 0, 0, 2236, 2240, 3, 584, 292, 0, 2237, 2239, 3, 126, 63, 0, 
		    2238, 2237, 1, 0, 0, 0, 2239, 2242, 1, 0, 0, 0, 2240, 2238, 1, 0, 
		    0, 0, 2240, 2241, 1, 0, 0, 0, 2241, 2254, 1, 0, 0, 0, 2242, 2240, 
		    1, 0, 0, 0, 2243, 2244, 5, 1133, 0, 0, 2244, 2249, 3, 124, 62, 0, 
		    2245, 2246, 5, 1135, 0, 0, 2246, 2248, 3, 124, 62, 0, 2247, 2245, 
		    1, 0, 0, 0, 2248, 2251, 1, 0, 0, 0, 2249, 2247, 1, 0, 0, 0, 2249, 
		    2250, 1, 0, 0, 0, 2250, 2252, 1, 0, 0, 0, 2251, 2249, 1, 0, 0, 0, 
		    2252, 2253, 5, 1134, 0, 0, 2253, 2255, 1, 0, 0, 0, 2254, 2243, 1, 
		    0, 0, 0, 2254, 2255, 1, 0, 0, 0, 2255, 2257, 1, 0, 0, 0, 2256, 2110, 
		    1, 0, 0, 0, 2256, 2144, 1, 0, 0, 0, 2256, 2169, 1, 0, 0, 0, 2256, 
		    2202, 1, 0, 0, 0, 2256, 2235, 1, 0, 0, 0, 2257, 119, 1, 0, 0, 0, 2258, 
		    2262, 3, 602, 301, 0, 2259, 2262, 3, 688, 344, 0, 2260, 2262, 5, 110, 
		    0, 0, 2261, 2258, 1, 0, 0, 0, 2261, 2259, 1, 0, 0, 0, 2261, 2260, 
		    1, 0, 0, 0, 2262, 121, 1, 0, 0, 0, 2263, 2264, 5, 1133, 0, 0, 2264, 
		    2267, 3, 120, 60, 0, 2265, 2266, 5, 1135, 0, 0, 2266, 2268, 3, 120, 
		    60, 0, 2267, 2265, 1, 0, 0, 0, 2268, 2269, 1, 0, 0, 0, 2269, 2267, 
		    1, 0, 0, 0, 2269, 2270, 1, 0, 0, 0, 2270, 2271, 1, 0, 0, 0, 2271, 
		    2272, 5, 1134, 0, 0, 2272, 123, 1, 0, 0, 0, 2273, 2274, 5, 641, 0, 
		    0, 2274, 2278, 3, 584, 292, 0, 2275, 2277, 3, 126, 63, 0, 2276, 2275, 
		    1, 0, 0, 0, 2277, 2280, 1, 0, 0, 0, 2278, 2276, 1, 0, 0, 0, 2278, 
		    2279, 1, 0, 0, 0, 2279, 125, 1, 0, 0, 0, 2280, 2278, 1, 0, 0, 0, 2281, 
		    2283, 5, 42, 0, 0, 2282, 2281, 1, 0, 0, 0, 2282, 2283, 1, 0, 0, 0, 
		    2283, 2285, 1, 0, 0, 0, 2284, 2286, 5, 636, 0, 0, 2285, 2284, 1, 0, 
		    0, 0, 2285, 2286, 1, 0, 0, 0, 2286, 2287, 1, 0, 0, 0, 2287, 2289, 
		    5, 409, 0, 0, 2288, 2290, 5, 1124, 0, 0, 2289, 2288, 1, 0, 0, 0, 2289, 
		    2290, 1, 0, 0, 0, 2290, 2291, 1, 0, 0, 0, 2291, 2330, 3, 572, 286, 
		    0, 2292, 2294, 5, 368, 0, 0, 2293, 2295, 5, 1124, 0, 0, 2294, 2293, 
		    1, 0, 0, 0, 2294, 2295, 1, 0, 0, 0, 2295, 2296, 1, 0, 0, 0, 2296, 
		    2330, 5, 1148, 0, 0, 2297, 2298, 5, 388, 0, 0, 2298, 2300, 5, 395, 
		    0, 0, 2299, 2301, 5, 1124, 0, 0, 2300, 2299, 1, 0, 0, 0, 2300, 2301, 
		    1, 0, 0, 0, 2301, 2302, 1, 0, 0, 0, 2302, 2330, 5, 1148, 0, 0, 2303, 
		    2304, 5, 81, 0, 0, 2304, 2306, 5, 395, 0, 0, 2305, 2307, 5, 1124, 
		    0, 0, 2306, 2305, 1, 0, 0, 0, 2306, 2307, 1, 0, 0, 0, 2307, 2308, 
		    1, 0, 0, 0, 2308, 2330, 5, 1148, 0, 0, 2309, 2311, 5, 500, 0, 0, 2310, 
		    2312, 5, 1124, 0, 0, 2311, 2310, 1, 0, 0, 0, 2311, 2312, 1, 0, 0, 
		    0, 2312, 2313, 1, 0, 0, 0, 2313, 2330, 3, 590, 295, 0, 2314, 2316, 
		    5, 510, 0, 0, 2315, 2317, 5, 1124, 0, 0, 2316, 2315, 1, 0, 0, 0, 2316, 
		    2317, 1, 0, 0, 0, 2317, 2318, 1, 0, 0, 0, 2318, 2330, 3, 590, 295, 
		    0, 2319, 2321, 5, 647, 0, 0, 2320, 2322, 5, 1124, 0, 0, 2321, 2320, 
		    1, 0, 0, 0, 2321, 2322, 1, 0, 0, 0, 2322, 2323, 1, 0, 0, 0, 2323, 
		    2330, 3, 584, 292, 0, 2324, 2326, 5, 528, 0, 0, 2325, 2327, 5, 1124, 
		    0, 0, 2326, 2325, 1, 0, 0, 0, 2326, 2327, 1, 0, 0, 0, 2327, 2328, 
		    1, 0, 0, 0, 2328, 2330, 3, 584, 292, 0, 2329, 2282, 1, 0, 0, 0, 2329, 
		    2292, 1, 0, 0, 0, 2329, 2297, 1, 0, 0, 0, 2329, 2303, 1, 0, 0, 0, 
		    2329, 2309, 1, 0, 0, 0, 2329, 2314, 1, 0, 0, 0, 2329, 2319, 1, 0, 
		    0, 0, 2329, 2324, 1, 0, 0, 0, 2330, 127, 1, 0, 0, 0, 2331, 2332, 5, 
		    7, 0, 0, 2332, 2334, 7, 0, 0, 0, 2333, 2335, 3, 584, 292, 0, 2334, 
		    2333, 1, 0, 0, 0, 2334, 2335, 1, 0, 0, 0, 2335, 2337, 1, 0, 0, 0, 
		    2336, 2338, 3, 58, 29, 0, 2337, 2336, 1, 0, 0, 0, 2338, 2339, 1, 0, 
		    0, 0, 2339, 2337, 1, 0, 0, 0, 2339, 2340, 1, 0, 0, 0, 2340, 2350, 
		    1, 0, 0, 0, 2341, 2342, 5, 7, 0, 0, 2342, 2343, 7, 0, 0, 0, 2343, 
		    2344, 3, 584, 292, 0, 2344, 2345, 5, 664, 0, 0, 2345, 2346, 5, 388, 
		    0, 0, 2346, 2347, 5, 395, 0, 0, 2347, 2348, 5, 516, 0, 0, 2348, 2350, 
		    1, 0, 0, 0, 2349, 2331, 1, 0, 0, 0, 2349, 2341, 1, 0, 0, 0, 2350, 
		    129, 1, 0, 0, 0, 2351, 2353, 5, 7, 0, 0, 2352, 2354, 3, 64, 32, 0, 
		    2353, 2352, 1, 0, 0, 0, 2353, 2354, 1, 0, 0, 0, 2354, 2355, 1, 0, 
		    0, 0, 2355, 2356, 5, 415, 0, 0, 2356, 2360, 3, 550, 275, 0, 2357, 
		    2358, 5, 118, 0, 0, 2358, 2359, 5, 605, 0, 0, 2359, 2361, 3, 66, 33, 
		    0, 2360, 2357, 1, 0, 0, 0, 2360, 2361, 1, 0, 0, 0, 2361, 2368, 1, 
		    0, 0, 0, 2362, 2363, 5, 118, 0, 0, 2363, 2365, 5, 371, 0, 0, 2364, 
		    2366, 5, 114, 0, 0, 2365, 2364, 1, 0, 0, 0, 2365, 2366, 1, 0, 0, 0, 
		    2366, 2367, 1, 0, 0, 0, 2367, 2369, 5, 561, 0, 0, 2368, 2362, 1, 0, 
		    0, 0, 2368, 2369, 1, 0, 0, 0, 2369, 2373, 1, 0, 0, 0, 2370, 2371, 
		    5, 139, 0, 0, 2371, 2372, 5, 175, 0, 0, 2372, 2374, 3, 550, 275, 0, 
		    2373, 2370, 1, 0, 0, 0, 2373, 2374, 1, 0, 0, 0, 2374, 2376, 1, 0, 
		    0, 0, 2375, 2377, 3, 74, 37, 0, 2376, 2375, 1, 0, 0, 0, 2376, 2377, 
		    1, 0, 0, 0, 2377, 2380, 1, 0, 0, 0, 2378, 2379, 5, 368, 0, 0, 2379, 
		    2381, 5, 1148, 0, 0, 2380, 2378, 1, 0, 0, 0, 2380, 2381, 1, 0, 0, 
		    0, 2381, 2384, 1, 0, 0, 0, 2382, 2383, 5, 399, 0, 0, 2383, 2385, 3, 
		    388, 194, 0, 2384, 2382, 1, 0, 0, 0, 2384, 2385, 1, 0, 0, 0, 2385, 
		    131, 1, 0, 0, 0, 2386, 2387, 5, 7, 0, 0, 2387, 2388, 5, 437, 0, 0, 
		    2388, 2392, 3, 550, 275, 0, 2389, 2391, 3, 84, 42, 0, 2390, 2389, 
		    1, 0, 0, 0, 2391, 2394, 1, 0, 0, 0, 2392, 2390, 1, 0, 0, 0, 2392, 
		    2393, 1, 0, 0, 0, 2393, 133, 1, 0, 0, 0, 2394, 2392, 1, 0, 0, 0, 2395, 
		    2396, 5, 7, 0, 0, 2396, 2397, 5, 457, 0, 0, 2397, 2398, 5, 599, 0, 
		    0, 2398, 2399, 5, 791, 0, 0, 2399, 2400, 5, 477, 0, 0, 2400, 2401, 
		    5, 91, 0, 0, 2401, 135, 1, 0, 0, 0, 2402, 2403, 5, 7, 0, 0, 2403, 
		    2404, 5, 475, 0, 0, 2404, 2405, 5, 73, 0, 0, 2405, 2406, 3, 584, 292, 
		    0, 2406, 2407, 5, 5, 0, 0, 2407, 2408, 5, 659, 0, 0, 2408, 2414, 5, 
		    1148, 0, 0, 2409, 2411, 5, 453, 0, 0, 2410, 2412, 5, 1124, 0, 0, 2411, 
		    2410, 1, 0, 0, 0, 2411, 2412, 1, 0, 0, 0, 2412, 2413, 1, 0, 0, 0, 
		    2413, 2415, 3, 592, 296, 0, 2414, 2409, 1, 0, 0, 0, 2414, 2415, 1, 
		    0, 0, 0, 2415, 2417, 1, 0, 0, 0, 2416, 2418, 5, 674, 0, 0, 2417, 2416, 
		    1, 0, 0, 0, 2417, 2418, 1, 0, 0, 0, 2418, 2419, 1, 0, 0, 0, 2419, 
		    2421, 5, 409, 0, 0, 2420, 2422, 5, 1124, 0, 0, 2421, 2420, 1, 0, 0, 
		    0, 2421, 2422, 1, 0, 0, 0, 2422, 2423, 1, 0, 0, 0, 2423, 2424, 3, 
		    572, 286, 0, 2424, 137, 1, 0, 0, 0, 2425, 2426, 5, 7, 0, 0, 2426, 
		    2427, 5, 131, 0, 0, 2427, 2431, 3, 550, 275, 0, 2428, 2430, 3, 84, 
		    42, 0, 2429, 2428, 1, 0, 0, 0, 2430, 2433, 1, 0, 0, 0, 2431, 2429, 
		    1, 0, 0, 0, 2431, 2432, 1, 0, 0, 0, 2432, 139, 1, 0, 0, 0, 2433, 2431, 
		    1, 0, 0, 0, 2434, 2435, 5, 7, 0, 0, 2435, 2436, 5, 608, 0, 0, 2436, 
		    2437, 3, 584, 292, 0, 2437, 2438, 5, 541, 0, 0, 2438, 2439, 5, 1133, 
		    0, 0, 2439, 2444, 3, 86, 43, 0, 2440, 2441, 5, 1135, 0, 0, 2441, 2443, 
		    3, 86, 43, 0, 2442, 2440, 1, 0, 0, 0, 2443, 2446, 1, 0, 0, 0, 2444, 
		    2442, 1, 0, 0, 0, 2444, 2445, 1, 0, 0, 0, 2445, 2447, 1, 0, 0, 0, 
		    2446, 2444, 1, 0, 0, 0, 2447, 2448, 5, 1134, 0, 0, 2448, 141, 1, 0, 
		    0, 0, 2449, 2451, 5, 7, 0, 0, 2450, 2452, 7, 1, 0, 0, 2451, 2450, 
		    1, 0, 0, 0, 2451, 2452, 1, 0, 0, 0, 2452, 2454, 1, 0, 0, 0, 2453, 
		    2455, 5, 78, 0, 0, 2454, 2453, 1, 0, 0, 0, 2454, 2455, 1, 0, 0, 0, 
		    2455, 2456, 1, 0, 0, 0, 2456, 2457, 5, 172, 0, 0, 2457, 2459, 3, 552, 
		    276, 0, 2458, 2460, 3, 646, 323, 0, 2459, 2458, 1, 0, 0, 0, 2459, 
		    2460, 1, 0, 0, 0, 2460, 2469, 1, 0, 0, 0, 2461, 2466, 3, 148, 74, 
		    0, 2462, 2463, 5, 1135, 0, 0, 2463, 2465, 3, 148, 74, 0, 2464, 2462, 
		    1, 0, 0, 0, 2465, 2468, 1, 0, 0, 0, 2466, 2464, 1, 0, 0, 0, 2466, 
		    2467, 1, 0, 0, 0, 2467, 2470, 1, 0, 0, 0, 2468, 2466, 1, 0, 0, 0, 
		    2469, 2461, 1, 0, 0, 0, 2469, 2470, 1, 0, 0, 0, 2470, 2472, 1, 0, 
		    0, 0, 2471, 2473, 3, 112, 56, 0, 2472, 2471, 1, 0, 0, 0, 2472, 2473, 
		    1, 0, 0, 0, 2473, 143, 1, 0, 0, 0, 2474, 2475, 5, 7, 0, 0, 2475, 2476, 
		    5, 647, 0, 0, 2476, 2477, 3, 584, 292, 0, 2477, 2478, 7, 33, 0, 0, 
		    2478, 2479, 5, 389, 0, 0, 2479, 2483, 5, 1148, 0, 0, 2480, 2481, 5, 
		    453, 0, 0, 2481, 2482, 5, 1124, 0, 0, 2482, 2484, 3, 592, 296, 0, 
		    2483, 2480, 1, 0, 0, 0, 2483, 2484, 1, 0, 0, 0, 2484, 2486, 1, 0, 
		    0, 0, 2485, 2487, 5, 674, 0, 0, 2486, 2485, 1, 0, 0, 0, 2486, 2487, 
		    1, 0, 0, 0, 2487, 2488, 1, 0, 0, 0, 2488, 2490, 5, 409, 0, 0, 2489, 
		    2491, 5, 1124, 0, 0, 2490, 2489, 1, 0, 0, 0, 2490, 2491, 1, 0, 0, 
		    0, 2491, 2492, 1, 0, 0, 0, 2492, 2493, 3, 572, 286, 0, 2493, 145, 
		    1, 0, 0, 0, 2494, 2498, 5, 7, 0, 0, 2495, 2496, 5, 336, 0, 0, 2496, 
		    2497, 5, 1124, 0, 0, 2497, 2499, 7, 10, 0, 0, 2498, 2495, 1, 0, 0, 
		    0, 2498, 2499, 1, 0, 0, 0, 2499, 2501, 1, 0, 0, 0, 2500, 2502, 3, 
		    64, 32, 0, 2501, 2500, 1, 0, 0, 0, 2501, 2502, 1, 0, 0, 0, 2502, 2506, 
		    1, 0, 0, 0, 2503, 2504, 5, 160, 0, 0, 2504, 2505, 5, 606, 0, 0, 2505, 
		    2507, 7, 11, 0, 0, 2506, 2503, 1, 0, 0, 0, 2506, 2507, 1, 0, 0, 0, 
		    2507, 2508, 1, 0, 0, 0, 2508, 2509, 5, 671, 0, 0, 2509, 2514, 3, 550, 
		    275, 0, 2510, 2511, 5, 1133, 0, 0, 2511, 2512, 3, 616, 308, 0, 2512, 
		    2513, 5, 1134, 0, 0, 2513, 2515, 1, 0, 0, 0, 2514, 2510, 1, 0, 0, 
		    0, 2514, 2515, 1, 0, 0, 0, 2515, 2516, 1, 0, 0, 0, 2516, 2517, 5, 
		    12, 0, 0, 2517, 2524, 3, 200, 100, 0, 2518, 2520, 5, 192, 0, 0, 2519, 
		    2521, 7, 12, 0, 0, 2520, 2519, 1, 0, 0, 0, 2520, 2521, 1, 0, 0, 0, 
		    2521, 2522, 1, 0, 0, 0, 2522, 2523, 5, 26, 0, 0, 2523, 2525, 5, 120, 
		    0, 0, 2524, 2518, 1, 0, 0, 0, 2524, 2525, 1, 0, 0, 0, 2525, 147, 1, 
		    0, 0, 0, 2526, 2533, 3, 106, 53, 0, 2527, 2529, 5, 1135, 0, 0, 2528, 
		    2527, 1, 0, 0, 0, 2528, 2529, 1, 0, 0, 0, 2529, 2530, 1, 0, 0, 0, 
		    2530, 2532, 3, 106, 53, 0, 2531, 2528, 1, 0, 0, 0, 2532, 2535, 1, 
		    0, 0, 0, 2533, 2531, 1, 0, 0, 0, 2533, 2534, 1, 0, 0, 0, 2534, 2878, 
		    1, 0, 0, 0, 2535, 2533, 1, 0, 0, 0, 2536, 2538, 5, 5, 0, 0, 2537, 
		    2539, 5, 28, 0, 0, 2538, 2537, 1, 0, 0, 0, 2538, 2539, 1, 0, 0, 0, 
		    2539, 2540, 1, 0, 0, 0, 2540, 2541, 3, 584, 292, 0, 2541, 2545, 3, 
		    92, 46, 0, 2542, 2546, 5, 430, 0, 0, 2543, 2544, 5, 334, 0, 0, 2544, 
		    2546, 3, 584, 292, 0, 2545, 2542, 1, 0, 0, 0, 2545, 2543, 1, 0, 0, 
		    0, 2545, 2546, 1, 0, 0, 0, 2546, 2878, 1, 0, 0, 0, 2547, 2549, 5, 
		    5, 0, 0, 2548, 2550, 5, 28, 0, 0, 2549, 2548, 1, 0, 0, 0, 2549, 2550, 
		    1, 0, 0, 0, 2550, 2551, 1, 0, 0, 0, 2551, 2552, 5, 1133, 0, 0, 2552, 
		    2553, 3, 584, 292, 0, 2553, 2560, 3, 92, 46, 0, 2554, 2555, 5, 1135, 
		    0, 0, 2555, 2556, 3, 584, 292, 0, 2556, 2557, 3, 92, 46, 0, 2557, 
		    2559, 1, 0, 0, 0, 2558, 2554, 1, 0, 0, 0, 2559, 2562, 1, 0, 0, 0, 
		    2560, 2558, 1, 0, 0, 0, 2560, 2561, 1, 0, 0, 0, 2561, 2563, 1, 0, 
		    0, 0, 2562, 2560, 1, 0, 0, 0, 2563, 2564, 5, 1134, 0, 0, 2564, 2878, 
		    1, 0, 0, 0, 2565, 2566, 5, 5, 0, 0, 2566, 2568, 7, 20, 0, 0, 2567, 
		    2569, 3, 584, 292, 0, 2568, 2567, 1, 0, 0, 0, 2568, 2569, 1, 0, 0, 
		    0, 2569, 2571, 1, 0, 0, 0, 2570, 2572, 3, 76, 38, 0, 2571, 2570, 1, 
		    0, 0, 0, 2571, 2572, 1, 0, 0, 0, 2572, 2573, 1, 0, 0, 0, 2573, 2577, 
		    3, 622, 311, 0, 2574, 2576, 3, 78, 39, 0, 2575, 2574, 1, 0, 0, 0, 
		    2576, 2579, 1, 0, 0, 0, 2577, 2575, 1, 0, 0, 0, 2577, 2578, 1, 0, 
		    0, 0, 2578, 2878, 1, 0, 0, 0, 2579, 2577, 1, 0, 0, 0, 2580, 2585, 
		    5, 5, 0, 0, 2581, 2583, 5, 30, 0, 0, 2582, 2584, 3, 584, 292, 0, 2583, 
		    2582, 1, 0, 0, 0, 2583, 2584, 1, 0, 0, 0, 2584, 2586, 1, 0, 0, 0, 
		    2585, 2581, 1, 0, 0, 0, 2585, 2586, 1, 0, 0, 0, 2586, 2587, 1, 0, 
		    0, 0, 2587, 2588, 5, 130, 0, 0, 2588, 2590, 5, 91, 0, 0, 2589, 2591, 
		    3, 584, 292, 0, 2590, 2589, 1, 0, 0, 0, 2590, 2591, 1, 0, 0, 0, 2591, 
		    2593, 1, 0, 0, 0, 2592, 2594, 3, 76, 38, 0, 2593, 2592, 1, 0, 0, 0, 
		    2593, 2594, 1, 0, 0, 0, 2594, 2595, 1, 0, 0, 0, 2595, 2599, 3, 622, 
		    311, 0, 2596, 2598, 3, 78, 39, 0, 2597, 2596, 1, 0, 0, 0, 2598, 2601, 
		    1, 0, 0, 0, 2599, 2597, 1, 0, 0, 0, 2599, 2600, 1, 0, 0, 0, 2600, 
		    2878, 1, 0, 0, 0, 2601, 2599, 1, 0, 0, 0, 2602, 2607, 5, 5, 0, 0, 
		    2603, 2605, 5, 30, 0, 0, 2604, 2606, 3, 584, 292, 0, 2605, 2604, 1, 
		    0, 0, 0, 2605, 2606, 1, 0, 0, 0, 2606, 2608, 1, 0, 0, 0, 2607, 2603, 
		    1, 0, 0, 0, 2607, 2608, 1, 0, 0, 0, 2608, 2609, 1, 0, 0, 0, 2609, 
		    2611, 5, 181, 0, 0, 2610, 2612, 7, 20, 0, 0, 2611, 2610, 1, 0, 0, 
		    0, 2611, 2612, 1, 0, 0, 0, 2612, 2614, 1, 0, 0, 0, 2613, 2615, 3, 
		    584, 292, 0, 2614, 2613, 1, 0, 0, 0, 2614, 2615, 1, 0, 0, 0, 2615, 
		    2617, 1, 0, 0, 0, 2616, 2618, 3, 76, 38, 0, 2617, 2616, 1, 0, 0, 0, 
		    2617, 2618, 1, 0, 0, 0, 2618, 2619, 1, 0, 0, 0, 2619, 2623, 3, 622, 
		    311, 0, 2620, 2622, 3, 78, 39, 0, 2621, 2620, 1, 0, 0, 0, 2622, 2625, 
		    1, 0, 0, 0, 2623, 2621, 1, 0, 0, 0, 2623, 2624, 1, 0, 0, 0, 2624, 
		    2878, 1, 0, 0, 0, 2625, 2623, 1, 0, 0, 0, 2626, 2627, 5, 5, 0, 0, 
		    2627, 2629, 7, 22, 0, 0, 2628, 2630, 7, 20, 0, 0, 2629, 2628, 1, 0, 
		    0, 0, 2629, 2630, 1, 0, 0, 0, 2630, 2632, 1, 0, 0, 0, 2631, 2633, 
		    3, 584, 292, 0, 2632, 2631, 1, 0, 0, 0, 2632, 2633, 1, 0, 0, 0, 2633, 
		    2634, 1, 0, 0, 0, 2634, 2638, 3, 622, 311, 0, 2635, 2637, 3, 78, 39, 
		    0, 2636, 2635, 1, 0, 0, 0, 2637, 2640, 1, 0, 0, 0, 2638, 2636, 1, 
		    0, 0, 0, 2638, 2639, 1, 0, 0, 0, 2639, 2878, 1, 0, 0, 0, 2640, 2638, 
		    1, 0, 0, 0, 2641, 2646, 5, 5, 0, 0, 2642, 2644, 5, 30, 0, 0, 2643, 
		    2645, 3, 584, 292, 0, 2644, 2643, 1, 0, 0, 0, 2644, 2645, 1, 0, 0, 
		    0, 2645, 2647, 1, 0, 0, 0, 2646, 2642, 1, 0, 0, 0, 2646, 2647, 1, 
		    0, 0, 0, 2647, 2648, 1, 0, 0, 0, 2648, 2649, 5, 67, 0, 0, 2649, 2651, 
		    5, 91, 0, 0, 2650, 2652, 3, 584, 292, 0, 2651, 2650, 1, 0, 0, 0, 2651, 
		    2652, 1, 0, 0, 0, 2652, 2653, 1, 0, 0, 0, 2653, 2654, 3, 622, 311, 
		    0, 2654, 2655, 3, 98, 49, 0, 2655, 2878, 1, 0, 0, 0, 2656, 2661, 5, 
		    5, 0, 0, 2657, 2659, 5, 30, 0, 0, 2658, 2660, 3, 584, 292, 0, 2659, 
		    2658, 1, 0, 0, 0, 2659, 2660, 1, 0, 0, 0, 2660, 2662, 1, 0, 0, 0, 
		    2661, 2657, 1, 0, 0, 0, 2661, 2662, 1, 0, 0, 0, 2662, 2663, 1, 0, 
		    0, 0, 2663, 2670, 5, 26, 0, 0, 2664, 2671, 3, 584, 292, 0, 2665, 2671, 
		    3, 594, 297, 0, 2666, 2667, 5, 1133, 0, 0, 2667, 2668, 3, 688, 344, 
		    0, 2668, 2669, 5, 1134, 0, 0, 2669, 2671, 1, 0, 0, 0, 2670, 2664, 
		    1, 0, 0, 0, 2670, 2665, 1, 0, 0, 0, 2670, 2666, 1, 0, 0, 0, 2671, 
		    2673, 1, 0, 0, 0, 2672, 2674, 5, 114, 0, 0, 2673, 2672, 1, 0, 0, 0, 
		    2673, 2674, 1, 0, 0, 0, 2674, 2676, 1, 0, 0, 0, 2675, 2677, 5, 57, 
		    0, 0, 2676, 2675, 1, 0, 0, 0, 2676, 2677, 1, 0, 0, 0, 2677, 2878, 
		    1, 0, 0, 0, 2678, 2683, 5, 7, 0, 0, 2679, 2681, 5, 30, 0, 0, 2680, 
		    2682, 3, 584, 292, 0, 2681, 2680, 1, 0, 0, 0, 2681, 2682, 1, 0, 0, 
		    0, 2682, 2684, 1, 0, 0, 0, 2683, 2679, 1, 0, 0, 0, 2683, 2684, 1, 
		    0, 0, 0, 2684, 2685, 1, 0, 0, 0, 2685, 2692, 5, 26, 0, 0, 2686, 2693, 
		    3, 584, 292, 0, 2687, 2693, 3, 594, 297, 0, 2688, 2689, 5, 1133, 0, 
		    0, 2689, 2690, 3, 688, 344, 0, 2690, 2691, 5, 1134, 0, 0, 2691, 2693, 
		    1, 0, 0, 0, 2692, 2686, 1, 0, 0, 0, 2692, 2687, 1, 0, 0, 0, 2692, 
		    2688, 1, 0, 0, 0, 2693, 2695, 1, 0, 0, 0, 2694, 2696, 5, 114, 0, 0, 
		    2695, 2694, 1, 0, 0, 0, 2695, 2696, 1, 0, 0, 0, 2696, 2698, 1, 0, 
		    0, 0, 2697, 2699, 5, 57, 0, 0, 2698, 2697, 1, 0, 0, 0, 2698, 2699, 
		    1, 0, 0, 0, 2699, 2878, 1, 0, 0, 0, 2700, 2705, 5, 5, 0, 0, 2701, 
		    2703, 5, 30, 0, 0, 2702, 2704, 3, 584, 292, 0, 2703, 2702, 1, 0, 0, 
		    0, 2703, 2704, 1, 0, 0, 0, 2704, 2706, 1, 0, 0, 0, 2705, 2701, 1, 
		    0, 0, 0, 2705, 2706, 1, 0, 0, 0, 2706, 2707, 1, 0, 0, 0, 2707, 2708, 
		    5, 26, 0, 0, 2708, 2709, 5, 1133, 0, 0, 2709, 2710, 3, 688, 344, 0, 
		    2710, 2711, 5, 1134, 0, 0, 2711, 2878, 1, 0, 0, 0, 2712, 2714, 5, 
		    336, 0, 0, 2713, 2715, 5, 1124, 0, 0, 2714, 2713, 1, 0, 0, 0, 2714, 
		    2715, 1, 0, 0, 0, 2715, 2716, 1, 0, 0, 0, 2716, 2878, 7, 34, 0, 0, 
		    2717, 2719, 5, 7, 0, 0, 2718, 2720, 5, 28, 0, 0, 2719, 2718, 1, 0, 
		    0, 0, 2719, 2720, 1, 0, 0, 0, 2720, 2721, 1, 0, 0, 0, 2721, 2727, 
		    3, 584, 292, 0, 2722, 2723, 5, 153, 0, 0, 2723, 2724, 5, 42, 0, 0, 
		    2724, 2728, 3, 634, 317, 0, 2725, 2726, 5, 51, 0, 0, 2726, 2728, 5, 
		    42, 0, 0, 2727, 2722, 1, 0, 0, 0, 2727, 2725, 1, 0, 0, 0, 2728, 2878, 
		    1, 0, 0, 0, 2729, 2731, 5, 24, 0, 0, 2730, 2732, 5, 28, 0, 0, 2731, 
		    2730, 1, 0, 0, 0, 2731, 2732, 1, 0, 0, 0, 2732, 2733, 1, 0, 0, 0, 
		    2733, 2734, 3, 584, 292, 0, 2734, 2735, 3, 584, 292, 0, 2735, 2739, 
		    3, 92, 46, 0, 2736, 2740, 5, 430, 0, 0, 2737, 2738, 5, 334, 0, 0, 
		    2738, 2740, 3, 584, 292, 0, 2739, 2736, 1, 0, 0, 0, 2739, 2737, 1, 
		    0, 0, 0, 2739, 2740, 1, 0, 0, 0, 2740, 2878, 1, 0, 0, 0, 2741, 2742, 
		    5, 139, 0, 0, 2742, 2743, 5, 28, 0, 0, 2743, 2744, 3, 584, 292, 0, 
		    2744, 2745, 5, 175, 0, 0, 2745, 2746, 3, 584, 292, 0, 2746, 2878, 
		    1, 0, 0, 0, 2747, 2749, 5, 103, 0, 0, 2748, 2750, 5, 1124, 0, 0, 2749, 
		    2748, 1, 0, 0, 0, 2749, 2750, 1, 0, 0, 0, 2750, 2751, 1, 0, 0, 0, 
		    2751, 2878, 7, 4, 0, 0, 2752, 2754, 5, 512, 0, 0, 2753, 2755, 5, 28, 
		    0, 0, 2754, 2753, 1, 0, 0, 0, 2754, 2755, 1, 0, 0, 0, 2755, 2756, 
		    1, 0, 0, 0, 2756, 2757, 3, 584, 292, 0, 2757, 2761, 3, 92, 46, 0, 
		    2758, 2762, 5, 430, 0, 0, 2759, 2760, 5, 334, 0, 0, 2760, 2762, 3, 
		    584, 292, 0, 2761, 2758, 1, 0, 0, 0, 2761, 2759, 1, 0, 0, 0, 2761, 
		    2762, 1, 0, 0, 0, 2762, 2878, 1, 0, 0, 0, 2763, 2765, 5, 51, 0, 0, 
		    2764, 2766, 5, 28, 0, 0, 2765, 2764, 1, 0, 0, 0, 2765, 2766, 1, 0, 
		    0, 0, 2766, 2767, 1, 0, 0, 0, 2767, 2769, 3, 584, 292, 0, 2768, 2770, 
		    5, 144, 0, 0, 2769, 2768, 1, 0, 0, 0, 2769, 2770, 1, 0, 0, 0, 2770, 
		    2878, 1, 0, 0, 0, 2771, 2772, 5, 51, 0, 0, 2772, 2773, 7, 35, 0, 0, 
		    2773, 2878, 3, 584, 292, 0, 2774, 2775, 5, 51, 0, 0, 2775, 2776, 5, 
		    130, 0, 0, 2776, 2878, 5, 91, 0, 0, 2777, 2778, 5, 51, 0, 0, 2778, 
		    2779, 7, 20, 0, 0, 2779, 2878, 3, 584, 292, 0, 2780, 2781, 5, 139, 
		    0, 0, 2781, 2782, 7, 20, 0, 0, 2782, 2783, 3, 584, 292, 0, 2783, 2784, 
		    5, 175, 0, 0, 2784, 2785, 3, 584, 292, 0, 2785, 2878, 1, 0, 0, 0, 
		    2786, 2788, 5, 7, 0, 0, 2787, 2789, 5, 28, 0, 0, 2788, 2787, 1, 0, 
		    0, 0, 2788, 2789, 1, 0, 0, 0, 2789, 2790, 1, 0, 0, 0, 2790, 2804, 
		    3, 584, 292, 0, 2791, 2792, 5, 153, 0, 0, 2792, 2798, 5, 42, 0, 0, 
		    2793, 2799, 3, 594, 297, 0, 2794, 2795, 5, 1133, 0, 0, 2795, 2796, 
		    3, 688, 344, 0, 2796, 2797, 5, 1134, 0, 0, 2797, 2799, 1, 0, 0, 0, 
		    2798, 2793, 1, 0, 0, 0, 2798, 2794, 1, 0, 0, 0, 2799, 2805, 1, 0, 
		    0, 0, 2800, 2801, 5, 153, 0, 0, 2801, 2805, 7, 15, 0, 0, 2802, 2803, 
		    5, 51, 0, 0, 2803, 2805, 5, 42, 0, 0, 2804, 2791, 1, 0, 0, 0, 2804, 
		    2800, 1, 0, 0, 0, 2804, 2802, 1, 0, 0, 0, 2805, 2878, 1, 0, 0, 0, 
		    2806, 2807, 5, 7, 0, 0, 2807, 2808, 5, 81, 0, 0, 2808, 2809, 3, 584, 
		    292, 0, 2809, 2810, 7, 15, 0, 0, 2810, 2878, 1, 0, 0, 0, 2811, 2812, 
		    5, 51, 0, 0, 2812, 2813, 5, 67, 0, 0, 2813, 2814, 5, 91, 0, 0, 2814, 
		    2878, 3, 584, 292, 0, 2815, 2816, 5, 396, 0, 0, 2816, 2878, 5, 92, 
		    0, 0, 2817, 2818, 5, 403, 0, 0, 2818, 2878, 5, 92, 0, 0, 2819, 2821, 
		    5, 139, 0, 0, 2820, 2822, 7, 36, 0, 0, 2821, 2820, 1, 0, 0, 0, 2821, 
		    2822, 1, 0, 0, 0, 2822, 2825, 1, 0, 0, 0, 2823, 2826, 3, 584, 292, 
		    0, 2824, 2826, 3, 550, 275, 0, 2825, 2823, 1, 0, 0, 0, 2825, 2824, 
		    1, 0, 0, 0, 2826, 2878, 1, 0, 0, 0, 2827, 2828, 5, 124, 0, 0, 2828, 
		    2829, 5, 19, 0, 0, 2829, 2878, 3, 616, 308, 0, 2830, 2831, 5, 32, 
		    0, 0, 2831, 2835, 5, 175, 0, 0, 2832, 2836, 5, 841, 0, 0, 2833, 2834, 
		    5, 25, 0, 0, 2834, 2836, 5, 153, 0, 0, 2835, 2832, 1, 0, 0, 0, 2835, 
		    2833, 1, 0, 0, 0, 2836, 2837, 1, 0, 0, 0, 2837, 2840, 3, 568, 284, 
		    0, 2838, 2839, 5, 27, 0, 0, 2839, 2841, 3, 570, 285, 0, 2840, 2838, 
		    1, 0, 0, 0, 2840, 2841, 1, 0, 0, 0, 2841, 2878, 1, 0, 0, 0, 2842, 
		    2844, 5, 42, 0, 0, 2843, 2842, 1, 0, 0, 0, 2843, 2844, 1, 0, 0, 0, 
		    2844, 2845, 1, 0, 0, 0, 2845, 2846, 5, 25, 0, 0, 2846, 2847, 5, 153, 
		    0, 0, 2847, 2848, 5, 1124, 0, 0, 2848, 2852, 3, 568, 284, 0, 2849, 
		    2850, 5, 27, 0, 0, 2850, 2851, 5, 1124, 0, 0, 2851, 2853, 3, 570, 
		    285, 0, 2852, 2849, 1, 0, 0, 0, 2852, 2853, 1, 0, 0, 0, 2853, 2878, 
		    1, 0, 0, 0, 2854, 2855, 5, 397, 0, 0, 2855, 2878, 5, 647, 0, 0, 2856, 
		    2857, 5, 450, 0, 0, 2857, 2878, 5, 647, 0, 0, 2858, 2878, 5, 66, 0, 
		    0, 2859, 2860, 7, 37, 0, 0, 2860, 2878, 5, 668, 0, 0, 2861, 2863, 
		    5, 5, 0, 0, 2862, 2864, 5, 28, 0, 0, 2863, 2862, 1, 0, 0, 0, 2863, 
		    2864, 1, 0, 0, 0, 2864, 2865, 1, 0, 0, 0, 2865, 2866, 5, 1133, 0, 
		    0, 2866, 2871, 3, 90, 45, 0, 2867, 2868, 5, 1135, 0, 0, 2868, 2870, 
		    3, 90, 45, 0, 2869, 2867, 1, 0, 0, 0, 2870, 2873, 1, 0, 0, 0, 2871, 
		    2869, 1, 0, 0, 0, 2871, 2872, 1, 0, 0, 0, 2872, 2874, 1, 0, 0, 0, 
		    2873, 2871, 1, 0, 0, 0, 2874, 2875, 5, 1134, 0, 0, 2875, 2878, 1, 
		    0, 0, 0, 2876, 2878, 3, 150, 75, 0, 2877, 2526, 1, 0, 0, 0, 2877, 
		    2536, 1, 0, 0, 0, 2877, 2547, 1, 0, 0, 0, 2877, 2565, 1, 0, 0, 0, 
		    2877, 2580, 1, 0, 0, 0, 2877, 2602, 1, 0, 0, 0, 2877, 2626, 1, 0, 
		    0, 0, 2877, 2641, 1, 0, 0, 0, 2877, 2656, 1, 0, 0, 0, 2877, 2678, 
		    1, 0, 0, 0, 2877, 2700, 1, 0, 0, 0, 2877, 2712, 1, 0, 0, 0, 2877, 
		    2717, 1, 0, 0, 0, 2877, 2729, 1, 0, 0, 0, 2877, 2741, 1, 0, 0, 0, 
		    2877, 2747, 1, 0, 0, 0, 2877, 2752, 1, 0, 0, 0, 2877, 2763, 1, 0, 
		    0, 0, 2877, 2771, 1, 0, 0, 0, 2877, 2774, 1, 0, 0, 0, 2877, 2777, 
		    1, 0, 0, 0, 2877, 2780, 1, 0, 0, 0, 2877, 2786, 1, 0, 0, 0, 2877, 
		    2806, 1, 0, 0, 0, 2877, 2811, 1, 0, 0, 0, 2877, 2815, 1, 0, 0, 0, 
		    2877, 2817, 1, 0, 0, 0, 2877, 2819, 1, 0, 0, 0, 2877, 2827, 1, 0, 
		    0, 0, 2877, 2830, 1, 0, 0, 0, 2877, 2843, 1, 0, 0, 0, 2877, 2854, 
		    1, 0, 0, 0, 2877, 2856, 1, 0, 0, 0, 2877, 2858, 1, 0, 0, 0, 2877, 
		    2859, 1, 0, 0, 0, 2877, 2861, 1, 0, 0, 0, 2877, 2876, 1, 0, 0, 0, 
		    2878, 149, 1, 0, 0, 0, 2879, 2880, 5, 5, 0, 0, 2880, 2881, 5, 129, 
		    0, 0, 2881, 2882, 5, 1133, 0, 0, 2882, 2887, 3, 118, 59, 0, 2883, 
		    2884, 5, 1135, 0, 0, 2884, 2886, 3, 118, 59, 0, 2885, 2883, 1, 0, 
		    0, 0, 2886, 2889, 1, 0, 0, 0, 2887, 2885, 1, 0, 0, 0, 2887, 2888, 
		    1, 0, 0, 0, 2888, 2890, 1, 0, 0, 0, 2889, 2887, 1, 0, 0, 0, 2890, 
		    2891, 5, 1134, 0, 0, 2891, 2978, 1, 0, 0, 0, 2892, 2893, 5, 51, 0, 
		    0, 2893, 2894, 5, 129, 0, 0, 2894, 2978, 3, 616, 308, 0, 2895, 2896, 
		    5, 397, 0, 0, 2896, 2899, 5, 129, 0, 0, 2897, 2900, 3, 616, 308, 0, 
		    2898, 2900, 5, 6, 0, 0, 2899, 2897, 1, 0, 0, 0, 2899, 2898, 1, 0, 
		    0, 0, 2900, 2901, 1, 0, 0, 0, 2901, 2978, 5, 647, 0, 0, 2902, 2903, 
		    5, 450, 0, 0, 2903, 2906, 5, 129, 0, 0, 2904, 2907, 3, 616, 308, 0, 
		    2905, 2907, 5, 6, 0, 0, 2906, 2904, 1, 0, 0, 0, 2906, 2905, 1, 0, 
		    0, 0, 2907, 2908, 1, 0, 0, 0, 2908, 2978, 5, 647, 0, 0, 2909, 2910, 
		    5, 656, 0, 0, 2910, 2913, 5, 129, 0, 0, 2911, 2914, 3, 616, 308, 0, 
		    2912, 2914, 5, 6, 0, 0, 2913, 2911, 1, 0, 0, 0, 2913, 2912, 1, 0, 
		    0, 0, 2914, 2978, 1, 0, 0, 0, 2915, 2916, 5, 363, 0, 0, 2916, 2917, 
		    5, 129, 0, 0, 2917, 2978, 3, 590, 295, 0, 2918, 2919, 5, 579, 0, 0, 
		    2919, 2920, 5, 129, 0, 0, 2920, 2921, 3, 616, 308, 0, 2921, 2922, 
		    5, 87, 0, 0, 2922, 2923, 5, 1133, 0, 0, 2923, 2928, 3, 118, 59, 0, 
		    2924, 2925, 5, 1135, 0, 0, 2925, 2927, 3, 118, 59, 0, 2926, 2924, 
		    1, 0, 0, 0, 2927, 2930, 1, 0, 0, 0, 2928, 2926, 1, 0, 0, 0, 2928, 
		    2929, 1, 0, 0, 0, 2929, 2931, 1, 0, 0, 0, 2930, 2928, 1, 0, 0, 0, 
		    2931, 2932, 5, 1134, 0, 0, 2932, 2978, 1, 0, 0, 0, 2933, 2934, 5, 
		    418, 0, 0, 2934, 2935, 5, 129, 0, 0, 2935, 2936, 3, 584, 292, 0, 2936, 
		    2937, 5, 192, 0, 0, 2937, 2938, 5, 172, 0, 0, 2938, 2941, 3, 552, 
		    276, 0, 2939, 2940, 7, 37, 0, 0, 2940, 2942, 5, 668, 0, 0, 2941, 2939, 
		    1, 0, 0, 0, 2941, 2942, 1, 0, 0, 0, 2942, 2978, 1, 0, 0, 0, 2943, 
		    2944, 5, 9, 0, 0, 2944, 2947, 5, 129, 0, 0, 2945, 2948, 3, 616, 308, 
		    0, 2946, 2948, 5, 6, 0, 0, 2947, 2945, 1, 0, 0, 0, 2947, 2946, 1, 
		    0, 0, 0, 2948, 2978, 1, 0, 0, 0, 2949, 2950, 5, 26, 0, 0, 2950, 2953, 
		    5, 129, 0, 0, 2951, 2954, 3, 616, 308, 0, 2952, 2954, 5, 6, 0, 0, 
		    2953, 2951, 1, 0, 0, 0, 2953, 2952, 1, 0, 0, 0, 2954, 2978, 1, 0, 
		    0, 0, 2955, 2956, 5, 119, 0, 0, 2956, 2959, 5, 129, 0, 0, 2957, 2960, 
		    3, 616, 308, 0, 2958, 2960, 5, 6, 0, 0, 2959, 2957, 1, 0, 0, 0, 2959, 
		    2958, 1, 0, 0, 0, 2960, 2978, 1, 0, 0, 0, 2961, 2962, 5, 569, 0, 0, 
		    2962, 2965, 5, 129, 0, 0, 2963, 2966, 3, 616, 308, 0, 2964, 2966, 
		    5, 6, 0, 0, 2965, 2963, 1, 0, 0, 0, 2965, 2964, 1, 0, 0, 0, 2966, 
		    2978, 1, 0, 0, 0, 2967, 2968, 5, 580, 0, 0, 2968, 2971, 5, 129, 0, 
		    0, 2969, 2972, 3, 616, 308, 0, 2970, 2972, 5, 6, 0, 0, 2971, 2969, 
		    1, 0, 0, 0, 2971, 2970, 1, 0, 0, 0, 2972, 2978, 1, 0, 0, 0, 2973, 
		    2974, 5, 578, 0, 0, 2974, 2978, 5, 549, 0, 0, 2975, 2976, 5, 664, 
		    0, 0, 2976, 2978, 5, 549, 0, 0, 2977, 2879, 1, 0, 0, 0, 2977, 2892, 
		    1, 0, 0, 0, 2977, 2895, 1, 0, 0, 0, 2977, 2902, 1, 0, 0, 0, 2977, 
		    2909, 1, 0, 0, 0, 2977, 2915, 1, 0, 0, 0, 2977, 2918, 1, 0, 0, 0, 
		    2977, 2933, 1, 0, 0, 0, 2977, 2943, 1, 0, 0, 0, 2977, 2949, 1, 0, 
		    0, 0, 2977, 2955, 1, 0, 0, 0, 2977, 2961, 1, 0, 0, 0, 2977, 2967, 
		    1, 0, 0, 0, 2977, 2973, 1, 0, 0, 0, 2977, 2975, 1, 0, 0, 0, 2978, 
		    151, 1, 0, 0, 0, 2979, 2980, 5, 51, 0, 0, 2980, 2982, 7, 0, 0, 0, 
		    2981, 2983, 3, 640, 320, 0, 2982, 2981, 1, 0, 0, 0, 2982, 2983, 1, 
		    0, 0, 0, 2983, 2984, 1, 0, 0, 0, 2984, 2985, 3, 584, 292, 0, 2985, 
		    153, 1, 0, 0, 0, 2986, 2987, 5, 51, 0, 0, 2987, 2989, 5, 415, 0, 0, 
		    2988, 2990, 3, 640, 320, 0, 2989, 2988, 1, 0, 0, 0, 2989, 2990, 1, 
		    0, 0, 0, 2990, 2991, 1, 0, 0, 0, 2991, 2992, 3, 550, 275, 0, 2992, 
		    155, 1, 0, 0, 0, 2993, 2994, 5, 51, 0, 0, 2994, 2996, 5, 81, 0, 0, 
		    2995, 2997, 7, 1, 0, 0, 2996, 2995, 1, 0, 0, 0, 2996, 2997, 1, 0, 
		    0, 0, 2997, 2998, 1, 0, 0, 0, 2998, 2999, 3, 584, 292, 0, 2999, 3000, 
		    5, 118, 0, 0, 3000, 3013, 3, 552, 276, 0, 3001, 3003, 5, 336, 0, 0, 
		    3002, 3004, 5, 1124, 0, 0, 3003, 3002, 1, 0, 0, 0, 3003, 3004, 1, 
		    0, 0, 0, 3004, 3005, 1, 0, 0, 0, 3005, 3012, 7, 3, 0, 0, 3006, 3008, 
		    5, 103, 0, 0, 3007, 3009, 5, 1124, 0, 0, 3008, 3007, 1, 0, 0, 0, 3008, 
		    3009, 1, 0, 0, 0, 3009, 3010, 1, 0, 0, 0, 3010, 3012, 7, 4, 0, 0, 
		    3011, 3001, 1, 0, 0, 0, 3011, 3006, 1, 0, 0, 0, 3012, 3015, 1, 0, 
		    0, 0, 3013, 3011, 1, 0, 0, 0, 3013, 3014, 1, 0, 0, 0, 3014, 157, 1, 
		    0, 0, 0, 3015, 3013, 1, 0, 0, 0, 3016, 3017, 5, 51, 0, 0, 3017, 3018, 
		    5, 475, 0, 0, 3018, 3019, 5, 73, 0, 0, 3019, 3020, 3, 584, 292, 0, 
		    3020, 3021, 5, 409, 0, 0, 3021, 3022, 5, 1124, 0, 0, 3022, 3023, 3, 
		    572, 286, 0, 3023, 159, 1, 0, 0, 0, 3024, 3025, 5, 51, 0, 0, 3025, 
		    3027, 5, 131, 0, 0, 3026, 3028, 3, 640, 320, 0, 3027, 3026, 1, 0, 
		    0, 0, 3027, 3028, 1, 0, 0, 0, 3028, 3029, 1, 0, 0, 0, 3029, 3030, 
		    3, 550, 275, 0, 3030, 161, 1, 0, 0, 0, 3031, 3032, 5, 51, 0, 0, 3032, 
		    3034, 5, 437, 0, 0, 3033, 3035, 3, 640, 320, 0, 3034, 3033, 1, 0, 
		    0, 0, 3034, 3035, 1, 0, 0, 0, 3035, 3036, 1, 0, 0, 0, 3036, 3037, 
		    3, 550, 275, 0, 3037, 163, 1, 0, 0, 0, 3038, 3039, 5, 51, 0, 0, 3039, 
		    3041, 5, 608, 0, 0, 3040, 3042, 3, 640, 320, 0, 3041, 3040, 1, 0, 
		    0, 0, 3041, 3042, 1, 0, 0, 0, 3042, 3043, 1, 0, 0, 0, 3043, 3044, 
		    3, 584, 292, 0, 3044, 165, 1, 0, 0, 0, 3045, 3047, 5, 51, 0, 0, 3046, 
		    3048, 5, 649, 0, 0, 3047, 3046, 1, 0, 0, 0, 3047, 3048, 1, 0, 0, 0, 
		    3048, 3049, 1, 0, 0, 0, 3049, 3051, 5, 172, 0, 0, 3050, 3052, 3, 640, 
		    320, 0, 3051, 3050, 1, 0, 0, 0, 3051, 3052, 1, 0, 0, 0, 3052, 3053, 
		    1, 0, 0, 0, 3053, 3055, 3, 620, 310, 0, 3054, 3056, 7, 38, 0, 0, 3055, 
		    3054, 1, 0, 0, 0, 3055, 3056, 1, 0, 0, 0, 3056, 167, 1, 0, 0, 0, 3057, 
		    3058, 5, 51, 0, 0, 3058, 3059, 5, 647, 0, 0, 3059, 3065, 3, 584, 292, 
		    0, 3060, 3062, 5, 409, 0, 0, 3061, 3063, 5, 1124, 0, 0, 3062, 3061, 
		    1, 0, 0, 0, 3062, 3063, 1, 0, 0, 0, 3063, 3064, 1, 0, 0, 0, 3064, 
		    3066, 3, 572, 286, 0, 3065, 3060, 1, 0, 0, 0, 3065, 3066, 1, 0, 0, 
		    0, 3066, 169, 1, 0, 0, 0, 3067, 3068, 5, 51, 0, 0, 3068, 3070, 5, 
		    177, 0, 0, 3069, 3071, 3, 640, 320, 0, 3070, 3069, 1, 0, 0, 0, 3070, 
		    3071, 1, 0, 0, 0, 3071, 3072, 1, 0, 0, 0, 3072, 3073, 3, 550, 275, 
		    0, 3073, 171, 1, 0, 0, 0, 3074, 3075, 5, 51, 0, 0, 3075, 3077, 5, 
		    671, 0, 0, 3076, 3078, 3, 640, 320, 0, 3077, 3076, 1, 0, 0, 0, 3077, 
		    3078, 1, 0, 0, 0, 3078, 3079, 1, 0, 0, 0, 3079, 3084, 3, 550, 275, 
		    0, 3080, 3081, 5, 1135, 0, 0, 3081, 3083, 3, 550, 275, 0, 3082, 3080, 
		    1, 0, 0, 0, 3083, 3086, 1, 0, 0, 0, 3084, 3082, 1, 0, 0, 0, 3084, 
		    3085, 1, 0, 0, 0, 3085, 3088, 1, 0, 0, 0, 3086, 3084, 1, 0, 0, 0, 
		    3087, 3089, 7, 38, 0, 0, 3088, 3087, 1, 0, 0, 0, 3088, 3089, 1, 0, 
		    0, 0, 3089, 173, 1, 0, 0, 0, 3090, 3091, 5, 51, 0, 0, 3091, 3093, 
		    5, 596, 0, 0, 3092, 3094, 3, 640, 320, 0, 3093, 3092, 1, 0, 0, 0, 
		    3093, 3094, 1, 0, 0, 0, 3094, 3095, 1, 0, 0, 0, 3095, 3100, 3, 554, 
		    277, 0, 3096, 3097, 5, 1135, 0, 0, 3097, 3099, 3, 554, 277, 0, 3098, 
		    3096, 1, 0, 0, 0, 3099, 3102, 1, 0, 0, 0, 3100, 3098, 1, 0, 0, 0, 
		    3100, 3101, 1, 0, 0, 0, 3101, 175, 1, 0, 0, 0, 3102, 3100, 1, 0, 0, 
		    0, 3103, 3104, 5, 153, 0, 0, 3104, 3105, 5, 42, 0, 0, 3105, 3116, 
		    5, 596, 0, 0, 3106, 3117, 5, 529, 0, 0, 3107, 3117, 5, 6, 0, 0, 3108, 
		    3113, 3, 554, 277, 0, 3109, 3110, 5, 1135, 0, 0, 3110, 3112, 3, 554, 
		    277, 0, 3111, 3109, 1, 0, 0, 0, 3112, 3115, 1, 0, 0, 0, 3113, 3111, 
		    1, 0, 0, 0, 3113, 3114, 1, 0, 0, 0, 3114, 3117, 1, 0, 0, 0, 3115, 
		    3113, 1, 0, 0, 0, 3116, 3106, 1, 0, 0, 0, 3116, 3107, 1, 0, 0, 0, 
		    3116, 3108, 1, 0, 0, 0, 3117, 3118, 1, 0, 0, 0, 3118, 3121, 5, 175, 
		    0, 0, 3119, 3122, 3, 564, 282, 0, 3120, 3122, 3, 584, 292, 0, 3121, 
		    3119, 1, 0, 0, 0, 3121, 3120, 1, 0, 0, 0, 3122, 3130, 1, 0, 0, 0, 
		    3123, 3126, 5, 1135, 0, 0, 3124, 3127, 3, 564, 282, 0, 3125, 3127, 
		    3, 584, 292, 0, 3126, 3124, 1, 0, 0, 0, 3126, 3125, 1, 0, 0, 0, 3127, 
		    3129, 1, 0, 0, 0, 3128, 3123, 1, 0, 0, 0, 3129, 3132, 1, 0, 0, 0, 
		    3130, 3128, 1, 0, 0, 0, 3130, 3131, 1, 0, 0, 0, 3131, 3137, 1, 0, 
		    0, 0, 3132, 3130, 1, 0, 0, 0, 3133, 3134, 5, 153, 0, 0, 3134, 3135, 
		    5, 596, 0, 0, 3135, 3137, 3, 434, 217, 0, 3136, 3103, 1, 0, 0, 0, 
		    3136, 3133, 1, 0, 0, 0, 3137, 177, 1, 0, 0, 0, 3138, 3139, 5, 139, 
		    0, 0, 3139, 3140, 5, 172, 0, 0, 3140, 3145, 3, 180, 90, 0, 3141, 3142, 
		    5, 1135, 0, 0, 3142, 3144, 3, 180, 90, 0, 3143, 3141, 1, 0, 0, 0, 
		    3144, 3147, 1, 0, 0, 0, 3145, 3143, 1, 0, 0, 0, 3145, 3146, 1, 0, 
		    0, 0, 3146, 179, 1, 0, 0, 0, 3147, 3145, 1, 0, 0, 0, 3148, 3149, 3, 
		    552, 276, 0, 3149, 3150, 5, 175, 0, 0, 3150, 3151, 3, 552, 276, 0, 
		    3151, 181, 1, 0, 0, 0, 3152, 3154, 5, 656, 0, 0, 3153, 3155, 5, 172, 
		    0, 0, 3154, 3153, 1, 0, 0, 0, 3154, 3155, 1, 0, 0, 0, 3155, 3156, 
		    1, 0, 0, 0, 3156, 3157, 3, 552, 276, 0, 3157, 183, 1, 0, 0, 0, 3158, 
		    3159, 5, 20, 0, 0, 3159, 3166, 3, 550, 275, 0, 3160, 3163, 5, 1133, 
		    0, 0, 3161, 3164, 3, 628, 314, 0, 3162, 3164, 3, 624, 312, 0, 3163, 
		    3161, 1, 0, 0, 0, 3163, 3162, 1, 0, 0, 0, 3163, 3164, 1, 0, 0, 0, 
		    3164, 3165, 1, 0, 0, 0, 3165, 3167, 5, 1134, 0, 0, 3166, 3160, 1, 
		    0, 0, 0, 3166, 3167, 1, 0, 0, 0, 3167, 185, 1, 0, 0, 0, 3168, 3171, 
		    3, 214, 107, 0, 3169, 3171, 3, 216, 108, 0, 3170, 3168, 1, 0, 0, 0, 
		    3170, 3169, 1, 0, 0, 0, 3171, 187, 1, 0, 0, 0, 3172, 3173, 5, 399, 
		    0, 0, 3173, 3174, 3, 624, 312, 0, 3174, 189, 1, 0, 0, 0, 3175, 3180, 
		    3, 218, 109, 0, 3176, 3180, 3, 220, 110, 0, 3177, 3180, 3, 222, 111, 
		    0, 3178, 3180, 3, 224, 112, 0, 3179, 3175, 1, 0, 0, 0, 3179, 3176, 
		    1, 0, 0, 0, 3179, 3177, 1, 0, 0, 0, 3179, 3178, 1, 0, 0, 0, 3180, 
		    191, 1, 0, 0, 0, 3181, 3183, 5, 85, 0, 0, 3182, 3184, 7, 39, 0, 0, 
		    3183, 3182, 1, 0, 0, 0, 3183, 3184, 1, 0, 0, 0, 3184, 3186, 1, 0, 
		    0, 0, 3185, 3187, 5, 78, 0, 0, 3186, 3185, 1, 0, 0, 0, 3186, 3187, 
		    1, 0, 0, 0, 3187, 3189, 1, 0, 0, 0, 3188, 3190, 5, 87, 0, 0, 3189, 
		    3188, 1, 0, 0, 0, 3189, 3190, 1, 0, 0, 0, 3190, 3191, 1, 0, 0, 0, 
		    3191, 3198, 3, 552, 276, 0, 3192, 3193, 5, 129, 0, 0, 3193, 3195, 
		    5, 1133, 0, 0, 3194, 3196, 3, 616, 308, 0, 3195, 3194, 1, 0, 0, 0, 
		    3195, 3196, 1, 0, 0, 0, 3196, 3197, 1, 0, 0, 0, 3197, 3199, 5, 1134, 
		    0, 0, 3198, 3192, 1, 0, 0, 0, 3198, 3199, 1, 0, 0, 0, 3199, 3223, 
		    1, 0, 0, 0, 3200, 3202, 5, 1133, 0, 0, 3201, 3203, 3, 618, 309, 0, 
		    3202, 3201, 1, 0, 0, 0, 3202, 3203, 1, 0, 0, 0, 3203, 3204, 1, 0, 
		    0, 0, 3204, 3206, 5, 1134, 0, 0, 3205, 3200, 1, 0, 0, 0, 3205, 3206, 
		    1, 0, 0, 0, 3206, 3207, 1, 0, 0, 0, 3207, 3212, 3, 206, 103, 0, 3208, 
		    3210, 5, 12, 0, 0, 3209, 3208, 1, 0, 0, 0, 3209, 3210, 1, 0, 0, 0, 
		    3210, 3211, 1, 0, 0, 0, 3211, 3213, 3, 584, 292, 0, 3212, 3209, 1, 
		    0, 0, 0, 3212, 3213, 1, 0, 0, 0, 3213, 3224, 1, 0, 0, 0, 3214, 3215, 
		    5, 153, 0, 0, 3215, 3220, 3, 208, 104, 0, 3216, 3217, 5, 1135, 0, 
		    0, 3217, 3219, 3, 208, 104, 0, 3218, 3216, 1, 0, 0, 0, 3219, 3222, 
		    1, 0, 0, 0, 3220, 3218, 1, 0, 0, 0, 3220, 3221, 1, 0, 0, 0, 3221, 
		    3224, 1, 0, 0, 0, 3222, 3220, 1, 0, 0, 0, 3223, 3205, 1, 0, 0, 0, 
		    3223, 3214, 1, 0, 0, 0, 3224, 3237, 1, 0, 0, 0, 3225, 3226, 5, 118, 
		    0, 0, 3226, 3227, 5, 401, 0, 0, 3227, 3228, 5, 91, 0, 0, 3228, 3229, 
		    5, 184, 0, 0, 3229, 3234, 3, 208, 104, 0, 3230, 3231, 5, 1135, 0, 
		    0, 3231, 3233, 3, 208, 104, 0, 3232, 3230, 1, 0, 0, 0, 3233, 3236, 
		    1, 0, 0, 0, 3234, 3232, 1, 0, 0, 0, 3234, 3235, 1, 0, 0, 0, 3235, 
		    3238, 1, 0, 0, 0, 3236, 3234, 1, 0, 0, 0, 3237, 3225, 1, 0, 0, 0, 
		    3237, 3238, 1, 0, 0, 0, 3238, 193, 1, 0, 0, 0, 3239, 3240, 5, 102, 
		    0, 0, 3240, 3242, 5, 388, 0, 0, 3241, 3243, 7, 40, 0, 0, 3242, 3241, 
		    1, 0, 0, 0, 3242, 3243, 1, 0, 0, 0, 3243, 3245, 1, 0, 0, 0, 3244, 
		    3246, 5, 474, 0, 0, 3245, 3244, 1, 0, 0, 0, 3245, 3246, 1, 0, 0, 0, 
		    3246, 3247, 1, 0, 0, 0, 3247, 3248, 5, 82, 0, 0, 3248, 3250, 5, 1148, 
		    0, 0, 3249, 3251, 7, 6, 0, 0, 3250, 3249, 1, 0, 0, 0, 3250, 3251, 
		    1, 0, 0, 0, 3251, 3252, 1, 0, 0, 0, 3252, 3253, 5, 87, 0, 0, 3253, 
		    3254, 5, 172, 0, 0, 3254, 3260, 3, 552, 276, 0, 3255, 3256, 5, 129, 
		    0, 0, 3256, 3257, 5, 1133, 0, 0, 3257, 3258, 3, 616, 308, 0, 3258, 
		    3259, 5, 1134, 0, 0, 3259, 3261, 1, 0, 0, 0, 3260, 3255, 1, 0, 0, 
		    0, 3260, 3261, 1, 0, 0, 0, 3261, 3265, 1, 0, 0, 0, 3262, 3263, 5, 
		    25, 0, 0, 3263, 3264, 5, 153, 0, 0, 3264, 3266, 3, 568, 284, 0, 3265, 
		    3262, 1, 0, 0, 0, 3265, 3266, 1, 0, 0, 0, 3266, 3273, 1, 0, 0, 0, 
		    3267, 3269, 7, 41, 0, 0, 3268, 3270, 3, 280, 140, 0, 3269, 3268, 1, 
		    0, 0, 0, 3270, 3271, 1, 0, 0, 0, 3271, 3269, 1, 0, 0, 0, 3271, 3272, 
		    1, 0, 0, 0, 3272, 3274, 1, 0, 0, 0, 3273, 3267, 1, 0, 0, 0, 3273, 
		    3274, 1, 0, 0, 0, 3274, 3281, 1, 0, 0, 0, 3275, 3277, 5, 101, 0, 0, 
		    3276, 3278, 3, 282, 141, 0, 3277, 3276, 1, 0, 0, 0, 3278, 3279, 1, 
		    0, 0, 0, 3279, 3277, 1, 0, 0, 0, 3279, 3280, 1, 0, 0, 0, 3280, 3282, 
		    1, 0, 0, 0, 3281, 3275, 1, 0, 0, 0, 3281, 3282, 1, 0, 0, 0, 3282, 
		    3287, 1, 0, 0, 0, 3283, 3284, 5, 78, 0, 0, 3284, 3285, 3, 590, 295, 
		    0, 3285, 3286, 7, 42, 0, 0, 3286, 3288, 1, 0, 0, 0, 3287, 3283, 1, 
		    0, 0, 0, 3287, 3288, 1, 0, 0, 0, 3288, 3300, 1, 0, 0, 0, 3289, 3290, 
		    5, 1133, 0, 0, 3290, 3295, 3, 210, 105, 0, 3291, 3292, 5, 1135, 0, 
		    0, 3292, 3294, 3, 210, 105, 0, 3293, 3291, 1, 0, 0, 0, 3294, 3297, 
		    1, 0, 0, 0, 3295, 3293, 1, 0, 0, 0, 3295, 3296, 1, 0, 0, 0, 3296, 
		    3298, 1, 0, 0, 0, 3297, 3295, 1, 0, 0, 0, 3298, 3299, 5, 1134, 0, 
		    0, 3299, 3301, 1, 0, 0, 0, 3300, 3289, 1, 0, 0, 0, 3300, 3301, 1, 
		    0, 0, 0, 3301, 3311, 1, 0, 0, 0, 3302, 3303, 5, 153, 0, 0, 3303, 3308, 
		    3, 208, 104, 0, 3304, 3305, 5, 1135, 0, 0, 3305, 3307, 3, 208, 104, 
		    0, 3306, 3304, 1, 0, 0, 0, 3307, 3310, 1, 0, 0, 0, 3308, 3306, 1, 
		    0, 0, 0, 3308, 3309, 1, 0, 0, 0, 3309, 3312, 1, 0, 0, 0, 3310, 3308, 
		    1, 0, 0, 0, 3311, 3302, 1, 0, 0, 0, 3311, 3312, 1, 0, 0, 0, 3312, 
		    195, 1, 0, 0, 0, 3313, 3314, 5, 102, 0, 0, 3314, 3316, 5, 682, 0, 
		    0, 3315, 3317, 7, 40, 0, 0, 3316, 3315, 1, 0, 0, 0, 3316, 3317, 1, 
		    0, 0, 0, 3317, 3319, 1, 0, 0, 0, 3318, 3320, 5, 474, 0, 0, 3319, 3318, 
		    1, 0, 0, 0, 3319, 3320, 1, 0, 0, 0, 3320, 3321, 1, 0, 0, 0, 3321, 
		    3322, 5, 82, 0, 0, 3322, 3324, 5, 1148, 0, 0, 3323, 3325, 7, 6, 0, 
		    0, 3324, 3323, 1, 0, 0, 0, 3324, 3325, 1, 0, 0, 0, 3325, 3326, 1, 
		    0, 0, 0, 3326, 3327, 5, 87, 0, 0, 3327, 3328, 5, 172, 0, 0, 3328, 
		    3332, 3, 552, 276, 0, 3329, 3330, 5, 25, 0, 0, 3330, 3331, 5, 153, 
		    0, 0, 3331, 3333, 3, 568, 284, 0, 3332, 3329, 1, 0, 0, 0, 3332, 3333, 
		    1, 0, 0, 0, 3333, 3340, 1, 0, 0, 0, 3334, 3335, 5, 601, 0, 0, 3335, 
		    3336, 5, 448, 0, 0, 3336, 3337, 5, 19, 0, 0, 3337, 3338, 5, 1126, 
		    0, 0, 3338, 3339, 5, 1148, 0, 0, 3339, 3341, 5, 1125, 0, 0, 3340, 
		    3334, 1, 0, 0, 0, 3340, 3341, 1, 0, 0, 0, 3341, 3346, 1, 0, 0, 0, 
		    3342, 3343, 5, 78, 0, 0, 3343, 3344, 3, 590, 295, 0, 3344, 3345, 7, 
		    42, 0, 0, 3345, 3347, 1, 0, 0, 0, 3346, 3342, 1, 0, 0, 0, 3346, 3347, 
		    1, 0, 0, 0, 3347, 3359, 1, 0, 0, 0, 3348, 3349, 5, 1133, 0, 0, 3349, 
		    3354, 3, 210, 105, 0, 3350, 3351, 5, 1135, 0, 0, 3351, 3353, 3, 210, 
		    105, 0, 3352, 3350, 1, 0, 0, 0, 3353, 3356, 1, 0, 0, 0, 3354, 3352, 
		    1, 0, 0, 0, 3354, 3355, 1, 0, 0, 0, 3355, 3357, 1, 0, 0, 0, 3356, 
		    3354, 1, 0, 0, 0, 3357, 3358, 5, 1134, 0, 0, 3358, 3360, 1, 0, 0, 
		    0, 3359, 3348, 1, 0, 0, 0, 3359, 3360, 1, 0, 0, 0, 3360, 3370, 1, 
		    0, 0, 0, 3361, 3362, 5, 153, 0, 0, 3362, 3367, 3, 208, 104, 0, 3363, 
		    3364, 5, 1135, 0, 0, 3364, 3366, 3, 208, 104, 0, 3365, 3363, 1, 0, 
		    0, 0, 3366, 3369, 1, 0, 0, 0, 3367, 3365, 1, 0, 0, 0, 3367, 3368, 
		    1, 0, 0, 0, 3368, 3371, 1, 0, 0, 0, 3369, 3367, 1, 0, 0, 0, 3370, 
		    3361, 1, 0, 0, 0, 3370, 3371, 1, 0, 0, 0, 3371, 197, 1, 0, 0, 0, 3372, 
		    3374, 5, 141, 0, 0, 3373, 3375, 7, 43, 0, 0, 3374, 3373, 1, 0, 0, 
		    0, 3374, 3375, 1, 0, 0, 0, 3375, 3377, 1, 0, 0, 0, 3376, 3378, 5, 
		    87, 0, 0, 3377, 3376, 1, 0, 0, 0, 3377, 3378, 1, 0, 0, 0, 3378, 3379, 
		    1, 0, 0, 0, 3379, 3385, 3, 552, 276, 0, 3380, 3381, 5, 129, 0, 0, 
		    3381, 3382, 5, 1133, 0, 0, 3382, 3383, 3, 616, 308, 0, 3383, 3384, 
		    5, 1134, 0, 0, 3384, 3386, 1, 0, 0, 0, 3385, 3380, 1, 0, 0, 0, 3385, 
		    3386, 1, 0, 0, 0, 3386, 3403, 1, 0, 0, 0, 3387, 3388, 5, 1133, 0, 
		    0, 3388, 3389, 3, 616, 308, 0, 3389, 3390, 5, 1134, 0, 0, 3390, 3392, 
		    1, 0, 0, 0, 3391, 3387, 1, 0, 0, 0, 3391, 3392, 1, 0, 0, 0, 3392, 
		    3393, 1, 0, 0, 0, 3393, 3404, 3, 206, 103, 0, 3394, 3395, 5, 153, 
		    0, 0, 3395, 3400, 3, 208, 104, 0, 3396, 3397, 5, 1135, 0, 0, 3397, 
		    3399, 3, 208, 104, 0, 3398, 3396, 1, 0, 0, 0, 3399, 3402, 1, 0, 0, 
		    0, 3400, 3398, 1, 0, 0, 0, 3400, 3401, 1, 0, 0, 0, 3401, 3404, 1, 
		    0, 0, 0, 3402, 3400, 1, 0, 0, 0, 3403, 3391, 1, 0, 0, 0, 3403, 3394, 
		    1, 0, 0, 0, 3404, 199, 1, 0, 0, 0, 3405, 3407, 3, 252, 126, 0, 3406, 
		    3408, 3, 212, 106, 0, 3407, 3406, 1, 0, 0, 0, 3407, 3408, 1, 0, 0, 
		    0, 3408, 3471, 1, 0, 0, 0, 3409, 3411, 3, 248, 124, 0, 3410, 3412, 
		    3, 212, 106, 0, 3411, 3410, 1, 0, 0, 0, 3411, 3412, 1, 0, 0, 0, 3412, 
		    3471, 1, 0, 0, 0, 3413, 3416, 3, 254, 127, 0, 3414, 3416, 3, 250, 
		    125, 0, 3415, 3413, 1, 0, 0, 0, 3415, 3414, 1, 0, 0, 0, 3416, 3418, 
		    1, 0, 0, 0, 3417, 3419, 3, 258, 129, 0, 3418, 3417, 1, 0, 0, 0, 3419, 
		    3420, 1, 0, 0, 0, 3420, 3418, 1, 0, 0, 0, 3420, 3421, 1, 0, 0, 0, 
		    3421, 3430, 1, 0, 0, 0, 3422, 3424, 5, 180, 0, 0, 3423, 3425, 7, 44, 
		    0, 0, 3424, 3423, 1, 0, 0, 0, 3424, 3425, 1, 0, 0, 0, 3425, 3428, 
		    1, 0, 0, 0, 3426, 3429, 3, 252, 126, 0, 3427, 3429, 3, 248, 124, 0, 
		    3428, 3426, 1, 0, 0, 0, 3428, 3427, 1, 0, 0, 0, 3429, 3431, 1, 0, 
		    0, 0, 3430, 3422, 1, 0, 0, 0, 3430, 3431, 1, 0, 0, 0, 3431, 3433, 
		    1, 0, 0, 0, 3432, 3434, 3, 230, 115, 0, 3433, 3432, 1, 0, 0, 0, 3433, 
		    3434, 1, 0, 0, 0, 3434, 3436, 1, 0, 0, 0, 3435, 3437, 3, 294, 147, 
		    0, 3436, 3435, 1, 0, 0, 0, 3436, 3437, 1, 0, 0, 0, 3437, 3439, 1, 
		    0, 0, 0, 3438, 3440, 3, 212, 106, 0, 3439, 3438, 1, 0, 0, 0, 3439, 
		    3440, 1, 0, 0, 0, 3440, 3471, 1, 0, 0, 0, 3441, 3443, 3, 250, 125, 
		    0, 3442, 3444, 3, 256, 128, 0, 3443, 3442, 1, 0, 0, 0, 3444, 3445, 
		    1, 0, 0, 0, 3445, 3443, 1, 0, 0, 0, 3445, 3446, 1, 0, 0, 0, 3446, 
		    3452, 1, 0, 0, 0, 3447, 3449, 5, 180, 0, 0, 3448, 3450, 7, 44, 0, 
		    0, 3449, 3448, 1, 0, 0, 0, 3449, 3450, 1, 0, 0, 0, 3450, 3451, 1, 
		    0, 0, 0, 3451, 3453, 3, 248, 124, 0, 3452, 3447, 1, 0, 0, 0, 3452, 
		    3453, 1, 0, 0, 0, 3453, 3455, 1, 0, 0, 0, 3454, 3456, 3, 230, 115, 
		    0, 3455, 3454, 1, 0, 0, 0, 3455, 3456, 1, 0, 0, 0, 3456, 3458, 1, 
		    0, 0, 0, 3457, 3459, 3, 294, 147, 0, 3458, 3457, 1, 0, 0, 0, 3458, 
		    3459, 1, 0, 0, 0, 3459, 3461, 1, 0, 0, 0, 3460, 3462, 3, 212, 106, 
		    0, 3461, 3460, 1, 0, 0, 0, 3461, 3462, 1, 0, 0, 0, 3462, 3471, 1, 
		    0, 0, 0, 3463, 3466, 3, 254, 127, 0, 3464, 3465, 5, 1135, 0, 0, 3465, 
		    3467, 3, 260, 130, 0, 3466, 3464, 1, 0, 0, 0, 3467, 3468, 1, 0, 0, 
		    0, 3468, 3466, 1, 0, 0, 0, 3468, 3469, 1, 0, 0, 0, 3469, 3471, 1, 
		    0, 0, 0, 3470, 3405, 1, 0, 0, 0, 3470, 3409, 1, 0, 0, 0, 3470, 3415, 
		    1, 0, 0, 0, 3470, 3441, 1, 0, 0, 0, 3470, 3463, 1, 0, 0, 0, 3471, 
		    201, 1, 0, 0, 0, 3472, 3475, 3, 226, 113, 0, 3473, 3475, 3, 228, 114, 
		    0, 3474, 3472, 1, 0, 0, 0, 3474, 3473, 1, 0, 0, 0, 3475, 203, 1, 0, 
		    0, 0, 3476, 3477, 5, 188, 0, 0, 3477, 3479, 5, 1133, 0, 0, 3478, 3480, 
		    3, 626, 313, 0, 3479, 3478, 1, 0, 0, 0, 3479, 3480, 1, 0, 0, 0, 3480, 
		    3481, 1, 0, 0, 0, 3481, 3490, 5, 1134, 0, 0, 3482, 3483, 5, 1135, 
		    0, 0, 3483, 3485, 5, 1133, 0, 0, 3484, 3486, 3, 626, 313, 0, 3485, 
		    3484, 1, 0, 0, 0, 3485, 3486, 1, 0, 0, 0, 3486, 3487, 1, 0, 0, 0, 
		    3487, 3489, 5, 1134, 0, 0, 3488, 3482, 1, 0, 0, 0, 3489, 3492, 1, 
		    0, 0, 0, 3490, 3488, 1, 0, 0, 0, 3490, 3491, 1, 0, 0, 0, 3491, 205, 
		    1, 0, 0, 0, 3492, 3490, 1, 0, 0, 0, 3493, 3512, 3, 200, 100, 0, 3494, 
		    3495, 7, 45, 0, 0, 3495, 3497, 5, 1133, 0, 0, 3496, 3498, 3, 626, 
		    313, 0, 3497, 3496, 1, 0, 0, 0, 3497, 3498, 1, 0, 0, 0, 3498, 3499, 
		    1, 0, 0, 0, 3499, 3508, 5, 1134, 0, 0, 3500, 3501, 5, 1135, 0, 0, 
		    3501, 3503, 5, 1133, 0, 0, 3502, 3504, 3, 626, 313, 0, 3503, 3502, 
		    1, 0, 0, 0, 3503, 3504, 1, 0, 0, 0, 3504, 3505, 1, 0, 0, 0, 3505, 
		    3507, 5, 1134, 0, 0, 3506, 3500, 1, 0, 0, 0, 3507, 3510, 1, 0, 0, 
		    0, 3508, 3506, 1, 0, 0, 0, 3508, 3509, 1, 0, 0, 0, 3509, 3512, 1, 
		    0, 0, 0, 3510, 3508, 1, 0, 0, 0, 3511, 3493, 1, 0, 0, 0, 3511, 3494, 
		    1, 0, 0, 0, 3512, 207, 1, 0, 0, 0, 3513, 3514, 3, 556, 278, 0, 3514, 
		    3517, 5, 1124, 0, 0, 3515, 3518, 3, 688, 344, 0, 3516, 3518, 5, 42, 
		    0, 0, 3517, 3515, 1, 0, 0, 0, 3517, 3516, 1, 0, 0, 0, 3518, 209, 1, 
		    0, 0, 0, 3519, 3522, 3, 584, 292, 0, 3520, 3522, 5, 1159, 0, 0, 3521, 
		    3519, 1, 0, 0, 0, 3521, 3520, 1, 0, 0, 0, 3522, 211, 1, 0, 0, 0, 3523, 
		    3524, 5, 65, 0, 0, 3524, 3530, 5, 184, 0, 0, 3525, 3526, 5, 103, 0, 
		    0, 3526, 3527, 5, 80, 0, 0, 3527, 3528, 5, 610, 0, 0, 3528, 3530, 
		    5, 511, 0, 0, 3529, 3523, 1, 0, 0, 0, 3529, 3525, 1, 0, 0, 0, 3530, 
		    213, 1, 0, 0, 0, 3531, 3533, 5, 44, 0, 0, 3532, 3534, 5, 106, 0, 0, 
		    3533, 3532, 1, 0, 0, 0, 3533, 3534, 1, 0, 0, 0, 3534, 3536, 1, 0, 
		    0, 0, 3535, 3537, 5, 568, 0, 0, 3536, 3535, 1, 0, 0, 0, 3536, 3537, 
		    1, 0, 0, 0, 3537, 3539, 1, 0, 0, 0, 3538, 3540, 5, 78, 0, 0, 3539, 
		    3538, 1, 0, 0, 0, 3539, 3540, 1, 0, 0, 0, 3540, 3541, 1, 0, 0, 0, 
		    3541, 3542, 5, 68, 0, 0, 3542, 3547, 3, 552, 276, 0, 3543, 3545, 5, 
		    12, 0, 0, 3544, 3543, 1, 0, 0, 0, 3544, 3545, 1, 0, 0, 0, 3545, 3546, 
		    1, 0, 0, 0, 3546, 3548, 3, 584, 292, 0, 3547, 3544, 1, 0, 0, 0, 3547, 
		    3548, 1, 0, 0, 0, 3548, 3554, 1, 0, 0, 0, 3549, 3550, 5, 129, 0, 0, 
		    3550, 3551, 5, 1133, 0, 0, 3551, 3552, 3, 616, 308, 0, 3552, 3553, 
		    5, 1134, 0, 0, 3553, 3555, 1, 0, 0, 0, 3554, 3549, 1, 0, 0, 0, 3554, 
		    3555, 1, 0, 0, 0, 3555, 3558, 1, 0, 0, 0, 3556, 3557, 5, 190, 0, 0, 
		    3557, 3559, 3, 688, 344, 0, 3558, 3556, 1, 0, 0, 0, 3558, 3559, 1, 
		    0, 0, 0, 3559, 3561, 1, 0, 0, 0, 3560, 3562, 3, 230, 115, 0, 3561, 
		    3560, 1, 0, 0, 0, 3561, 3562, 1, 0, 0, 0, 3562, 3565, 1, 0, 0, 0, 
		    3563, 3564, 5, 99, 0, 0, 3564, 3566, 3, 296, 148, 0, 3565, 3563, 1, 
		    0, 0, 0, 3565, 3566, 1, 0, 0, 0, 3566, 215, 1, 0, 0, 0, 3567, 3569, 
		    5, 44, 0, 0, 3568, 3570, 5, 106, 0, 0, 3569, 3568, 1, 0, 0, 0, 3569, 
		    3570, 1, 0, 0, 0, 3570, 3572, 1, 0, 0, 0, 3571, 3573, 5, 568, 0, 0, 
		    3572, 3571, 1, 0, 0, 0, 3572, 3573, 1, 0, 0, 0, 3573, 3575, 1, 0, 
		    0, 0, 3574, 3576, 5, 78, 0, 0, 3575, 3574, 1, 0, 0, 0, 3575, 3576, 
		    1, 0, 0, 0, 3576, 3616, 1, 0, 0, 0, 3577, 3580, 3, 552, 276, 0, 3578, 
		    3579, 5, 1132, 0, 0, 3579, 3581, 5, 1117, 0, 0, 3580, 3578, 1, 0, 
		    0, 0, 3580, 3581, 1, 0, 0, 0, 3581, 3590, 1, 0, 0, 0, 3582, 3583, 
		    5, 1135, 0, 0, 3583, 3586, 3, 552, 276, 0, 3584, 3585, 5, 1132, 0, 
		    0, 3585, 3587, 5, 1117, 0, 0, 3586, 3584, 1, 0, 0, 0, 3586, 3587, 
		    1, 0, 0, 0, 3587, 3589, 1, 0, 0, 0, 3588, 3582, 1, 0, 0, 0, 3589, 
		    3592, 1, 0, 0, 0, 3590, 3588, 1, 0, 0, 0, 3590, 3591, 1, 0, 0, 0, 
		    3591, 3593, 1, 0, 0, 0, 3592, 3590, 1, 0, 0, 0, 3593, 3594, 5, 68, 
		    0, 0, 3594, 3595, 3, 234, 117, 0, 3595, 3617, 1, 0, 0, 0, 3596, 3597, 
		    5, 68, 0, 0, 3597, 3600, 3, 552, 276, 0, 3598, 3599, 5, 1132, 0, 0, 
		    3599, 3601, 5, 1117, 0, 0, 3600, 3598, 1, 0, 0, 0, 3600, 3601, 1, 
		    0, 0, 0, 3601, 3610, 1, 0, 0, 0, 3602, 3603, 5, 1135, 0, 0, 3603, 
		    3606, 3, 552, 276, 0, 3604, 3605, 5, 1132, 0, 0, 3605, 3607, 5, 1117, 
		    0, 0, 3606, 3604, 1, 0, 0, 0, 3606, 3607, 1, 0, 0, 0, 3607, 3609, 
		    1, 0, 0, 0, 3608, 3602, 1, 0, 0, 0, 3609, 3612, 1, 0, 0, 0, 3610, 
		    3608, 1, 0, 0, 0, 3610, 3611, 1, 0, 0, 0, 3611, 3613, 1, 0, 0, 0, 
		    3612, 3610, 1, 0, 0, 0, 3613, 3614, 5, 187, 0, 0, 3614, 3615, 3, 234, 
		    117, 0, 3615, 3617, 1, 0, 0, 0, 3616, 3577, 1, 0, 0, 0, 3616, 3596, 
		    1, 0, 0, 0, 3617, 3620, 1, 0, 0, 0, 3618, 3619, 5, 190, 0, 0, 3619, 
		    3621, 3, 688, 344, 0, 3620, 3618, 1, 0, 0, 0, 3620, 3621, 1, 0, 0, 
		    0, 3621, 217, 1, 0, 0, 0, 3622, 3623, 5, 442, 0, 0, 3623, 3624, 3, 
		    552, 276, 0, 3624, 3629, 5, 539, 0, 0, 3625, 3627, 5, 12, 0, 0, 3626, 
		    3625, 1, 0, 0, 0, 3626, 3627, 1, 0, 0, 0, 3627, 3628, 1, 0, 0, 0, 
		    3628, 3630, 3, 584, 292, 0, 3629, 3626, 1, 0, 0, 0, 3629, 3630, 1, 
		    0, 0, 0, 3630, 219, 1, 0, 0, 0, 3631, 3632, 5, 442, 0, 0, 3632, 3633, 
		    3, 552, 276, 0, 3633, 3634, 5, 134, 0, 0, 3634, 3641, 3, 584, 292, 
		    0, 3635, 3636, 3, 696, 348, 0, 3636, 3637, 5, 1133, 0, 0, 3637, 3638, 
		    3, 628, 314, 0, 3638, 3639, 5, 1134, 0, 0, 3639, 3642, 1, 0, 0, 0, 
		    3640, 3642, 7, 46, 0, 0, 3641, 3635, 1, 0, 0, 0, 3641, 3640, 1, 0, 
		    0, 0, 3642, 3645, 1, 0, 0, 0, 3643, 3644, 5, 190, 0, 0, 3644, 3646, 
		    3, 688, 344, 0, 3645, 3643, 1, 0, 0, 0, 3645, 3646, 1, 0, 0, 0, 3646, 
		    3649, 1, 0, 0, 0, 3647, 3648, 5, 99, 0, 0, 3648, 3650, 3, 296, 148, 
		    0, 3649, 3647, 1, 0, 0, 0, 3649, 3650, 1, 0, 0, 0, 3650, 221, 1, 0, 
		    0, 0, 3651, 3652, 5, 442, 0, 0, 3652, 3653, 3, 552, 276, 0, 3653, 
		    3654, 5, 134, 0, 0, 3654, 3657, 7, 47, 0, 0, 3655, 3656, 5, 190, 0, 
		    0, 3656, 3658, 3, 688, 344, 0, 3657, 3655, 1, 0, 0, 0, 3657, 3658, 
		    1, 0, 0, 0, 3658, 3661, 1, 0, 0, 0, 3659, 3660, 5, 99, 0, 0, 3660, 
		    3662, 3, 296, 148, 0, 3661, 3659, 1, 0, 0, 0, 3661, 3662, 1, 0, 0, 
		    0, 3662, 223, 1, 0, 0, 0, 3663, 3664, 5, 442, 0, 0, 3664, 3665, 3, 
		    552, 276, 0, 3665, 3666, 5, 361, 0, 0, 3666, 225, 1, 0, 0, 0, 3667, 
		    3669, 5, 184, 0, 0, 3668, 3670, 5, 106, 0, 0, 3669, 3668, 1, 0, 0, 
		    0, 3669, 3670, 1, 0, 0, 0, 3670, 3672, 1, 0, 0, 0, 3671, 3673, 5, 
		    78, 0, 0, 3672, 3671, 1, 0, 0, 0, 3672, 3673, 1, 0, 0, 0, 3673, 3674, 
		    1, 0, 0, 0, 3674, 3679, 3, 552, 276, 0, 3675, 3677, 5, 12, 0, 0, 3676, 
		    3675, 1, 0, 0, 0, 3676, 3677, 1, 0, 0, 0, 3677, 3678, 1, 0, 0, 0, 
		    3678, 3680, 3, 584, 292, 0, 3679, 3676, 1, 0, 0, 0, 3679, 3680, 1, 
		    0, 0, 0, 3680, 3681, 1, 0, 0, 0, 3681, 3682, 5, 153, 0, 0, 3682, 3687, 
		    3, 208, 104, 0, 3683, 3684, 5, 1135, 0, 0, 3684, 3686, 3, 208, 104, 
		    0, 3685, 3683, 1, 0, 0, 0, 3686, 3689, 1, 0, 0, 0, 3687, 3685, 1, 
		    0, 0, 0, 3687, 3688, 1, 0, 0, 0, 3688, 3692, 1, 0, 0, 0, 3689, 3687, 
		    1, 0, 0, 0, 3690, 3691, 5, 190, 0, 0, 3691, 3693, 3, 688, 344, 0, 
		    3692, 3690, 1, 0, 0, 0, 3692, 3693, 1, 0, 0, 0, 3693, 3695, 1, 0, 
		    0, 0, 3694, 3696, 3, 230, 115, 0, 3695, 3694, 1, 0, 0, 0, 3695, 3696, 
		    1, 0, 0, 0, 3696, 3698, 1, 0, 0, 0, 3697, 3699, 3, 294, 147, 0, 3698, 
		    3697, 1, 0, 0, 0, 3698, 3699, 1, 0, 0, 0, 3699, 227, 1, 0, 0, 0, 3700, 
		    3702, 5, 184, 0, 0, 3701, 3703, 5, 106, 0, 0, 3702, 3701, 1, 0, 0, 
		    0, 3702, 3703, 1, 0, 0, 0, 3703, 3705, 1, 0, 0, 0, 3704, 3706, 5, 
		    78, 0, 0, 3705, 3704, 1, 0, 0, 0, 3705, 3706, 1, 0, 0, 0, 3706, 3707, 
		    1, 0, 0, 0, 3707, 3708, 3, 234, 117, 0, 3708, 3709, 5, 153, 0, 0, 
		    3709, 3714, 3, 208, 104, 0, 3710, 3711, 5, 1135, 0, 0, 3711, 3713, 
		    3, 208, 104, 0, 3712, 3710, 1, 0, 0, 0, 3713, 3716, 1, 0, 0, 0, 3714, 
		    3712, 1, 0, 0, 0, 3714, 3715, 1, 0, 0, 0, 3715, 3719, 1, 0, 0, 0, 
		    3716, 3714, 1, 0, 0, 0, 3717, 3718, 5, 190, 0, 0, 3718, 3720, 3, 688, 
		    344, 0, 3719, 3717, 1, 0, 0, 0, 3719, 3720, 1, 0, 0, 0, 3720, 229, 
		    1, 0, 0, 0, 3721, 3722, 5, 124, 0, 0, 3722, 3723, 5, 19, 0, 0, 3723, 
		    3728, 3, 232, 116, 0, 3724, 3725, 5, 1135, 0, 0, 3725, 3727, 3, 232, 
		    116, 0, 3726, 3724, 1, 0, 0, 0, 3727, 3730, 1, 0, 0, 0, 3728, 3726, 
		    1, 0, 0, 0, 3728, 3729, 1, 0, 0, 0, 3729, 231, 1, 0, 0, 0, 3730, 3728, 
		    1, 0, 0, 0, 3731, 3733, 3, 688, 344, 0, 3732, 3734, 7, 48, 0, 0, 3733, 
		    3732, 1, 0, 0, 0, 3733, 3734, 1, 0, 0, 0, 3734, 233, 1, 0, 0, 0, 3735, 
		    3740, 3, 236, 118, 0, 3736, 3737, 5, 1135, 0, 0, 3737, 3739, 3, 236, 
		    118, 0, 3738, 3736, 1, 0, 0, 0, 3739, 3742, 1, 0, 0, 0, 3740, 3738, 
		    1, 0, 0, 0, 3740, 3741, 1, 0, 0, 0, 3741, 235, 1, 0, 0, 0, 3742, 3740, 
		    1, 0, 0, 0, 3743, 3747, 3, 238, 119, 0, 3744, 3746, 3, 244, 122, 0, 
		    3745, 3744, 1, 0, 0, 0, 3746, 3749, 1, 0, 0, 0, 3747, 3745, 1, 0, 
		    0, 0, 3747, 3748, 1, 0, 0, 0, 3748, 3762, 1, 0, 0, 0, 3749, 3747, 
		    1, 0, 0, 0, 3750, 3751, 5, 1133, 0, 0, 3751, 3755, 3, 238, 119, 0, 
		    3752, 3754, 3, 244, 122, 0, 3753, 3752, 1, 0, 0, 0, 3754, 3757, 1, 
		    0, 0, 0, 3755, 3753, 1, 0, 0, 0, 3755, 3756, 1, 0, 0, 0, 3756, 3758, 
		    1, 0, 0, 0, 3757, 3755, 1, 0, 0, 0, 3758, 3759, 5, 1134, 0, 0, 3759, 
		    3762, 1, 0, 0, 0, 3760, 3762, 3, 262, 131, 0, 3761, 3743, 1, 0, 0, 
		    0, 3761, 3750, 1, 0, 0, 0, 3761, 3760, 1, 0, 0, 0, 3762, 237, 1, 0, 
		    0, 0, 3763, 3769, 3, 552, 276, 0, 3764, 3765, 5, 129, 0, 0, 3765, 
		    3766, 5, 1133, 0, 0, 3766, 3767, 3, 616, 308, 0, 3767, 3768, 5, 1134, 
		    0, 0, 3768, 3770, 1, 0, 0, 0, 3769, 3764, 1, 0, 0, 0, 3769, 3770, 
		    1, 0, 0, 0, 3770, 3775, 1, 0, 0, 0, 3771, 3773, 5, 12, 0, 0, 3772, 
		    3771, 1, 0, 0, 0, 3772, 3773, 1, 0, 0, 0, 3773, 3774, 1, 0, 0, 0, 
		    3774, 3776, 3, 584, 292, 0, 3775, 3772, 1, 0, 0, 0, 3775, 3776, 1, 
		    0, 0, 0, 3776, 3785, 1, 0, 0, 0, 3777, 3782, 3, 240, 120, 0, 3778, 
		    3779, 5, 1135, 0, 0, 3779, 3781, 3, 240, 120, 0, 3780, 3778, 1, 0, 
		    0, 0, 3781, 3784, 1, 0, 0, 0, 3782, 3780, 1, 0, 0, 0, 3782, 3783, 
		    1, 0, 0, 0, 3783, 3786, 1, 0, 0, 0, 3784, 3782, 1, 0, 0, 0, 3785, 
		    3777, 1, 0, 0, 0, 3785, 3786, 1, 0, 0, 0, 3786, 3804, 1, 0, 0, 0, 
		    3787, 3793, 3, 200, 100, 0, 3788, 3789, 5, 1133, 0, 0, 3789, 3790, 
		    3, 200, 100, 0, 3790, 3791, 5, 1134, 0, 0, 3791, 3793, 1, 0, 0, 0, 
		    3792, 3787, 1, 0, 0, 0, 3792, 3788, 1, 0, 0, 0, 3793, 3795, 1, 0, 
		    0, 0, 3794, 3796, 5, 12, 0, 0, 3795, 3794, 1, 0, 0, 0, 3795, 3796, 
		    1, 0, 0, 0, 3796, 3797, 1, 0, 0, 0, 3797, 3798, 3, 584, 292, 0, 3798, 
		    3804, 1, 0, 0, 0, 3799, 3800, 5, 1133, 0, 0, 3800, 3801, 3, 234, 117, 
		    0, 3801, 3802, 5, 1134, 0, 0, 3802, 3804, 1, 0, 0, 0, 3803, 3763, 
		    1, 0, 0, 0, 3803, 3792, 1, 0, 0, 0, 3803, 3799, 1, 0, 0, 0, 3804, 
		    239, 1, 0, 0, 0, 3805, 3806, 7, 49, 0, 0, 3806, 3809, 7, 20, 0, 0, 
		    3807, 3808, 5, 65, 0, 0, 3808, 3810, 3, 242, 121, 0, 3809, 3807, 1, 
		    0, 0, 0, 3809, 3810, 1, 0, 0, 0, 3810, 3811, 1, 0, 0, 0, 3811, 3812, 
		    5, 1133, 0, 0, 3812, 3813, 3, 616, 308, 0, 3813, 3814, 5, 1134, 0, 
		    0, 3814, 241, 1, 0, 0, 0, 3815, 3821, 5, 90, 0, 0, 3816, 3817, 5, 
		    124, 0, 0, 3817, 3821, 5, 19, 0, 0, 3818, 3819, 5, 73, 0, 0, 3819, 
		    3821, 5, 19, 0, 0, 3820, 3815, 1, 0, 0, 0, 3820, 3816, 1, 0, 0, 0, 
		    3820, 3818, 1, 0, 0, 0, 3821, 243, 1, 0, 0, 0, 3822, 3824, 7, 50, 
		    0, 0, 3823, 3822, 1, 0, 0, 0, 3823, 3824, 1, 0, 0, 0, 3824, 3825, 
		    1, 0, 0, 0, 3825, 3827, 5, 90, 0, 0, 3826, 3828, 5, 94, 0, 0, 3827, 
		    3826, 1, 0, 0, 0, 3827, 3828, 1, 0, 0, 0, 3828, 3829, 1, 0, 0, 0, 
		    3829, 3833, 3, 238, 119, 0, 3830, 3832, 3, 246, 123, 0, 3831, 3830, 
		    1, 0, 0, 0, 3832, 3835, 1, 0, 0, 0, 3833, 3831, 1, 0, 0, 0, 3833, 
		    3834, 1, 0, 0, 0, 3834, 3870, 1, 0, 0, 0, 3835, 3833, 1, 0, 0, 0, 
		    3836, 3837, 5, 171, 0, 0, 3837, 3842, 3, 238, 119, 0, 3838, 3839, 
		    5, 118, 0, 0, 3839, 3841, 3, 688, 344, 0, 3840, 3838, 1, 0, 0, 0, 
		    3841, 3844, 1, 0, 0, 0, 3842, 3840, 1, 0, 0, 0, 3842, 3843, 1, 0, 
		    0, 0, 3843, 3870, 1, 0, 0, 0, 3844, 3842, 1, 0, 0, 0, 3845, 3847, 
		    7, 51, 0, 0, 3846, 3848, 5, 126, 0, 0, 3847, 3846, 1, 0, 0, 0, 3847, 
		    3848, 1, 0, 0, 0, 3848, 3849, 1, 0, 0, 0, 3849, 3851, 5, 90, 0, 0, 
		    3850, 3852, 5, 94, 0, 0, 3851, 3850, 1, 0, 0, 0, 3851, 3852, 1, 0, 
		    0, 0, 3852, 3853, 1, 0, 0, 0, 3853, 3857, 3, 238, 119, 0, 3854, 3856, 
		    3, 246, 123, 0, 3855, 3854, 1, 0, 0, 0, 3856, 3859, 1, 0, 0, 0, 3857, 
		    3855, 1, 0, 0, 0, 3857, 3858, 1, 0, 0, 0, 3858, 3870, 1, 0, 0, 0, 
		    3859, 3857, 1, 0, 0, 0, 3860, 3865, 5, 113, 0, 0, 3861, 3863, 7, 51, 
		    0, 0, 3862, 3864, 5, 126, 0, 0, 3863, 3862, 1, 0, 0, 0, 3863, 3864, 
		    1, 0, 0, 0, 3864, 3866, 1, 0, 0, 0, 3865, 3861, 1, 0, 0, 0, 3865, 
		    3866, 1, 0, 0, 0, 3866, 3867, 1, 0, 0, 0, 3867, 3868, 5, 90, 0, 0, 
		    3868, 3870, 3, 238, 119, 0, 3869, 3823, 1, 0, 0, 0, 3869, 3836, 1, 
		    0, 0, 0, 3869, 3845, 1, 0, 0, 0, 3869, 3860, 1, 0, 0, 0, 3870, 245, 
		    1, 0, 0, 0, 3871, 3872, 5, 118, 0, 0, 3872, 3879, 3, 688, 344, 0, 
		    3873, 3874, 5, 187, 0, 0, 3874, 3875, 5, 1133, 0, 0, 3875, 3876, 3, 
		    616, 308, 0, 3876, 3877, 5, 1134, 0, 0, 3877, 3879, 1, 0, 0, 0, 3878, 
		    3871, 1, 0, 0, 0, 3878, 3873, 1, 0, 0, 0, 3879, 247, 1, 0, 0, 0, 3880, 
		    3881, 5, 1133, 0, 0, 3881, 3882, 3, 252, 126, 0, 3882, 3883, 5, 1134, 
		    0, 0, 3883, 3889, 1, 0, 0, 0, 3884, 3885, 5, 1133, 0, 0, 3885, 3886, 
		    3, 248, 124, 0, 3886, 3887, 5, 1134, 0, 0, 3887, 3889, 1, 0, 0, 0, 
		    3888, 3880, 1, 0, 0, 0, 3888, 3884, 1, 0, 0, 0, 3889, 249, 1, 0, 0, 
		    0, 3890, 3891, 5, 1133, 0, 0, 3891, 3892, 3, 254, 127, 0, 3892, 3893, 
		    5, 1134, 0, 0, 3893, 3899, 1, 0, 0, 0, 3894, 3895, 5, 1133, 0, 0, 
		    3895, 3896, 3, 250, 125, 0, 3896, 3897, 5, 1134, 0, 0, 3897, 3899, 
		    1, 0, 0, 0, 3898, 3890, 1, 0, 0, 0, 3898, 3894, 1, 0, 0, 0, 3899, 
		    251, 1, 0, 0, 0, 3900, 3904, 5, 152, 0, 0, 3901, 3903, 3, 272, 136, 
		    0, 3902, 3901, 1, 0, 0, 0, 3903, 3906, 1, 0, 0, 0, 3904, 3902, 1, 
		    0, 0, 0, 3904, 3905, 1, 0, 0, 0, 3905, 3907, 1, 0, 0, 0, 3906, 3904, 
		    1, 0, 0, 0, 3907, 3909, 3, 274, 137, 0, 3908, 3910, 3, 278, 139, 0, 
		    3909, 3908, 1, 0, 0, 0, 3909, 3910, 1, 0, 0, 0, 3910, 3911, 1, 0, 
		    0, 0, 3911, 3913, 3, 284, 142, 0, 3912, 3914, 3, 286, 143, 0, 3913, 
		    3912, 1, 0, 0, 0, 3913, 3914, 1, 0, 0, 0, 3914, 3916, 1, 0, 0, 0, 
		    3915, 3917, 3, 288, 144, 0, 3916, 3915, 1, 0, 0, 0, 3916, 3917, 1, 
		    0, 0, 0, 3917, 3919, 1, 0, 0, 0, 3918, 3920, 3, 290, 145, 0, 3919, 
		    3918, 1, 0, 0, 0, 3919, 3920, 1, 0, 0, 0, 3920, 3922, 1, 0, 0, 0, 
		    3921, 3923, 3, 230, 115, 0, 3922, 3921, 1, 0, 0, 0, 3922, 3923, 1, 
		    0, 0, 0, 3923, 3925, 1, 0, 0, 0, 3924, 3926, 3, 294, 147, 0, 3925, 
		    3924, 1, 0, 0, 0, 3925, 3926, 1, 0, 0, 0, 3926, 3955, 1, 0, 0, 0, 
		    3927, 3931, 5, 152, 0, 0, 3928, 3930, 3, 272, 136, 0, 3929, 3928, 
		    1, 0, 0, 0, 3930, 3933, 1, 0, 0, 0, 3931, 3929, 1, 0, 0, 0, 3931, 
		    3932, 1, 0, 0, 0, 3932, 3934, 1, 0, 0, 0, 3933, 3931, 1, 0, 0, 0, 
		    3934, 3935, 3, 274, 137, 0, 3935, 3937, 3, 284, 142, 0, 3936, 3938, 
		    3, 286, 143, 0, 3937, 3936, 1, 0, 0, 0, 3937, 3938, 1, 0, 0, 0, 3938, 
		    3940, 1, 0, 0, 0, 3939, 3941, 3, 288, 144, 0, 3940, 3939, 1, 0, 0, 
		    0, 3940, 3941, 1, 0, 0, 0, 3941, 3943, 1, 0, 0, 0, 3942, 3944, 3, 
		    290, 145, 0, 3943, 3942, 1, 0, 0, 0, 3943, 3944, 1, 0, 0, 0, 3944, 
		    3946, 1, 0, 0, 0, 3945, 3947, 3, 230, 115, 0, 3946, 3945, 1, 0, 0, 
		    0, 3946, 3947, 1, 0, 0, 0, 3947, 3949, 1, 0, 0, 0, 3948, 3950, 3, 
		    294, 147, 0, 3949, 3948, 1, 0, 0, 0, 3949, 3950, 1, 0, 0, 0, 3950, 
		    3952, 1, 0, 0, 0, 3951, 3953, 3, 278, 139, 0, 3952, 3951, 1, 0, 0, 
		    0, 3952, 3953, 1, 0, 0, 0, 3953, 3955, 1, 0, 0, 0, 3954, 3900, 1, 
		    0, 0, 0, 3954, 3927, 1, 0, 0, 0, 3955, 253, 1, 0, 0, 0, 3956, 3960, 
		    5, 152, 0, 0, 3957, 3959, 3, 272, 136, 0, 3958, 3957, 1, 0, 0, 0, 
		    3959, 3962, 1, 0, 0, 0, 3960, 3958, 1, 0, 0, 0, 3960, 3961, 1, 0, 
		    0, 0, 3961, 3963, 1, 0, 0, 0, 3962, 3960, 1, 0, 0, 0, 3963, 3964, 
		    3, 274, 137, 0, 3964, 3966, 3, 284, 142, 0, 3965, 3967, 3, 286, 143, 
		    0, 3966, 3965, 1, 0, 0, 0, 3966, 3967, 1, 0, 0, 0, 3967, 3969, 1, 
		    0, 0, 0, 3968, 3970, 3, 288, 144, 0, 3969, 3968, 1, 0, 0, 0, 3969, 
		    3970, 1, 0, 0, 0, 3970, 3972, 1, 0, 0, 0, 3971, 3973, 3, 290, 145, 
		    0, 3972, 3971, 1, 0, 0, 0, 3972, 3973, 1, 0, 0, 0, 3973, 3975, 1, 
		    0, 0, 0, 3974, 3976, 3, 230, 115, 0, 3975, 3974, 1, 0, 0, 0, 3975, 
		    3976, 1, 0, 0, 0, 3976, 3978, 1, 0, 0, 0, 3977, 3979, 3, 294, 147, 
		    0, 3978, 3977, 1, 0, 0, 0, 3978, 3979, 1, 0, 0, 0, 3979, 255, 1, 0, 
		    0, 0, 3980, 3982, 5, 180, 0, 0, 3981, 3983, 7, 44, 0, 0, 3982, 3981, 
		    1, 0, 0, 0, 3982, 3983, 1, 0, 0, 0, 3983, 3984, 1, 0, 0, 0, 3984, 
		    3985, 3, 250, 125, 0, 3985, 257, 1, 0, 0, 0, 3986, 3988, 5, 180, 0, 
		    0, 3987, 3989, 7, 44, 0, 0, 3988, 3987, 1, 0, 0, 0, 3988, 3989, 1, 
		    0, 0, 0, 3989, 3992, 1, 0, 0, 0, 3990, 3993, 3, 254, 127, 0, 3991, 
		    3993, 3, 250, 125, 0, 3992, 3990, 1, 0, 0, 0, 3992, 3991, 1, 0, 0, 
		    0, 3993, 259, 1, 0, 0, 0, 3994, 4009, 5, 94, 0, 0, 3995, 4010, 3, 
		    254, 127, 0, 3996, 4010, 3, 250, 125, 0, 3997, 4000, 5, 1133, 0, 0, 
		    3998, 4001, 3, 254, 127, 0, 3999, 4001, 3, 250, 125, 0, 4000, 3998, 
		    1, 0, 0, 0, 4000, 3999, 1, 0, 0, 0, 4001, 4002, 1, 0, 0, 0, 4002, 
		    4007, 5, 1134, 0, 0, 4003, 4005, 5, 12, 0, 0, 4004, 4003, 1, 0, 0, 
		    0, 4004, 4005, 1, 0, 0, 0, 4005, 4006, 1, 0, 0, 0, 4006, 4008, 3, 
		    584, 292, 0, 4007, 4004, 1, 0, 0, 0, 4007, 4008, 1, 0, 0, 0, 4008, 
		    4010, 1, 0, 0, 0, 4009, 3995, 1, 0, 0, 0, 4009, 3996, 1, 0, 0, 0, 
		    4009, 3997, 1, 0, 0, 0, 4010, 261, 1, 0, 0, 0, 4011, 4012, 5, 278, 
		    0, 0, 4012, 4013, 5, 1133, 0, 0, 4013, 4014, 5, 1148, 0, 0, 4014, 
		    4015, 5, 1135, 0, 0, 4015, 4016, 5, 1148, 0, 0, 4016, 4017, 5, 365, 
		    0, 0, 4017, 4018, 5, 1133, 0, 0, 4018, 4019, 3, 264, 132, 0, 4019, 
		    4020, 5, 1134, 0, 0, 4020, 4025, 5, 1134, 0, 0, 4021, 4023, 5, 12, 
		    0, 0, 4022, 4021, 1, 0, 0, 0, 4022, 4023, 1, 0, 0, 0, 4023, 4024, 
		    1, 0, 0, 0, 4024, 4026, 3, 584, 292, 0, 4025, 4022, 1, 0, 0, 0, 4025, 
		    4026, 1, 0, 0, 0, 4026, 263, 1, 0, 0, 0, 4027, 4032, 3, 266, 133, 
		    0, 4028, 4029, 5, 1135, 0, 0, 4029, 4031, 3, 266, 133, 0, 4030, 4028, 
		    1, 0, 0, 0, 4031, 4034, 1, 0, 0, 0, 4032, 4030, 1, 0, 0, 0, 4032, 
		    4033, 1, 0, 0, 0, 4033, 265, 1, 0, 0, 0, 4034, 4032, 1, 0, 0, 0, 4035, 
		    4052, 3, 556, 278, 0, 4036, 4037, 5, 65, 0, 0, 4037, 4053, 5, 284, 
		    0, 0, 4038, 4050, 3, 604, 302, 0, 4039, 4040, 5, 285, 0, 0, 4040, 
		    4042, 5, 1148, 0, 0, 4041, 4043, 3, 268, 134, 0, 4042, 4041, 1, 0, 
		    0, 0, 4042, 4043, 1, 0, 0, 0, 4043, 4045, 1, 0, 0, 0, 4044, 4046, 
		    3, 270, 135, 0, 4045, 4044, 1, 0, 0, 0, 4045, 4046, 1, 0, 0, 0, 4046, 
		    4051, 1, 0, 0, 0, 4047, 4048, 5, 60, 0, 0, 4048, 4049, 5, 285, 0, 
		    0, 4049, 4051, 5, 1148, 0, 0, 4050, 4039, 1, 0, 0, 0, 4050, 4047, 
		    1, 0, 0, 0, 4051, 4053, 1, 0, 0, 0, 4052, 4036, 1, 0, 0, 0, 4052, 
		    4038, 1, 0, 0, 0, 4053, 4065, 1, 0, 0, 0, 4054, 4056, 5, 283, 0, 0, 
		    4055, 4057, 5, 285, 0, 0, 4056, 4055, 1, 0, 0, 0, 4056, 4057, 1, 0, 
		    0, 0, 4057, 4058, 1, 0, 0, 0, 4058, 4059, 5, 1148, 0, 0, 4059, 4060, 
		    5, 365, 0, 0, 4060, 4061, 5, 1133, 0, 0, 4061, 4062, 3, 264, 132, 
		    0, 4062, 4063, 5, 1134, 0, 0, 4063, 4065, 1, 0, 0, 0, 4064, 4035, 
		    1, 0, 0, 0, 4064, 4054, 1, 0, 0, 0, 4065, 267, 1, 0, 0, 0, 4066, 4071, 
		    5, 116, 0, 0, 4067, 4071, 5, 411, 0, 0, 4068, 4069, 5, 42, 0, 0, 4069, 
		    4071, 3, 634, 317, 0, 4070, 4066, 1, 0, 0, 0, 4070, 4067, 1, 0, 0, 
		    0, 4070, 4068, 1, 0, 0, 0, 4071, 4072, 1, 0, 0, 0, 4072, 4073, 5, 
		    118, 0, 0, 4073, 4074, 5, 55, 0, 0, 4074, 269, 1, 0, 0, 0, 4075, 4080, 
		    5, 116, 0, 0, 4076, 4080, 5, 411, 0, 0, 4077, 4078, 5, 42, 0, 0, 4078, 
		    4080, 3, 634, 317, 0, 4079, 4075, 1, 0, 0, 0, 4079, 4076, 1, 0, 0, 
		    0, 4079, 4077, 1, 0, 0, 0, 4080, 4081, 1, 0, 0, 0, 4081, 4082, 5, 
		    118, 0, 0, 4082, 4083, 5, 411, 0, 0, 4083, 271, 1, 0, 0, 0, 4084, 
		    4093, 7, 52, 0, 0, 4085, 4093, 5, 75, 0, 0, 4086, 4093, 5, 171, 0, 
		    0, 4087, 4093, 5, 166, 0, 0, 4088, 4093, 5, 164, 0, 0, 4089, 4093, 
		    5, 625, 0, 0, 4090, 4093, 7, 53, 0, 0, 4091, 4093, 5, 165, 0, 0, 4092, 
		    4084, 1, 0, 0, 0, 4092, 4085, 1, 0, 0, 0, 4092, 4086, 1, 0, 0, 0, 
		    4092, 4087, 1, 0, 0, 0, 4092, 4088, 1, 0, 0, 0, 4092, 4089, 1, 0, 
		    0, 0, 4092, 4090, 1, 0, 0, 0, 4092, 4091, 1, 0, 0, 0, 4093, 273, 1, 
		    0, 0, 0, 4094, 4097, 5, 1117, 0, 0, 4095, 4097, 3, 276, 138, 0, 4096, 
		    4094, 1, 0, 0, 0, 4096, 4095, 1, 0, 0, 0, 4097, 4102, 1, 0, 0, 0, 
		    4098, 4099, 5, 1135, 0, 0, 4099, 4101, 3, 276, 138, 0, 4100, 4098, 
		    1, 0, 0, 0, 4101, 4104, 1, 0, 0, 0, 4102, 4100, 1, 0, 0, 0, 4102, 
		    4103, 1, 0, 0, 0, 4103, 275, 1, 0, 0, 0, 4104, 4102, 1, 0, 0, 0, 4105, 
		    4106, 3, 550, 275, 0, 4106, 4107, 5, 1132, 0, 0, 4107, 4108, 5, 1117, 
		    0, 0, 4108, 4135, 1, 0, 0, 0, 4109, 4114, 3, 556, 278, 0, 4110, 4112, 
		    5, 12, 0, 0, 4111, 4110, 1, 0, 0, 0, 4111, 4112, 1, 0, 0, 0, 4112, 
		    4113, 1, 0, 0, 0, 4113, 4115, 3, 584, 292, 0, 4114, 4111, 1, 0, 0, 
		    0, 4114, 4115, 1, 0, 0, 0, 4115, 4135, 1, 0, 0, 0, 4116, 4121, 3, 
		    648, 324, 0, 4117, 4119, 5, 12, 0, 0, 4118, 4117, 1, 0, 0, 0, 4118, 
		    4119, 1, 0, 0, 0, 4119, 4120, 1, 0, 0, 0, 4120, 4122, 3, 584, 292, 
		    0, 4121, 4118, 1, 0, 0, 0, 4121, 4122, 1, 0, 0, 0, 4122, 4135, 1, 
		    0, 0, 0, 4123, 4124, 5, 1159, 0, 0, 4124, 4126, 5, 1108, 0, 0, 4125, 
		    4123, 1, 0, 0, 0, 4125, 4126, 1, 0, 0, 0, 4126, 4127, 1, 0, 0, 0, 
		    4127, 4132, 3, 688, 344, 0, 4128, 4130, 5, 12, 0, 0, 4129, 4128, 1, 
		    0, 0, 0, 4129, 4130, 1, 0, 0, 0, 4130, 4131, 1, 0, 0, 0, 4131, 4133, 
		    3, 584, 292, 0, 4132, 4129, 1, 0, 0, 0, 4132, 4133, 1, 0, 0, 0, 4133, 
		    4135, 1, 0, 0, 0, 4134, 4105, 1, 0, 0, 0, 4134, 4109, 1, 0, 0, 0, 
		    4134, 4116, 1, 0, 0, 0, 4134, 4125, 1, 0, 0, 0, 4135, 277, 1, 0, 0, 
		    0, 4136, 4137, 5, 87, 0, 0, 4137, 4142, 3, 210, 105, 0, 4138, 4139, 
		    5, 1135, 0, 0, 4139, 4141, 3, 210, 105, 0, 4140, 4138, 1, 0, 0, 0, 
		    4141, 4144, 1, 0, 0, 0, 4142, 4140, 1, 0, 0, 0, 4142, 4143, 1, 0, 
		    0, 0, 4143, 4173, 1, 0, 0, 0, 4144, 4142, 1, 0, 0, 0, 4145, 4146, 
		    5, 87, 0, 0, 4146, 4147, 5, 400, 0, 0, 4147, 4173, 5, 1148, 0, 0, 
		    4148, 4149, 5, 87, 0, 0, 4149, 4150, 5, 127, 0, 0, 4150, 4154, 5, 
		    1148, 0, 0, 4151, 4152, 5, 25, 0, 0, 4152, 4153, 5, 153, 0, 0, 4153, 
		    4155, 3, 568, 284, 0, 4154, 4151, 1, 0, 0, 0, 4154, 4155, 1, 0, 0, 
		    0, 4155, 4162, 1, 0, 0, 0, 4156, 4158, 7, 41, 0, 0, 4157, 4159, 3, 
		    280, 140, 0, 4158, 4157, 1, 0, 0, 0, 4159, 4160, 1, 0, 0, 0, 4160, 
		    4158, 1, 0, 0, 0, 4160, 4161, 1, 0, 0, 0, 4161, 4163, 1, 0, 0, 0, 
		    4162, 4156, 1, 0, 0, 0, 4162, 4163, 1, 0, 0, 0, 4163, 4170, 1, 0, 
		    0, 0, 4164, 4166, 5, 101, 0, 0, 4165, 4167, 3, 282, 141, 0, 4166, 
		    4165, 1, 0, 0, 0, 4167, 4168, 1, 0, 0, 0, 4168, 4166, 1, 0, 0, 0, 
		    4168, 4169, 1, 0, 0, 0, 4169, 4171, 1, 0, 0, 0, 4170, 4164, 1, 0, 
		    0, 0, 4170, 4171, 1, 0, 0, 0, 4171, 4173, 1, 0, 0, 0, 4172, 4136, 
		    1, 0, 0, 0, 4172, 4145, 1, 0, 0, 0, 4172, 4148, 1, 0, 0, 0, 4173, 
		    279, 1, 0, 0, 0, 4174, 4175, 5, 173, 0, 0, 4175, 4176, 5, 19, 0, 0, 
		    4176, 4187, 5, 1148, 0, 0, 4177, 4179, 5, 122, 0, 0, 4178, 4177, 1, 
		    0, 0, 0, 4178, 4179, 1, 0, 0, 0, 4179, 4180, 1, 0, 0, 0, 4180, 4181, 
		    5, 56, 0, 0, 4181, 4182, 5, 19, 0, 0, 4182, 4187, 5, 1148, 0, 0, 4183, 
		    4184, 5, 58, 0, 0, 4184, 4185, 5, 19, 0, 0, 4185, 4187, 5, 1148, 0, 
		    0, 4186, 4174, 1, 0, 0, 0, 4186, 4178, 1, 0, 0, 0, 4186, 4183, 1, 
		    0, 0, 0, 4187, 281, 1, 0, 0, 0, 4188, 4189, 5, 169, 0, 0, 4189, 4190, 
		    5, 19, 0, 0, 4190, 4195, 5, 1148, 0, 0, 4191, 4192, 5, 173, 0, 0, 
		    4192, 4193, 5, 19, 0, 0, 4193, 4195, 5, 1148, 0, 0, 4194, 4188, 1, 
		    0, 0, 0, 4194, 4191, 1, 0, 0, 0, 4195, 283, 1, 0, 0, 0, 4196, 4197, 
		    5, 68, 0, 0, 4197, 4199, 3, 234, 117, 0, 4198, 4196, 1, 0, 0, 0, 4198, 
		    4199, 1, 0, 0, 0, 4199, 4202, 1, 0, 0, 0, 4200, 4201, 5, 190, 0, 0, 
		    4201, 4203, 3, 688, 344, 0, 4202, 4200, 1, 0, 0, 0, 4202, 4203, 1, 
		    0, 0, 0, 4203, 285, 1, 0, 0, 0, 4204, 4205, 5, 73, 0, 0, 4205, 4206, 
		    5, 19, 0, 0, 4206, 4211, 3, 292, 146, 0, 4207, 4208, 5, 1135, 0, 0, 
		    4208, 4210, 3, 292, 146, 0, 4209, 4207, 1, 0, 0, 0, 4210, 4213, 1, 
		    0, 0, 0, 4211, 4209, 1, 0, 0, 0, 4211, 4212, 1, 0, 0, 0, 4212, 4216, 
		    1, 0, 0, 0, 4213, 4211, 1, 0, 0, 0, 4214, 4215, 5, 192, 0, 0, 4215, 
		    4217, 5, 598, 0, 0, 4216, 4214, 1, 0, 0, 0, 4216, 4217, 1, 0, 0, 0, 
		    4217, 287, 1, 0, 0, 0, 4218, 4219, 5, 74, 0, 0, 4219, 4220, 3, 688, 
		    344, 0, 4220, 289, 1, 0, 0, 0, 4221, 4222, 5, 676, 0, 0, 4222, 4223, 
		    3, 666, 333, 0, 4223, 4224, 5, 12, 0, 0, 4224, 4225, 5, 1133, 0, 0, 
		    4225, 4226, 3, 664, 332, 0, 4226, 4236, 5, 1134, 0, 0, 4227, 4228, 
		    5, 1135, 0, 0, 4228, 4229, 3, 666, 333, 0, 4229, 4230, 5, 12, 0, 0, 
		    4230, 4231, 5, 1133, 0, 0, 4231, 4232, 3, 664, 332, 0, 4232, 4233, 
		    5, 1134, 0, 0, 4233, 4235, 1, 0, 0, 0, 4234, 4227, 1, 0, 0, 0, 4235, 
		    4238, 1, 0, 0, 0, 4236, 4234, 1, 0, 0, 0, 4236, 4237, 1, 0, 0, 0, 
		    4237, 291, 1, 0, 0, 0, 4238, 4236, 1, 0, 0, 0, 4239, 4241, 3, 688, 
		    344, 0, 4240, 4242, 7, 48, 0, 0, 4241, 4240, 1, 0, 0, 0, 4241, 4242, 
		    1, 0, 0, 0, 4242, 293, 1, 0, 0, 0, 4243, 4254, 5, 99, 0, 0, 4244, 
		    4245, 3, 296, 148, 0, 4245, 4246, 5, 1135, 0, 0, 4246, 4248, 1, 0, 
		    0, 0, 4247, 4244, 1, 0, 0, 0, 4247, 4248, 1, 0, 0, 0, 4248, 4249, 
		    1, 0, 0, 0, 4249, 4255, 3, 296, 148, 0, 4250, 4251, 3, 296, 148, 0, 
		    4251, 4252, 5, 532, 0, 0, 4252, 4253, 3, 296, 148, 0, 4253, 4255, 
		    1, 0, 0, 0, 4254, 4247, 1, 0, 0, 0, 4254, 4250, 1, 0, 0, 0, 4255, 
		    295, 1, 0, 0, 0, 4256, 4260, 3, 590, 295, 0, 4257, 4260, 3, 566, 283, 
		    0, 4258, 4260, 3, 586, 293, 0, 4259, 4256, 1, 0, 0, 0, 4259, 4257, 
		    1, 0, 0, 0, 4259, 4258, 1, 0, 0, 0, 4260, 297, 1, 0, 0, 0, 4261, 4262, 
		    5, 629, 0, 0, 4262, 4271, 5, 653, 0, 0, 4263, 4268, 3, 320, 160, 0, 
		    4264, 4265, 5, 1135, 0, 0, 4265, 4267, 3, 320, 160, 0, 4266, 4264, 
		    1, 0, 0, 0, 4267, 4270, 1, 0, 0, 0, 4268, 4266, 1, 0, 0, 0, 4268, 
		    4269, 1, 0, 0, 0, 4269, 4272, 1, 0, 0, 0, 4270, 4268, 1, 0, 0, 0, 
		    4271, 4263, 1, 0, 0, 0, 4271, 4272, 1, 0, 0, 0, 4272, 299, 1, 0, 0, 
		    0, 4273, 4275, 5, 344, 0, 0, 4274, 4276, 5, 678, 0, 0, 4275, 4274, 
		    1, 0, 0, 0, 4275, 4276, 1, 0, 0, 0, 4276, 301, 1, 0, 0, 0, 4277, 4279, 
		    5, 369, 0, 0, 4278, 4280, 5, 678, 0, 0, 4279, 4278, 1, 0, 0, 0, 4279, 
		    4280, 1, 0, 0, 0, 4280, 4286, 1, 0, 0, 0, 4281, 4283, 5, 10, 0, 0, 
		    4282, 4284, 5, 521, 0, 0, 4283, 4282, 1, 0, 0, 0, 4283, 4284, 1, 0, 
		    0, 0, 4284, 4285, 1, 0, 0, 0, 4285, 4287, 5, 353, 0, 0, 4286, 4281, 
		    1, 0, 0, 0, 4286, 4287, 1, 0, 0, 0, 4287, 4292, 1, 0, 0, 0, 4288, 
		    4290, 5, 521, 0, 0, 4289, 4288, 1, 0, 0, 0, 4289, 4290, 1, 0, 0, 0, 
		    4290, 4291, 1, 0, 0, 0, 4291, 4293, 5, 138, 0, 0, 4292, 4289, 1, 0, 
		    0, 0, 4292, 4293, 1, 0, 0, 0, 4293, 303, 1, 0, 0, 0, 4294, 4296, 5, 
		    597, 0, 0, 4295, 4297, 5, 678, 0, 0, 4296, 4295, 1, 0, 0, 0, 4296, 
		    4297, 1, 0, 0, 0, 4297, 4303, 1, 0, 0, 0, 4298, 4300, 5, 10, 0, 0, 
		    4299, 4301, 5, 521, 0, 0, 4300, 4299, 1, 0, 0, 0, 4300, 4301, 1, 0, 
		    0, 0, 4301, 4302, 1, 0, 0, 0, 4302, 4304, 5, 353, 0, 0, 4303, 4298, 
		    1, 0, 0, 0, 4303, 4304, 1, 0, 0, 0, 4304, 4309, 1, 0, 0, 0, 4305, 
		    4307, 5, 521, 0, 0, 4306, 4305, 1, 0, 0, 0, 4306, 4307, 1, 0, 0, 0, 
		    4307, 4308, 1, 0, 0, 0, 4308, 4310, 5, 138, 0, 0, 4309, 4306, 1, 0, 
		    0, 0, 4309, 4310, 1, 0, 0, 0, 4310, 305, 1, 0, 0, 0, 4311, 4312, 5, 
		    604, 0, 0, 4312, 4313, 3, 584, 292, 0, 4313, 307, 1, 0, 0, 0, 4314, 
		    4316, 5, 597, 0, 0, 4315, 4317, 5, 678, 0, 0, 4316, 4315, 1, 0, 0, 
		    0, 4316, 4317, 1, 0, 0, 0, 4317, 4318, 1, 0, 0, 0, 4318, 4320, 5, 
		    175, 0, 0, 4319, 4321, 5, 604, 0, 0, 4320, 4319, 1, 0, 0, 0, 4320, 
		    4321, 1, 0, 0, 0, 4321, 4322, 1, 0, 0, 0, 4322, 4323, 3, 584, 292, 
		    0, 4323, 309, 1, 0, 0, 0, 4324, 4325, 5, 138, 0, 0, 4325, 4326, 5, 
		    604, 0, 0, 4326, 4327, 3, 584, 292, 0, 4327, 311, 1, 0, 0, 0, 4328, 
		    4329, 5, 103, 0, 0, 4329, 4330, 7, 54, 0, 0, 4330, 4335, 3, 322, 161, 
		    0, 4331, 4332, 5, 1135, 0, 0, 4332, 4334, 3, 322, 161, 0, 4333, 4331, 
		    1, 0, 0, 0, 4334, 4337, 1, 0, 0, 0, 4335, 4333, 1, 0, 0, 0, 4335, 
		    4336, 1, 0, 0, 0, 4336, 4339, 1, 0, 0, 0, 4337, 4335, 1, 0, 0, 0, 
		    4338, 4340, 3, 646, 323, 0, 4339, 4338, 1, 0, 0, 0, 4339, 4340, 1, 
		    0, 0, 0, 4340, 313, 1, 0, 0, 0, 4341, 4342, 5, 182, 0, 0, 4342, 4343, 
		    5, 742, 0, 0, 4343, 315, 1, 0, 0, 0, 4344, 4345, 5, 153, 0, 0, 4345, 
		    4346, 5, 340, 0, 0, 4346, 4347, 5, 1124, 0, 0, 4347, 4348, 7, 24, 
		    0, 0, 4348, 317, 1, 0, 0, 0, 4349, 4351, 5, 153, 0, 0, 4350, 4352, 
		    7, 55, 0, 0, 4351, 4350, 1, 0, 0, 0, 4351, 4352, 1, 0, 0, 0, 4352, 
		    4353, 1, 0, 0, 0, 4353, 4354, 5, 653, 0, 0, 4354, 4359, 3, 326, 163, 
		    0, 4355, 4356, 5, 1135, 0, 0, 4356, 4358, 3, 326, 163, 0, 4357, 4355, 
		    1, 0, 0, 0, 4358, 4361, 1, 0, 0, 0, 4359, 4357, 1, 0, 0, 0, 4359, 
		    4360, 1, 0, 0, 0, 4360, 319, 1, 0, 0, 0, 4361, 4359, 1, 0, 0, 0, 4362, 
		    4363, 5, 192, 0, 0, 4363, 4364, 5, 377, 0, 0, 4364, 4370, 5, 616, 
		    0, 0, 4365, 4366, 5, 134, 0, 0, 4366, 4370, 5, 193, 0, 0, 4367, 4368, 
		    5, 134, 0, 0, 4368, 4370, 5, 538, 0, 0, 4369, 4362, 1, 0, 0, 0, 4369, 
		    4365, 1, 0, 0, 0, 4369, 4367, 1, 0, 0, 0, 4370, 321, 1, 0, 0, 0, 4371, 
		    4376, 3, 552, 276, 0, 4372, 4374, 5, 12, 0, 0, 4373, 4372, 1, 0, 0, 
		    0, 4373, 4374, 1, 0, 0, 0, 4374, 4375, 1, 0, 0, 0, 4375, 4377, 3, 
		    584, 292, 0, 4376, 4373, 1, 0, 0, 0, 4376, 4377, 1, 0, 0, 0, 4377, 
		    4378, 1, 0, 0, 0, 4378, 4379, 3, 324, 162, 0, 4379, 323, 1, 0, 0, 
		    0, 4380, 4382, 5, 134, 0, 0, 4381, 4383, 5, 474, 0, 0, 4382, 4381, 
		    1, 0, 0, 0, 4382, 4383, 1, 0, 0, 0, 4383, 4389, 1, 0, 0, 0, 4384, 
		    4386, 5, 106, 0, 0, 4385, 4384, 1, 0, 0, 0, 4385, 4386, 1, 0, 0, 0, 
		    4386, 4387, 1, 0, 0, 0, 4387, 4389, 5, 193, 0, 0, 4388, 4380, 1, 0, 
		    0, 0, 4388, 4385, 1, 0, 0, 0, 4389, 325, 1, 0, 0, 0, 4390, 4391, 5, 
		    464, 0, 0, 4391, 4392, 5, 472, 0, 0, 4392, 4398, 3, 328, 164, 0, 4393, 
		    4394, 5, 134, 0, 0, 4394, 4398, 5, 193, 0, 0, 4395, 4396, 5, 134, 
		    0, 0, 4396, 4398, 5, 538, 0, 0, 4397, 4390, 1, 0, 0, 0, 4397, 4393, 
		    1, 0, 0, 0, 4397, 4395, 1, 0, 0, 0, 4398, 327, 1, 0, 0, 0, 4399, 4400, 
		    5, 799, 0, 0, 4400, 4407, 5, 134, 0, 0, 4401, 4402, 5, 134, 0, 0, 
		    4402, 4407, 5, 800, 0, 0, 4403, 4404, 5, 134, 0, 0, 4404, 4407, 5, 
		    801, 0, 0, 4405, 4407, 5, 802, 0, 0, 4406, 4399, 1, 0, 0, 0, 4406, 
		    4401, 1, 0, 0, 0, 4406, 4403, 1, 0, 0, 0, 4406, 4405, 1, 0, 0, 0, 
		    4407, 329, 1, 0, 0, 0, 4408, 4409, 5, 24, 0, 0, 4409, 4410, 5, 477, 
		    0, 0, 4410, 4411, 5, 175, 0, 0, 4411, 4416, 3, 348, 174, 0, 4412, 
		    4413, 5, 1135, 0, 0, 4413, 4415, 3, 348, 174, 0, 4414, 4412, 1, 0, 
		    0, 0, 4415, 4418, 1, 0, 0, 0, 4416, 4414, 1, 0, 0, 0, 4416, 4417, 
		    1, 0, 0, 0, 4417, 4420, 1, 0, 0, 0, 4418, 4416, 1, 0, 0, 0, 4419, 
		    4421, 3, 356, 178, 0, 4420, 4419, 1, 0, 0, 0, 4420, 4421, 1, 0, 0, 
		    0, 4421, 331, 1, 0, 0, 0, 4422, 4423, 5, 24, 0, 0, 4423, 4424, 5, 
		    588, 0, 0, 4424, 4425, 5, 429, 0, 0, 4425, 4430, 3, 358, 179, 0, 4426, 
		    4427, 5, 1135, 0, 0, 4427, 4429, 3, 358, 179, 0, 4428, 4426, 1, 0, 
		    0, 0, 4429, 4432, 1, 0, 0, 0, 4430, 4428, 1, 0, 0, 0, 4430, 4431, 
		    1, 0, 0, 0, 4431, 333, 1, 0, 0, 0, 4432, 4430, 1, 0, 0, 0, 4433, 4434, 
		    5, 132, 0, 0, 4434, 4435, 7, 56, 0, 0, 4435, 4440, 5, 476, 0, 0, 4436, 
		    4437, 5, 175, 0, 0, 4437, 4441, 5, 1148, 0, 0, 4438, 4439, 5, 15, 
		    0, 0, 4439, 4441, 5, 1148, 0, 0, 4440, 4436, 1, 0, 0, 0, 4440, 4438, 
		    1, 0, 0, 0, 4441, 335, 1, 0, 0, 0, 4442, 4443, 5, 589, 0, 0, 4443, 
		    4444, 5, 477, 0, 0, 4444, 337, 1, 0, 0, 0, 4445, 4446, 5, 589, 0, 
		    0, 4446, 4448, 5, 614, 0, 0, 4447, 4449, 5, 6, 0, 0, 4448, 4447, 1, 
		    0, 0, 0, 4448, 4449, 1, 0, 0, 0, 4449, 4451, 1, 0, 0, 0, 4450, 4452, 
		    3, 356, 178, 0, 4451, 4450, 1, 0, 0, 0, 4451, 4452, 1, 0, 0, 0, 4452, 
		    339, 1, 0, 0, 0, 4453, 4454, 5, 629, 0, 0, 4454, 4463, 5, 614, 0, 
		    0, 4455, 4460, 3, 362, 181, 0, 4456, 4457, 5, 1135, 0, 0, 4457, 4459, 
		    3, 362, 181, 0, 4458, 4456, 1, 0, 0, 0, 4459, 4462, 1, 0, 0, 0, 4460, 
		    4458, 1, 0, 0, 0, 4460, 4461, 1, 0, 0, 0, 4461, 4464, 1, 0, 0, 0, 
		    4462, 4460, 1, 0, 0, 0, 4463, 4455, 1, 0, 0, 0, 4463, 4464, 1, 0, 
		    0, 0, 4464, 4467, 1, 0, 0, 0, 4465, 4466, 5, 663, 0, 0, 4466, 4468, 
		    3, 364, 182, 0, 4467, 4465, 1, 0, 0, 0, 4467, 4468, 1, 0, 0, 0, 4468, 
		    4472, 1, 0, 0, 0, 4469, 4471, 3, 366, 183, 0, 4470, 4469, 1, 0, 0, 
		    0, 4471, 4474, 1, 0, 0, 0, 4472, 4470, 1, 0, 0, 0, 4472, 4473, 1, 
		    0, 0, 0, 4473, 4476, 1, 0, 0, 0, 4474, 4472, 1, 0, 0, 0, 4475, 4477, 
		    3, 356, 178, 0, 4476, 4475, 1, 0, 0, 0, 4476, 4477, 1, 0, 0, 0, 4477, 
		    341, 1, 0, 0, 0, 4478, 4479, 5, 635, 0, 0, 4479, 4488, 5, 614, 0, 
		    0, 4480, 4485, 3, 362, 181, 0, 4481, 4482, 5, 1135, 0, 0, 4482, 4484, 
		    3, 362, 181, 0, 4483, 4481, 1, 0, 0, 0, 4484, 4487, 1, 0, 0, 0, 4485, 
		    4483, 1, 0, 0, 0, 4485, 4486, 1, 0, 0, 0, 4486, 4489, 1, 0, 0, 0, 
		    4487, 4485, 1, 0, 0, 0, 4488, 4480, 1, 0, 0, 0, 4488, 4489, 1, 0, 
		    0, 0, 4489, 343, 1, 0, 0, 0, 4490, 4491, 5, 629, 0, 0, 4491, 4492, 
		    5, 441, 0, 0, 4492, 345, 1, 0, 0, 0, 4493, 4494, 5, 635, 0, 0, 4494, 
		    4495, 5, 441, 0, 0, 4495, 347, 1, 0, 0, 0, 4496, 4497, 3, 350, 175, 
		    0, 4497, 4498, 5, 1124, 0, 0, 4498, 4499, 5, 1148, 0, 0, 4499, 4526, 
		    1, 0, 0, 0, 4500, 4501, 3, 352, 176, 0, 4501, 4502, 5, 1124, 0, 0, 
		    4502, 4503, 3, 590, 295, 0, 4503, 4526, 1, 0, 0, 0, 4504, 4505, 3, 
		    354, 177, 0, 4505, 4506, 5, 1124, 0, 0, 4506, 4507, 7, 24, 0, 0, 4507, 
		    4526, 1, 0, 0, 0, 4508, 4509, 5, 481, 0, 0, 4509, 4510, 5, 1124, 0, 
		    0, 4510, 4526, 5, 1151, 0, 0, 4511, 4512, 5, 449, 0, 0, 4512, 4513, 
		    5, 1124, 0, 0, 4513, 4522, 5, 1133, 0, 0, 4514, 4519, 3, 584, 292, 
		    0, 4515, 4516, 5, 1135, 0, 0, 4516, 4518, 3, 584, 292, 0, 4517, 4515, 
		    1, 0, 0, 0, 4518, 4521, 1, 0, 0, 0, 4519, 4517, 1, 0, 0, 0, 4519, 
		    4520, 1, 0, 0, 0, 4520, 4523, 1, 0, 0, 0, 4521, 4519, 1, 0, 0, 0, 
		    4522, 4514, 1, 0, 0, 0, 4522, 4523, 1, 0, 0, 0, 4523, 4524, 1, 0, 
		    0, 0, 4524, 4526, 5, 1134, 0, 0, 4525, 4496, 1, 0, 0, 0, 4525, 4500, 
		    1, 0, 0, 0, 4525, 4504, 1, 0, 0, 0, 4525, 4508, 1, 0, 0, 0, 4525, 
		    4511, 1, 0, 0, 0, 4526, 349, 1, 0, 0, 0, 4527, 4528, 7, 57, 0, 0, 
		    4528, 351, 1, 0, 0, 0, 4529, 4530, 7, 58, 0, 0, 4530, 353, 1, 0, 0, 
		    0, 4531, 4532, 7, 59, 0, 0, 4532, 355, 1, 0, 0, 0, 4533, 4534, 5, 
		    65, 0, 0, 4534, 4535, 5, 355, 0, 0, 4535, 4536, 5, 1148, 0, 0, 4536, 
		    357, 1, 0, 0, 0, 4537, 4538, 5, 581, 0, 0, 4538, 4539, 5, 1124, 0, 
		    0, 4539, 4540, 5, 1133, 0, 0, 4540, 4541, 3, 616, 308, 0, 4541, 4542, 
		    5, 1134, 0, 0, 4542, 4587, 1, 0, 0, 0, 4543, 4544, 5, 583, 0, 0, 4544, 
		    4545, 5, 1124, 0, 0, 4545, 4546, 5, 1133, 0, 0, 4546, 4547, 3, 616, 
		    308, 0, 4547, 4548, 5, 1134, 0, 0, 4548, 4587, 1, 0, 0, 0, 4549, 4550, 
		    5, 582, 0, 0, 4550, 4551, 5, 1124, 0, 0, 4551, 4552, 5, 1133, 0, 0, 
		    4552, 4553, 3, 620, 310, 0, 4553, 4554, 5, 1134, 0, 0, 4554, 4587, 
		    1, 0, 0, 0, 4555, 4556, 5, 584, 0, 0, 4556, 4557, 5, 1124, 0, 0, 4557, 
		    4558, 5, 1133, 0, 0, 4558, 4559, 3, 620, 310, 0, 4559, 4560, 5, 1134, 
		    0, 0, 4560, 4587, 1, 0, 0, 0, 4561, 4562, 5, 586, 0, 0, 4562, 4563, 
		    5, 1124, 0, 0, 4563, 4564, 5, 1133, 0, 0, 4564, 4565, 3, 630, 315, 
		    0, 4565, 4566, 5, 1134, 0, 0, 4566, 4587, 1, 0, 0, 0, 4567, 4568, 
		    5, 587, 0, 0, 4568, 4569, 5, 1124, 0, 0, 4569, 4570, 5, 1133, 0, 0, 
		    4570, 4571, 3, 630, 315, 0, 4571, 4572, 5, 1134, 0, 0, 4572, 4587, 
		    1, 0, 0, 0, 4573, 4574, 5, 585, 0, 0, 4574, 4575, 5, 1124, 0, 0, 4575, 
		    4576, 5, 1133, 0, 0, 4576, 4581, 3, 360, 180, 0, 4577, 4578, 5, 1135, 
		    0, 0, 4578, 4580, 3, 360, 180, 0, 4579, 4577, 1, 0, 0, 0, 4580, 4583, 
		    1, 0, 0, 0, 4581, 4579, 1, 0, 0, 0, 4581, 4582, 1, 0, 0, 0, 4582, 
		    4584, 1, 0, 0, 0, 4583, 4581, 1, 0, 0, 0, 4584, 4585, 5, 1134, 0, 
		    0, 4585, 4587, 1, 0, 0, 0, 4586, 4537, 1, 0, 0, 0, 4586, 4543, 1, 
		    0, 0, 0, 4586, 4549, 1, 0, 0, 0, 4586, 4555, 1, 0, 0, 0, 4586, 4561, 
		    1, 0, 0, 0, 4586, 4567, 1, 0, 0, 0, 4586, 4573, 1, 0, 0, 0, 4587, 
		    359, 1, 0, 0, 0, 4588, 4589, 5, 1133, 0, 0, 4589, 4590, 3, 552, 276, 
		    0, 4590, 4591, 5, 1135, 0, 0, 4591, 4592, 3, 552, 276, 0, 4592, 4593, 
		    5, 1134, 0, 0, 4593, 361, 1, 0, 0, 0, 4594, 4595, 7, 60, 0, 0, 4595, 
		    363, 1, 0, 0, 0, 4596, 4597, 7, 61, 0, 0, 4597, 4598, 5, 1124, 0, 
		    0, 4598, 4615, 3, 368, 184, 0, 4599, 4600, 5, 483, 0, 0, 4600, 4601, 
		    5, 1124, 0, 0, 4601, 4602, 5, 1148, 0, 0, 4602, 4603, 5, 1135, 0, 
		    0, 4603, 4604, 5, 484, 0, 0, 4604, 4605, 5, 1124, 0, 0, 4605, 4615, 
		    3, 590, 295, 0, 4606, 4607, 5, 575, 0, 0, 4607, 4608, 5, 1124, 0, 
		    0, 4608, 4609, 5, 1148, 0, 0, 4609, 4610, 5, 1135, 0, 0, 4610, 4611, 
		    5, 576, 0, 0, 4611, 4612, 5, 1124, 0, 0, 4612, 4615, 3, 590, 295, 
		    0, 4613, 4615, 5, 623, 0, 0, 4614, 4596, 1, 0, 0, 0, 4614, 4599, 1, 
		    0, 0, 0, 4614, 4606, 1, 0, 0, 0, 4614, 4613, 1, 0, 0, 0, 4615, 365, 
		    1, 0, 0, 0, 4616, 4617, 5, 665, 0, 0, 4617, 4618, 5, 1124, 0, 0, 4618, 
		    4629, 5, 1148, 0, 0, 4619, 4620, 5, 551, 0, 0, 4620, 4621, 5, 1124, 
		    0, 0, 4621, 4629, 5, 1148, 0, 0, 4622, 4623, 5, 391, 0, 0, 4623, 4624, 
		    5, 1124, 0, 0, 4624, 4629, 5, 1148, 0, 0, 4625, 4626, 5, 555, 0, 0, 
		    4626, 4627, 5, 1124, 0, 0, 4627, 4629, 5, 1148, 0, 0, 4628, 4616, 
		    1, 0, 0, 0, 4628, 4619, 1, 0, 0, 0, 4628, 4622, 1, 0, 0, 0, 4628, 
		    4625, 1, 0, 0, 0, 4629, 367, 1, 0, 0, 0, 4630, 4635, 3, 576, 288, 
		    0, 4631, 4632, 5, 1135, 0, 0, 4632, 4634, 3, 576, 288, 0, 4633, 4631, 
		    1, 0, 0, 0, 4634, 4637, 1, 0, 0, 0, 4635, 4633, 1, 0, 0, 0, 4635, 
		    4636, 1, 0, 0, 0, 4636, 4640, 1, 0, 0, 0, 4637, 4635, 1, 0, 0, 0, 
		    4638, 4640, 5, 1148, 0, 0, 4639, 4630, 1, 0, 0, 0, 4639, 4638, 1, 
		    0, 0, 0, 4640, 369, 1, 0, 0, 0, 4641, 4642, 5, 681, 0, 0, 4642, 4643, 
		    7, 62, 0, 0, 4643, 4645, 3, 578, 289, 0, 4644, 4646, 7, 63, 0, 0, 
		    4645, 4644, 1, 0, 0, 0, 4645, 4646, 1, 0, 0, 0, 4646, 371, 1, 0, 0, 
		    0, 4647, 4648, 5, 681, 0, 0, 4648, 4649, 5, 407, 0, 0, 4649, 4655, 
		    3, 578, 289, 0, 4650, 4653, 5, 643, 0, 0, 4651, 4652, 5, 65, 0, 0, 
		    4652, 4654, 5, 509, 0, 0, 4653, 4651, 1, 0, 0, 0, 4653, 4654, 1, 0, 
		    0, 0, 4654, 4656, 1, 0, 0, 0, 4655, 4650, 1, 0, 0, 0, 4655, 4656, 
		    1, 0, 0, 0, 4656, 373, 1, 0, 0, 0, 4657, 4658, 5, 681, 0, 0, 4658, 
		    4659, 5, 560, 0, 0, 4659, 4660, 3, 578, 289, 0, 4660, 375, 1, 0, 0, 
		    0, 4661, 4662, 5, 681, 0, 0, 4662, 4663, 5, 369, 0, 0, 4663, 4666, 
		    3, 578, 289, 0, 4664, 4665, 5, 536, 0, 0, 4665, 4667, 5, 553, 0, 0, 
		    4666, 4664, 1, 0, 0, 0, 4666, 4667, 1, 0, 0, 0, 4667, 377, 1, 0, 0, 
		    0, 4668, 4669, 5, 681, 0, 0, 4669, 4670, 5, 597, 0, 0, 4670, 4671, 
		    3, 578, 289, 0, 4671, 379, 1, 0, 0, 0, 4672, 4673, 5, 681, 0, 0, 4673, 
		    4676, 5, 570, 0, 0, 4674, 4675, 5, 32, 0, 0, 4675, 4677, 3, 578, 289, 
		    0, 4676, 4674, 1, 0, 0, 0, 4676, 4677, 1, 0, 0, 0, 4677, 381, 1, 0, 
		    0, 0, 4678, 4679, 5, 560, 0, 0, 4679, 4680, 3, 584, 292, 0, 4680, 
		    4683, 5, 68, 0, 0, 4681, 4684, 5, 1148, 0, 0, 4682, 4684, 5, 1159, 
		    0, 0, 4683, 4681, 1, 0, 0, 0, 4683, 4682, 1, 0, 0, 0, 4684, 383, 1, 
		    0, 0, 0, 4685, 4686, 5, 708, 0, 0, 4686, 4689, 3, 584, 292, 0, 4687, 
		    4688, 5, 187, 0, 0, 4688, 4690, 3, 632, 316, 0, 4689, 4687, 1, 0, 
		    0, 0, 4689, 4690, 1, 0, 0, 0, 4690, 385, 1, 0, 0, 0, 4691, 4692, 7, 
		    64, 0, 0, 4692, 4693, 5, 560, 0, 0, 4693, 4694, 3, 584, 292, 0, 4694, 
		    387, 1, 0, 0, 0, 4695, 4698, 3, 390, 195, 0, 4696, 4698, 3, 4, 2, 
		    0, 4697, 4695, 1, 0, 0, 0, 4697, 4696, 1, 0, 0, 0, 4698, 389, 1, 0, 
		    0, 0, 4699, 4700, 3, 584, 292, 0, 4700, 4701, 5, 1144, 0, 0, 4701, 
		    4703, 1, 0, 0, 0, 4702, 4699, 1, 0, 0, 0, 4702, 4703, 1, 0, 0, 0, 
		    4703, 4704, 1, 0, 0, 0, 4704, 4710, 5, 344, 0, 0, 4705, 4706, 3, 410, 
		    205, 0, 4706, 4707, 5, 1136, 0, 0, 4707, 4709, 1, 0, 0, 0, 4708, 4705, 
		    1, 0, 0, 0, 4709, 4712, 1, 0, 0, 0, 4710, 4708, 1, 0, 0, 0, 4710, 
		    4711, 1, 0, 0, 0, 4711, 4718, 1, 0, 0, 0, 4712, 4710, 1, 0, 0, 0, 
		    4713, 4714, 3, 412, 206, 0, 4714, 4715, 5, 1136, 0, 0, 4715, 4717, 
		    1, 0, 0, 0, 4716, 4713, 1, 0, 0, 0, 4717, 4720, 1, 0, 0, 0, 4718, 
		    4716, 1, 0, 0, 0, 4718, 4719, 1, 0, 0, 0, 4719, 4726, 1, 0, 0, 0, 
		    4720, 4718, 1, 0, 0, 0, 4721, 4722, 3, 414, 207, 0, 4722, 4723, 5, 
		    1136, 0, 0, 4723, 4725, 1, 0, 0, 0, 4724, 4721, 1, 0, 0, 0, 4725, 
		    4728, 1, 0, 0, 0, 4726, 4724, 1, 0, 0, 0, 4726, 4727, 1, 0, 0, 0, 
		    4727, 4734, 1, 0, 0, 0, 4728, 4726, 1, 0, 0, 0, 4729, 4730, 3, 416, 
		    208, 0, 4730, 4731, 5, 1136, 0, 0, 4731, 4733, 1, 0, 0, 0, 4732, 4729, 
		    1, 0, 0, 0, 4733, 4736, 1, 0, 0, 0, 4734, 4732, 1, 0, 0, 0, 4734, 
		    4735, 1, 0, 0, 0, 4735, 4740, 1, 0, 0, 0, 4736, 4734, 1, 0, 0, 0, 
		    4737, 4739, 3, 420, 210, 0, 4738, 4737, 1, 0, 0, 0, 4739, 4742, 1, 
		    0, 0, 0, 4740, 4738, 1, 0, 0, 0, 4740, 4741, 1, 0, 0, 0, 4741, 4743, 
		    1, 0, 0, 0, 4742, 4740, 1, 0, 0, 0, 4743, 4745, 5, 407, 0, 0, 4744, 
		    4746, 3, 584, 292, 0, 4745, 4744, 1, 0, 0, 0, 4745, 4746, 1, 0, 0, 
		    0, 4746, 391, 1, 0, 0, 0, 4747, 4750, 5, 22, 0, 0, 4748, 4751, 3, 
		    584, 292, 0, 4749, 4751, 3, 688, 344, 0, 4750, 4748, 1, 0, 0, 0, 4750, 
		    4749, 1, 0, 0, 0, 4750, 4751, 1, 0, 0, 0, 4751, 4753, 1, 0, 0, 0, 
		    4752, 4754, 3, 422, 211, 0, 4753, 4752, 1, 0, 0, 0, 4754, 4755, 1, 
		    0, 0, 0, 4755, 4753, 1, 0, 0, 0, 4755, 4756, 1, 0, 0, 0, 4756, 4763, 
		    1, 0, 0, 0, 4757, 4759, 5, 53, 0, 0, 4758, 4760, 3, 420, 210, 0, 4759, 
		    4758, 1, 0, 0, 0, 4760, 4761, 1, 0, 0, 0, 4761, 4759, 1, 0, 0, 0, 
		    4761, 4762, 1, 0, 0, 0, 4762, 4764, 1, 0, 0, 0, 4763, 4757, 1, 0, 
		    0, 0, 4763, 4764, 1, 0, 0, 0, 4764, 4765, 1, 0, 0, 0, 4765, 4766, 
		    5, 407, 0, 0, 4766, 4767, 5, 22, 0, 0, 4767, 393, 1, 0, 0, 0, 4768, 
		    4769, 5, 77, 0, 0, 4769, 4770, 3, 688, 344, 0, 4770, 4772, 5, 174, 
		    0, 0, 4771, 4773, 3, 420, 210, 0, 4772, 4771, 1, 0, 0, 0, 4773, 4774, 
		    1, 0, 0, 0, 4774, 4772, 1, 0, 0, 0, 4774, 4775, 1, 0, 0, 0, 4775, 
		    4779, 1, 0, 0, 0, 4776, 4778, 3, 424, 212, 0, 4777, 4776, 1, 0, 0, 
		    0, 4778, 4781, 1, 0, 0, 0, 4779, 4777, 1, 0, 0, 0, 4779, 4780, 1, 
		    0, 0, 0, 4780, 4788, 1, 0, 0, 0, 4781, 4779, 1, 0, 0, 0, 4782, 4784, 
		    5, 53, 0, 0, 4783, 4785, 3, 420, 210, 0, 4784, 4783, 1, 0, 0, 0, 4785, 
		    4786, 1, 0, 0, 0, 4786, 4784, 1, 0, 0, 0, 4786, 4787, 1, 0, 0, 0, 
		    4787, 4789, 1, 0, 0, 0, 4788, 4782, 1, 0, 0, 0, 4788, 4789, 1, 0, 
		    0, 0, 4789, 4790, 1, 0, 0, 0, 4790, 4791, 5, 407, 0, 0, 4791, 4792, 
		    5, 77, 0, 0, 4792, 395, 1, 0, 0, 0, 4793, 4794, 5, 89, 0, 0, 4794, 
		    4795, 3, 584, 292, 0, 4795, 397, 1, 0, 0, 0, 4796, 4797, 5, 96, 0, 
		    0, 4797, 4798, 3, 584, 292, 0, 4798, 399, 1, 0, 0, 0, 4799, 4800, 
		    3, 584, 292, 0, 4800, 4801, 5, 1144, 0, 0, 4801, 4803, 1, 0, 0, 0, 
		    4802, 4799, 1, 0, 0, 0, 4802, 4803, 1, 0, 0, 0, 4803, 4804, 1, 0, 
		    0, 0, 4804, 4806, 5, 105, 0, 0, 4805, 4807, 3, 420, 210, 0, 4806, 
		    4805, 1, 0, 0, 0, 4807, 4808, 1, 0, 0, 0, 4808, 4806, 1, 0, 0, 0, 
		    4808, 4809, 1, 0, 0, 0, 4809, 4810, 1, 0, 0, 0, 4810, 4811, 5, 407, 
		    0, 0, 4811, 4813, 5, 105, 0, 0, 4812, 4814, 3, 584, 292, 0, 4813, 
		    4812, 1, 0, 0, 0, 4813, 4814, 1, 0, 0, 0, 4814, 401, 1, 0, 0, 0, 4815, 
		    4816, 3, 584, 292, 0, 4816, 4817, 5, 1144, 0, 0, 4817, 4819, 1, 0, 
		    0, 0, 4818, 4815, 1, 0, 0, 0, 4818, 4819, 1, 0, 0, 0, 4819, 4820, 
		    1, 0, 0, 0, 4820, 4822, 5, 140, 0, 0, 4821, 4823, 3, 420, 210, 0, 
		    4822, 4821, 1, 0, 0, 0, 4823, 4824, 1, 0, 0, 0, 4824, 4822, 1, 0, 
		    0, 0, 4824, 4825, 1, 0, 0, 0, 4825, 4826, 1, 0, 0, 0, 4826, 4827, 
		    5, 663, 0, 0, 4827, 4828, 3, 688, 344, 0, 4828, 4829, 5, 407, 0, 0, 
		    4829, 4831, 5, 140, 0, 0, 4830, 4832, 3, 584, 292, 0, 4831, 4830, 
		    1, 0, 0, 0, 4831, 4832, 1, 0, 0, 0, 4832, 403, 1, 0, 0, 0, 4833, 4834, 
		    5, 146, 0, 0, 4834, 4835, 3, 688, 344, 0, 4835, 405, 1, 0, 0, 0, 4836, 
		    4837, 3, 584, 292, 0, 4837, 4838, 5, 1144, 0, 0, 4838, 4840, 1, 0, 
		    0, 0, 4839, 4836, 1, 0, 0, 0, 4839, 4840, 1, 0, 0, 0, 4840, 4841, 
		    1, 0, 0, 0, 4841, 4842, 5, 191, 0, 0, 4842, 4843, 3, 688, 344, 0, 
		    4843, 4845, 5, 399, 0, 0, 4844, 4846, 3, 420, 210, 0, 4845, 4844, 
		    1, 0, 0, 0, 4846, 4847, 1, 0, 0, 0, 4847, 4845, 1, 0, 0, 0, 4847, 
		    4848, 1, 0, 0, 0, 4848, 4849, 1, 0, 0, 0, 4849, 4850, 5, 407, 0, 0, 
		    4850, 4852, 5, 191, 0, 0, 4851, 4853, 3, 584, 292, 0, 4852, 4851, 
		    1, 0, 0, 0, 4852, 4853, 1, 0, 0, 0, 4853, 407, 1, 0, 0, 0, 4854, 4855, 
		    5, 361, 0, 0, 4855, 4870, 3, 584, 292, 0, 4856, 4861, 5, 64, 0, 0, 
		    4857, 4859, 5, 520, 0, 0, 4858, 4857, 1, 0, 0, 0, 4858, 4859, 1, 0, 
		    0, 0, 4859, 4860, 1, 0, 0, 0, 4860, 4862, 5, 68, 0, 0, 4861, 4858, 
		    1, 0, 0, 0, 4861, 4862, 1, 0, 0, 0, 4862, 4863, 1, 0, 0, 0, 4863, 
		    4864, 3, 584, 292, 0, 4864, 4865, 5, 87, 0, 0, 4865, 4866, 3, 616, 
		    308, 0, 4866, 4870, 1, 0, 0, 0, 4867, 4868, 5, 539, 0, 0, 4868, 4870, 
		    3, 584, 292, 0, 4869, 4854, 1, 0, 0, 0, 4869, 4856, 1, 0, 0, 0, 4869, 
		    4867, 1, 0, 0, 0, 4870, 409, 1, 0, 0, 0, 4871, 4872, 5, 41, 0, 0, 
		    4872, 4873, 3, 616, 308, 0, 4873, 4876, 3, 604, 302, 0, 4874, 4875, 
		    5, 42, 0, 0, 4875, 4877, 3, 688, 344, 0, 4876, 4874, 1, 0, 0, 0, 4876, 
		    4877, 1, 0, 0, 0, 4877, 411, 1, 0, 0, 0, 4878, 4879, 5, 41, 0, 0, 
		    4879, 4880, 3, 584, 292, 0, 4880, 4881, 5, 29, 0, 0, 4881, 4888, 5, 
		    65, 0, 0, 4882, 4889, 3, 590, 295, 0, 4883, 4885, 5, 162, 0, 0, 4884, 
		    4886, 5, 669, 0, 0, 4885, 4884, 1, 0, 0, 0, 4885, 4886, 1, 0, 0, 0, 
		    4886, 4887, 1, 0, 0, 0, 4887, 4889, 5, 1148, 0, 0, 4888, 4882, 1, 
		    0, 0, 0, 4888, 4883, 1, 0, 0, 0, 4889, 413, 1, 0, 0, 0, 4890, 4891, 
		    5, 41, 0, 0, 4891, 4892, 3, 584, 292, 0, 4892, 4893, 5, 38, 0, 0, 
		    4893, 4894, 5, 65, 0, 0, 4894, 4895, 3, 200, 100, 0, 4895, 415, 1, 
		    0, 0, 0, 4896, 4897, 5, 41, 0, 0, 4897, 4898, 7, 65, 0, 0, 4898, 4899, 
		    5, 442, 0, 0, 4899, 4900, 5, 65, 0, 0, 4900, 4905, 3, 418, 209, 0, 
		    4901, 4902, 5, 1135, 0, 0, 4902, 4904, 3, 418, 209, 0, 4903, 4901, 
		    1, 0, 0, 0, 4904, 4907, 1, 0, 0, 0, 4905, 4903, 1, 0, 0, 0, 4905, 
		    4906, 1, 0, 0, 0, 4906, 4908, 1, 0, 0, 0, 4907, 4905, 1, 0, 0, 0, 
		    4908, 4909, 3, 388, 194, 0, 4909, 417, 1, 0, 0, 0, 4910, 4922, 3, 
		    590, 295, 0, 4911, 4913, 5, 162, 0, 0, 4912, 4914, 5, 669, 0, 0, 4913, 
		    4912, 1, 0, 0, 0, 4913, 4914, 1, 0, 0, 0, 4914, 4915, 1, 0, 0, 0, 
		    4915, 4922, 5, 1148, 0, 0, 4916, 4922, 3, 584, 292, 0, 4917, 4922, 
		    5, 163, 0, 0, 4918, 4919, 5, 114, 0, 0, 4919, 4922, 5, 435, 0, 0, 
		    4920, 4922, 5, 161, 0, 0, 4921, 4910, 1, 0, 0, 0, 4921, 4911, 1, 0, 
		    0, 0, 4921, 4916, 1, 0, 0, 0, 4921, 4917, 1, 0, 0, 0, 4921, 4918, 
		    1, 0, 0, 0, 4921, 4920, 1, 0, 0, 0, 4922, 419, 1, 0, 0, 0, 4923, 4926, 
		    3, 18, 9, 0, 4924, 4926, 3, 4, 2, 0, 4925, 4923, 1, 0, 0, 0, 4925, 
		    4924, 1, 0, 0, 0, 4926, 4927, 1, 0, 0, 0, 4927, 4928, 5, 1136, 0, 
		    0, 4928, 421, 1, 0, 0, 0, 4929, 4932, 5, 189, 0, 0, 4930, 4933, 3, 
		    602, 301, 0, 4931, 4933, 3, 688, 344, 0, 4932, 4930, 1, 0, 0, 0, 4932, 
		    4931, 1, 0, 0, 0, 4933, 4934, 1, 0, 0, 0, 4934, 4936, 5, 174, 0, 0, 
		    4935, 4937, 3, 420, 210, 0, 4936, 4935, 1, 0, 0, 0, 4937, 4938, 1, 
		    0, 0, 0, 4938, 4936, 1, 0, 0, 0, 4938, 4939, 1, 0, 0, 0, 4939, 423, 
		    1, 0, 0, 0, 4940, 4941, 5, 54, 0, 0, 4941, 4942, 3, 688, 344, 0, 4942, 
		    4944, 5, 174, 0, 0, 4943, 4945, 3, 420, 210, 0, 4944, 4943, 1, 0, 
		    0, 0, 4945, 4946, 1, 0, 0, 0, 4946, 4944, 1, 0, 0, 0, 4946, 4947, 
		    1, 0, 0, 0, 4947, 425, 1, 0, 0, 0, 4948, 4949, 5, 7, 0, 0, 4949, 4950, 
		    5, 665, 0, 0, 4950, 4955, 3, 446, 223, 0, 4951, 4952, 5, 1135, 0, 
		    0, 4952, 4954, 3, 446, 223, 0, 4953, 4951, 1, 0, 0, 0, 4954, 4957, 
		    1, 0, 0, 0, 4955, 4953, 1, 0, 0, 0, 4955, 4956, 1, 0, 0, 0, 4956, 
		    5022, 1, 0, 0, 0, 4957, 4955, 1, 0, 0, 0, 4958, 4959, 5, 7, 0, 0, 
		    4959, 4961, 5, 665, 0, 0, 4960, 4962, 3, 640, 320, 0, 4961, 4960, 
		    1, 0, 0, 0, 4961, 4962, 1, 0, 0, 0, 4962, 4963, 1, 0, 0, 0, 4963, 
		    4968, 3, 448, 224, 0, 4964, 4965, 5, 1135, 0, 0, 4965, 4967, 3, 448, 
		    224, 0, 4966, 4964, 1, 0, 0, 0, 4967, 4970, 1, 0, 0, 0, 4968, 4966, 
		    1, 0, 0, 0, 4968, 4969, 1, 0, 0, 0, 4969, 4985, 1, 0, 0, 0, 4970, 
		    4968, 1, 0, 0, 0, 4971, 4983, 5, 142, 0, 0, 4972, 4984, 5, 529, 0, 
		    0, 4973, 4980, 3, 454, 227, 0, 4974, 4976, 5, 10, 0, 0, 4975, 4974, 
		    1, 0, 0, 0, 4975, 4976, 1, 0, 0, 0, 4976, 4977, 1, 0, 0, 0, 4977, 
		    4979, 3, 454, 227, 0, 4978, 4975, 1, 0, 0, 0, 4979, 4982, 1, 0, 0, 
		    0, 4980, 4978, 1, 0, 0, 0, 4980, 4981, 1, 0, 0, 0, 4981, 4984, 1, 
		    0, 0, 0, 4982, 4980, 1, 0, 0, 0, 4983, 4972, 1, 0, 0, 0, 4983, 4973, 
		    1, 0, 0, 0, 4984, 4986, 1, 0, 0, 0, 4985, 4971, 1, 0, 0, 0, 4985, 
		    4986, 1, 0, 0, 0, 4986, 4993, 1, 0, 0, 0, 4987, 4989, 5, 192, 0, 0, 
		    4988, 4990, 3, 456, 228, 0, 4989, 4988, 1, 0, 0, 0, 4990, 4991, 1, 
		    0, 0, 0, 4991, 4989, 1, 0, 0, 0, 4991, 4992, 1, 0, 0, 0, 4992, 4994, 
		    1, 0, 0, 0, 4993, 4987, 1, 0, 0, 0, 4993, 4994, 1, 0, 0, 0, 4994, 
		    4999, 1, 0, 0, 0, 4995, 4998, 3, 458, 229, 0, 4996, 4998, 3, 460, 
		    230, 0, 4997, 4995, 1, 0, 0, 0, 4997, 4996, 1, 0, 0, 0, 4998, 5001, 
		    1, 0, 0, 0, 4999, 4997, 1, 0, 0, 0, 4999, 5000, 1, 0, 0, 0, 5000, 
		    5006, 1, 0, 0, 0, 5001, 4999, 1, 0, 0, 0, 5002, 5003, 5, 368, 0, 0, 
		    5003, 5007, 5, 1148, 0, 0, 5004, 5005, 5, 14, 0, 0, 5005, 5007, 5, 
		    1148, 0, 0, 5006, 5002, 1, 0, 0, 0, 5006, 5004, 1, 0, 0, 0, 5006, 
		    5007, 1, 0, 0, 0, 5007, 5022, 1, 0, 0, 0, 5008, 5009, 5, 7, 0, 0, 
		    5009, 5011, 5, 665, 0, 0, 5010, 5012, 3, 640, 320, 0, 5011, 5010, 
		    1, 0, 0, 0, 5011, 5012, 1, 0, 0, 0, 5012, 5015, 1, 0, 0, 0, 5013, 
		    5016, 3, 564, 282, 0, 5014, 5016, 3, 584, 292, 0, 5015, 5013, 1, 0, 
		    0, 0, 5015, 5014, 1, 0, 0, 0, 5016, 5017, 1, 0, 0, 0, 5017, 5018, 
		    5, 42, 0, 0, 5018, 5019, 5, 596, 0, 0, 5019, 5020, 3, 434, 217, 0, 
		    5020, 5022, 1, 0, 0, 0, 5021, 4948, 1, 0, 0, 0, 5021, 4958, 1, 0, 
		    0, 0, 5021, 5008, 1, 0, 0, 0, 5022, 427, 1, 0, 0, 0, 5023, 5024, 5, 
		    33, 0, 0, 5024, 5025, 5, 665, 0, 0, 5025, 5030, 3, 448, 224, 0, 5026, 
		    5027, 5, 1135, 0, 0, 5027, 5029, 3, 448, 224, 0, 5028, 5026, 1, 0, 
		    0, 0, 5029, 5032, 1, 0, 0, 0, 5030, 5028, 1, 0, 0, 0, 5030, 5031, 
		    1, 0, 0, 0, 5031, 5089, 1, 0, 0, 0, 5032, 5030, 1, 0, 0, 0, 5033, 
		    5034, 5, 33, 0, 0, 5034, 5036, 5, 665, 0, 0, 5035, 5037, 3, 642, 321, 
		    0, 5036, 5035, 1, 0, 0, 0, 5036, 5037, 1, 0, 0, 0, 5037, 5038, 1, 
		    0, 0, 0, 5038, 5043, 3, 448, 224, 0, 5039, 5040, 5, 1135, 0, 0, 5040, 
		    5042, 3, 448, 224, 0, 5041, 5039, 1, 0, 0, 0, 5042, 5045, 1, 0, 0, 
		    0, 5043, 5041, 1, 0, 0, 0, 5043, 5044, 1, 0, 0, 0, 5044, 5049, 1, 
		    0, 0, 0, 5045, 5043, 1, 0, 0, 0, 5046, 5047, 5, 42, 0, 0, 5047, 5048, 
		    5, 596, 0, 0, 5048, 5050, 3, 434, 217, 0, 5049, 5046, 1, 0, 0, 0, 
		    5049, 5050, 1, 0, 0, 0, 5050, 5065, 1, 0, 0, 0, 5051, 5063, 5, 142, 
		    0, 0, 5052, 5064, 5, 529, 0, 0, 5053, 5060, 3, 454, 227, 0, 5054, 
		    5056, 5, 10, 0, 0, 5055, 5054, 1, 0, 0, 0, 5055, 5056, 1, 0, 0, 0, 
		    5056, 5057, 1, 0, 0, 0, 5057, 5059, 3, 454, 227, 0, 5058, 5055, 1, 
		    0, 0, 0, 5059, 5062, 1, 0, 0, 0, 5060, 5058, 1, 0, 0, 0, 5060, 5061, 
		    1, 0, 0, 0, 5061, 5064, 1, 0, 0, 0, 5062, 5060, 1, 0, 0, 0, 5063, 
		    5052, 1, 0, 0, 0, 5063, 5053, 1, 0, 0, 0, 5064, 5066, 1, 0, 0, 0, 
		    5065, 5051, 1, 0, 0, 0, 5065, 5066, 1, 0, 0, 0, 5066, 5073, 1, 0, 
		    0, 0, 5067, 5069, 5, 192, 0, 0, 5068, 5070, 3, 456, 228, 0, 5069, 
		    5068, 1, 0, 0, 0, 5070, 5071, 1, 0, 0, 0, 5071, 5069, 1, 0, 0, 0, 
		    5071, 5072, 1, 0, 0, 0, 5072, 5074, 1, 0, 0, 0, 5073, 5067, 1, 0, 
		    0, 0, 5073, 5074, 1, 0, 0, 0, 5074, 5079, 1, 0, 0, 0, 5075, 5078, 
		    3, 458, 229, 0, 5076, 5078, 3, 460, 230, 0, 5077, 5075, 1, 0, 0, 0, 
		    5077, 5076, 1, 0, 0, 0, 5078, 5081, 1, 0, 0, 0, 5079, 5077, 1, 0, 
		    0, 0, 5079, 5080, 1, 0, 0, 0, 5080, 5086, 1, 0, 0, 0, 5081, 5079, 
		    1, 0, 0, 0, 5082, 5083, 5, 368, 0, 0, 5083, 5087, 5, 1148, 0, 0, 5084, 
		    5085, 5, 14, 0, 0, 5085, 5087, 5, 1148, 0, 0, 5086, 5082, 1, 0, 0, 
		    0, 5086, 5084, 1, 0, 0, 0, 5086, 5087, 1, 0, 0, 0, 5087, 5089, 1, 
		    0, 0, 0, 5088, 5023, 1, 0, 0, 0, 5088, 5033, 1, 0, 0, 0, 5089, 429, 
		    1, 0, 0, 0, 5090, 5091, 5, 51, 0, 0, 5091, 5093, 5, 665, 0, 0, 5092, 
		    5094, 3, 640, 320, 0, 5093, 5092, 1, 0, 0, 0, 5093, 5094, 1, 0, 0, 
		    0, 5094, 5095, 1, 0, 0, 0, 5095, 5100, 3, 564, 282, 0, 5096, 5097, 
		    5, 1135, 0, 0, 5097, 5099, 3, 564, 282, 0, 5098, 5096, 1, 0, 0, 0, 
		    5099, 5102, 1, 0, 0, 0, 5100, 5098, 1, 0, 0, 0, 5100, 5101, 1, 0, 
		    0, 0, 5101, 431, 1, 0, 0, 0, 5102, 5100, 1, 0, 0, 0, 5103, 5104, 5, 
		    72, 0, 0, 5104, 5109, 3, 462, 231, 0, 5105, 5106, 5, 1135, 0, 0, 5106, 
		    5108, 3, 462, 231, 0, 5107, 5105, 1, 0, 0, 0, 5108, 5111, 1, 0, 0, 
		    0, 5109, 5107, 1, 0, 0, 0, 5109, 5110, 1, 0, 0, 0, 5110, 5112, 1, 
		    0, 0, 0, 5111, 5109, 1, 0, 0, 0, 5112, 5114, 5, 118, 0, 0, 5113, 5115, 
		    7, 66, 0, 0, 5114, 5113, 1, 0, 0, 0, 5114, 5115, 1, 0, 0, 0, 5115, 
		    5116, 1, 0, 0, 0, 5116, 5117, 3, 466, 233, 0, 5117, 5118, 5, 175, 
		    0, 0, 5118, 5123, 3, 448, 224, 0, 5119, 5120, 5, 1135, 0, 0, 5120, 
		    5122, 3, 448, 224, 0, 5121, 5119, 1, 0, 0, 0, 5122, 5125, 1, 0, 0, 
		    0, 5123, 5121, 1, 0, 0, 0, 5123, 5124, 1, 0, 0, 0, 5124, 5140, 1, 
		    0, 0, 0, 5125, 5123, 1, 0, 0, 0, 5126, 5138, 5, 142, 0, 0, 5127, 5139, 
		    5, 529, 0, 0, 5128, 5135, 3, 454, 227, 0, 5129, 5131, 5, 10, 0, 0, 
		    5130, 5129, 1, 0, 0, 0, 5130, 5131, 1, 0, 0, 0, 5131, 5132, 1, 0, 
		    0, 0, 5132, 5134, 3, 454, 227, 0, 5133, 5130, 1, 0, 0, 0, 5134, 5137, 
		    1, 0, 0, 0, 5135, 5133, 1, 0, 0, 0, 5135, 5136, 1, 0, 0, 0, 5136, 
		    5139, 1, 0, 0, 0, 5137, 5135, 1, 0, 0, 0, 5138, 5127, 1, 0, 0, 0, 
		    5138, 5128, 1, 0, 0, 0, 5139, 5141, 1, 0, 0, 0, 5140, 5126, 1, 0, 
		    0, 0, 5140, 5141, 1, 0, 0, 0, 5141, 5151, 1, 0, 0, 0, 5142, 5148, 
		    5, 192, 0, 0, 5143, 5144, 5, 72, 0, 0, 5144, 5147, 5, 120, 0, 0, 5145, 
		    5147, 3, 456, 228, 0, 5146, 5143, 1, 0, 0, 0, 5146, 5145, 1, 0, 0, 
		    0, 5147, 5150, 1, 0, 0, 0, 5148, 5146, 1, 0, 0, 0, 5148, 5149, 1, 
		    0, 0, 0, 5149, 5152, 1, 0, 0, 0, 5150, 5148, 1, 0, 0, 0, 5151, 5142, 
		    1, 0, 0, 0, 5151, 5152, 1, 0, 0, 0, 5152, 5159, 1, 0, 0, 0, 5153, 
		    5154, 5, 12, 0, 0, 5154, 5155, 3, 564, 282, 0, 5155, 5156, 5, 192, 
		    0, 0, 5156, 5157, 5, 596, 0, 0, 5157, 5158, 3, 434, 217, 0, 5158, 
		    5160, 1, 0, 0, 0, 5159, 5153, 1, 0, 0, 0, 5159, 5160, 1, 0, 0, 0, 
		    5160, 5197, 1, 0, 0, 0, 5161, 5164, 5, 72, 0, 0, 5162, 5165, 3, 564, 
		    282, 0, 5163, 5165, 3, 584, 292, 0, 5164, 5162, 1, 0, 0, 0, 5164, 
		    5163, 1, 0, 0, 0, 5165, 5173, 1, 0, 0, 0, 5166, 5169, 5, 1135, 0, 
		    0, 5167, 5170, 3, 564, 282, 0, 5168, 5170, 3, 584, 292, 0, 5169, 5167, 
		    1, 0, 0, 0, 5169, 5168, 1, 0, 0, 0, 5170, 5172, 1, 0, 0, 0, 5171, 
		    5166, 1, 0, 0, 0, 5172, 5175, 1, 0, 0, 0, 5173, 5171, 1, 0, 0, 0, 
		    5173, 5174, 1, 0, 0, 0, 5174, 5176, 1, 0, 0, 0, 5175, 5173, 1, 0, 
		    0, 0, 5176, 5179, 5, 175, 0, 0, 5177, 5180, 3, 564, 282, 0, 5178, 
		    5180, 3, 584, 292, 0, 5179, 5177, 1, 0, 0, 0, 5179, 5178, 1, 0, 0, 
		    0, 5180, 5188, 1, 0, 0, 0, 5181, 5184, 5, 1135, 0, 0, 5182, 5185, 
		    3, 564, 282, 0, 5183, 5185, 3, 584, 292, 0, 5184, 5182, 1, 0, 0, 0, 
		    5184, 5183, 1, 0, 0, 0, 5185, 5187, 1, 0, 0, 0, 5186, 5181, 1, 0, 
		    0, 0, 5187, 5190, 1, 0, 0, 0, 5188, 5186, 1, 0, 0, 0, 5188, 5189, 
		    1, 0, 0, 0, 5189, 5194, 1, 0, 0, 0, 5190, 5188, 1, 0, 0, 0, 5191, 
		    5192, 5, 192, 0, 0, 5192, 5193, 5, 697, 0, 0, 5193, 5195, 5, 120, 
		    0, 0, 5194, 5191, 1, 0, 0, 0, 5194, 5195, 1, 0, 0, 0, 5195, 5197, 
		    1, 0, 0, 0, 5196, 5103, 1, 0, 0, 0, 5196, 5161, 1, 0, 0, 0, 5197, 
		    433, 1, 0, 0, 0, 5198, 5221, 5, 42, 0, 0, 5199, 5221, 5, 529, 0, 0, 
		    5200, 5210, 5, 6, 0, 0, 5201, 5202, 5, 59, 0, 0, 5202, 5207, 3, 564, 
		    282, 0, 5203, 5204, 5, 1135, 0, 0, 5204, 5206, 3, 564, 282, 0, 5205, 
		    5203, 1, 0, 0, 0, 5206, 5209, 1, 0, 0, 0, 5207, 5205, 1, 0, 0, 0, 
		    5207, 5208, 1, 0, 0, 0, 5208, 5211, 1, 0, 0, 0, 5209, 5207, 1, 0, 
		    0, 0, 5210, 5201, 1, 0, 0, 0, 5210, 5211, 1, 0, 0, 0, 5211, 5221, 
		    1, 0, 0, 0, 5212, 5217, 3, 564, 282, 0, 5213, 5214, 5, 1135, 0, 0, 
		    5214, 5216, 3, 564, 282, 0, 5215, 5213, 1, 0, 0, 0, 5216, 5219, 1, 
		    0, 0, 0, 5217, 5215, 1, 0, 0, 0, 5217, 5218, 1, 0, 0, 0, 5218, 5221, 
		    1, 0, 0, 0, 5219, 5217, 1, 0, 0, 0, 5220, 5198, 1, 0, 0, 0, 5220, 
		    5199, 1, 0, 0, 0, 5220, 5200, 1, 0, 0, 0, 5220, 5212, 1, 0, 0, 0, 
		    5221, 435, 1, 0, 0, 0, 5222, 5223, 5, 72, 0, 0, 5223, 5224, 5, 566, 
		    0, 0, 5224, 5225, 5, 118, 0, 0, 5225, 5226, 3, 564, 282, 0, 5226, 
		    5227, 5, 175, 0, 0, 5227, 5232, 3, 564, 282, 0, 5228, 5229, 5, 1135, 
		    0, 0, 5229, 5231, 3, 564, 282, 0, 5230, 5228, 1, 0, 0, 0, 5231, 5234, 
		    1, 0, 0, 0, 5232, 5230, 1, 0, 0, 0, 5232, 5233, 1, 0, 0, 0, 5233, 
		    5238, 1, 0, 0, 0, 5234, 5232, 1, 0, 0, 0, 5235, 5236, 5, 192, 0, 0, 
		    5236, 5237, 5, 72, 0, 0, 5237, 5239, 5, 120, 0, 0, 5238, 5235, 1, 
		    0, 0, 0, 5238, 5239, 1, 0, 0, 0, 5239, 437, 1, 0, 0, 0, 5240, 5241, 
		    5, 139, 0, 0, 5241, 5242, 5, 665, 0, 0, 5242, 5247, 3, 468, 234, 0, 
		    5243, 5244, 5, 1135, 0, 0, 5244, 5246, 3, 468, 234, 0, 5245, 5243, 
		    1, 0, 0, 0, 5246, 5249, 1, 0, 0, 0, 5247, 5245, 1, 0, 0, 0, 5247, 
		    5248, 1, 0, 0, 0, 5248, 439, 1, 0, 0, 0, 5249, 5247, 1, 0, 0, 0, 5250, 
		    5251, 5, 147, 0, 0, 5251, 5256, 3, 462, 231, 0, 5252, 5253, 5, 1135, 
		    0, 0, 5253, 5255, 3, 462, 231, 0, 5254, 5252, 1, 0, 0, 0, 5255, 5258, 
		    1, 0, 0, 0, 5256, 5254, 1, 0, 0, 0, 5256, 5257, 1, 0, 0, 0, 5257, 
		    5259, 1, 0, 0, 0, 5258, 5256, 1, 0, 0, 0, 5259, 5261, 5, 118, 0, 0, 
		    5260, 5262, 7, 66, 0, 0, 5261, 5260, 1, 0, 0, 0, 5261, 5262, 1, 0, 
		    0, 0, 5262, 5263, 1, 0, 0, 0, 5263, 5264, 3, 466, 233, 0, 5264, 5265, 
		    5, 68, 0, 0, 5265, 5270, 3, 564, 282, 0, 5266, 5267, 5, 1135, 0, 0, 
		    5267, 5269, 3, 564, 282, 0, 5268, 5266, 1, 0, 0, 0, 5269, 5272, 1, 
		    0, 0, 0, 5270, 5268, 1, 0, 0, 0, 5270, 5271, 1, 0, 0, 0, 5271, 5321, 
		    1, 0, 0, 0, 5272, 5270, 1, 0, 0, 0, 5273, 5274, 5, 147, 0, 0, 5274, 
		    5276, 5, 6, 0, 0, 5275, 5277, 5, 725, 0, 0, 5276, 5275, 1, 0, 0, 0, 
		    5276, 5277, 1, 0, 0, 0, 5277, 5278, 1, 0, 0, 0, 5278, 5279, 5, 1135, 
		    0, 0, 5279, 5280, 5, 72, 0, 0, 5280, 5281, 5, 120, 0, 0, 5281, 5282, 
		    5, 68, 0, 0, 5282, 5287, 3, 564, 282, 0, 5283, 5284, 5, 1135, 0, 0, 
		    5284, 5286, 3, 564, 282, 0, 5285, 5283, 1, 0, 0, 0, 5286, 5289, 1, 
		    0, 0, 0, 5287, 5285, 1, 0, 0, 0, 5287, 5288, 1, 0, 0, 0, 5288, 5321, 
		    1, 0, 0, 0, 5289, 5287, 1, 0, 0, 0, 5290, 5293, 5, 147, 0, 0, 5291, 
		    5294, 3, 564, 282, 0, 5292, 5294, 3, 584, 292, 0, 5293, 5291, 1, 0, 
		    0, 0, 5293, 5292, 1, 0, 0, 0, 5294, 5302, 1, 0, 0, 0, 5295, 5298, 
		    5, 1135, 0, 0, 5296, 5299, 3, 564, 282, 0, 5297, 5299, 3, 584, 292, 
		    0, 5298, 5296, 1, 0, 0, 0, 5298, 5297, 1, 0, 0, 0, 5299, 5301, 1, 
		    0, 0, 0, 5300, 5295, 1, 0, 0, 0, 5301, 5304, 1, 0, 0, 0, 5302, 5300, 
		    1, 0, 0, 0, 5302, 5303, 1, 0, 0, 0, 5303, 5305, 1, 0, 0, 0, 5304, 
		    5302, 1, 0, 0, 0, 5305, 5308, 5, 68, 0, 0, 5306, 5309, 3, 564, 282, 
		    0, 5307, 5309, 3, 584, 292, 0, 5308, 5306, 1, 0, 0, 0, 5308, 5307, 
		    1, 0, 0, 0, 5309, 5317, 1, 0, 0, 0, 5310, 5313, 5, 1135, 0, 0, 5311, 
		    5314, 3, 564, 282, 0, 5312, 5314, 3, 584, 292, 0, 5313, 5311, 1, 0, 
		    0, 0, 5313, 5312, 1, 0, 0, 0, 5314, 5316, 1, 0, 0, 0, 5315, 5310, 
		    1, 0, 0, 0, 5316, 5319, 1, 0, 0, 0, 5317, 5315, 1, 0, 0, 0, 5317, 
		    5318, 1, 0, 0, 0, 5318, 5321, 1, 0, 0, 0, 5319, 5317, 1, 0, 0, 0, 
		    5320, 5250, 1, 0, 0, 0, 5320, 5273, 1, 0, 0, 0, 5320, 5290, 1, 0, 
		    0, 0, 5321, 441, 1, 0, 0, 0, 5322, 5323, 5, 147, 0, 0, 5323, 5324, 
		    5, 566, 0, 0, 5324, 5325, 5, 118, 0, 0, 5325, 5326, 3, 564, 282, 0, 
		    5326, 5327, 5, 68, 0, 0, 5327, 5332, 3, 564, 282, 0, 5328, 5329, 5, 
		    1135, 0, 0, 5329, 5331, 3, 564, 282, 0, 5330, 5328, 1, 0, 0, 0, 5331, 
		    5334, 1, 0, 0, 0, 5332, 5330, 1, 0, 0, 0, 5332, 5333, 1, 0, 0, 0, 
		    5333, 443, 1, 0, 0, 0, 5334, 5332, 1, 0, 0, 0, 5335, 5336, 5, 153, 
		    0, 0, 5336, 5339, 5, 551, 0, 0, 5337, 5338, 5, 65, 0, 0, 5338, 5340, 
		    3, 564, 282, 0, 5339, 5337, 1, 0, 0, 0, 5339, 5340, 1, 0, 0, 0, 5340, 
		    5341, 1, 0, 0, 0, 5341, 5344, 5, 1124, 0, 0, 5342, 5345, 3, 682, 341, 
		    0, 5343, 5345, 5, 1148, 0, 0, 5344, 5342, 1, 0, 0, 0, 5344, 5343, 
		    1, 0, 0, 0, 5345, 445, 1, 0, 0, 0, 5346, 5347, 3, 564, 282, 0, 5347, 
		    5348, 3, 458, 229, 0, 5348, 447, 1, 0, 0, 0, 5349, 5350, 3, 564, 282, 
		    0, 5350, 5351, 5, 448, 0, 0, 5351, 5352, 5, 19, 0, 0, 5352, 5353, 
		    5, 551, 0, 0, 5353, 5354, 5, 1148, 0, 0, 5354, 5375, 1, 0, 0, 0, 5355, 
		    5356, 3, 564, 282, 0, 5356, 5357, 5, 448, 0, 0, 5357, 5358, 5, 19, 
		    0, 0, 5358, 5359, 5, 991, 0, 0, 5359, 5360, 5, 551, 0, 0, 5360, 5361, 
		    3, 450, 225, 0, 5361, 5375, 1, 0, 0, 0, 5362, 5363, 3, 564, 282, 0, 
		    5363, 5364, 5, 448, 0, 0, 5364, 5365, 5, 19, 0, 0, 5365, 5366, 5, 
		    1148, 0, 0, 5366, 5367, 3, 450, 225, 0, 5367, 5375, 1, 0, 0, 0, 5368, 
		    5369, 3, 564, 282, 0, 5369, 5370, 5, 448, 0, 0, 5370, 5371, 5, 192, 
		    0, 0, 5371, 5372, 3, 452, 226, 0, 5372, 5375, 1, 0, 0, 0, 5373, 5375, 
		    3, 564, 282, 0, 5374, 5349, 1, 0, 0, 0, 5374, 5355, 1, 0, 0, 0, 5374, 
		    5362, 1, 0, 0, 0, 5374, 5368, 1, 0, 0, 0, 5374, 5373, 1, 0, 0, 0, 
		    5375, 449, 1, 0, 0, 0, 5376, 5377, 5, 141, 0, 0, 5377, 5379, 5, 1148, 
		    0, 0, 5378, 5376, 1, 0, 0, 0, 5378, 5379, 1, 0, 0, 0, 5379, 5383, 
		    1, 0, 0, 0, 5380, 5381, 5, 145, 0, 0, 5381, 5382, 5, 35, 0, 0, 5382, 
		    5384, 5, 551, 0, 0, 5383, 5380, 1, 0, 0, 0, 5383, 5384, 1, 0, 0, 0, 
		    5384, 451, 1, 0, 0, 0, 5385, 5393, 3, 582, 291, 0, 5386, 5390, 7, 
		    67, 0, 0, 5387, 5391, 5, 1148, 0, 0, 5388, 5389, 5, 991, 0, 0, 5389, 
		    5391, 5, 551, 0, 0, 5390, 5387, 1, 0, 0, 0, 5390, 5388, 1, 0, 0, 0, 
		    5391, 5392, 1, 0, 0, 0, 5392, 5394, 3, 450, 225, 0, 5393, 5386, 1, 
		    0, 0, 0, 5393, 5394, 1, 0, 0, 0, 5394, 5400, 1, 0, 0, 0, 5395, 5396, 
		    3, 582, 291, 0, 5396, 5397, 5, 187, 0, 0, 5397, 5398, 3, 682, 341, 
		    0, 5398, 5400, 1, 0, 0, 0, 5399, 5385, 1, 0, 0, 0, 5399, 5395, 1, 
		    0, 0, 0, 5400, 453, 1, 0, 0, 0, 5401, 5410, 5, 167, 0, 0, 5402, 5410, 
		    5, 680, 0, 0, 5403, 5404, 5, 358, 0, 0, 5404, 5410, 5, 1148, 0, 0, 
		    5405, 5406, 5, 465, 0, 0, 5406, 5410, 5, 1148, 0, 0, 5407, 5408, 5, 
		    640, 0, 0, 5408, 5410, 5, 1148, 0, 0, 5409, 5401, 1, 0, 0, 0, 5409, 
		    5402, 1, 0, 0, 0, 5409, 5403, 1, 0, 0, 0, 5409, 5405, 1, 0, 0, 0, 
		    5409, 5407, 1, 0, 0, 0, 5410, 455, 1, 0, 0, 0, 5411, 5412, 5, 499, 
		    0, 0, 5412, 5420, 3, 590, 295, 0, 5413, 5414, 5, 502, 0, 0, 5414, 
		    5420, 3, 590, 295, 0, 5415, 5416, 5, 498, 0, 0, 5416, 5420, 3, 590, 
		    295, 0, 5417, 5418, 5, 503, 0, 0, 5418, 5420, 3, 590, 295, 0, 5419, 
		    5411, 1, 0, 0, 0, 5419, 5413, 1, 0, 0, 0, 5419, 5415, 1, 0, 0, 0, 
		    5419, 5417, 1, 0, 0, 0, 5420, 457, 1, 0, 0, 0, 5421, 5422, 5, 551, 
		    0, 0, 5422, 5429, 5, 420, 0, 0, 5423, 5430, 5, 42, 0, 0, 5424, 5430, 
		    5, 519, 0, 0, 5425, 5426, 5, 86, 0, 0, 5426, 5427, 3, 590, 295, 0, 
		    5427, 5428, 5, 691, 0, 0, 5428, 5430, 1, 0, 0, 0, 5429, 5423, 1, 0, 
		    0, 0, 5429, 5424, 1, 0, 0, 0, 5429, 5425, 1, 0, 0, 0, 5429, 5430, 
		    1, 0, 0, 0, 5430, 5460, 1, 0, 0, 0, 5431, 5432, 5, 551, 0, 0, 5432, 
		    5435, 5, 445, 0, 0, 5433, 5436, 5, 42, 0, 0, 5434, 5436, 3, 590, 295, 
		    0, 5435, 5433, 1, 0, 0, 0, 5435, 5434, 1, 0, 0, 0, 5436, 5460, 1, 
		    0, 0, 0, 5437, 5438, 5, 551, 0, 0, 5438, 5439, 5, 595, 0, 0, 5439, 
		    5444, 5, 86, 0, 0, 5440, 5445, 5, 42, 0, 0, 5441, 5442, 3, 590, 295, 
		    0, 5442, 5443, 5, 691, 0, 0, 5443, 5445, 1, 0, 0, 0, 5444, 5440, 1, 
		    0, 0, 0, 5444, 5441, 1, 0, 0, 0, 5445, 5460, 1, 0, 0, 0, 5446, 5447, 
		    5, 551, 0, 0, 5447, 5448, 5, 142, 0, 0, 5448, 5450, 5, 35, 0, 0, 5449, 
		    5451, 7, 68, 0, 0, 5450, 5449, 1, 0, 0, 0, 5450, 5451, 1, 0, 0, 0, 
		    5451, 5460, 1, 0, 0, 0, 5452, 5453, 5, 424, 0, 0, 5453, 5460, 3, 590, 
		    295, 0, 5454, 5457, 5, 552, 0, 0, 5455, 5458, 3, 590, 295, 0, 5456, 
		    5458, 5, 657, 0, 0, 5457, 5455, 1, 0, 0, 0, 5457, 5456, 1, 0, 0, 0, 
		    5458, 5460, 1, 0, 0, 0, 5459, 5421, 1, 0, 0, 0, 5459, 5431, 1, 0, 
		    0, 0, 5459, 5437, 1, 0, 0, 0, 5459, 5446, 1, 0, 0, 0, 5459, 5452, 
		    1, 0, 0, 0, 5459, 5454, 1, 0, 0, 0, 5460, 459, 1, 0, 0, 0, 5461, 5462, 
		    5, 332, 0, 0, 5462, 5463, 7, 69, 0, 0, 5463, 461, 1, 0, 0, 0, 5464, 
		    5469, 3, 464, 232, 0, 5465, 5466, 5, 1133, 0, 0, 5466, 5467, 3, 616, 
		    308, 0, 5467, 5468, 5, 1134, 0, 0, 5468, 5470, 1, 0, 0, 0, 5469, 5465, 
		    1, 0, 0, 0, 5469, 5470, 1, 0, 0, 0, 5470, 463, 1, 0, 0, 0, 5471, 5473, 
		    5, 6, 0, 0, 5472, 5474, 5, 725, 0, 0, 5473, 5472, 1, 0, 0, 0, 5473, 
		    5474, 1, 0, 0, 0, 5474, 5565, 1, 0, 0, 0, 5475, 5477, 5, 7, 0, 0, 
		    5476, 5478, 5, 733, 0, 0, 5477, 5476, 1, 0, 0, 0, 5477, 5478, 1, 0, 
		    0, 0, 5478, 5565, 1, 0, 0, 0, 5479, 5487, 5, 33, 0, 0, 5480, 5481, 
		    5, 649, 0, 0, 5481, 5488, 5, 742, 0, 0, 5482, 5488, 5, 733, 0, 0, 
		    5483, 5488, 5, 671, 0, 0, 5484, 5488, 5, 665, 0, 0, 5485, 5488, 5, 
		    647, 0, 0, 5486, 5488, 5, 596, 0, 0, 5487, 5480, 1, 0, 0, 0, 5487, 
		    5482, 1, 0, 0, 0, 5487, 5483, 1, 0, 0, 0, 5487, 5484, 1, 0, 0, 0, 
		    5487, 5485, 1, 0, 0, 0, 5487, 5486, 1, 0, 0, 0, 5487, 5488, 1, 0, 
		    0, 0, 5488, 5565, 1, 0, 0, 0, 5489, 5565, 5, 44, 0, 0, 5490, 5492, 
		    5, 51, 0, 0, 5491, 5493, 5, 596, 0, 0, 5492, 5491, 1, 0, 0, 0, 5492, 
		    5493, 1, 0, 0, 0, 5493, 5565, 1, 0, 0, 0, 5494, 5565, 5, 415, 0, 0, 
		    5495, 5565, 5, 708, 0, 0, 5496, 5565, 5, 709, 0, 0, 5497, 5498, 5, 
		    72, 0, 0, 5498, 5565, 5, 120, 0, 0, 5499, 5565, 5, 81, 0, 0, 5500, 
		    5565, 5, 85, 0, 0, 5501, 5502, 5, 103, 0, 0, 5502, 5565, 5, 742, 0, 
		    0, 5503, 5565, 5, 726, 0, 0, 5504, 5565, 5, 566, 0, 0, 5505, 5565, 
		    5, 136, 0, 0, 5506, 5565, 5, 727, 0, 0, 5507, 5508, 5, 588, 0, 0, 
		    5508, 5565, 7, 70, 0, 0, 5509, 5565, 5, 152, 0, 0, 5510, 5511, 5, 
		    155, 0, 0, 5511, 5565, 7, 71, 0, 0, 5512, 5565, 5, 739, 0, 0, 5513, 
		    5565, 5, 740, 0, 0, 5514, 5565, 5, 177, 0, 0, 5515, 5565, 5, 184, 
		    0, 0, 5516, 5565, 5, 185, 0, 0, 5517, 5565, 5, 698, 0, 0, 5518, 5565, 
		    5, 699, 0, 0, 5519, 5565, 5, 700, 0, 0, 5520, 5565, 5, 701, 0, 0, 
		    5521, 5565, 5, 702, 0, 0, 5522, 5565, 5, 703, 0, 0, 5523, 5565, 5, 
		    704, 0, 0, 5524, 5565, 5, 705, 0, 0, 5525, 5565, 5, 706, 0, 0, 5526, 
		    5565, 5, 707, 0, 0, 5527, 5565, 5, 710, 0, 0, 5528, 5565, 5, 711, 
		    0, 0, 5529, 5565, 5, 712, 0, 0, 5530, 5565, 5, 713, 0, 0, 5531, 5565, 
		    5, 714, 0, 0, 5532, 5565, 5, 715, 0, 0, 5533, 5565, 5, 716, 0, 0, 
		    5534, 5565, 5, 717, 0, 0, 5535, 5565, 5, 718, 0, 0, 5536, 5565, 5, 
		    719, 0, 0, 5537, 5565, 5, 722, 0, 0, 5538, 5565, 5, 723, 0, 0, 5539, 
		    5565, 5, 724, 0, 0, 5540, 5565, 5, 728, 0, 0, 5541, 5565, 5, 729, 
		    0, 0, 5542, 5565, 5, 730, 0, 0, 5543, 5565, 5, 731, 0, 0, 5544, 5565, 
		    5, 732, 0, 0, 5545, 5565, 5, 735, 0, 0, 5546, 5565, 5, 736, 0, 0, 
		    5547, 5565, 5, 737, 0, 0, 5548, 5565, 5, 158, 0, 0, 5549, 5565, 5, 
		    738, 0, 0, 5550, 5565, 5, 1077, 0, 0, 5551, 5565, 5, 741, 0, 0, 5552, 
		    5565, 5, 743, 0, 0, 5553, 5565, 5, 1088, 0, 0, 5554, 5565, 5, 744, 
		    0, 0, 5555, 5565, 5, 745, 0, 0, 5556, 5557, 5, 102, 0, 0, 5557, 5558, 
		    5, 68, 0, 0, 5558, 5565, 5, 734, 0, 0, 5559, 5560, 5, 152, 0, 0, 5560, 
		    5561, 5, 87, 0, 0, 5561, 5565, 5, 734, 0, 0, 5562, 5563, 5, 720, 0, 
		    0, 5563, 5565, 5, 721, 0, 0, 5564, 5471, 1, 0, 0, 0, 5564, 5475, 1, 
		    0, 0, 0, 5564, 5479, 1, 0, 0, 0, 5564, 5489, 1, 0, 0, 0, 5564, 5490, 
		    1, 0, 0, 0, 5564, 5494, 1, 0, 0, 0, 5564, 5495, 1, 0, 0, 0, 5564, 
		    5496, 1, 0, 0, 0, 5564, 5497, 1, 0, 0, 0, 5564, 5499, 1, 0, 0, 0, 
		    5564, 5500, 1, 0, 0, 0, 5564, 5501, 1, 0, 0, 0, 5564, 5503, 1, 0, 
		    0, 0, 5564, 5504, 1, 0, 0, 0, 5564, 5505, 1, 0, 0, 0, 5564, 5506, 
		    1, 0, 0, 0, 5564, 5507, 1, 0, 0, 0, 5564, 5509, 1, 0, 0, 0, 5564, 
		    5510, 1, 0, 0, 0, 5564, 5512, 1, 0, 0, 0, 5564, 5513, 1, 0, 0, 0, 
		    5564, 5514, 1, 0, 0, 0, 5564, 5515, 1, 0, 0, 0, 5564, 5516, 1, 0, 
		    0, 0, 5564, 5517, 1, 0, 0, 0, 5564, 5518, 1, 0, 0, 0, 5564, 5519, 
		    1, 0, 0, 0, 5564, 5520, 1, 0, 0, 0, 5564, 5521, 1, 0, 0, 0, 5564, 
		    5522, 1, 0, 0, 0, 5564, 5523, 1, 0, 0, 0, 5564, 5524, 1, 0, 0, 0, 
		    5564, 5525, 1, 0, 0, 0, 5564, 5526, 1, 0, 0, 0, 5564, 5527, 1, 0, 
		    0, 0, 5564, 5528, 1, 0, 0, 0, 5564, 5529, 1, 0, 0, 0, 5564, 5530, 
		    1, 0, 0, 0, 5564, 5531, 1, 0, 0, 0, 5564, 5532, 1, 0, 0, 0, 5564, 
		    5533, 1, 0, 0, 0, 5564, 5534, 1, 0, 0, 0, 5564, 5535, 1, 0, 0, 0, 
		    5564, 5536, 1, 0, 0, 0, 5564, 5537, 1, 0, 0, 0, 5564, 5538, 1, 0, 
		    0, 0, 5564, 5539, 1, 0, 0, 0, 5564, 5540, 1, 0, 0, 0, 5564, 5541, 
		    1, 0, 0, 0, 5564, 5542, 1, 0, 0, 0, 5564, 5543, 1, 0, 0, 0, 5564, 
		    5544, 1, 0, 0, 0, 5564, 5545, 1, 0, 0, 0, 5564, 5546, 1, 0, 0, 0, 
		    5564, 5547, 1, 0, 0, 0, 5564, 5548, 1, 0, 0, 0, 5564, 5549, 1, 0, 
		    0, 0, 5564, 5550, 1, 0, 0, 0, 5564, 5551, 1, 0, 0, 0, 5564, 5552, 
		    1, 0, 0, 0, 5564, 5553, 1, 0, 0, 0, 5564, 5554, 1, 0, 0, 0, 5564, 
		    5555, 1, 0, 0, 0, 5564, 5556, 1, 0, 0, 0, 5564, 5559, 1, 0, 0, 0, 
		    5564, 5562, 1, 0, 0, 0, 5565, 465, 1, 0, 0, 0, 5566, 5583, 5, 1117, 
		    0, 0, 5567, 5568, 5, 1117, 0, 0, 5568, 5569, 5, 1132, 0, 0, 5569, 
		    5583, 5, 1117, 0, 0, 5570, 5571, 3, 584, 292, 0, 5571, 5572, 5, 1132, 
		    0, 0, 5572, 5573, 5, 1117, 0, 0, 5573, 5583, 1, 0, 0, 0, 5574, 5575, 
		    3, 584, 292, 0, 5575, 5576, 5, 1132, 0, 0, 5576, 5577, 3, 584, 292, 
		    0, 5577, 5583, 1, 0, 0, 0, 5578, 5579, 3, 584, 292, 0, 5579, 5580, 
		    3, 588, 294, 0, 5580, 5583, 1, 0, 0, 0, 5581, 5583, 3, 584, 292, 0, 
		    5582, 5566, 1, 0, 0, 0, 5582, 5567, 1, 0, 0, 0, 5582, 5570, 1, 0, 
		    0, 0, 5582, 5574, 1, 0, 0, 0, 5582, 5578, 1, 0, 0, 0, 5582, 5581, 
		    1, 0, 0, 0, 5583, 467, 1, 0, 0, 0, 5584, 5585, 3, 564, 282, 0, 5585, 
		    5586, 5, 175, 0, 0, 5586, 5587, 3, 564, 282, 0, 5587, 469, 1, 0, 0, 
		    0, 5588, 5590, 5, 9, 0, 0, 5589, 5591, 7, 72, 0, 0, 5590, 5589, 1, 
		    0, 0, 0, 5590, 5591, 1, 0, 0, 0, 5591, 5592, 1, 0, 0, 0, 5592, 5593, 
		    7, 54, 0, 0, 5593, 5611, 3, 620, 310, 0, 5594, 5595, 5, 184, 0, 0, 
		    5595, 5596, 5, 76, 0, 0, 5596, 5597, 5, 118, 0, 0, 5597, 5602, 3, 
		    556, 278, 0, 5598, 5599, 5, 1135, 0, 0, 5599, 5601, 3, 556, 278, 0, 
		    5600, 5598, 1, 0, 0, 0, 5601, 5604, 1, 0, 0, 0, 5602, 5600, 1, 0, 
		    0, 0, 5602, 5603, 1, 0, 0, 0, 5603, 5609, 1, 0, 0, 0, 5604, 5602, 
		    1, 0, 0, 0, 5605, 5606, 5, 192, 0, 0, 5606, 5607, 3, 590, 295, 0, 
		    5607, 5608, 5, 18, 0, 0, 5608, 5610, 1, 0, 0, 0, 5609, 5605, 1, 0, 
		    0, 0, 5609, 5610, 1, 0, 0, 0, 5610, 5612, 1, 0, 0, 0, 5611, 5594, 
		    1, 0, 0, 0, 5611, 5612, 1, 0, 0, 0, 5612, 5624, 1, 0, 0, 0, 5613, 
		    5614, 5, 51, 0, 0, 5614, 5615, 5, 76, 0, 0, 5615, 5616, 5, 118, 0, 
		    0, 5616, 5621, 3, 556, 278, 0, 5617, 5618, 5, 1135, 0, 0, 5618, 5620, 
		    3, 556, 278, 0, 5619, 5617, 1, 0, 0, 0, 5620, 5623, 1, 0, 0, 0, 5621, 
		    5619, 1, 0, 0, 0, 5621, 5622, 1, 0, 0, 0, 5622, 5625, 1, 0, 0, 0, 
		    5623, 5621, 1, 0, 0, 0, 5624, 5613, 1, 0, 0, 0, 5624, 5625, 1, 0, 
		    0, 0, 5625, 471, 1, 0, 0, 0, 5626, 5627, 5, 26, 0, 0, 5627, 5628, 
		    5, 172, 0, 0, 5628, 5632, 3, 620, 310, 0, 5629, 5631, 3, 480, 240, 
		    0, 5630, 5629, 1, 0, 0, 0, 5631, 5634, 1, 0, 0, 0, 5632, 5630, 1, 
		    0, 0, 0, 5632, 5633, 1, 0, 0, 0, 5633, 473, 1, 0, 0, 0, 5634, 5632, 
		    1, 0, 0, 0, 5635, 5636, 5, 356, 0, 0, 5636, 5637, 5, 172, 0, 0, 5637, 
		    5639, 3, 620, 310, 0, 5638, 5640, 7, 73, 0, 0, 5639, 5638, 1, 0, 0, 
		    0, 5639, 5640, 1, 0, 0, 0, 5640, 475, 1, 0, 0, 0, 5641, 5643, 5, 119, 
		    0, 0, 5642, 5644, 7, 72, 0, 0, 5643, 5642, 1, 0, 0, 0, 5643, 5644, 
		    1, 0, 0, 0, 5644, 5645, 1, 0, 0, 0, 5645, 5646, 7, 54, 0, 0, 5646, 
		    5647, 3, 620, 310, 0, 5647, 477, 1, 0, 0, 0, 5648, 5650, 5, 580, 0, 
		    0, 5649, 5651, 7, 72, 0, 0, 5650, 5649, 1, 0, 0, 0, 5650, 5651, 1, 
		    0, 0, 0, 5651, 5652, 1, 0, 0, 0, 5652, 5653, 5, 172, 0, 0, 5653, 5655, 
		    3, 620, 310, 0, 5654, 5656, 5, 568, 0, 0, 5655, 5654, 1, 0, 0, 0, 
		    5655, 5656, 1, 0, 0, 0, 5656, 5658, 1, 0, 0, 0, 5657, 5659, 5, 422, 
		    0, 0, 5658, 5657, 1, 0, 0, 0, 5658, 5659, 1, 0, 0, 0, 5659, 5661, 
		    1, 0, 0, 0, 5660, 5662, 5, 666, 0, 0, 5661, 5660, 1, 0, 0, 0, 5661, 
		    5662, 1, 0, 0, 0, 5662, 479, 1, 0, 0, 0, 5663, 5664, 5, 65, 0, 0, 
		    5664, 5671, 5, 664, 0, 0, 5665, 5671, 5, 568, 0, 0, 5666, 5671, 5, 
		    425, 0, 0, 5667, 5671, 5, 504, 0, 0, 5668, 5671, 5, 422, 0, 0, 5669, 
		    5671, 5, 354, 0, 0, 5670, 5663, 1, 0, 0, 0, 5670, 5665, 1, 0, 0, 0, 
		    5670, 5666, 1, 0, 0, 0, 5670, 5667, 1, 0, 0, 0, 5670, 5668, 1, 0, 
		    0, 0, 5670, 5669, 1, 0, 0, 0, 5671, 481, 1, 0, 0, 0, 5672, 5674, 5, 
		    33, 0, 0, 5673, 5675, 5, 335, 0, 0, 5674, 5673, 1, 0, 0, 0, 5674, 
		    5675, 1, 0, 0, 0, 5675, 5676, 1, 0, 0, 0, 5676, 5678, 5, 437, 0, 0, 
		    5677, 5679, 3, 642, 321, 0, 5678, 5677, 1, 0, 0, 0, 5678, 5679, 1, 
		    0, 0, 0, 5679, 5680, 1, 0, 0, 0, 5680, 5681, 3, 584, 292, 0, 5681, 
		    5682, 5, 594, 0, 0, 5682, 5683, 7, 74, 0, 0, 5683, 5684, 5, 619, 0, 
		    0, 5684, 5685, 5, 1148, 0, 0, 5685, 483, 1, 0, 0, 0, 5686, 5687, 5, 
		    456, 0, 0, 5687, 5688, 5, 554, 0, 0, 5688, 5689, 3, 584, 292, 0, 5689, 
		    5690, 5, 619, 0, 0, 5690, 5691, 5, 1148, 0, 0, 5691, 485, 1, 0, 0, 
		    0, 5692, 5693, 5, 661, 0, 0, 5693, 5694, 5, 554, 0, 0, 5694, 5695, 
		    3, 584, 292, 0, 5695, 487, 1, 0, 0, 0, 5696, 5697, 5, 153, 0, 0, 5697, 
		    5698, 3, 492, 246, 0, 5698, 5701, 7, 75, 0, 0, 5699, 5702, 3, 688, 
		    344, 0, 5700, 5702, 5, 118, 0, 0, 5701, 5699, 1, 0, 0, 0, 5701, 5700, 
		    1, 0, 0, 0, 5702, 5712, 1, 0, 0, 0, 5703, 5704, 5, 1135, 0, 0, 5704, 
		    5705, 3, 492, 246, 0, 5705, 5708, 7, 75, 0, 0, 5706, 5709, 3, 688, 
		    344, 0, 5707, 5709, 5, 118, 0, 0, 5708, 5706, 1, 0, 0, 0, 5708, 5707, 
		    1, 0, 0, 0, 5709, 5711, 1, 0, 0, 0, 5710, 5703, 1, 0, 0, 0, 5711, 
		    5714, 1, 0, 0, 0, 5712, 5710, 1, 0, 0, 0, 5712, 5713, 1, 0, 0, 0, 
		    5713, 5749, 1, 0, 0, 0, 5714, 5712, 1, 0, 0, 0, 5715, 5716, 5, 153, 
		    0, 0, 5716, 5719, 3, 60, 30, 0, 5717, 5720, 3, 568, 284, 0, 5718, 
		    5720, 5, 42, 0, 0, 5719, 5717, 1, 0, 0, 0, 5719, 5718, 1, 0, 0, 0, 
		    5720, 5749, 1, 0, 0, 0, 5721, 5722, 5, 153, 0, 0, 5722, 5729, 5, 517, 
		    0, 0, 5723, 5726, 3, 568, 284, 0, 5724, 5725, 5, 27, 0, 0, 5725, 5727, 
		    3, 570, 285, 0, 5726, 5724, 1, 0, 0, 0, 5726, 5727, 1, 0, 0, 0, 5727, 
		    5730, 1, 0, 0, 0, 5728, 5730, 5, 42, 0, 0, 5729, 5723, 1, 0, 0, 0, 
		    5729, 5728, 1, 0, 0, 0, 5730, 5749, 1, 0, 0, 0, 5731, 5749, 3, 444, 
		    222, 0, 5732, 5749, 3, 318, 159, 0, 5733, 5749, 3, 316, 158, 0, 5734, 
		    5735, 5, 153, 0, 0, 5735, 5736, 3, 550, 275, 0, 5736, 5737, 7, 75, 
		    0, 0, 5737, 5745, 3, 688, 344, 0, 5738, 5739, 5, 1135, 0, 0, 5739, 
		    5740, 3, 550, 275, 0, 5740, 5741, 7, 75, 0, 0, 5741, 5742, 3, 688, 
		    344, 0, 5742, 5744, 1, 0, 0, 0, 5743, 5738, 1, 0, 0, 0, 5744, 5747, 
		    1, 0, 0, 0, 5745, 5743, 1, 0, 0, 0, 5745, 5746, 1, 0, 0, 0, 5746, 
		    5749, 1, 0, 0, 0, 5747, 5745, 1, 0, 0, 0, 5748, 5696, 1, 0, 0, 0, 
		    5748, 5715, 1, 0, 0, 0, 5748, 5721, 1, 0, 0, 0, 5748, 5731, 1, 0, 
		    0, 0, 5748, 5732, 1, 0, 0, 0, 5748, 5733, 1, 0, 0, 0, 5748, 5734, 
		    1, 0, 0, 0, 5749, 489, 1, 0, 0, 0, 5750, 5751, 5, 155, 0, 0, 5751, 
		    5752, 7, 56, 0, 0, 5752, 5904, 5, 476, 0, 0, 5753, 5754, 5, 155, 0, 
		    0, 5754, 5755, 7, 76, 0, 0, 5755, 5758, 5, 416, 0, 0, 5756, 5757, 
		    5, 80, 0, 0, 5757, 5759, 5, 1148, 0, 0, 5758, 5756, 1, 0, 0, 0, 5758, 
		    5759, 1, 0, 0, 0, 5759, 5762, 1, 0, 0, 0, 5760, 5761, 5, 68, 0, 0, 
		    5761, 5763, 3, 590, 295, 0, 5762, 5760, 1, 0, 0, 0, 5762, 5763, 1, 
		    0, 0, 0, 5763, 5771, 1, 0, 0, 0, 5764, 5768, 5, 99, 0, 0, 5765, 5766, 
		    3, 590, 295, 0, 5766, 5767, 5, 1135, 0, 0, 5767, 5769, 1, 0, 0, 0, 
		    5768, 5765, 1, 0, 0, 0, 5768, 5769, 1, 0, 0, 0, 5769, 5770, 1, 0, 
		    0, 0, 5770, 5772, 3, 590, 295, 0, 5771, 5764, 1, 0, 0, 0, 5771, 5772, 
		    1, 0, 0, 0, 5772, 5904, 1, 0, 0, 0, 5773, 5774, 5, 155, 0, 0, 5774, 
		    5776, 3, 494, 247, 0, 5775, 5777, 3, 496, 248, 0, 5776, 5775, 1, 0, 
		    0, 0, 5776, 5777, 1, 0, 0, 0, 5777, 5904, 1, 0, 0, 0, 5778, 5780, 
		    5, 155, 0, 0, 5779, 5781, 5, 436, 0, 0, 5780, 5779, 1, 0, 0, 0, 5780, 
		    5781, 1, 0, 0, 0, 5781, 5782, 1, 0, 0, 0, 5782, 5783, 7, 41, 0, 0, 
		    5783, 5784, 7, 77, 0, 0, 5784, 5787, 3, 552, 276, 0, 5785, 5786, 7, 
		    77, 0, 0, 5786, 5788, 3, 584, 292, 0, 5787, 5785, 1, 0, 0, 0, 5787, 
		    5788, 1, 0, 0, 0, 5788, 5790, 1, 0, 0, 0, 5789, 5791, 3, 496, 248, 
		    0, 5790, 5789, 1, 0, 0, 0, 5790, 5791, 1, 0, 0, 0, 5791, 5904, 1, 
		    0, 0, 0, 5792, 5793, 5, 155, 0, 0, 5793, 5794, 5, 33, 0, 0, 5794, 
		    5796, 7, 0, 0, 0, 5795, 5797, 3, 642, 321, 0, 5796, 5795, 1, 0, 0, 
		    0, 5796, 5797, 1, 0, 0, 0, 5797, 5798, 1, 0, 0, 0, 5798, 5904, 3, 
		    584, 292, 0, 5799, 5800, 5, 155, 0, 0, 5800, 5801, 5, 33, 0, 0, 5801, 
		    5802, 7, 78, 0, 0, 5802, 5904, 3, 550, 275, 0, 5803, 5804, 5, 155, 
		    0, 0, 5804, 5805, 5, 33, 0, 0, 5805, 5806, 5, 665, 0, 0, 5806, 5904, 
		    3, 564, 282, 0, 5807, 5808, 5, 155, 0, 0, 5808, 5809, 5, 409, 0, 0, 
		    5809, 5810, 3, 572, 286, 0, 5810, 5811, 7, 79, 0, 0, 5811, 5904, 1, 
		    0, 0, 0, 5812, 5813, 5, 155, 0, 0, 5813, 5904, 3, 498, 249, 0, 5814, 
		    5815, 5, 155, 0, 0, 5815, 5823, 7, 80, 0, 0, 5816, 5820, 5, 99, 0, 
		    0, 5817, 5818, 3, 590, 295, 0, 5818, 5819, 5, 1135, 0, 0, 5819, 5821, 
		    1, 0, 0, 0, 5820, 5817, 1, 0, 0, 0, 5820, 5821, 1, 0, 0, 0, 5821, 
		    5822, 1, 0, 0, 0, 5822, 5824, 3, 590, 295, 0, 5823, 5816, 1, 0, 0, 
		    0, 5823, 5824, 1, 0, 0, 0, 5824, 5904, 1, 0, 0, 0, 5825, 5826, 5, 
		    155, 0, 0, 5826, 5827, 5, 290, 0, 0, 5827, 5828, 5, 1133, 0, 0, 5828, 
		    5829, 5, 1117, 0, 0, 5829, 5830, 5, 1134, 0, 0, 5830, 5904, 7, 80, 
		    0, 0, 5831, 5832, 5, 155, 0, 0, 5832, 5835, 3, 500, 250, 0, 5833, 
		    5834, 7, 77, 0, 0, 5834, 5836, 3, 584, 292, 0, 5835, 5833, 1, 0, 0, 
		    0, 5835, 5836, 1, 0, 0, 0, 5836, 5838, 1, 0, 0, 0, 5837, 5839, 3, 
		    496, 248, 0, 5838, 5837, 1, 0, 0, 0, 5838, 5839, 1, 0, 0, 0, 5839, 
		    5904, 1, 0, 0, 0, 5840, 5841, 5, 155, 0, 0, 5841, 5842, 7, 81, 0, 
		    0, 5842, 5843, 5, 364, 0, 0, 5843, 5904, 3, 550, 275, 0, 5844, 5845, 
		    5, 155, 0, 0, 5845, 5848, 5, 440, 0, 0, 5846, 5847, 5, 65, 0, 0, 5847, 
		    5849, 3, 564, 282, 0, 5848, 5846, 1, 0, 0, 0, 5848, 5849, 1, 0, 0, 
		    0, 5849, 5904, 1, 0, 0, 0, 5850, 5851, 5, 155, 0, 0, 5851, 5852, 7, 
		    82, 0, 0, 5852, 5853, 7, 77, 0, 0, 5853, 5856, 3, 552, 276, 0, 5854, 
		    5855, 7, 77, 0, 0, 5855, 5857, 3, 584, 292, 0, 5856, 5854, 1, 0, 0, 
		    0, 5856, 5857, 1, 0, 0, 0, 5857, 5860, 1, 0, 0, 0, 5858, 5859, 5, 
		    190, 0, 0, 5859, 5861, 3, 688, 344, 0, 5860, 5858, 1, 0, 0, 0, 5860, 
		    5861, 1, 0, 0, 0, 5861, 5904, 1, 0, 0, 0, 5862, 5863, 5, 155, 0, 0, 
		    5863, 5864, 5, 539, 0, 0, 5864, 5867, 5, 742, 0, 0, 5865, 5866, 7, 
		    77, 0, 0, 5866, 5868, 3, 584, 292, 0, 5867, 5865, 1, 0, 0, 0, 5867, 
		    5868, 1, 0, 0, 0, 5868, 5870, 1, 0, 0, 0, 5869, 5871, 3, 496, 248, 
		    0, 5870, 5869, 1, 0, 0, 0, 5870, 5871, 1, 0, 0, 0, 5871, 5904, 1, 
		    0, 0, 0, 5872, 5873, 5, 155, 0, 0, 5873, 5874, 5, 564, 0, 0, 5874, 
		    5879, 3, 502, 251, 0, 5875, 5876, 5, 1135, 0, 0, 5876, 5878, 3, 502, 
		    251, 0, 5877, 5875, 1, 0, 0, 0, 5878, 5881, 1, 0, 0, 0, 5879, 5877, 
		    1, 0, 0, 0, 5879, 5880, 1, 0, 0, 0, 5880, 5885, 1, 0, 0, 0, 5881, 
		    5879, 1, 0, 0, 0, 5882, 5883, 5, 65, 0, 0, 5883, 5884, 5, 567, 0, 
		    0, 5884, 5886, 3, 590, 295, 0, 5885, 5882, 1, 0, 0, 0, 5885, 5886, 
		    1, 0, 0, 0, 5886, 5887, 1, 0, 0, 0, 5887, 5891, 5, 99, 0, 0, 5888, 
		    5889, 3, 590, 295, 0, 5889, 5890, 5, 1135, 0, 0, 5890, 5892, 1, 0, 
		    0, 0, 5891, 5888, 1, 0, 0, 0, 5891, 5892, 1, 0, 0, 0, 5892, 5893, 
		    1, 0, 0, 0, 5893, 5894, 3, 590, 295, 0, 5894, 5904, 1, 0, 0, 0, 5895, 
		    5896, 5, 155, 0, 0, 5896, 5897, 5, 614, 0, 0, 5897, 5901, 5, 634, 
		    0, 0, 5898, 5899, 5, 65, 0, 0, 5899, 5900, 5, 355, 0, 0, 5900, 5902, 
		    5, 1148, 0, 0, 5901, 5898, 1, 0, 0, 0, 5901, 5902, 1, 0, 0, 0, 5902, 
		    5904, 1, 0, 0, 0, 5903, 5750, 1, 0, 0, 0, 5903, 5753, 1, 0, 0, 0, 
		    5903, 5773, 1, 0, 0, 0, 5903, 5778, 1, 0, 0, 0, 5903, 5792, 1, 0, 
		    0, 0, 5903, 5799, 1, 0, 0, 0, 5903, 5803, 1, 0, 0, 0, 5903, 5807, 
		    1, 0, 0, 0, 5903, 5812, 1, 0, 0, 0, 5903, 5814, 1, 0, 0, 0, 5903, 
		    5825, 1, 0, 0, 0, 5903, 5831, 1, 0, 0, 0, 5903, 5840, 1, 0, 0, 0, 
		    5903, 5844, 1, 0, 0, 0, 5903, 5850, 1, 0, 0, 0, 5903, 5862, 1, 0, 
		    0, 0, 5903, 5872, 1, 0, 0, 0, 5903, 5895, 1, 0, 0, 0, 5904, 491, 1, 
		    0, 0, 0, 5905, 5916, 5, 1159, 0, 0, 5906, 5916, 5, 1160, 0, 0, 5907, 
		    5908, 5, 1137, 0, 0, 5908, 5910, 5, 1137, 0, 0, 5909, 5907, 1, 0, 
		    0, 0, 5909, 5910, 1, 0, 0, 0, 5910, 5911, 1, 0, 0, 0, 5911, 5913, 
		    7, 83, 0, 0, 5912, 5909, 1, 0, 0, 0, 5912, 5913, 1, 0, 0, 0, 5913, 
		    5914, 1, 0, 0, 0, 5914, 5916, 3, 584, 292, 0, 5915, 5905, 1, 0, 0, 
		    0, 5915, 5906, 1, 0, 0, 0, 5915, 5912, 1, 0, 0, 0, 5916, 493, 1, 0, 
		    0, 0, 5917, 5918, 5, 25, 0, 0, 5918, 5931, 5, 153, 0, 0, 5919, 5931, 
		    5, 844, 0, 0, 5920, 5931, 5, 40, 0, 0, 5921, 5931, 5, 151, 0, 0, 5922, 
		    5923, 5, 437, 0, 0, 5923, 5931, 5, 634, 0, 0, 5924, 5925, 5, 131, 
		    0, 0, 5925, 5931, 5, 634, 0, 0, 5926, 5928, 7, 55, 0, 0, 5927, 5926, 
		    1, 0, 0, 0, 5927, 5928, 1, 0, 0, 0, 5928, 5929, 1, 0, 0, 0, 5929, 
		    5931, 7, 84, 0, 0, 5930, 5917, 1, 0, 0, 0, 5930, 5919, 1, 0, 0, 0, 
		    5930, 5920, 1, 0, 0, 0, 5930, 5921, 1, 0, 0, 0, 5930, 5922, 1, 0, 
		    0, 0, 5930, 5924, 1, 0, 0, 0, 5930, 5927, 1, 0, 0, 0, 5931, 495, 1, 
		    0, 0, 0, 5932, 5933, 5, 98, 0, 0, 5933, 5937, 5, 1148, 0, 0, 5934, 
		    5935, 5, 190, 0, 0, 5935, 5937, 3, 688, 344, 0, 5936, 5932, 1, 0, 
		    0, 0, 5936, 5934, 1, 0, 0, 0, 5937, 497, 1, 0, 0, 0, 5938, 5940, 5, 
		    636, 0, 0, 5939, 5938, 1, 0, 0, 0, 5939, 5940, 1, 0, 0, 0, 5940, 5941, 
		    1, 0, 0, 0, 5941, 5956, 5, 410, 0, 0, 5942, 5943, 5, 477, 0, 0, 5943, 
		    5956, 5, 634, 0, 0, 5944, 5956, 5, 556, 0, 0, 5945, 5956, 5, 725, 
		    0, 0, 5946, 5948, 5, 436, 0, 0, 5947, 5946, 1, 0, 0, 0, 5947, 5948, 
		    1, 0, 0, 0, 5948, 5949, 1, 0, 0, 0, 5949, 5956, 5, 563, 0, 0, 5950, 
		    5956, 5, 565, 0, 0, 5951, 5952, 5, 614, 0, 0, 5952, 5956, 5, 447, 
		    0, 0, 5953, 5956, 5, 339, 0, 0, 5954, 5956, 5, 383, 0, 0, 5955, 5939, 
		    1, 0, 0, 0, 5955, 5942, 1, 0, 0, 0, 5955, 5944, 1, 0, 0, 0, 5955, 
		    5945, 1, 0, 0, 0, 5955, 5947, 1, 0, 0, 0, 5955, 5950, 1, 0, 0, 0, 
		    5955, 5951, 1, 0, 0, 0, 5955, 5953, 1, 0, 0, 0, 5955, 5954, 1, 0, 
		    0, 0, 5956, 499, 1, 0, 0, 0, 5957, 5966, 5, 416, 0, 0, 5958, 5959, 
		    5, 172, 0, 0, 5959, 5966, 5, 634, 0, 0, 5960, 5962, 5, 436, 0, 0, 
		    5961, 5960, 1, 0, 0, 0, 5961, 5962, 1, 0, 0, 0, 5962, 5963, 1, 0, 
		    0, 0, 5963, 5966, 5, 742, 0, 0, 5964, 5966, 5, 655, 0, 0, 5965, 5957, 
		    1, 0, 0, 0, 5965, 5958, 1, 0, 0, 0, 5965, 5961, 1, 0, 0, 0, 5965, 
		    5964, 1, 0, 0, 0, 5966, 501, 1, 0, 0, 0, 5967, 5980, 5, 6, 0, 0, 5968, 
		    5969, 5, 347, 0, 0, 5969, 5980, 5, 461, 0, 0, 5970, 5971, 5, 382, 
		    0, 0, 5971, 5980, 5, 645, 0, 0, 5972, 5980, 5, 385, 0, 0, 5973, 5980, 
		    5, 463, 0, 0, 5974, 5980, 5, 792, 0, 0, 5975, 5976, 5, 544, 0, 0, 
		    5976, 5980, 5, 426, 0, 0, 5977, 5980, 5, 621, 0, 0, 5978, 5980, 5, 
		    644, 0, 0, 5979, 5967, 1, 0, 0, 0, 5979, 5968, 1, 0, 0, 0, 5979, 5970, 
		    1, 0, 0, 0, 5979, 5972, 1, 0, 0, 0, 5979, 5973, 1, 0, 0, 0, 5979, 
		    5974, 1, 0, 0, 0, 5979, 5975, 1, 0, 0, 0, 5979, 5977, 1, 0, 0, 0, 
		    5979, 5978, 1, 0, 0, 0, 5980, 503, 1, 0, 0, 0, 5981, 5982, 5, 345, 
		    0, 0, 5982, 5983, 5, 1148, 0, 0, 5983, 505, 1, 0, 0, 0, 5984, 5985, 
		    5, 351, 0, 0, 5985, 5986, 5, 81, 0, 0, 5986, 5991, 3, 518, 259, 0, 
		    5987, 5988, 5, 1135, 0, 0, 5988, 5990, 3, 518, 259, 0, 5989, 5987, 
		    1, 0, 0, 0, 5990, 5993, 1, 0, 0, 0, 5991, 5989, 1, 0, 0, 0, 5991, 
		    5992, 1, 0, 0, 0, 5992, 6001, 1, 0, 0, 0, 5993, 5991, 1, 0, 0, 0, 
		    5994, 5995, 5, 129, 0, 0, 5995, 5998, 5, 1133, 0, 0, 5996, 5999, 3, 
		    616, 308, 0, 5997, 5999, 5, 6, 0, 0, 5998, 5996, 1, 0, 0, 0, 5998, 
		    5997, 1, 0, 0, 0, 5999, 6000, 1, 0, 0, 0, 6000, 6002, 5, 1134, 0, 
		    0, 6001, 5994, 1, 0, 0, 0, 6001, 6002, 1, 0, 0, 0, 6002, 6003, 1, 
		    0, 0, 0, 6003, 6004, 5, 80, 0, 0, 6004, 6005, 3, 584, 292, 0, 6005, 
		    507, 1, 0, 0, 0, 6006, 6008, 5, 432, 0, 0, 6007, 6009, 7, 72, 0, 0, 
		    6008, 6007, 1, 0, 0, 0, 6008, 6009, 1, 0, 0, 0, 6009, 6010, 1, 0, 
		    0, 0, 6010, 6015, 3, 520, 260, 0, 6011, 6012, 5, 1135, 0, 0, 6012, 
		    6014, 3, 520, 260, 0, 6013, 6011, 1, 0, 0, 0, 6014, 6017, 1, 0, 0, 
		    0, 6015, 6013, 1, 0, 0, 0, 6015, 6016, 1, 0, 0, 0, 6016, 509, 1, 0, 
		    0, 0, 6017, 6015, 1, 0, 0, 0, 6018, 6020, 5, 93, 0, 0, 6019, 6021, 
		    7, 85, 0, 0, 6020, 6019, 1, 0, 0, 0, 6020, 6021, 1, 0, 0, 0, 6021, 
		    6022, 1, 0, 0, 0, 6022, 6023, 3, 688, 344, 0, 6023, 511, 1, 0, 0, 
		    0, 6024, 6025, 5, 102, 0, 0, 6025, 6026, 5, 81, 0, 0, 6026, 6027, 
		    5, 87, 0, 0, 6027, 6028, 5, 351, 0, 0, 6028, 6033, 3, 524, 262, 0, 
		    6029, 6030, 5, 1135, 0, 0, 6030, 6032, 3, 524, 262, 0, 6031, 6029, 
		    1, 0, 0, 0, 6032, 6035, 1, 0, 0, 0, 6033, 6031, 1, 0, 0, 0, 6033, 
		    6034, 1, 0, 0, 0, 6034, 513, 1, 0, 0, 0, 6035, 6033, 1, 0, 0, 0, 6036, 
		    6037, 5, 589, 0, 0, 6037, 6038, 5, 567, 0, 0, 6038, 6039, 5, 351, 
		    0, 0, 6039, 515, 1, 0, 0, 0, 6040, 6041, 5, 739, 0, 0, 6041, 517, 
		    1, 0, 0, 0, 6042, 6050, 3, 552, 276, 0, 6043, 6045, 7, 20, 0, 0, 6044, 
		    6043, 1, 0, 0, 0, 6044, 6045, 1, 0, 0, 0, 6045, 6046, 1, 0, 0, 0, 
		    6046, 6047, 5, 1133, 0, 0, 6047, 6048, 3, 616, 308, 0, 6048, 6049, 
		    5, 1134, 0, 0, 6049, 6051, 1, 0, 0, 0, 6050, 6044, 1, 0, 0, 0, 6050, 
		    6051, 1, 0, 0, 0, 6051, 519, 1, 0, 0, 0, 6052, 6071, 5, 394, 0, 0, 
		    6053, 6071, 5, 447, 0, 0, 6054, 6056, 7, 86, 0, 0, 6055, 6054, 1, 
		    0, 0, 0, 6055, 6056, 1, 0, 0, 0, 6056, 6057, 1, 0, 0, 0, 6057, 6071, 
		    5, 476, 0, 0, 6058, 6071, 5, 540, 0, 0, 6059, 6071, 5, 725, 0, 0, 
		    6060, 6061, 5, 567, 0, 0, 6061, 6071, 5, 351, 0, 0, 6062, 6071, 5, 
		    634, 0, 0, 6063, 6071, 5, 667, 0, 0, 6064, 6068, 5, 742, 0, 0, 6065, 
		    6066, 5, 192, 0, 0, 6066, 6067, 5, 134, 0, 0, 6067, 6069, 5, 103, 
		    0, 0, 6068, 6065, 1, 0, 0, 0, 6068, 6069, 1, 0, 0, 0, 6069, 6071, 
		    1, 0, 0, 0, 6070, 6052, 1, 0, 0, 0, 6070, 6053, 1, 0, 0, 0, 6070, 
		    6055, 1, 0, 0, 0, 6070, 6058, 1, 0, 0, 0, 6070, 6059, 1, 0, 0, 0, 
		    6070, 6060, 1, 0, 0, 0, 6070, 6062, 1, 0, 0, 0, 6070, 6063, 1, 0, 
		    0, 0, 6070, 6064, 1, 0, 0, 0, 6071, 6085, 1, 0, 0, 0, 6072, 6073, 
		    5, 574, 0, 0, 6073, 6075, 5, 476, 0, 0, 6074, 6076, 3, 356, 178, 0, 
		    6075, 6074, 1, 0, 0, 0, 6075, 6076, 1, 0, 0, 0, 6076, 6085, 1, 0, 
		    0, 0, 6077, 6079, 7, 54, 0, 0, 6078, 6080, 3, 620, 310, 0, 6079, 6078, 
		    1, 0, 0, 0, 6079, 6080, 1, 0, 0, 0, 6080, 6082, 1, 0, 0, 0, 6081, 
		    6083, 3, 522, 261, 0, 6082, 6081, 1, 0, 0, 0, 6082, 6083, 1, 0, 0, 
		    0, 6083, 6085, 1, 0, 0, 0, 6084, 6070, 1, 0, 0, 0, 6084, 6072, 1, 
		    0, 0, 0, 6084, 6077, 1, 0, 0, 0, 6085, 521, 1, 0, 0, 0, 6086, 6087, 
		    5, 192, 0, 0, 6087, 6088, 5, 134, 0, 0, 6088, 6092, 5, 103, 0, 0, 
		    6089, 6090, 5, 65, 0, 0, 6090, 6092, 5, 421, 0, 0, 6091, 6086, 1, 
		    0, 0, 0, 6091, 6089, 1, 0, 0, 0, 6092, 523, 1, 0, 0, 0, 6093, 6101, 
		    3, 552, 276, 0, 6094, 6095, 5, 129, 0, 0, 6095, 6098, 5, 1133, 0, 
		    0, 6096, 6099, 3, 616, 308, 0, 6097, 6099, 5, 6, 0, 0, 6098, 6096, 
		    1, 0, 0, 0, 6098, 6097, 1, 0, 0, 0, 6099, 6100, 1, 0, 0, 0, 6100, 
		    6102, 5, 1134, 0, 0, 6101, 6094, 1, 0, 0, 0, 6101, 6102, 1, 0, 0, 
		    0, 6102, 6110, 1, 0, 0, 0, 6103, 6105, 7, 20, 0, 0, 6104, 6103, 1, 
		    0, 0, 0, 6104, 6105, 1, 0, 0, 0, 6105, 6106, 1, 0, 0, 0, 6106, 6107, 
		    5, 1133, 0, 0, 6107, 6108, 3, 616, 308, 0, 6108, 6109, 5, 1134, 0, 
		    0, 6109, 6111, 1, 0, 0, 0, 6110, 6104, 1, 0, 0, 0, 6110, 6111, 1, 
		    0, 0, 0, 6111, 6114, 1, 0, 0, 0, 6112, 6113, 5, 78, 0, 0, 6113, 6115, 
		    5, 470, 0, 0, 6114, 6112, 1, 0, 0, 0, 6114, 6115, 1, 0, 0, 0, 6115, 
		    525, 1, 0, 0, 0, 6116, 6117, 7, 87, 0, 0, 6117, 6120, 3, 552, 276, 
		    0, 6118, 6121, 3, 584, 292, 0, 6119, 6121, 5, 1148, 0, 0, 6120, 6118, 
		    1, 0, 0, 0, 6120, 6119, 1, 0, 0, 0, 6120, 6121, 1, 0, 0, 0, 6121, 
		    527, 1, 0, 0, 0, 6122, 6126, 7, 87, 0, 0, 6123, 6124, 7, 88, 0, 0, 
		    6124, 6125, 5, 1124, 0, 0, 6125, 6127, 7, 89, 0, 0, 6126, 6123, 1, 
		    0, 0, 0, 6126, 6127, 1, 0, 0, 0, 6127, 6128, 1, 0, 0, 0, 6128, 6129, 
		    3, 548, 274, 0, 6129, 529, 1, 0, 0, 0, 6130, 6131, 5, 444, 0, 0, 6131, 
		    6132, 5, 1148, 0, 0, 6132, 531, 1, 0, 0, 0, 6133, 6134, 5, 186, 0, 
		    0, 6134, 6135, 3, 584, 292, 0, 6135, 533, 1, 0, 0, 0, 6136, 6144, 
		    5, 156, 0, 0, 6137, 6139, 5, 162, 0, 0, 6138, 6140, 5, 669, 0, 0, 
		    6139, 6138, 1, 0, 0, 0, 6139, 6140, 1, 0, 0, 0, 6140, 6141, 1, 0, 
		    0, 0, 6141, 6145, 3, 594, 297, 0, 6142, 6145, 5, 1156, 0, 0, 6143, 
		    6145, 5, 1157, 0, 0, 6144, 6137, 1, 0, 0, 0, 6144, 6142, 1, 0, 0, 
		    0, 6144, 6143, 1, 0, 0, 0, 6145, 6155, 1, 0, 0, 0, 6146, 6147, 5, 
		    153, 0, 0, 6147, 6152, 3, 538, 269, 0, 6148, 6149, 5, 1135, 0, 0, 
		    6149, 6151, 3, 538, 269, 0, 6150, 6148, 1, 0, 0, 0, 6151, 6154, 1, 
		    0, 0, 0, 6152, 6150, 1, 0, 0, 0, 6152, 6153, 1, 0, 0, 0, 6153, 6156, 
		    1, 0, 0, 0, 6154, 6152, 1, 0, 0, 0, 6155, 6146, 1, 0, 0, 0, 6155, 
		    6156, 1, 0, 0, 0, 6156, 535, 1, 0, 0, 0, 6157, 6165, 5, 143, 0, 0, 
		    6158, 6160, 5, 162, 0, 0, 6159, 6161, 5, 669, 0, 0, 6160, 6159, 1, 
		    0, 0, 0, 6160, 6161, 1, 0, 0, 0, 6161, 6162, 1, 0, 0, 0, 6162, 6166, 
		    3, 594, 297, 0, 6163, 6166, 5, 1156, 0, 0, 6164, 6166, 5, 1157, 0, 
		    0, 6165, 6158, 1, 0, 0, 0, 6165, 6163, 1, 0, 0, 0, 6165, 6164, 1, 
		    0, 0, 0, 6165, 6166, 1, 0, 0, 0, 6166, 6176, 1, 0, 0, 0, 6167, 6168, 
		    5, 153, 0, 0, 6168, 6173, 3, 538, 269, 0, 6169, 6170, 5, 1135, 0, 
		    0, 6170, 6172, 3, 538, 269, 0, 6171, 6169, 1, 0, 0, 0, 6172, 6175, 
		    1, 0, 0, 0, 6173, 6171, 1, 0, 0, 0, 6173, 6174, 1, 0, 0, 0, 6174, 
		    6177, 1, 0, 0, 0, 6175, 6173, 1, 0, 0, 0, 6176, 6167, 1, 0, 0, 0, 
		    6176, 6177, 1, 0, 0, 0, 6177, 537, 1, 0, 0, 0, 6178, 6179, 7, 90, 
		    0, 0, 6179, 6184, 5, 1124, 0, 0, 6180, 6185, 3, 594, 297, 0, 6181, 
		    6185, 5, 1149, 0, 0, 6182, 6185, 3, 566, 283, 0, 6183, 6185, 3, 586, 
		    293, 0, 6184, 6180, 1, 0, 0, 0, 6184, 6181, 1, 0, 0, 0, 6184, 6182, 
		    1, 0, 0, 0, 6184, 6183, 1, 0, 0, 0, 6185, 539, 1, 0, 0, 0, 6186, 6188, 
		    5, 192, 0, 0, 6187, 6189, 5, 571, 0, 0, 6188, 6187, 1, 0, 0, 0, 6188, 
		    6189, 1, 0, 0, 0, 6189, 6190, 1, 0, 0, 0, 6190, 6195, 3, 50, 25, 0, 
		    6191, 6192, 5, 1135, 0, 0, 6192, 6194, 3, 50, 25, 0, 6193, 6191, 1, 
		    0, 0, 0, 6194, 6197, 1, 0, 0, 0, 6195, 6193, 1, 0, 0, 0, 6195, 6196, 
		    1, 0, 0, 0, 6196, 541, 1, 0, 0, 0, 6197, 6195, 1, 0, 0, 0, 6198, 6199, 
		    5, 172, 0, 0, 6199, 6201, 3, 552, 276, 0, 6200, 6202, 3, 230, 115, 
		    0, 6201, 6200, 1, 0, 0, 0, 6201, 6202, 1, 0, 0, 0, 6202, 6204, 1, 
		    0, 0, 0, 6203, 6205, 3, 294, 147, 0, 6204, 6203, 1, 0, 0, 0, 6204, 
		    6205, 1, 0, 0, 0, 6205, 543, 1, 0, 0, 0, 6206, 6208, 5, 71, 0, 0, 
		    6207, 6209, 7, 91, 0, 0, 6208, 6207, 1, 0, 0, 0, 6208, 6209, 1, 0, 
		    0, 0, 6209, 6210, 1, 0, 0, 0, 6210, 6242, 5, 48, 0, 0, 6211, 6212, 
		    3, 492, 246, 0, 6212, 6213, 5, 1124, 0, 0, 6213, 6221, 7, 92, 0, 0, 
		    6214, 6215, 5, 1135, 0, 0, 6215, 6216, 3, 492, 246, 0, 6216, 6217, 
		    5, 1124, 0, 0, 6217, 6218, 7, 92, 0, 0, 6218, 6220, 1, 0, 0, 0, 6219, 
		    6214, 1, 0, 0, 0, 6220, 6223, 1, 0, 0, 0, 6221, 6219, 1, 0, 0, 0, 
		    6221, 6222, 1, 0, 0, 0, 6222, 6243, 1, 0, 0, 0, 6223, 6221, 1, 0, 
		    0, 0, 6224, 6227, 5, 29, 0, 0, 6225, 6228, 3, 590, 295, 0, 6226, 6228, 
		    3, 492, 246, 0, 6227, 6225, 1, 0, 0, 0, 6227, 6226, 1, 0, 0, 0, 6228, 
		    6229, 1, 0, 0, 0, 6229, 6230, 3, 492, 246, 0, 6230, 6231, 5, 1124, 
		    0, 0, 6231, 6239, 3, 546, 273, 0, 6232, 6233, 5, 1135, 0, 0, 6233, 
		    6234, 3, 492, 246, 0, 6234, 6235, 5, 1124, 0, 0, 6235, 6236, 3, 546, 
		    273, 0, 6236, 6238, 1, 0, 0, 0, 6237, 6232, 1, 0, 0, 0, 6238, 6241, 
		    1, 0, 0, 0, 6239, 6237, 1, 0, 0, 0, 6239, 6240, 1, 0, 0, 0, 6240, 
		    6243, 1, 0, 0, 0, 6241, 6239, 1, 0, 0, 0, 6242, 6211, 1, 0, 0, 0, 
		    6242, 6224, 1, 0, 0, 0, 6243, 545, 1, 0, 0, 0, 6244, 6245, 7, 93, 
		    0, 0, 6245, 547, 1, 0, 0, 0, 6246, 6252, 3, 200, 100, 0, 6247, 6252, 
		    3, 186, 93, 0, 6248, 6252, 3, 192, 96, 0, 6249, 6252, 3, 198, 99, 
		    0, 6250, 6252, 3, 202, 101, 0, 6251, 6246, 1, 0, 0, 0, 6251, 6247, 
		    1, 0, 0, 0, 6251, 6248, 1, 0, 0, 0, 6251, 6249, 1, 0, 0, 0, 6251, 
		    6250, 1, 0, 0, 0, 6252, 6257, 1, 0, 0, 0, 6253, 6254, 5, 65, 0, 0, 
		    6254, 6255, 5, 376, 0, 0, 6255, 6257, 3, 584, 292, 0, 6256, 6251, 
		    1, 0, 0, 0, 6256, 6253, 1, 0, 0, 0, 6257, 549, 1, 0, 0, 0, 6258, 6262, 
		    3, 584, 292, 0, 6259, 6263, 5, 1155, 0, 0, 6260, 6261, 5, 1132, 0, 
		    0, 6261, 6263, 3, 584, 292, 0, 6262, 6259, 1, 0, 0, 0, 6262, 6260, 
		    1, 0, 0, 0, 6262, 6263, 1, 0, 0, 0, 6263, 551, 1, 0, 0, 0, 6264, 6265, 
		    3, 550, 275, 0, 6265, 553, 1, 0, 0, 0, 6266, 6269, 3, 564, 282, 0, 
		    6267, 6269, 3, 584, 292, 0, 6268, 6266, 1, 0, 0, 0, 6268, 6267, 1, 
		    0, 0, 0, 6269, 555, 1, 0, 0, 0, 6270, 6275, 3, 584, 292, 0, 6271, 
		    6273, 3, 588, 294, 0, 6272, 6274, 3, 588, 294, 0, 6273, 6272, 1, 0, 
		    0, 0, 6273, 6274, 1, 0, 0, 0, 6274, 6276, 1, 0, 0, 0, 6275, 6271, 
		    1, 0, 0, 0, 6275, 6276, 1, 0, 0, 0, 6276, 6285, 1, 0, 0, 0, 6277, 
		    6279, 9, 0, 0, 0, 6278, 6277, 1, 0, 0, 0, 6278, 6279, 1, 0, 0, 0, 
		    6279, 6280, 1, 0, 0, 0, 6280, 6282, 3, 588, 294, 0, 6281, 6283, 3, 
		    588, 294, 0, 6282, 6281, 1, 0, 0, 0, 6282, 6283, 1, 0, 0, 0, 6283, 
		    6285, 1, 0, 0, 0, 6284, 6270, 1, 0, 0, 0, 6284, 6278, 1, 0, 0, 0, 
		    6285, 557, 1, 0, 0, 0, 6286, 6289, 3, 584, 292, 0, 6287, 6289, 5, 
		    1148, 0, 0, 6288, 6286, 1, 0, 0, 0, 6288, 6287, 1, 0, 0, 0, 6289, 
		    6294, 1, 0, 0, 0, 6290, 6291, 5, 1133, 0, 0, 6291, 6292, 3, 590, 295, 
		    0, 6292, 6293, 5, 1134, 0, 0, 6293, 6295, 1, 0, 0, 0, 6294, 6290, 
		    1, 0, 0, 0, 6294, 6295, 1, 0, 0, 0, 6295, 6298, 1, 0, 0, 0, 6296, 
		    6298, 3, 688, 344, 0, 6297, 6288, 1, 0, 0, 0, 6297, 6296, 1, 0, 0, 
		    0, 6298, 6300, 1, 0, 0, 0, 6299, 6301, 7, 48, 0, 0, 6300, 6299, 1, 
		    0, 0, 0, 6300, 6301, 1, 0, 0, 0, 6301, 559, 1, 0, 0, 0, 6302, 6307, 
		    5, 1148, 0, 0, 6303, 6307, 5, 1156, 0, 0, 6304, 6307, 5, 697, 0, 0, 
		    6305, 6307, 3, 718, 359, 0, 6306, 6302, 1, 0, 0, 0, 6306, 6303, 1, 
		    0, 0, 0, 6306, 6304, 1, 0, 0, 0, 6306, 6305, 1, 0, 0, 0, 6307, 561, 
		    1, 0, 0, 0, 6308, 6309, 7, 94, 0, 0, 6309, 563, 1, 0, 0, 0, 6310, 
		    6316, 3, 560, 280, 0, 6311, 6312, 3, 560, 280, 0, 6312, 6313, 3, 562, 
		    281, 0, 6313, 6316, 1, 0, 0, 0, 6314, 6316, 3, 62, 31, 0, 6315, 6310, 
		    1, 0, 0, 0, 6315, 6311, 1, 0, 0, 0, 6315, 6314, 1, 0, 0, 0, 6316, 
		    565, 1, 0, 0, 0, 6317, 6318, 7, 95, 0, 0, 6318, 567, 1, 0, 0, 0, 6319, 
		    6324, 5, 226, 0, 0, 6320, 6324, 3, 708, 354, 0, 6321, 6324, 5, 1148, 
		    0, 0, 6322, 6324, 5, 1145, 0, 0, 6323, 6319, 1, 0, 0, 0, 6323, 6320, 
		    1, 0, 0, 0, 6323, 6321, 1, 0, 0, 0, 6323, 6322, 1, 0, 0, 0, 6324, 
		    569, 1, 0, 0, 0, 6325, 6328, 3, 584, 292, 0, 6326, 6328, 5, 1148, 
		    0, 0, 6327, 6325, 1, 0, 0, 0, 6327, 6326, 1, 0, 0, 0, 6328, 571, 1, 
		    0, 0, 0, 6329, 6333, 3, 574, 287, 0, 6330, 6333, 5, 1156, 0, 0, 6331, 
		    6333, 5, 1148, 0, 0, 6332, 6329, 1, 0, 0, 0, 6332, 6330, 1, 0, 0, 
		    0, 6332, 6331, 1, 0, 0, 0, 6333, 573, 1, 0, 0, 0, 6334, 6335, 7, 96, 
		    0, 0, 6335, 575, 1, 0, 0, 0, 6336, 6337, 3, 590, 295, 0, 6337, 6338, 
		    5, 1121, 0, 0, 6338, 6339, 3, 590, 295, 0, 6339, 6340, 5, 1121, 0, 
		    0, 6340, 6341, 3, 590, 295, 0, 6341, 6342, 5, 1121, 0, 0, 6342, 6343, 
		    3, 590, 295, 0, 6343, 6344, 5, 1121, 0, 0, 6344, 6350, 3, 590, 295, 
		    0, 6345, 6346, 5, 1144, 0, 0, 6346, 6347, 3, 590, 295, 0, 6347, 6348, 
		    5, 1121, 0, 0, 6348, 6349, 3, 590, 295, 0, 6349, 6351, 1, 0, 0, 0, 
		    6350, 6345, 1, 0, 0, 0, 6351, 6352, 1, 0, 0, 0, 6352, 6350, 1, 0, 
		    0, 0, 6352, 6353, 1, 0, 0, 0, 6353, 577, 1, 0, 0, 0, 6354, 6361, 3, 
		    580, 290, 0, 6355, 6356, 5, 1135, 0, 0, 6356, 6359, 3, 580, 290, 0, 
		    6357, 6358, 5, 1135, 0, 0, 6358, 6360, 3, 590, 295, 0, 6359, 6357, 
		    1, 0, 0, 0, 6359, 6360, 1, 0, 0, 0, 6360, 6362, 1, 0, 0, 0, 6361, 
		    6355, 1, 0, 0, 0, 6361, 6362, 1, 0, 0, 0, 6362, 579, 1, 0, 0, 0, 6363, 
		    6371, 5, 1148, 0, 0, 6364, 6371, 5, 1153, 0, 0, 6365, 6367, 5, 1150, 
		    0, 0, 6366, 6365, 1, 0, 0, 0, 6367, 6368, 1, 0, 0, 0, 6368, 6366, 
		    1, 0, 0, 0, 6368, 6369, 1, 0, 0, 0, 6369, 6371, 1, 0, 0, 0, 6370, 
		    6363, 1, 0, 0, 0, 6370, 6364, 1, 0, 0, 0, 6370, 6366, 1, 0, 0, 0, 
		    6371, 581, 1, 0, 0, 0, 6372, 6375, 3, 584, 292, 0, 6373, 6375, 5, 
		    1148, 0, 0, 6374, 6372, 1, 0, 0, 0, 6374, 6373, 1, 0, 0, 0, 6375, 
		    583, 1, 0, 0, 0, 6376, 6380, 3, 586, 293, 0, 6377, 6380, 5, 1145, 
		    0, 0, 6378, 6380, 5, 1148, 0, 0, 6379, 6376, 1, 0, 0, 0, 6379, 6377, 
		    1, 0, 0, 0, 6379, 6378, 1, 0, 0, 0, 6380, 585, 1, 0, 0, 0, 6381, 6391, 
		    5, 1156, 0, 0, 6382, 6391, 3, 708, 354, 0, 6383, 6391, 3, 710, 355, 
		    0, 6384, 6391, 3, 574, 287, 0, 6385, 6391, 3, 712, 356, 0, 6386, 6391, 
		    3, 714, 357, 0, 6387, 6391, 3, 716, 358, 0, 6388, 6391, 3, 718, 359, 
		    0, 6389, 6391, 3, 680, 340, 0, 6390, 6381, 1, 0, 0, 0, 6390, 6382, 
		    1, 0, 0, 0, 6390, 6383, 1, 0, 0, 0, 6390, 6384, 1, 0, 0, 0, 6390, 
		    6385, 1, 0, 0, 0, 6390, 6386, 1, 0, 0, 0, 6390, 6387, 1, 0, 0, 0, 
		    6390, 6388, 1, 0, 0, 0, 6390, 6389, 1, 0, 0, 0, 6391, 587, 1, 0, 0, 
		    0, 6392, 6396, 5, 1155, 0, 0, 6393, 6394, 5, 1132, 0, 0, 6394, 6396, 
		    3, 584, 292, 0, 6395, 6392, 1, 0, 0, 0, 6395, 6393, 1, 0, 0, 0, 6396, 
		    589, 1, 0, 0, 0, 6397, 6398, 7, 97, 0, 0, 6398, 591, 1, 0, 0, 0, 6399, 
		    6402, 5, 1146, 0, 0, 6400, 6402, 3, 590, 295, 0, 6401, 6399, 1, 0, 
		    0, 0, 6401, 6400, 1, 0, 0, 0, 6402, 593, 1, 0, 0, 0, 6403, 6405, 5, 
		    1154, 0, 0, 6404, 6403, 1, 0, 0, 0, 6404, 6405, 1, 0, 0, 0, 6405, 
		    6406, 1, 0, 0, 0, 6406, 6409, 5, 1148, 0, 0, 6407, 6409, 5, 1147, 
		    0, 0, 6408, 6404, 1, 0, 0, 0, 6408, 6407, 1, 0, 0, 0, 6409, 6411, 
		    1, 0, 0, 0, 6410, 6412, 5, 1148, 0, 0, 6411, 6410, 1, 0, 0, 0, 6412, 
		    6413, 1, 0, 0, 0, 6413, 6411, 1, 0, 0, 0, 6413, 6414, 1, 0, 0, 0, 
		    6414, 6427, 1, 0, 0, 0, 6415, 6417, 5, 1154, 0, 0, 6416, 6415, 1, 
		    0, 0, 0, 6416, 6417, 1, 0, 0, 0, 6417, 6418, 1, 0, 0, 0, 6418, 6421, 
		    5, 1148, 0, 0, 6419, 6421, 5, 1147, 0, 0, 6420, 6416, 1, 0, 0, 0, 
		    6420, 6419, 1, 0, 0, 0, 6421, 6424, 1, 0, 0, 0, 6422, 6423, 5, 27, 
		    0, 0, 6423, 6425, 3, 570, 285, 0, 6424, 6422, 1, 0, 0, 0, 6424, 6425, 
		    1, 0, 0, 0, 6425, 6427, 1, 0, 0, 0, 6426, 6408, 1, 0, 0, 0, 6426, 
		    6420, 1, 0, 0, 0, 6427, 595, 1, 0, 0, 0, 6428, 6429, 7, 98, 0, 0, 
		    6429, 597, 1, 0, 0, 0, 6430, 6432, 5, 1154, 0, 0, 6431, 6430, 1, 0, 
		    0, 0, 6431, 6432, 1, 0, 0, 0, 6432, 6433, 1, 0, 0, 0, 6433, 6434, 
		    5, 1150, 0, 0, 6434, 599, 1, 0, 0, 0, 6435, 6437, 5, 114, 0, 0, 6436, 
		    6435, 1, 0, 0, 0, 6436, 6437, 1, 0, 0, 0, 6437, 6438, 1, 0, 0, 0, 
		    6438, 6439, 7, 99, 0, 0, 6439, 601, 1, 0, 0, 0, 6440, 6453, 3, 594, 
		    297, 0, 6441, 6453, 3, 590, 295, 0, 6442, 6443, 5, 1121, 0, 0, 6443, 
		    6453, 3, 590, 295, 0, 6444, 6453, 3, 598, 299, 0, 6445, 6453, 3, 596, 
		    298, 0, 6446, 6453, 5, 1151, 0, 0, 6447, 6453, 5, 1153, 0, 0, 6448, 
		    6450, 5, 114, 0, 0, 6449, 6448, 1, 0, 0, 0, 6449, 6450, 1, 0, 0, 0, 
		    6450, 6451, 1, 0, 0, 0, 6451, 6453, 7, 99, 0, 0, 6452, 6440, 1, 0, 
		    0, 0, 6452, 6441, 1, 0, 0, 0, 6452, 6442, 1, 0, 0, 0, 6452, 6444, 
		    1, 0, 0, 0, 6452, 6445, 1, 0, 0, 0, 6452, 6446, 1, 0, 0, 0, 6452, 
		    6447, 1, 0, 0, 0, 6452, 6449, 1, 0, 0, 0, 6453, 603, 1, 0, 0, 0, 6454, 
		    6456, 7, 100, 0, 0, 6455, 6457, 5, 238, 0, 0, 6456, 6455, 1, 0, 0, 
		    0, 6456, 6457, 1, 0, 0, 0, 6457, 6459, 1, 0, 0, 0, 6458, 6460, 3, 
		    610, 305, 0, 6459, 6458, 1, 0, 0, 0, 6459, 6460, 1, 0, 0, 0, 6460, 
		    6462, 1, 0, 0, 0, 6461, 6463, 5, 226, 0, 0, 6462, 6461, 1, 0, 0, 0, 
		    6462, 6463, 1, 0, 0, 0, 6463, 6467, 1, 0, 0, 0, 6464, 6465, 3, 60, 
		    30, 0, 6465, 6466, 3, 568, 284, 0, 6466, 6468, 1, 0, 0, 0, 6467, 6464, 
		    1, 0, 0, 0, 6467, 6468, 1, 0, 0, 0, 6468, 6472, 1, 0, 0, 0, 6469, 
		    6470, 5, 27, 0, 0, 6470, 6473, 3, 570, 285, 0, 6471, 6473, 5, 226, 
		    0, 0, 6472, 6469, 1, 0, 0, 0, 6472, 6471, 1, 0, 0, 0, 6472, 6473, 
		    1, 0, 0, 0, 6473, 6581, 1, 0, 0, 0, 6474, 6475, 5, 225, 0, 0, 6475, 
		    6476, 7, 101, 0, 0, 6476, 6478, 5, 238, 0, 0, 6477, 6479, 3, 610, 
		    305, 0, 6478, 6477, 1, 0, 0, 0, 6478, 6479, 1, 0, 0, 0, 6479, 6481, 
		    1, 0, 0, 0, 6480, 6482, 5, 226, 0, 0, 6481, 6480, 1, 0, 0, 0, 6481, 
		    6482, 1, 0, 0, 0, 6482, 6581, 1, 0, 0, 0, 6483, 6484, 5, 225, 0, 0, 
		    6484, 6486, 7, 102, 0, 0, 6485, 6487, 3, 610, 305, 0, 6486, 6485, 
		    1, 0, 0, 0, 6486, 6487, 1, 0, 0, 0, 6487, 6489, 1, 0, 0, 0, 6488, 
		    6490, 5, 226, 0, 0, 6489, 6488, 1, 0, 0, 0, 6489, 6490, 1, 0, 0, 0, 
		    6490, 6581, 1, 0, 0, 0, 6491, 6492, 5, 518, 0, 0, 6492, 6494, 5, 223, 
		    0, 0, 6493, 6495, 3, 610, 305, 0, 6494, 6493, 1, 0, 0, 0, 6494, 6495, 
		    1, 0, 0, 0, 6495, 6497, 1, 0, 0, 0, 6496, 6498, 5, 226, 0, 0, 6497, 
		    6496, 1, 0, 0, 0, 6497, 6498, 1, 0, 0, 0, 6498, 6581, 1, 0, 0, 0, 
		    6499, 6501, 7, 103, 0, 0, 6500, 6502, 3, 610, 305, 0, 6501, 6500, 
		    1, 0, 0, 0, 6501, 6502, 1, 0, 0, 0, 6502, 6506, 1, 0, 0, 0, 6503, 
		    6505, 7, 104, 0, 0, 6504, 6503, 1, 0, 0, 0, 6505, 6508, 1, 0, 0, 0, 
		    6506, 6504, 1, 0, 0, 0, 6506, 6507, 1, 0, 0, 0, 6507, 6581, 1, 0, 
		    0, 0, 6508, 6506, 1, 0, 0, 0, 6509, 6511, 5, 208, 0, 0, 6510, 6512, 
		    3, 612, 306, 0, 6511, 6510, 1, 0, 0, 0, 6511, 6512, 1, 0, 0, 0, 6512, 
		    6516, 1, 0, 0, 0, 6513, 6515, 7, 104, 0, 0, 6514, 6513, 1, 0, 0, 0, 
		    6515, 6518, 1, 0, 0, 0, 6516, 6514, 1, 0, 0, 0, 6516, 6517, 1, 0, 
		    0, 0, 6517, 6581, 1, 0, 0, 0, 6518, 6516, 1, 0, 0, 0, 6519, 6521, 
		    5, 209, 0, 0, 6520, 6522, 5, 210, 0, 0, 6521, 6520, 1, 0, 0, 0, 6521, 
		    6522, 1, 0, 0, 0, 6522, 6524, 1, 0, 0, 0, 6523, 6525, 3, 612, 306, 
		    0, 6524, 6523, 1, 0, 0, 0, 6524, 6525, 1, 0, 0, 0, 6525, 6529, 1, 
		    0, 0, 0, 6526, 6528, 7, 104, 0, 0, 6527, 6526, 1, 0, 0, 0, 6528, 6531, 
		    1, 0, 0, 0, 6529, 6527, 1, 0, 0, 0, 6529, 6530, 1, 0, 0, 0, 6530, 
		    6581, 1, 0, 0, 0, 6531, 6529, 1, 0, 0, 0, 6532, 6534, 7, 105, 0, 0, 
		    6533, 6535, 3, 614, 307, 0, 6534, 6533, 1, 0, 0, 0, 6534, 6535, 1, 
		    0, 0, 0, 6535, 6539, 1, 0, 0, 0, 6536, 6538, 7, 104, 0, 0, 6537, 6536, 
		    1, 0, 0, 0, 6538, 6541, 1, 0, 0, 0, 6539, 6537, 1, 0, 0, 0, 6539, 
		    6540, 1, 0, 0, 0, 6540, 6581, 1, 0, 0, 0, 6541, 6539, 1, 0, 0, 0, 
		    6542, 6581, 7, 106, 0, 0, 6543, 6545, 7, 107, 0, 0, 6544, 6546, 3, 
		    610, 305, 0, 6545, 6544, 1, 0, 0, 0, 6545, 6546, 1, 0, 0, 0, 6546, 
		    6581, 1, 0, 0, 0, 6547, 6548, 7, 108, 0, 0, 6548, 6550, 3, 606, 303, 
		    0, 6549, 6551, 5, 226, 0, 0, 6550, 6549, 1, 0, 0, 0, 6550, 6551, 1, 
		    0, 0, 0, 6551, 6555, 1, 0, 0, 0, 6552, 6553, 3, 60, 30, 0, 6553, 6554, 
		    3, 568, 284, 0, 6554, 6556, 1, 0, 0, 0, 6555, 6552, 1, 0, 0, 0, 6555, 
		    6556, 1, 0, 0, 0, 6556, 6581, 1, 0, 0, 0, 6557, 6560, 7, 109, 0, 0, 
		    6558, 6559, 5, 1012, 0, 0, 6559, 6561, 3, 590, 295, 0, 6560, 6558, 
		    1, 0, 0, 0, 6560, 6561, 1, 0, 0, 0, 6561, 6581, 1, 0, 0, 0, 6562, 
		    6564, 5, 231, 0, 0, 6563, 6565, 5, 223, 0, 0, 6564, 6563, 1, 0, 0, 
		    0, 6564, 6565, 1, 0, 0, 0, 6565, 6567, 1, 0, 0, 0, 6566, 6568, 5, 
		    226, 0, 0, 6567, 6566, 1, 0, 0, 0, 6567, 6568, 1, 0, 0, 0, 6568, 6572, 
		    1, 0, 0, 0, 6569, 6570, 3, 60, 30, 0, 6570, 6571, 3, 568, 284, 0, 
		    6571, 6573, 1, 0, 0, 0, 6572, 6569, 1, 0, 0, 0, 6572, 6573, 1, 0, 
		    0, 0, 6573, 6576, 1, 0, 0, 0, 6574, 6575, 5, 27, 0, 0, 6575, 6577, 
		    3, 570, 285, 0, 6576, 6574, 1, 0, 0, 0, 6576, 6577, 1, 0, 0, 0, 6577, 
		    6581, 1, 0, 0, 0, 6578, 6579, 5, 231, 0, 0, 6579, 6581, 5, 227, 0, 
		    0, 6580, 6454, 1, 0, 0, 0, 6580, 6474, 1, 0, 0, 0, 6580, 6483, 1, 
		    0, 0, 0, 6580, 6491, 1, 0, 0, 0, 6580, 6499, 1, 0, 0, 0, 6580, 6509, 
		    1, 0, 0, 0, 6580, 6519, 1, 0, 0, 0, 6580, 6532, 1, 0, 0, 0, 6580, 
		    6542, 1, 0, 0, 0, 6580, 6543, 1, 0, 0, 0, 6580, 6547, 1, 0, 0, 0, 
		    6580, 6557, 1, 0, 0, 0, 6580, 6562, 1, 0, 0, 0, 6580, 6578, 1, 0, 
		    0, 0, 6581, 605, 1, 0, 0, 0, 6582, 6583, 5, 1133, 0, 0, 6583, 6588, 
		    5, 1148, 0, 0, 6584, 6585, 5, 1135, 0, 0, 6585, 6587, 5, 1148, 0, 
		    0, 6586, 6584, 1, 0, 0, 0, 6587, 6590, 1, 0, 0, 0, 6588, 6586, 1, 
		    0, 0, 0, 6588, 6589, 1, 0, 0, 0, 6589, 6591, 1, 0, 0, 0, 6590, 6588, 
		    1, 0, 0, 0, 6591, 6592, 5, 1134, 0, 0, 6592, 607, 1, 0, 0, 0, 6593, 
		    6595, 7, 110, 0, 0, 6594, 6596, 3, 610, 305, 0, 6595, 6594, 1, 0, 
		    0, 0, 6595, 6596, 1, 0, 0, 0, 6596, 6616, 1, 0, 0, 0, 6597, 6599, 
		    5, 222, 0, 0, 6598, 6600, 3, 610, 305, 0, 6599, 6598, 1, 0, 0, 0, 
		    6599, 6600, 1, 0, 0, 0, 6600, 6604, 1, 0, 0, 0, 6601, 6602, 3, 60, 
		    30, 0, 6602, 6603, 3, 568, 284, 0, 6603, 6605, 1, 0, 0, 0, 6604, 6601, 
		    1, 0, 0, 0, 6604, 6605, 1, 0, 0, 0, 6605, 6616, 1, 0, 0, 0, 6606, 
		    6616, 7, 111, 0, 0, 6607, 6609, 7, 112, 0, 0, 6608, 6610, 3, 614, 
		    307, 0, 6609, 6608, 1, 0, 0, 0, 6609, 6610, 1, 0, 0, 0, 6610, 6616, 
		    1, 0, 0, 0, 6611, 6613, 7, 113, 0, 0, 6612, 6614, 7, 114, 0, 0, 6613, 
		    6612, 1, 0, 0, 0, 6613, 6614, 1, 0, 0, 0, 6614, 6616, 1, 0, 0, 0, 
		    6615, 6593, 1, 0, 0, 0, 6615, 6597, 1, 0, 0, 0, 6615, 6606, 1, 0, 
		    0, 0, 6615, 6607, 1, 0, 0, 0, 6615, 6611, 1, 0, 0, 0, 6616, 6618, 
		    1, 0, 0, 0, 6617, 6619, 5, 11, 0, 0, 6618, 6617, 1, 0, 0, 0, 6618, 
		    6619, 1, 0, 0, 0, 6619, 609, 1, 0, 0, 0, 6620, 6621, 5, 1133, 0, 0, 
		    6621, 6622, 3, 590, 295, 0, 6622, 6623, 5, 1134, 0, 0, 6623, 611, 
		    1, 0, 0, 0, 6624, 6625, 5, 1133, 0, 0, 6625, 6626, 3, 590, 295, 0, 
		    6626, 6627, 5, 1135, 0, 0, 6627, 6628, 3, 590, 295, 0, 6628, 6629, 
		    5, 1134, 0, 0, 6629, 613, 1, 0, 0, 0, 6630, 6631, 5, 1133, 0, 0, 6631, 
		    6634, 3, 590, 295, 0, 6632, 6633, 5, 1135, 0, 0, 6633, 6635, 3, 590, 
		    295, 0, 6634, 6632, 1, 0, 0, 0, 6634, 6635, 1, 0, 0, 0, 6635, 6636, 
		    1, 0, 0, 0, 6636, 6637, 5, 1134, 0, 0, 6637, 615, 1, 0, 0, 0, 6638, 
		    6643, 3, 584, 292, 0, 6639, 6640, 5, 1135, 0, 0, 6640, 6642, 3, 584, 
		    292, 0, 6641, 6639, 1, 0, 0, 0, 6642, 6645, 1, 0, 0, 0, 6643, 6641, 
		    1, 0, 0, 0, 6643, 6644, 1, 0, 0, 0, 6644, 617, 1, 0, 0, 0, 6645, 6643, 
		    1, 0, 0, 0, 6646, 6651, 3, 556, 278, 0, 6647, 6648, 5, 1135, 0, 0, 
		    6648, 6650, 3, 556, 278, 0, 6649, 6647, 1, 0, 0, 0, 6650, 6653, 1, 
		    0, 0, 0, 6651, 6649, 1, 0, 0, 0, 6651, 6652, 1, 0, 0, 0, 6652, 619, 
		    1, 0, 0, 0, 6653, 6651, 1, 0, 0, 0, 6654, 6659, 3, 552, 276, 0, 6655, 
		    6656, 5, 1135, 0, 0, 6656, 6658, 3, 552, 276, 0, 6657, 6655, 1, 0, 
		    0, 0, 6658, 6661, 1, 0, 0, 0, 6659, 6657, 1, 0, 0, 0, 6659, 6660, 
		    1, 0, 0, 0, 6660, 621, 1, 0, 0, 0, 6661, 6659, 1, 0, 0, 0, 6662, 6663, 
		    5, 1133, 0, 0, 6663, 6668, 3, 558, 279, 0, 6664, 6665, 5, 1135, 0, 
		    0, 6665, 6667, 3, 558, 279, 0, 6666, 6664, 1, 0, 0, 0, 6667, 6670, 
		    1, 0, 0, 0, 6668, 6666, 1, 0, 0, 0, 6668, 6669, 1, 0, 0, 0, 6669, 
		    6671, 1, 0, 0, 0, 6670, 6668, 1, 0, 0, 0, 6671, 6672, 5, 1134, 0, 
		    0, 6672, 623, 1, 0, 0, 0, 6673, 6678, 3, 688, 344, 0, 6674, 6675, 
		    5, 1135, 0, 0, 6675, 6677, 3, 688, 344, 0, 6676, 6674, 1, 0, 0, 0, 
		    6677, 6680, 1, 0, 0, 0, 6678, 6676, 1, 0, 0, 0, 6678, 6679, 1, 0, 
		    0, 0, 6679, 625, 1, 0, 0, 0, 6680, 6678, 1, 0, 0, 0, 6681, 6686, 3, 
		    638, 319, 0, 6682, 6683, 5, 1135, 0, 0, 6683, 6685, 3, 638, 319, 0, 
		    6684, 6682, 1, 0, 0, 0, 6685, 6688, 1, 0, 0, 0, 6686, 6684, 1, 0, 
		    0, 0, 6686, 6687, 1, 0, 0, 0, 6687, 627, 1, 0, 0, 0, 6688, 6686, 1, 
		    0, 0, 0, 6689, 6694, 3, 602, 301, 0, 6690, 6691, 5, 1135, 0, 0, 6691, 
		    6693, 3, 602, 301, 0, 6692, 6690, 1, 0, 0, 0, 6693, 6696, 1, 0, 0, 
		    0, 6694, 6692, 1, 0, 0, 0, 6694, 6695, 1, 0, 0, 0, 6695, 629, 1, 0, 
		    0, 0, 6696, 6694, 1, 0, 0, 0, 6697, 6702, 5, 1148, 0, 0, 6698, 6699, 
		    5, 1135, 0, 0, 6699, 6701, 5, 1148, 0, 0, 6700, 6698, 1, 0, 0, 0, 
		    6701, 6704, 1, 0, 0, 0, 6702, 6700, 1, 0, 0, 0, 6702, 6703, 1, 0, 
		    0, 0, 6703, 631, 1, 0, 0, 0, 6704, 6702, 1, 0, 0, 0, 6705, 6710, 5, 
		    1159, 0, 0, 6706, 6707, 5, 1135, 0, 0, 6707, 6709, 5, 1159, 0, 0, 
		    6708, 6706, 1, 0, 0, 0, 6709, 6712, 1, 0, 0, 0, 6710, 6708, 1, 0, 
		    0, 0, 6710, 6711, 1, 0, 0, 0, 6711, 633, 1, 0, 0, 0, 6712, 6710, 1, 
		    0, 0, 0, 6713, 6740, 5, 116, 0, 0, 6714, 6715, 5, 23, 0, 0, 6715, 
		    6716, 5, 1133, 0, 0, 6716, 6717, 3, 688, 344, 0, 6717, 6718, 5, 12, 
		    0, 0, 6718, 6719, 3, 608, 304, 0, 6719, 6720, 5, 1134, 0, 0, 6720, 
		    6740, 1, 0, 0, 0, 6721, 6723, 3, 694, 347, 0, 6722, 6721, 1, 0, 0, 
		    0, 6722, 6723, 1, 0, 0, 0, 6723, 6724, 1, 0, 0, 0, 6724, 6740, 3, 
		    602, 301, 0, 6725, 6729, 3, 636, 318, 0, 6726, 6727, 5, 118, 0, 0, 
		    6727, 6728, 5, 184, 0, 0, 6728, 6730, 3, 636, 318, 0, 6729, 6726, 
		    1, 0, 0, 0, 6729, 6730, 1, 0, 0, 0, 6730, 6740, 1, 0, 0, 0, 6731, 
		    6732, 5, 1133, 0, 0, 6732, 6733, 3, 688, 344, 0, 6733, 6734, 5, 1134, 
		    0, 0, 6734, 6740, 1, 0, 0, 0, 6735, 6736, 5, 1133, 0, 0, 6736, 6737, 
		    3, 550, 275, 0, 6737, 6738, 5, 1134, 0, 0, 6738, 6740, 1, 0, 0, 0, 
		    6739, 6713, 1, 0, 0, 0, 6739, 6714, 1, 0, 0, 0, 6739, 6722, 1, 0, 
		    0, 0, 6739, 6725, 1, 0, 0, 0, 6739, 6731, 1, 0, 0, 0, 6739, 6735, 
		    1, 0, 0, 0, 6740, 635, 1, 0, 0, 0, 6741, 6747, 7, 115, 0, 0, 6742, 
		    6744, 5, 1133, 0, 0, 6743, 6745, 3, 590, 295, 0, 6744, 6743, 1, 0, 
		    0, 0, 6744, 6745, 1, 0, 0, 0, 6745, 6746, 1, 0, 0, 0, 6746, 6748, 
		    5, 1134, 0, 0, 6747, 6742, 1, 0, 0, 0, 6747, 6748, 1, 0, 0, 0, 6748, 
		    6756, 1, 0, 0, 0, 6749, 6750, 5, 323, 0, 0, 6750, 6752, 5, 1133, 0, 
		    0, 6751, 6753, 3, 590, 295, 0, 6752, 6751, 1, 0, 0, 0, 6752, 6753, 
		    1, 0, 0, 0, 6753, 6754, 1, 0, 0, 0, 6754, 6756, 5, 1134, 0, 0, 6755, 
		    6741, 1, 0, 0, 0, 6755, 6749, 1, 0, 0, 0, 6756, 637, 1, 0, 0, 0, 6757, 
		    6760, 3, 688, 344, 0, 6758, 6760, 5, 42, 0, 0, 6759, 6757, 1, 0, 0, 
		    0, 6759, 6758, 1, 0, 0, 0, 6760, 639, 1, 0, 0, 0, 6761, 6762, 5, 77, 
		    0, 0, 6762, 6763, 5, 60, 0, 0, 6763, 641, 1, 0, 0, 0, 6764, 6765, 
		    5, 77, 0, 0, 6765, 6766, 5, 114, 0, 0, 6766, 6767, 5, 60, 0, 0, 6767, 
		    643, 1, 0, 0, 0, 6768, 6769, 5, 123, 0, 0, 6769, 6770, 5, 141, 0, 
		    0, 6770, 645, 1, 0, 0, 0, 6771, 6772, 5, 674, 0, 0, 6772, 6775, 3, 
		    590, 295, 0, 6773, 6775, 5, 527, 0, 0, 6774, 6771, 1, 0, 0, 0, 6774, 
		    6773, 1, 0, 0, 0, 6775, 647, 1, 0, 0, 0, 6776, 6795, 3, 650, 325, 
		    0, 6777, 6795, 3, 658, 329, 0, 6778, 6795, 3, 660, 330, 0, 6779, 6780, 
		    3, 680, 340, 0, 6780, 6782, 5, 1133, 0, 0, 6781, 6783, 3, 684, 342, 
		    0, 6782, 6781, 1, 0, 0, 0, 6782, 6783, 1, 0, 0, 0, 6783, 6784, 1, 
		    0, 0, 0, 6784, 6785, 5, 1134, 0, 0, 6785, 6795, 1, 0, 0, 0, 6786, 
		    6787, 3, 550, 275, 0, 6787, 6789, 5, 1133, 0, 0, 6788, 6790, 3, 684, 
		    342, 0, 6789, 6788, 1, 0, 0, 0, 6789, 6790, 1, 0, 0, 0, 6790, 6791, 
		    1, 0, 0, 0, 6791, 6792, 5, 1134, 0, 0, 6792, 6795, 1, 0, 0, 0, 6793, 
		    6795, 3, 682, 341, 0, 6794, 6776, 1, 0, 0, 0, 6794, 6777, 1, 0, 0, 
		    0, 6794, 6778, 1, 0, 0, 0, 6794, 6779, 1, 0, 0, 0, 6794, 6786, 1, 
		    0, 0, 0, 6794, 6793, 1, 0, 0, 0, 6795, 649, 1, 0, 0, 0, 6796, 6799, 
		    7, 116, 0, 0, 6797, 6798, 5, 1133, 0, 0, 6798, 6800, 5, 1134, 0, 0, 
		    6799, 6797, 1, 0, 0, 0, 6799, 6800, 1, 0, 0, 0, 6800, 6976, 1, 0, 
		    0, 0, 6801, 6976, 3, 62, 31, 0, 6802, 6803, 5, 32, 0, 0, 6803, 6804, 
		    5, 1133, 0, 0, 6804, 6805, 3, 688, 344, 0, 6805, 6806, 5, 1135, 0, 
		    0, 6806, 6807, 3, 608, 304, 0, 6807, 6808, 5, 1134, 0, 0, 6808, 6976, 
		    1, 0, 0, 0, 6809, 6810, 5, 32, 0, 0, 6810, 6811, 5, 1133, 0, 0, 6811, 
		    6812, 3, 688, 344, 0, 6812, 6813, 5, 187, 0, 0, 6813, 6814, 3, 568, 
		    284, 0, 6814, 6815, 5, 1134, 0, 0, 6815, 6976, 1, 0, 0, 0, 6816, 6817, 
		    5, 23, 0, 0, 6817, 6818, 5, 1133, 0, 0, 6818, 6819, 3, 688, 344, 0, 
		    6819, 6820, 5, 12, 0, 0, 6820, 6821, 3, 608, 304, 0, 6821, 6822, 5, 
		    1134, 0, 0, 6822, 6976, 1, 0, 0, 0, 6823, 6824, 5, 188, 0, 0, 6824, 
		    6825, 5, 1133, 0, 0, 6825, 6826, 3, 556, 278, 0, 6826, 6827, 5, 1134, 
		    0, 0, 6827, 6976, 1, 0, 0, 0, 6828, 6829, 5, 22, 0, 0, 6829, 6831, 
		    3, 688, 344, 0, 6830, 6832, 3, 652, 326, 0, 6831, 6830, 1, 0, 0, 0, 
		    6832, 6833, 1, 0, 0, 0, 6833, 6831, 1, 0, 0, 0, 6833, 6834, 1, 0, 
		    0, 0, 6834, 6837, 1, 0, 0, 0, 6835, 6836, 5, 53, 0, 0, 6836, 6838, 
		    3, 686, 343, 0, 6837, 6835, 1, 0, 0, 0, 6837, 6838, 1, 0, 0, 0, 6838, 
		    6839, 1, 0, 0, 0, 6839, 6840, 5, 407, 0, 0, 6840, 6976, 1, 0, 0, 0, 
		    6841, 6843, 5, 22, 0, 0, 6842, 6844, 3, 652, 326, 0, 6843, 6842, 1, 
		    0, 0, 0, 6844, 6845, 1, 0, 0, 0, 6845, 6843, 1, 0, 0, 0, 6845, 6846, 
		    1, 0, 0, 0, 6846, 6849, 1, 0, 0, 0, 6847, 6848, 5, 53, 0, 0, 6848, 
		    6850, 3, 686, 343, 0, 6849, 6847, 1, 0, 0, 0, 6849, 6850, 1, 0, 0, 
		    0, 6850, 6851, 1, 0, 0, 0, 6851, 6852, 5, 407, 0, 0, 6852, 6976, 1, 
		    0, 0, 0, 6853, 6854, 5, 222, 0, 0, 6854, 6855, 5, 1133, 0, 0, 6855, 
		    6858, 3, 684, 342, 0, 6856, 6857, 5, 187, 0, 0, 6857, 6859, 3, 568, 
		    284, 0, 6858, 6856, 1, 0, 0, 0, 6858, 6859, 1, 0, 0, 0, 6859, 6860, 
		    1, 0, 0, 0, 6860, 6861, 5, 1134, 0, 0, 6861, 6976, 1, 0, 0, 0, 6862, 
		    6863, 5, 324, 0, 0, 6863, 6866, 5, 1133, 0, 0, 6864, 6867, 3, 594, 
		    297, 0, 6865, 6867, 3, 688, 344, 0, 6866, 6864, 1, 0, 0, 0, 6866, 
		    6865, 1, 0, 0, 0, 6867, 6868, 1, 0, 0, 0, 6868, 6871, 5, 80, 0, 0, 
		    6869, 6872, 3, 594, 297, 0, 6870, 6872, 3, 688, 344, 0, 6871, 6869, 
		    1, 0, 0, 0, 6871, 6870, 1, 0, 0, 0, 6872, 6873, 1, 0, 0, 0, 6873, 
		    6874, 5, 1134, 0, 0, 6874, 6976, 1, 0, 0, 0, 6875, 6876, 7, 117, 0, 
		    0, 6876, 6879, 5, 1133, 0, 0, 6877, 6880, 3, 594, 297, 0, 6878, 6880, 
		    3, 688, 344, 0, 6879, 6877, 1, 0, 0, 0, 6879, 6878, 1, 0, 0, 0, 6880, 
		    6881, 1, 0, 0, 0, 6881, 6884, 5, 68, 0, 0, 6882, 6885, 3, 590, 295, 
		    0, 6883, 6885, 3, 688, 344, 0, 6884, 6882, 1, 0, 0, 0, 6884, 6883, 
		    1, 0, 0, 0, 6885, 6891, 1, 0, 0, 0, 6886, 6889, 5, 65, 0, 0, 6887, 
		    6890, 3, 590, 295, 0, 6888, 6890, 3, 688, 344, 0, 6889, 6887, 1, 0, 
		    0, 0, 6889, 6888, 1, 0, 0, 0, 6890, 6892, 1, 0, 0, 0, 6891, 6886, 
		    1, 0, 0, 0, 6891, 6892, 1, 0, 0, 0, 6892, 6893, 1, 0, 0, 0, 6893, 
		    6894, 5, 1134, 0, 0, 6894, 6976, 1, 0, 0, 0, 6895, 6896, 5, 328, 0, 
		    0, 6896, 6897, 5, 1133, 0, 0, 6897, 6900, 7, 118, 0, 0, 6898, 6901, 
		    3, 594, 297, 0, 6899, 6901, 3, 688, 344, 0, 6900, 6898, 1, 0, 0, 0, 
		    6900, 6899, 1, 0, 0, 0, 6900, 6901, 1, 0, 0, 0, 6901, 6902, 1, 0, 
		    0, 0, 6902, 6905, 5, 68, 0, 0, 6903, 6906, 3, 594, 297, 0, 6904, 6906, 
		    3, 688, 344, 0, 6905, 6903, 1, 0, 0, 0, 6905, 6904, 1, 0, 0, 0, 6906, 
		    6907, 1, 0, 0, 0, 6907, 6908, 5, 1134, 0, 0, 6908, 6976, 1, 0, 0, 
		    0, 6909, 6910, 5, 328, 0, 0, 6910, 6913, 5, 1133, 0, 0, 6911, 6914, 
		    3, 594, 297, 0, 6912, 6914, 3, 688, 344, 0, 6913, 6911, 1, 0, 0, 0, 
		    6913, 6912, 1, 0, 0, 0, 6914, 6915, 1, 0, 0, 0, 6915, 6918, 5, 68, 
		    0, 0, 6916, 6919, 3, 594, 297, 0, 6917, 6919, 3, 688, 344, 0, 6918, 
		    6916, 1, 0, 0, 0, 6918, 6917, 1, 0, 0, 0, 6919, 6920, 1, 0, 0, 0, 
		    6920, 6921, 5, 1134, 0, 0, 6921, 6976, 1, 0, 0, 0, 6922, 6923, 5, 
		    1103, 0, 0, 6923, 6926, 5, 1133, 0, 0, 6924, 6927, 3, 594, 297, 0, 
		    6925, 6927, 3, 688, 344, 0, 6926, 6924, 1, 0, 0, 0, 6926, 6925, 1, 
		    0, 0, 0, 6927, 6934, 1, 0, 0, 0, 6928, 6929, 5, 12, 0, 0, 6929, 6930, 
		    7, 119, 0, 0, 6930, 6931, 5, 1133, 0, 0, 6931, 6932, 3, 590, 295, 
		    0, 6932, 6933, 5, 1134, 0, 0, 6933, 6935, 1, 0, 0, 0, 6934, 6928, 
		    1, 0, 0, 0, 6934, 6935, 1, 0, 0, 0, 6935, 6937, 1, 0, 0, 0, 6936, 
		    6938, 3, 654, 327, 0, 6937, 6936, 1, 0, 0, 0, 6937, 6938, 1, 0, 0, 
		    0, 6938, 6939, 1, 0, 0, 0, 6939, 6940, 5, 1134, 0, 0, 6940, 6976, 
		    1, 0, 0, 0, 6941, 6942, 5, 321, 0, 0, 6942, 6943, 5, 1133, 0, 0, 6943, 
		    6944, 3, 72, 36, 0, 6944, 6947, 5, 68, 0, 0, 6945, 6948, 3, 594, 297, 
		    0, 6946, 6948, 3, 688, 344, 0, 6947, 6945, 1, 0, 0, 0, 6947, 6946, 
		    1, 0, 0, 0, 6948, 6949, 1, 0, 0, 0, 6949, 6950, 5, 1134, 0, 0, 6950, 
		    6976, 1, 0, 0, 0, 6951, 6952, 5, 900, 0, 0, 6952, 6953, 5, 1133, 0, 
		    0, 6953, 6954, 7, 120, 0, 0, 6954, 6955, 5, 1135, 0, 0, 6955, 6956, 
		    3, 594, 297, 0, 6956, 6957, 5, 1134, 0, 0, 6957, 6976, 1, 0, 0, 0, 
		    6958, 6959, 5, 282, 0, 0, 6959, 6960, 5, 1133, 0, 0, 6960, 6961, 3, 
		    688, 344, 0, 6961, 6962, 5, 1135, 0, 0, 6962, 6965, 3, 688, 344, 0, 
		    6963, 6964, 5, 593, 0, 0, 6964, 6966, 3, 608, 304, 0, 6965, 6963, 
		    1, 0, 0, 0, 6965, 6966, 1, 0, 0, 0, 6966, 6968, 1, 0, 0, 0, 6967, 
		    6969, 3, 268, 134, 0, 6968, 6967, 1, 0, 0, 0, 6968, 6969, 1, 0, 0, 
		    0, 6969, 6971, 1, 0, 0, 0, 6970, 6972, 3, 270, 135, 0, 6971, 6970, 
		    1, 0, 0, 0, 6971, 6972, 1, 0, 0, 0, 6972, 6973, 1, 0, 0, 0, 6973, 
		    6974, 5, 1134, 0, 0, 6974, 6976, 1, 0, 0, 0, 6975, 6796, 1, 0, 0, 
		    0, 6975, 6801, 1, 0, 0, 0, 6975, 6802, 1, 0, 0, 0, 6975, 6809, 1, 
		    0, 0, 0, 6975, 6816, 1, 0, 0, 0, 6975, 6823, 1, 0, 0, 0, 6975, 6828, 
		    1, 0, 0, 0, 6975, 6841, 1, 0, 0, 0, 6975, 6853, 1, 0, 0, 0, 6975, 
		    6862, 1, 0, 0, 0, 6975, 6875, 1, 0, 0, 0, 6975, 6895, 1, 0, 0, 0, 
		    6975, 6909, 1, 0, 0, 0, 6975, 6922, 1, 0, 0, 0, 6975, 6941, 1, 0, 
		    0, 0, 6975, 6951, 1, 0, 0, 0, 6975, 6958, 1, 0, 0, 0, 6976, 651, 1, 
		    0, 0, 0, 6977, 6978, 5, 189, 0, 0, 6978, 6979, 3, 686, 343, 0, 6979, 
		    6980, 5, 174, 0, 0, 6980, 6981, 3, 686, 343, 0, 6981, 653, 1, 0, 0, 
		    0, 6982, 6983, 5, 472, 0, 0, 6983, 6988, 3, 656, 328, 0, 6984, 6985, 
		    5, 1135, 0, 0, 6985, 6987, 3, 656, 328, 0, 6986, 6984, 1, 0, 0, 0, 
		    6987, 6990, 1, 0, 0, 0, 6988, 6986, 1, 0, 0, 0, 6988, 6989, 1, 0, 
		    0, 0, 6989, 6997, 1, 0, 0, 0, 6990, 6988, 1, 0, 0, 0, 6991, 6992, 
		    5, 472, 0, 0, 6992, 6993, 3, 590, 295, 0, 6993, 6994, 5, 1121, 0, 
		    0, 6994, 6995, 3, 590, 295, 0, 6995, 6997, 1, 0, 0, 0, 6996, 6982, 
		    1, 0, 0, 0, 6996, 6991, 1, 0, 0, 0, 6997, 655, 1, 0, 0, 0, 6998, 7000, 
		    3, 590, 295, 0, 6999, 7001, 7, 121, 0, 0, 7000, 6999, 1, 0, 0, 0, 
		    7000, 7001, 1, 0, 0, 0, 7001, 657, 1, 0, 0, 0, 7002, 7003, 7, 122, 
		    0, 0, 7003, 7005, 5, 1133, 0, 0, 7004, 7006, 7, 44, 0, 0, 7005, 7004, 
		    1, 0, 0, 0, 7005, 7006, 1, 0, 0, 0, 7006, 7007, 1, 0, 0, 0, 7007, 
		    7008, 3, 686, 343, 0, 7008, 7010, 5, 1134, 0, 0, 7009, 7011, 3, 662, 
		    331, 0, 7010, 7009, 1, 0, 0, 0, 7010, 7011, 1, 0, 0, 0, 7011, 7062, 
		    1, 0, 0, 0, 7012, 7013, 5, 290, 0, 0, 7013, 7021, 5, 1133, 0, 0, 7014, 
		    7022, 5, 1117, 0, 0, 7015, 7017, 5, 6, 0, 0, 7016, 7015, 1, 0, 0, 
		    0, 7016, 7017, 1, 0, 0, 0, 7017, 7018, 1, 0, 0, 0, 7018, 7022, 3, 
		    686, 343, 0, 7019, 7020, 5, 49, 0, 0, 7020, 7022, 3, 684, 342, 0, 
		    7021, 7014, 1, 0, 0, 0, 7021, 7016, 1, 0, 0, 0, 7021, 7019, 1, 0, 
		    0, 0, 7022, 7023, 1, 0, 0, 0, 7023, 7025, 5, 1134, 0, 0, 7024, 7026, 
		    3, 662, 331, 0, 7025, 7024, 1, 0, 0, 0, 7025, 7026, 1, 0, 0, 0, 7026, 
		    7062, 1, 0, 0, 0, 7027, 7028, 7, 123, 0, 0, 7028, 7030, 5, 1133, 0, 
		    0, 7029, 7031, 5, 6, 0, 0, 7030, 7029, 1, 0, 0, 0, 7030, 7031, 1, 
		    0, 0, 0, 7031, 7032, 1, 0, 0, 0, 7032, 7033, 3, 686, 343, 0, 7033, 
		    7035, 5, 1134, 0, 0, 7034, 7036, 3, 662, 331, 0, 7035, 7034, 1, 0, 
		    0, 0, 7035, 7036, 1, 0, 0, 0, 7036, 7062, 1, 0, 0, 0, 7037, 7038, 
		    5, 294, 0, 0, 7038, 7040, 5, 1133, 0, 0, 7039, 7041, 5, 49, 0, 0, 
		    7040, 7039, 1, 0, 0, 0, 7040, 7041, 1, 0, 0, 0, 7041, 7042, 1, 0, 
		    0, 0, 7042, 7053, 3, 684, 342, 0, 7043, 7044, 5, 124, 0, 0, 7044, 
		    7045, 5, 19, 0, 0, 7045, 7050, 3, 232, 116, 0, 7046, 7047, 5, 1135, 
		    0, 0, 7047, 7049, 3, 232, 116, 0, 7048, 7046, 1, 0, 0, 0, 7049, 7052, 
		    1, 0, 0, 0, 7050, 7048, 1, 0, 0, 0, 7050, 7051, 1, 0, 0, 0, 7051, 
		    7054, 1, 0, 0, 0, 7052, 7050, 1, 0, 0, 0, 7053, 7043, 1, 0, 0, 0, 
		    7053, 7054, 1, 0, 0, 0, 7054, 7057, 1, 0, 0, 0, 7055, 7056, 5, 154, 
		    0, 0, 7056, 7058, 5, 1148, 0, 0, 7057, 7055, 1, 0, 0, 0, 7057, 7058, 
		    1, 0, 0, 0, 7058, 7059, 1, 0, 0, 0, 7059, 7060, 5, 1134, 0, 0, 7060, 
		    7062, 1, 0, 0, 0, 7061, 7002, 1, 0, 0, 0, 7061, 7012, 1, 0, 0, 0, 
		    7061, 7027, 1, 0, 0, 0, 7061, 7037, 1, 0, 0, 0, 7062, 659, 1, 0, 0, 
		    0, 7063, 7064, 7, 124, 0, 0, 7064, 7065, 5, 1133, 0, 0, 7065, 7068, 
		    3, 688, 344, 0, 7066, 7067, 5, 1135, 0, 0, 7067, 7069, 3, 590, 295, 
		    0, 7068, 7066, 1, 0, 0, 0, 7068, 7069, 1, 0, 0, 0, 7069, 7072, 1, 
		    0, 0, 0, 7070, 7071, 5, 1135, 0, 0, 7071, 7073, 3, 590, 295, 0, 7072, 
		    7070, 1, 0, 0, 0, 7072, 7073, 1, 0, 0, 0, 7073, 7074, 1, 0, 0, 0, 
		    7074, 7075, 5, 1134, 0, 0, 7075, 7076, 3, 662, 331, 0, 7076, 7102, 
		    1, 0, 0, 0, 7077, 7078, 7, 125, 0, 0, 7078, 7079, 5, 1133, 0, 0, 7079, 
		    7080, 3, 688, 344, 0, 7080, 7081, 5, 1134, 0, 0, 7081, 7082, 3, 662, 
		    331, 0, 7082, 7102, 1, 0, 0, 0, 7083, 7084, 7, 126, 0, 0, 7084, 7085, 
		    5, 1133, 0, 0, 7085, 7086, 5, 1134, 0, 0, 7086, 7102, 3, 662, 331, 
		    0, 7087, 7088, 5, 301, 0, 0, 7088, 7089, 5, 1133, 0, 0, 7089, 7090, 
		    3, 688, 344, 0, 7090, 7091, 5, 1135, 0, 0, 7091, 7092, 3, 590, 295, 
		    0, 7092, 7093, 5, 1134, 0, 0, 7093, 7094, 3, 662, 331, 0, 7094, 7102, 
		    1, 0, 0, 0, 7095, 7096, 5, 300, 0, 0, 7096, 7097, 5, 1133, 0, 0, 7097, 
		    7098, 3, 590, 295, 0, 7098, 7099, 5, 1134, 0, 0, 7099, 7100, 3, 662, 
		    331, 0, 7100, 7102, 1, 0, 0, 0, 7101, 7063, 1, 0, 0, 0, 7101, 7077, 
		    1, 0, 0, 0, 7101, 7083, 1, 0, 0, 0, 7101, 7087, 1, 0, 0, 0, 7101, 
		    7095, 1, 0, 0, 0, 7102, 661, 1, 0, 0, 0, 7103, 7109, 5, 128, 0, 0, 
		    7104, 7105, 5, 1133, 0, 0, 7105, 7106, 3, 664, 332, 0, 7106, 7107, 
		    5, 1134, 0, 0, 7107, 7110, 1, 0, 0, 0, 7108, 7110, 3, 666, 333, 0, 
		    7109, 7104, 1, 0, 0, 0, 7109, 7108, 1, 0, 0, 0, 7110, 663, 1, 0, 0, 
		    0, 7111, 7113, 3, 666, 333, 0, 7112, 7111, 1, 0, 0, 0, 7112, 7113, 
		    1, 0, 0, 0, 7113, 7115, 1, 0, 0, 0, 7114, 7116, 3, 678, 339, 0, 7115, 
		    7114, 1, 0, 0, 0, 7115, 7116, 1, 0, 0, 0, 7116, 7118, 1, 0, 0, 0, 
		    7117, 7119, 3, 230, 115, 0, 7118, 7117, 1, 0, 0, 0, 7118, 7119, 1, 
		    0, 0, 0, 7119, 7121, 1, 0, 0, 0, 7120, 7122, 3, 668, 334, 0, 7121, 
		    7120, 1, 0, 0, 0, 7121, 7122, 1, 0, 0, 0, 7122, 665, 1, 0, 0, 0, 7123, 
		    7124, 3, 584, 292, 0, 7124, 667, 1, 0, 0, 0, 7125, 7126, 3, 670, 335, 
		    0, 7126, 7127, 3, 672, 336, 0, 7127, 669, 1, 0, 0, 0, 7128, 7129, 
		    7, 127, 0, 0, 7129, 671, 1, 0, 0, 0, 7130, 7133, 3, 676, 338, 0, 7131, 
		    7133, 3, 674, 337, 0, 7132, 7130, 1, 0, 0, 0, 7132, 7131, 1, 0, 0, 
		    0, 7133, 673, 1, 0, 0, 0, 7134, 7135, 5, 16, 0, 0, 7135, 7136, 3, 
		    676, 338, 0, 7136, 7137, 5, 10, 0, 0, 7137, 7138, 3, 676, 338, 0, 
		    7138, 675, 1, 0, 0, 0, 7139, 7140, 5, 35, 0, 0, 7140, 7147, 5, 600, 
		    0, 0, 7141, 7142, 5, 657, 0, 0, 7142, 7147, 7, 128, 0, 0, 7143, 7144, 
		    3, 688, 344, 0, 7144, 7145, 7, 128, 0, 0, 7145, 7147, 1, 0, 0, 0, 
		    7146, 7139, 1, 0, 0, 0, 7146, 7141, 1, 0, 0, 0, 7146, 7143, 1, 0, 
		    0, 0, 7147, 677, 1, 0, 0, 0, 7148, 7149, 5, 129, 0, 0, 7149, 7150, 
		    5, 19, 0, 0, 7150, 7155, 3, 688, 344, 0, 7151, 7152, 5, 1135, 0, 0, 
		    7152, 7154, 3, 688, 344, 0, 7153, 7151, 1, 0, 0, 0, 7154, 7157, 1, 
		    0, 0, 0, 7155, 7153, 1, 0, 0, 0, 7155, 7156, 1, 0, 0, 0, 7156, 679, 
		    1, 0, 0, 0, 7157, 7155, 1, 0, 0, 0, 7158, 7183, 3, 720, 360, 0, 7159, 
		    7183, 5, 747, 0, 0, 7160, 7183, 5, 317, 0, 0, 7161, 7183, 5, 313, 
		    0, 0, 7162, 7183, 5, 314, 0, 0, 7163, 7183, 5, 315, 0, 0, 7164, 7183, 
		    5, 318, 0, 0, 7165, 7183, 5, 319, 0, 0, 7166, 7183, 5, 320, 0, 0, 
		    7167, 7183, 5, 77, 0, 0, 7168, 7183, 5, 85, 0, 0, 7169, 7183, 5, 316, 
		    0, 0, 7170, 7183, 5, 322, 0, 0, 7171, 7183, 5, 508, 0, 0, 7172, 7183, 
		    5, 323, 0, 0, 7173, 7183, 5, 140, 0, 0, 7174, 7183, 5, 141, 0, 0, 
		    7175, 7183, 5, 325, 0, 0, 7176, 7183, 5, 326, 0, 0, 7177, 7183, 5, 
		    327, 0, 0, 7178, 7183, 5, 328, 0, 0, 7179, 7183, 5, 329, 0, 0, 7180, 
		    7183, 5, 330, 0, 0, 7181, 7183, 5, 331, 0, 0, 7182, 7158, 1, 0, 0, 
		    0, 7182, 7159, 1, 0, 0, 0, 7182, 7160, 1, 0, 0, 0, 7182, 7161, 1, 
		    0, 0, 0, 7182, 7162, 1, 0, 0, 0, 7182, 7163, 1, 0, 0, 0, 7182, 7164, 
		    1, 0, 0, 0, 7182, 7165, 1, 0, 0, 0, 7182, 7166, 1, 0, 0, 0, 7182, 
		    7167, 1, 0, 0, 0, 7182, 7168, 1, 0, 0, 0, 7182, 7169, 1, 0, 0, 0, 
		    7182, 7170, 1, 0, 0, 0, 7182, 7171, 1, 0, 0, 0, 7182, 7172, 1, 0, 
		    0, 0, 7182, 7173, 1, 0, 0, 0, 7182, 7174, 1, 0, 0, 0, 7182, 7175, 
		    1, 0, 0, 0, 7182, 7176, 1, 0, 0, 0, 7182, 7177, 1, 0, 0, 0, 7182, 
		    7178, 1, 0, 0, 0, 7182, 7179, 1, 0, 0, 0, 7182, 7180, 1, 0, 0, 0, 
		    7182, 7181, 1, 0, 0, 0, 7183, 681, 1, 0, 0, 0, 7184, 7185, 7, 129, 
		    0, 0, 7185, 7186, 5, 1133, 0, 0, 7186, 7187, 3, 686, 343, 0, 7187, 
		    7188, 5, 1134, 0, 0, 7188, 683, 1, 0, 0, 0, 7189, 7194, 3, 602, 301, 
		    0, 7190, 7194, 3, 556, 278, 0, 7191, 7194, 3, 648, 324, 0, 7192, 7194, 
		    3, 688, 344, 0, 7193, 7189, 1, 0, 0, 0, 7193, 7190, 1, 0, 0, 0, 7193, 
		    7191, 1, 0, 0, 0, 7193, 7192, 1, 0, 0, 0, 7194, 7204, 1, 0, 0, 0, 
		    7195, 7200, 5, 1135, 0, 0, 7196, 7201, 3, 602, 301, 0, 7197, 7201, 
		    3, 556, 278, 0, 7198, 7201, 3, 648, 324, 0, 7199, 7201, 3, 688, 344, 
		    0, 7200, 7196, 1, 0, 0, 0, 7200, 7197, 1, 0, 0, 0, 7200, 7198, 1, 
		    0, 0, 0, 7200, 7199, 1, 0, 0, 0, 7201, 7203, 1, 0, 0, 0, 7202, 7195, 
		    1, 0, 0, 0, 7203, 7206, 1, 0, 0, 0, 7204, 7202, 1, 0, 0, 0, 7204, 
		    7205, 1, 0, 0, 0, 7205, 685, 1, 0, 0, 0, 7206, 7204, 1, 0, 0, 0, 7207, 
		    7212, 3, 602, 301, 0, 7208, 7212, 3, 556, 278, 0, 7209, 7212, 3, 648, 
		    324, 0, 7210, 7212, 3, 688, 344, 0, 7211, 7207, 1, 0, 0, 0, 7211, 
		    7208, 1, 0, 0, 0, 7211, 7209, 1, 0, 0, 0, 7211, 7210, 1, 0, 0, 0, 
		    7212, 687, 1, 0, 0, 0, 7213, 7214, 6, 344, -1, 0, 7214, 7215, 7, 130, 
		    0, 0, 7215, 7225, 3, 688, 344, 4, 7216, 7217, 3, 690, 345, 0, 7217, 
		    7219, 5, 88, 0, 0, 7218, 7220, 5, 114, 0, 0, 7219, 7218, 1, 0, 0, 
		    0, 7219, 7220, 1, 0, 0, 0, 7220, 7221, 1, 0, 0, 0, 7221, 7222, 7, 
		    131, 0, 0, 7222, 7225, 1, 0, 0, 0, 7223, 7225, 3, 690, 345, 0, 7224, 
		    7213, 1, 0, 0, 0, 7224, 7216, 1, 0, 0, 0, 7224, 7223, 1, 0, 0, 0, 
		    7225, 7232, 1, 0, 0, 0, 7226, 7227, 10, 3, 0, 0, 7227, 7228, 3, 698, 
		    349, 0, 7228, 7229, 3, 688, 344, 4, 7229, 7231, 1, 0, 0, 0, 7230, 
		    7226, 1, 0, 0, 0, 7231, 7234, 1, 0, 0, 0, 7232, 7230, 1, 0, 0, 0, 
		    7232, 7233, 1, 0, 0, 0, 7233, 689, 1, 0, 0, 0, 7234, 7232, 1, 0, 0, 
		    0, 7235, 7236, 6, 345, -1, 0, 7236, 7237, 3, 692, 346, 0, 7237, 7302, 
		    1, 0, 0, 0, 7238, 7239, 10, 8, 0, 0, 7239, 7240, 3, 696, 348, 0, 7240, 
		    7241, 3, 690, 345, 9, 7241, 7301, 1, 0, 0, 0, 7242, 7244, 10, 6, 0, 
		    0, 7243, 7245, 5, 114, 0, 0, 7244, 7243, 1, 0, 0, 0, 7244, 7245, 1, 
		    0, 0, 0, 7245, 7246, 1, 0, 0, 0, 7246, 7247, 5, 16, 0, 0, 7247, 7248, 
		    3, 690, 345, 0, 7248, 7249, 5, 10, 0, 0, 7249, 7250, 3, 690, 345, 
		    7, 7250, 7301, 1, 0, 0, 0, 7251, 7252, 10, 5, 0, 0, 7252, 7253, 5, 
		    620, 0, 0, 7253, 7254, 5, 98, 0, 0, 7254, 7301, 3, 690, 345, 6, 7255, 
		    7257, 10, 3, 0, 0, 7256, 7258, 5, 114, 0, 0, 7257, 7256, 1, 0, 0, 
		    0, 7257, 7258, 1, 0, 0, 0, 7258, 7259, 1, 0, 0, 0, 7259, 7260, 7, 
		    132, 0, 0, 7260, 7301, 3, 690, 345, 4, 7261, 7263, 10, 10, 0, 0, 7262, 
		    7264, 5, 114, 0, 0, 7263, 7262, 1, 0, 0, 0, 7263, 7264, 1, 0, 0, 0, 
		    7264, 7265, 1, 0, 0, 0, 7265, 7266, 5, 80, 0, 0, 7266, 7269, 5, 1133, 
		    0, 0, 7267, 7270, 3, 200, 100, 0, 7268, 7270, 3, 624, 312, 0, 7269, 
		    7267, 1, 0, 0, 0, 7269, 7268, 1, 0, 0, 0, 7270, 7271, 1, 0, 0, 0, 
		    7271, 7272, 5, 1134, 0, 0, 7272, 7301, 1, 0, 0, 0, 7273, 7274, 10, 
		    9, 0, 0, 7274, 7275, 5, 88, 0, 0, 7275, 7301, 3, 600, 300, 0, 7276, 
		    7277, 10, 7, 0, 0, 7277, 7278, 3, 696, 348, 0, 7278, 7279, 7, 133, 
		    0, 0, 7279, 7280, 5, 1133, 0, 0, 7280, 7281, 3, 200, 100, 0, 7281, 
		    7282, 5, 1134, 0, 0, 7282, 7301, 1, 0, 0, 0, 7283, 7285, 10, 4, 0, 
		    0, 7284, 7286, 5, 114, 0, 0, 7285, 7284, 1, 0, 0, 0, 7285, 7286, 1, 
		    0, 0, 0, 7286, 7287, 1, 0, 0, 0, 7287, 7288, 5, 98, 0, 0, 7288, 7291, 
		    3, 690, 345, 0, 7289, 7290, 5, 413, 0, 0, 7290, 7292, 5, 1148, 0, 
		    0, 7291, 7289, 1, 0, 0, 0, 7291, 7292, 1, 0, 0, 0, 7292, 7301, 1, 
		    0, 0, 0, 7293, 7294, 10, 2, 0, 0, 7294, 7295, 5, 505, 0, 0, 7295, 
		    7296, 5, 533, 0, 0, 7296, 7297, 5, 1133, 0, 0, 7297, 7298, 3, 690, 
		    345, 0, 7298, 7299, 5, 1134, 0, 0, 7299, 7301, 1, 0, 0, 0, 7300, 7238, 
		    1, 0, 0, 0, 7300, 7242, 1, 0, 0, 0, 7300, 7251, 1, 0, 0, 0, 7300, 
		    7255, 1, 0, 0, 0, 7300, 7261, 1, 0, 0, 0, 7300, 7273, 1, 0, 0, 0, 
		    7300, 7276, 1, 0, 0, 0, 7300, 7283, 1, 0, 0, 0, 7300, 7293, 1, 0, 
		    0, 0, 7301, 7304, 1, 0, 0, 0, 7302, 7300, 1, 0, 0, 0, 7302, 7303, 
		    1, 0, 0, 0, 7303, 691, 1, 0, 0, 0, 7304, 7302, 1, 0, 0, 0, 7305, 7306, 
		    6, 346, -1, 0, 7306, 7354, 3, 602, 301, 0, 7307, 7354, 3, 556, 278, 
		    0, 7308, 7354, 3, 648, 324, 0, 7309, 7354, 3, 566, 283, 0, 7310, 7311, 
		    3, 694, 347, 0, 7311, 7312, 3, 692, 346, 12, 7312, 7354, 1, 0, 0, 
		    0, 7313, 7314, 5, 226, 0, 0, 7314, 7354, 3, 692, 346, 11, 7315, 7316, 
		    5, 1159, 0, 0, 7316, 7317, 5, 1108, 0, 0, 7317, 7354, 3, 692, 346, 
		    10, 7318, 7319, 5, 1133, 0, 0, 7319, 7324, 3, 688, 344, 0, 7320, 7321, 
		    5, 1135, 0, 0, 7321, 7323, 3, 688, 344, 0, 7322, 7320, 1, 0, 0, 0, 
		    7323, 7326, 1, 0, 0, 0, 7324, 7322, 1, 0, 0, 0, 7324, 7325, 1, 0, 
		    0, 0, 7325, 7327, 1, 0, 0, 0, 7326, 7324, 1, 0, 0, 0, 7327, 7328, 
		    5, 1134, 0, 0, 7328, 7354, 1, 0, 0, 0, 7329, 7330, 5, 600, 0, 0, 7330, 
		    7331, 5, 1133, 0, 0, 7331, 7334, 3, 688, 344, 0, 7332, 7333, 5, 1135, 
		    0, 0, 7333, 7335, 3, 688, 344, 0, 7334, 7332, 1, 0, 0, 0, 7335, 7336, 
		    1, 0, 0, 0, 7336, 7334, 1, 0, 0, 0, 7336, 7337, 1, 0, 0, 0, 7337, 
		    7338, 1, 0, 0, 0, 7338, 7339, 5, 1134, 0, 0, 7339, 7354, 1, 0, 0, 
		    0, 7340, 7341, 5, 60, 0, 0, 7341, 7342, 5, 1133, 0, 0, 7342, 7343, 
		    3, 200, 100, 0, 7343, 7344, 5, 1134, 0, 0, 7344, 7354, 1, 0, 0, 0, 
		    7345, 7346, 5, 1133, 0, 0, 7346, 7347, 3, 200, 100, 0, 7347, 7348, 
		    5, 1134, 0, 0, 7348, 7354, 1, 0, 0, 0, 7349, 7350, 5, 86, 0, 0, 7350, 
		    7351, 3, 688, 344, 0, 7351, 7352, 3, 72, 36, 0, 7352, 7354, 1, 0, 
		    0, 0, 7353, 7305, 1, 0, 0, 0, 7353, 7307, 1, 0, 0, 0, 7353, 7308, 
		    1, 0, 0, 0, 7353, 7309, 1, 0, 0, 0, 7353, 7310, 1, 0, 0, 0, 7353, 
		    7313, 1, 0, 0, 0, 7353, 7315, 1, 0, 0, 0, 7353, 7318, 1, 0, 0, 0, 
		    7353, 7329, 1, 0, 0, 0, 7353, 7340, 1, 0, 0, 0, 7353, 7345, 1, 0, 
		    0, 0, 7353, 7349, 1, 0, 0, 0, 7354, 7376, 1, 0, 0, 0, 7355, 7356, 
		    10, 4, 0, 0, 7356, 7357, 3, 700, 350, 0, 7357, 7358, 3, 692, 346, 
		    5, 7358, 7375, 1, 0, 0, 0, 7359, 7360, 10, 3, 0, 0, 7360, 7361, 3, 
		    702, 351, 0, 7361, 7362, 3, 692, 346, 4, 7362, 7375, 1, 0, 0, 0, 7363, 
		    7364, 10, 2, 0, 0, 7364, 7365, 3, 704, 352, 0, 7365, 7366, 3, 692, 
		    346, 3, 7366, 7375, 1, 0, 0, 0, 7367, 7368, 10, 1, 0, 0, 7368, 7369, 
		    3, 706, 353, 0, 7369, 7370, 3, 692, 346, 2, 7370, 7375, 1, 0, 0, 0, 
		    7371, 7372, 10, 14, 0, 0, 7372, 7373, 5, 27, 0, 0, 7373, 7375, 3, 
		    570, 285, 0, 7374, 7355, 1, 0, 0, 0, 7374, 7359, 1, 0, 0, 0, 7374, 
		    7363, 1, 0, 0, 0, 7374, 7367, 1, 0, 0, 0, 7374, 7371, 1, 0, 0, 0, 
		    7375, 7378, 1, 0, 0, 0, 7376, 7374, 1, 0, 0, 0, 7376, 7377, 1, 0, 
		    0, 0, 7377, 693, 1, 0, 0, 0, 7378, 7376, 1, 0, 0, 0, 7379, 7380, 7, 
		    134, 0, 0, 7380, 695, 1, 0, 0, 0, 7381, 7396, 5, 1124, 0, 0, 7382, 
		    7396, 5, 1125, 0, 0, 7383, 7396, 5, 1126, 0, 0, 7384, 7385, 5, 1126, 
		    0, 0, 7385, 7396, 5, 1124, 0, 0, 7386, 7387, 5, 1125, 0, 0, 7387, 
		    7396, 5, 1124, 0, 0, 7388, 7389, 5, 1126, 0, 0, 7389, 7396, 5, 1125, 
		    0, 0, 7390, 7391, 5, 1127, 0, 0, 7391, 7396, 5, 1124, 0, 0, 7392, 
		    7393, 5, 1126, 0, 0, 7393, 7394, 5, 1124, 0, 0, 7394, 7396, 5, 1125, 
		    0, 0, 7395, 7381, 1, 0, 0, 0, 7395, 7382, 1, 0, 0, 0, 7395, 7383, 
		    1, 0, 0, 0, 7395, 7384, 1, 0, 0, 0, 7395, 7386, 1, 0, 0, 0, 7395, 
		    7388, 1, 0, 0, 0, 7395, 7390, 1, 0, 0, 0, 7395, 7392, 1, 0, 0, 0, 
		    7396, 697, 1, 0, 0, 0, 7397, 7405, 5, 10, 0, 0, 7398, 7399, 5, 1130, 
		    0, 0, 7399, 7405, 5, 1130, 0, 0, 7400, 7405, 5, 194, 0, 0, 7401, 7405, 
		    5, 123, 0, 0, 7402, 7403, 5, 1129, 0, 0, 7403, 7405, 5, 1129, 0, 0, 
		    7404, 7397, 1, 0, 0, 0, 7404, 7398, 1, 0, 0, 0, 7404, 7400, 1, 0, 
		    0, 0, 7404, 7401, 1, 0, 0, 0, 7404, 7402, 1, 0, 0, 0, 7405, 699, 1, 
		    0, 0, 0, 7406, 7407, 5, 1126, 0, 0, 7407, 7414, 5, 1126, 0, 0, 7408, 
		    7409, 5, 1125, 0, 0, 7409, 7414, 5, 1125, 0, 0, 7410, 7414, 5, 1130, 
		    0, 0, 7411, 7414, 5, 1131, 0, 0, 7412, 7414, 5, 1129, 0, 0, 7413, 
		    7406, 1, 0, 0, 0, 7413, 7408, 1, 0, 0, 0, 7413, 7410, 1, 0, 0, 0, 
		    7413, 7411, 1, 0, 0, 0, 7413, 7412, 1, 0, 0, 0, 7414, 701, 1, 0, 0, 
		    0, 7415, 7416, 7, 135, 0, 0, 7416, 703, 1, 0, 0, 0, 7417, 7418, 7, 
		    136, 0, 0, 7418, 705, 1, 0, 0, 0, 7419, 7420, 5, 1121, 0, 0, 7420, 
		    7425, 5, 1125, 0, 0, 7421, 7422, 5, 1121, 0, 0, 7422, 7423, 5, 1125, 
		    0, 0, 7423, 7425, 5, 1125, 0, 0, 7424, 7419, 1, 0, 0, 0, 7424, 7421, 
		    1, 0, 0, 0, 7425, 707, 1, 0, 0, 0, 7426, 7427, 7, 137, 0, 0, 7427, 
		    709, 1, 0, 0, 0, 7428, 7429, 7, 138, 0, 0, 7429, 711, 1, 0, 0, 0, 
		    7430, 7431, 7, 139, 0, 0, 7431, 713, 1, 0, 0, 0, 7432, 7433, 7, 140, 
		    0, 0, 7433, 715, 1, 0, 0, 0, 7434, 7435, 7, 141, 0, 0, 7435, 717, 
		    1, 0, 0, 0, 7436, 7437, 7, 142, 0, 0, 7437, 719, 1, 0, 0, 0, 7438, 
		    7439, 7, 143, 0, 0, 7439, 721, 1, 0, 0, 0, 1085, 723, 727, 734, 737, 
		    740, 742, 748, 751, 754, 763, 805, 820, 831, 848, 853, 865, 892, 901, 
		    906, 912, 917, 921, 930, 933, 936, 940, 947, 950, 955, 963, 968, 973, 
		    976, 978, 990, 993, 997, 1000, 1004, 1007, 1011, 1014, 1017, 1021, 
		    1024, 1028, 1034, 1040, 1046, 1053, 1060, 1063, 1067, 1072, 1078, 
		    1087, 1092, 1097, 1104, 1121, 1128, 1132, 1142, 1146, 1150, 1154, 
		    1158, 1163, 1166, 1169, 1172, 1175, 1181, 1185, 1191, 1196, 1199, 
		    1202, 1204, 1215, 1219, 1222, 1236, 1239, 1243, 1246, 1250, 1253, 
		    1257, 1260, 1264, 1267, 1270, 1274, 1277, 1281, 1287, 1300, 1306, 
		    1317, 1322, 1330, 1338, 1343, 1346, 1351, 1359, 1364, 1370, 1375, 
		    1379, 1381, 1384, 1388, 1392, 1395, 1399, 1403, 1407, 1413, 1416, 
		    1423, 1428, 1434, 1441, 1447, 1455, 1458, 1465, 1468, 1470, 1476, 
		    1482, 1499, 1506, 1513, 1525, 1530, 1533, 1536, 1549, 1562, 1567, 
		    1583, 1591, 1601, 1604, 1607, 1613, 1617, 1620, 1631, 1634, 1639, 
		    1652, 1659, 1666, 1668, 1675, 1679, 1681, 1686, 1689, 1695, 1700, 
		    1702, 1706, 1709, 1712, 1718, 1723, 1725, 1730, 1737, 1739, 1746, 
		    1751, 1755, 1758, 1766, 1774, 1776, 1786, 1790, 1793, 1799, 1804, 
		    1807, 1813, 1816, 1820, 1823, 1827, 1832, 1837, 1842, 1846, 1850, 
		    1854, 1858, 1862, 1866, 1871, 1876, 1881, 1887, 1892, 1897, 1902, 
		    1907, 1912, 1918, 1923, 1928, 1933, 1938, 1943, 1948, 1953, 1960, 
		    1965, 1970, 1975, 1979, 1984, 1992, 1997, 2003, 2015, 2022, 2024, 
		    2032, 2037, 2040, 2048, 2054, 2058, 2071, 2083, 2085, 2088, 2096, 
		    2102, 2108, 2121, 2128, 2137, 2142, 2153, 2162, 2167, 2179, 2186, 
		    2195, 2200, 2212, 2219, 2228, 2233, 2240, 2249, 2254, 2256, 2261, 
		    2269, 2278, 2282, 2285, 2289, 2294, 2300, 2306, 2311, 2316, 2321, 
		    2326, 2329, 2334, 2339, 2349, 2353, 2360, 2365, 2368, 2373, 2376, 
		    2380, 2384, 2392, 2411, 2414, 2417, 2421, 2431, 2444, 2451, 2454, 
		    2459, 2466, 2469, 2472, 2483, 2486, 2490, 2498, 2501, 2506, 2514, 
		    2520, 2524, 2528, 2533, 2538, 2545, 2549, 2560, 2568, 2571, 2577, 
		    2583, 2585, 2590, 2593, 2599, 2605, 2607, 2611, 2614, 2617, 2623, 
		    2629, 2632, 2638, 2644, 2646, 2651, 2659, 2661, 2670, 2673, 2676, 
		    2681, 2683, 2692, 2695, 2698, 2703, 2705, 2714, 2719, 2727, 2731, 
		    2739, 2749, 2754, 2761, 2765, 2769, 2788, 2798, 2804, 2821, 2825, 
		    2835, 2840, 2843, 2852, 2863, 2871, 2877, 2887, 2899, 2906, 2913, 
		    2928, 2941, 2947, 2953, 2959, 2965, 2971, 2977, 2982, 2989, 2996, 
		    3003, 3008, 3011, 3013, 3027, 3034, 3041, 3047, 3051, 3055, 3062, 
		    3065, 3070, 3077, 3084, 3088, 3093, 3100, 3113, 3116, 3121, 3126, 
		    3130, 3136, 3145, 3154, 3163, 3166, 3170, 3179, 3183, 3186, 3189, 
		    3195, 3198, 3202, 3205, 3209, 3212, 3220, 3223, 3234, 3237, 3242, 
		    3245, 3250, 3260, 3265, 3271, 3273, 3279, 3281, 3287, 3295, 3300, 
		    3308, 3311, 3316, 3319, 3324, 3332, 3340, 3346, 3354, 3359, 3367, 
		    3370, 3374, 3377, 3385, 3391, 3400, 3403, 3407, 3411, 3415, 3420, 
		    3424, 3428, 3430, 3433, 3436, 3439, 3445, 3449, 3452, 3455, 3458, 
		    3461, 3468, 3470, 3474, 3479, 3485, 3490, 3497, 3503, 3508, 3511, 
		    3517, 3521, 3529, 3533, 3536, 3539, 3544, 3547, 3554, 3558, 3561, 
		    3565, 3569, 3572, 3575, 3580, 3586, 3590, 3600, 3606, 3610, 3616, 
		    3620, 3626, 3629, 3641, 3645, 3649, 3657, 3661, 3669, 3672, 3676, 
		    3679, 3687, 3692, 3695, 3698, 3702, 3705, 3714, 3719, 3728, 3733, 
		    3740, 3747, 3755, 3761, 3769, 3772, 3775, 3782, 3785, 3792, 3795, 
		    3803, 3809, 3820, 3823, 3827, 3833, 3842, 3847, 3851, 3857, 3863, 
		    3865, 3869, 3878, 3888, 3898, 3904, 3909, 3913, 3916, 3919, 3922, 
		    3925, 3931, 3937, 3940, 3943, 3946, 3949, 3952, 3954, 3960, 3966, 
		    3969, 3972, 3975, 3978, 3982, 3988, 3992, 4000, 4004, 4007, 4009, 
		    4022, 4025, 4032, 4042, 4045, 4050, 4052, 4056, 4064, 4070, 4079, 
		    4092, 4096, 4102, 4111, 4114, 4118, 4121, 4125, 4129, 4132, 4134, 
		    4142, 4154, 4160, 4162, 4168, 4170, 4172, 4178, 4186, 4194, 4198, 
		    4202, 4211, 4216, 4236, 4241, 4247, 4254, 4259, 4268, 4271, 4275, 
		    4279, 4283, 4286, 4289, 4292, 4296, 4300, 4303, 4306, 4309, 4316, 
		    4320, 4335, 4339, 4351, 4359, 4369, 4373, 4376, 4382, 4385, 4388, 
		    4397, 4406, 4416, 4420, 4430, 4440, 4448, 4451, 4460, 4463, 4467, 
		    4472, 4476, 4485, 4488, 4519, 4522, 4525, 4581, 4586, 4614, 4628, 
		    4635, 4639, 4645, 4653, 4655, 4666, 4676, 4683, 4689, 4697, 4702, 
		    4710, 4718, 4726, 4734, 4740, 4745, 4750, 4755, 4761, 4763, 4774, 
		    4779, 4786, 4788, 4802, 4808, 4813, 4818, 4824, 4831, 4839, 4847, 
		    4852, 4858, 4861, 4869, 4876, 4885, 4888, 4905, 4913, 4921, 4925, 
		    4932, 4938, 4946, 4955, 4961, 4968, 4975, 4980, 4983, 4985, 4991, 
		    4993, 4997, 4999, 5006, 5011, 5015, 5021, 5030, 5036, 5043, 5049, 
		    5055, 5060, 5063, 5065, 5071, 5073, 5077, 5079, 5086, 5088, 5093, 
		    5100, 5109, 5114, 5123, 5130, 5135, 5138, 5140, 5146, 5148, 5151, 
		    5159, 5164, 5169, 5173, 5179, 5184, 5188, 5194, 5196, 5207, 5210, 
		    5217, 5220, 5232, 5238, 5247, 5256, 5261, 5270, 5276, 5287, 5293, 
		    5298, 5302, 5308, 5313, 5317, 5320, 5332, 5339, 5344, 5374, 5378, 
		    5383, 5390, 5393, 5399, 5409, 5419, 5429, 5435, 5444, 5450, 5457, 
		    5459, 5469, 5473, 5477, 5487, 5492, 5564, 5582, 5590, 5602, 5609, 
		    5611, 5621, 5624, 5632, 5639, 5643, 5650, 5655, 5658, 5661, 5670, 
		    5674, 5678, 5701, 5708, 5712, 5719, 5726, 5729, 5745, 5748, 5758, 
		    5762, 5768, 5771, 5776, 5780, 5787, 5790, 5796, 5820, 5823, 5835, 
		    5838, 5848, 5856, 5860, 5867, 5870, 5879, 5885, 5891, 5901, 5903, 
		    5909, 5912, 5915, 5927, 5930, 5936, 5939, 5947, 5955, 5961, 5965, 
		    5979, 5991, 5998, 6001, 6008, 6015, 6020, 6033, 6044, 6050, 6055, 
		    6068, 6070, 6075, 6079, 6082, 6084, 6091, 6098, 6101, 6104, 6110, 
		    6114, 6120, 6126, 6139, 6144, 6152, 6155, 6160, 6165, 6173, 6176, 
		    6184, 6188, 6195, 6201, 6204, 6208, 6221, 6227, 6239, 6242, 6251, 
		    6256, 6262, 6268, 6273, 6275, 6278, 6282, 6284, 6288, 6294, 6297, 
		    6300, 6306, 6315, 6323, 6327, 6332, 6352, 6359, 6361, 6368, 6370, 
		    6374, 6379, 6390, 6395, 6401, 6404, 6408, 6413, 6416, 6420, 6424, 
		    6426, 6431, 6436, 6449, 6452, 6456, 6459, 6462, 6467, 6472, 6478, 
		    6481, 6486, 6489, 6494, 6497, 6501, 6506, 6511, 6516, 6521, 6524, 
		    6529, 6534, 6539, 6545, 6550, 6555, 6560, 6564, 6567, 6572, 6576, 
		    6580, 6588, 6595, 6599, 6604, 6609, 6613, 6615, 6618, 6634, 6643, 
		    6651, 6659, 6668, 6678, 6686, 6694, 6702, 6710, 6722, 6729, 6739, 
		    6744, 6747, 6752, 6755, 6759, 6774, 6782, 6789, 6794, 6799, 6833, 
		    6837, 6845, 6849, 6858, 6866, 6871, 6879, 6884, 6889, 6891, 6900, 
		    6905, 6913, 6918, 6926, 6934, 6937, 6947, 6965, 6968, 6971, 6975, 
		    6988, 6996, 7000, 7005, 7010, 7016, 7021, 7025, 7030, 7035, 7040, 
		    7050, 7053, 7057, 7061, 7068, 7072, 7101, 7109, 7112, 7115, 7118, 
		    7121, 7132, 7146, 7155, 7182, 7193, 7200, 7204, 7211, 7219, 7224, 
		    7232, 7244, 7257, 7263, 7269, 7285, 7291, 7300, 7302, 7324, 7336, 
		    7353, 7374, 7376, 7395, 7404, 7413, 7424];
		protected static $atn;
		protected static $decisionToDFA;
		protected static $sharedContextCache;

		public function __construct(TokenStream $input)
		{
			parent::__construct($input);

			self::initialize();

			$this->interp = new ParserATNSimulator($this, self::$atn, self::$decisionToDFA, self::$sharedContextCache);
		}

		private static function initialize(): void
		{
			if (self::$atn !== null) {
				return;
			}

			RuntimeMetaData::checkVersion('4.13.1', RuntimeMetaData::VERSION);

			$atn = (new ATNDeserializer())->deserialize(self::SERIALIZED_ATN);

			$decisionToDFA = [];
			for ($i = 0, $count = $atn->getNumberOfDecisions(); $i < $count; $i++) {
				$decisionToDFA[] = new DFA($atn->getDecisionState($i), $i);
			}

			self::$atn = $atn;
			self::$decisionToDFA = $decisionToDFA;
			self::$sharedContextCache = new PredictionContextCache();
		}

		public function getGrammarFileName(): string
		{
			return "MySqlParser.g4";
		}

		public function getRuleNames(): array
		{
			return self::RULE_NAMES;
		}

		public function getSerializedATN(): array
		{
			return self::SERIALIZED_ATN;
		}

		public function getATN(): ATN
		{
			return self::$atn;
		}

		public function getVocabulary(): Vocabulary
        {
            static $vocabulary;

			return $vocabulary = $vocabulary ?? new VocabularyImpl(self::LITERAL_NAMES, self::SYMBOLIC_NAMES);
        }

		/**
		 * @throws RecognitionException
		 */
		public function root(): Context\RootContext
		{
		    $localContext = new Context\RootContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 0, self::RULE_root);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(723);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if (((($_la) & ~0x3f) === 0 && ((1 << $_la) & 4614060972218253952) !== 0) || (((($_la - 71)) & ~0x3f) === 0 && ((1 << ($_la - 71)) & 2306124490637066243) !== 0) || (((($_la - 138)) & ~0x3f) === 0 && ((1 << ($_la - 138)) & 19509751503569451) !== 0) || (((($_la - 344)) & ~0x3f) === 0 && ((1 << ($_la - 344)) & 36099165796700291) !== 0) || (((($_la - 432)) & ~0x3f) === 0 && ((1 << ($_la - 432)) & 16782337) !== 0) || (((($_la - 560)) & ~0x3f) === 0 && ((1 << ($_la - 560)) & 17730162917377) !== 0) || (((($_la - 629)) & ~0x3f) === 0 && ((1 << ($_la - 629)) & 4503604056555585) !== 0) || $_la === self::EXECUTE || $_la === self::SHUTDOWN || $_la === self::LR_BRACKET || $_la === self::SEMI) {
		        	$this->setState(722);
		        	$this->sqlStatements();
		        }
		        $this->setState(727);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::MINUS) {
		        	$this->setState(725);
		        	$this->match(self::MINUS);
		        	$this->setState(726);
		        	$this->match(self::MINUS);
		        }
		        $this->setState(729);
		        $this->match(self::EOF);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function sqlStatements(): Context\SqlStatementsContext
		{
		    $localContext = new Context\SqlStatementsContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 2, self::RULE_sqlStatements);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(742);
		        $this->errorHandler->sync($this);

		        $alt = $this->getInterpreter()->adaptivePredict($this->input, 5, $this->ctx);

		        while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
		        	if ($alt === 1) {
		        		$this->setState(740);
		        		$this->errorHandler->sync($this);

		        		switch ($this->input->LA(1)) {
		        		    case self::ALTER:
		        		    case self::ANALYZE:
		        		    case self::CALL:
		        		    case self::CHANGE:
		        		    case self::CHECK:
		        		    case self::CREATE:
		        		    case self::DELETE:
		        		    case self::DESC:
		        		    case self::DESCRIBE:
		        		    case self::DROP:
		        		    case self::EXPLAIN:
		        		    case self::GET:
		        		    case self::GRANT:
		        		    case self::INSERT:
		        		    case self::KILL:
		        		    case self::LOAD:
		        		    case self::LOCK:
		        		    case self::OPTIMIZE:
		        		    case self::PURGE:
		        		    case self::RELEASE:
		        		    case self::RENAME:
		        		    case self::REPLACE:
		        		    case self::RESIGNAL:
		        		    case self::REVOKE:
		        		    case self::SELECT:
		        		    case self::SET:
		        		    case self::SHOW:
		        		    case self::SIGNAL:
		        		    case self::TABLE:
		        		    case self::UNLOCK:
		        		    case self::UPDATE:
		        		    case self::USE:
		        		    case self::VALUES:
		        		    case self::WITH:
		        		    case self::BEGIN:
		        		    case self::BINLOG:
		        		    case self::CACHE:
		        		    case self::CHECKSUM:
		        		    case self::COMMIT:
		        		    case self::DEALLOCATE:
		        		    case self::DO:
		        		    case self::FLUSH:
		        		    case self::HANDLER:
		        		    case self::HELP:
		        		    case self::INSTALL:
		        		    case self::PREPARE:
		        		    case self::REPAIR:
		        		    case self::RESET:
		        		    case self::ROLLBACK:
		        		    case self::SAVEPOINT:
		        		    case self::START:
		        		    case self::STOP:
		        		    case self::TRUNCATE:
		        		    case self::UNINSTALL:
		        		    case self::XA:
		        		    case self::EXECUTE:
		        		    case self::SHUTDOWN:
		        		    case self::LR_BRACKET:
		        		    	$this->setState(731);
		        		    	$this->sqlStatement();
		        		    	$this->setState(734);
		        		    	$this->errorHandler->sync($this);
		        		    	$_la = $this->input->LA(1);

		        		    	if ($_la === self::MINUS) {
		        		    		$this->setState(732);
		        		    		$this->match(self::MINUS);
		        		    		$this->setState(733);
		        		    		$this->match(self::MINUS);
		        		    	}
		        		    	$this->setState(737);
		        		    	$this->errorHandler->sync($this);

		        		    	switch ($this->getInterpreter()->adaptivePredict($this->input, 3, $this->ctx)) {
		        		    	    case 1:
		        		    		    $this->setState(736);
		        		    		    $this->match(self::SEMI);
		        		    		break;
		        		    	}
		        		    	break;

		        		    case self::SEMI:
		        		    	$this->setState(739);
		        		    	$this->emptyStatement_();
		        		    	break;

		        		default:
		        			throw new NoViableAltException($this);
		        		} 
		        	}

		        	$this->setState(744);
		        	$this->errorHandler->sync($this);

		        	$alt = $this->getInterpreter()->adaptivePredict($this->input, 5, $this->ctx);
		        }
		        $this->setState(754);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::ALTER:
		            case self::ANALYZE:
		            case self::CALL:
		            case self::CHANGE:
		            case self::CHECK:
		            case self::CREATE:
		            case self::DELETE:
		            case self::DESC:
		            case self::DESCRIBE:
		            case self::DROP:
		            case self::EXPLAIN:
		            case self::GET:
		            case self::GRANT:
		            case self::INSERT:
		            case self::KILL:
		            case self::LOAD:
		            case self::LOCK:
		            case self::OPTIMIZE:
		            case self::PURGE:
		            case self::RELEASE:
		            case self::RENAME:
		            case self::REPLACE:
		            case self::RESIGNAL:
		            case self::REVOKE:
		            case self::SELECT:
		            case self::SET:
		            case self::SHOW:
		            case self::SIGNAL:
		            case self::TABLE:
		            case self::UNLOCK:
		            case self::UPDATE:
		            case self::USE:
		            case self::VALUES:
		            case self::WITH:
		            case self::BEGIN:
		            case self::BINLOG:
		            case self::CACHE:
		            case self::CHECKSUM:
		            case self::COMMIT:
		            case self::DEALLOCATE:
		            case self::DO:
		            case self::FLUSH:
		            case self::HANDLER:
		            case self::HELP:
		            case self::INSTALL:
		            case self::PREPARE:
		            case self::REPAIR:
		            case self::RESET:
		            case self::ROLLBACK:
		            case self::SAVEPOINT:
		            case self::START:
		            case self::STOP:
		            case self::TRUNCATE:
		            case self::UNINSTALL:
		            case self::XA:
		            case self::EXECUTE:
		            case self::SHUTDOWN:
		            case self::LR_BRACKET:
		            	$this->setState(745);
		            	$this->sqlStatement();
		            	$this->setState(751);
		            	$this->errorHandler->sync($this);

		            	switch ($this->getInterpreter()->adaptivePredict($this->input, 7, $this->ctx)) {
		            	    case 1:
		            		    $this->setState(748);
		            		    $this->errorHandler->sync($this);
		            		    $_la = $this->input->LA(1);

		            		    if ($_la === self::MINUS) {
		            		    	$this->setState(746);
		            		    	$this->match(self::MINUS);
		            		    	$this->setState(747);
		            		    	$this->match(self::MINUS);
		            		    }
		            		    $this->setState(750);
		            		    $this->match(self::SEMI);
		            		break;
		            	}
		            	break;

		            case self::SEMI:
		            	$this->setState(753);
		            	$this->emptyStatement_();
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function sqlStatement(): Context\SqlStatementContext
		{
		    $localContext = new Context\SqlStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 4, self::RULE_sqlStatement);

		    try {
		        $this->setState(763);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 9, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(756);
		        	    $this->ddlStatement();
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(757);
		        	    $this->dmlStatement();
		        	break;

		        	case 3:
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(758);
		        	    $this->transactionStatement();
		        	break;

		        	case 4:
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(759);
		        	    $this->replicationStatement();
		        	break;

		        	case 5:
		        	    $this->enterOuterAlt($localContext, 5);
		        	    $this->setState(760);
		        	    $this->preparedStatement();
		        	break;

		        	case 6:
		        	    $this->enterOuterAlt($localContext, 6);
		        	    $this->setState(761);
		        	    $this->administrationStatement();
		        	break;

		        	case 7:
		        	    $this->enterOuterAlt($localContext, 7);
		        	    $this->setState(762);
		        	    $this->utilityStatement();
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function emptyStatement_(): Context\EmptyStatementContext
		{
		    $localContext = new Context\EmptyStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 6, self::RULE_emptyStatement_);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(765);
		        $this->match(self::SEMI);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function ddlStatement(): Context\DdlStatementContext
		{
		    $localContext = new Context\DdlStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 8, self::RULE_ddlStatement);

		    try {
		        $this->setState(805);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 10, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(767);
		        	    $this->createDatabase();
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(768);
		        	    $this->createEvent();
		        	break;

		        	case 3:
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(769);
		        	    $this->createIndex();
		        	break;

		        	case 4:
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(770);
		        	    $this->createLogfileGroup();
		        	break;

		        	case 5:
		        	    $this->enterOuterAlt($localContext, 5);
		        	    $this->setState(771);
		        	    $this->createProcedure();
		        	break;

		        	case 6:
		        	    $this->enterOuterAlt($localContext, 6);
		        	    $this->setState(772);
		        	    $this->createFunction();
		        	break;

		        	case 7:
		        	    $this->enterOuterAlt($localContext, 7);
		        	    $this->setState(773);
		        	    $this->createServer();
		        	break;

		        	case 8:
		        	    $this->enterOuterAlt($localContext, 8);
		        	    $this->setState(774);
		        	    $this->createTable();
		        	break;

		        	case 9:
		        	    $this->enterOuterAlt($localContext, 9);
		        	    $this->setState(775);
		        	    $this->createTablespaceInnodb();
		        	break;

		        	case 10:
		        	    $this->enterOuterAlt($localContext, 10);
		        	    $this->setState(776);
		        	    $this->createTablespaceNdb();
		        	break;

		        	case 11:
		        	    $this->enterOuterAlt($localContext, 11);
		        	    $this->setState(777);
		        	    $this->createTrigger();
		        	break;

		        	case 12:
		        	    $this->enterOuterAlt($localContext, 12);
		        	    $this->setState(778);
		        	    $this->createView();
		        	break;

		        	case 13:
		        	    $this->enterOuterAlt($localContext, 13);
		        	    $this->setState(779);
		        	    $this->createRole();
		        	break;

		        	case 14:
		        	    $this->enterOuterAlt($localContext, 14);
		        	    $this->setState(780);
		        	    $this->alterDatabase();
		        	break;

		        	case 15:
		        	    $this->enterOuterAlt($localContext, 15);
		        	    $this->setState(781);
		        	    $this->alterEvent();
		        	break;

		        	case 16:
		        	    $this->enterOuterAlt($localContext, 16);
		        	    $this->setState(782);
		        	    $this->alterFunction();
		        	break;

		        	case 17:
		        	    $this->enterOuterAlt($localContext, 17);
		        	    $this->setState(783);
		        	    $this->alterInstance();
		        	break;

		        	case 18:
		        	    $this->enterOuterAlt($localContext, 18);
		        	    $this->setState(784);
		        	    $this->alterLogfileGroup();
		        	break;

		        	case 19:
		        	    $this->enterOuterAlt($localContext, 19);
		        	    $this->setState(785);
		        	    $this->alterProcedure();
		        	break;

		        	case 20:
		        	    $this->enterOuterAlt($localContext, 20);
		        	    $this->setState(786);
		        	    $this->alterServer();
		        	break;

		        	case 21:
		        	    $this->enterOuterAlt($localContext, 21);
		        	    $this->setState(787);
		        	    $this->alterTable();
		        	break;

		        	case 22:
		        	    $this->enterOuterAlt($localContext, 22);
		        	    $this->setState(788);
		        	    $this->alterTablespace();
		        	break;

		        	case 23:
		        	    $this->enterOuterAlt($localContext, 23);
		        	    $this->setState(789);
		        	    $this->alterView();
		        	break;

		        	case 24:
		        	    $this->enterOuterAlt($localContext, 24);
		        	    $this->setState(790);
		        	    $this->dropDatabase();
		        	break;

		        	case 25:
		        	    $this->enterOuterAlt($localContext, 25);
		        	    $this->setState(791);
		        	    $this->dropEvent();
		        	break;

		        	case 26:
		        	    $this->enterOuterAlt($localContext, 26);
		        	    $this->setState(792);
		        	    $this->dropIndex();
		        	break;

		        	case 27:
		        	    $this->enterOuterAlt($localContext, 27);
		        	    $this->setState(793);
		        	    $this->dropLogfileGroup();
		        	break;

		        	case 28:
		        	    $this->enterOuterAlt($localContext, 28);
		        	    $this->setState(794);
		        	    $this->dropProcedure();
		        	break;

		        	case 29:
		        	    $this->enterOuterAlt($localContext, 29);
		        	    $this->setState(795);
		        	    $this->dropFunction();
		        	break;

		        	case 30:
		        	    $this->enterOuterAlt($localContext, 30);
		        	    $this->setState(796);
		        	    $this->dropServer();
		        	break;

		        	case 31:
		        	    $this->enterOuterAlt($localContext, 31);
		        	    $this->setState(797);
		        	    $this->dropTable();
		        	break;

		        	case 32:
		        	    $this->enterOuterAlt($localContext, 32);
		        	    $this->setState(798);
		        	    $this->dropTablespace();
		        	break;

		        	case 33:
		        	    $this->enterOuterAlt($localContext, 33);
		        	    $this->setState(799);
		        	    $this->dropTrigger();
		        	break;

		        	case 34:
		        	    $this->enterOuterAlt($localContext, 34);
		        	    $this->setState(800);
		        	    $this->dropView();
		        	break;

		        	case 35:
		        	    $this->enterOuterAlt($localContext, 35);
		        	    $this->setState(801);
		        	    $this->dropRole();
		        	break;

		        	case 36:
		        	    $this->enterOuterAlt($localContext, 36);
		        	    $this->setState(802);
		        	    $this->setRole();
		        	break;

		        	case 37:
		        	    $this->enterOuterAlt($localContext, 37);
		        	    $this->setState(803);
		        	    $this->renameTable();
		        	break;

		        	case 38:
		        	    $this->enterOuterAlt($localContext, 38);
		        	    $this->setState(804);
		        	    $this->truncateTable();
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function dmlStatement(): Context\DmlStatementContext
		{
		    $localContext = new Context\DmlStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 10, self::RULE_dmlStatement);

		    try {
		        $this->setState(820);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 11, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(807);
		        	    $this->selectStatement();
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(808);
		        	    $this->insertStatement();
		        	break;

		        	case 3:
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(809);
		        	    $this->updateStatement();
		        	break;

		        	case 4:
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(810);
		        	    $this->deleteStatement();
		        	break;

		        	case 5:
		        	    $this->enterOuterAlt($localContext, 5);
		        	    $this->setState(811);
		        	    $this->replaceStatement();
		        	break;

		        	case 6:
		        	    $this->enterOuterAlt($localContext, 6);
		        	    $this->setState(812);
		        	    $this->callStatement();
		        	break;

		        	case 7:
		        	    $this->enterOuterAlt($localContext, 7);
		        	    $this->setState(813);
		        	    $this->loadDataStatement();
		        	break;

		        	case 8:
		        	    $this->enterOuterAlt($localContext, 8);
		        	    $this->setState(814);
		        	    $this->loadXmlStatement();
		        	break;

		        	case 9:
		        	    $this->enterOuterAlt($localContext, 9);
		        	    $this->setState(815);
		        	    $this->doStatement();
		        	break;

		        	case 10:
		        	    $this->enterOuterAlt($localContext, 10);
		        	    $this->setState(816);
		        	    $this->handlerStatement();
		        	break;

		        	case 11:
		        	    $this->enterOuterAlt($localContext, 11);
		        	    $this->setState(817);
		        	    $this->valuesStatement();
		        	break;

		        	case 12:
		        	    $this->enterOuterAlt($localContext, 12);
		        	    $this->setState(818);
		        	    $this->withStatement();
		        	break;

		        	case 13:
		        	    $this->enterOuterAlt($localContext, 13);
		        	    $this->setState(819);
		        	    $this->tableStatement();
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function transactionStatement(): Context\TransactionStatementContext
		{
		    $localContext = new Context\TransactionStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 12, self::RULE_transactionStatement);

		    try {
		        $this->setState(831);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 12, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(822);
		        	    $this->startTransaction();
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(823);
		        	    $this->beginWork();
		        	break;

		        	case 3:
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(824);
		        	    $this->commitWork();
		        	break;

		        	case 4:
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(825);
		        	    $this->rollbackWork();
		        	break;

		        	case 5:
		        	    $this->enterOuterAlt($localContext, 5);
		        	    $this->setState(826);
		        	    $this->savepointStatement();
		        	break;

		        	case 6:
		        	    $this->enterOuterAlt($localContext, 6);
		        	    $this->setState(827);
		        	    $this->rollbackStatement();
		        	break;

		        	case 7:
		        	    $this->enterOuterAlt($localContext, 7);
		        	    $this->setState(828);
		        	    $this->releaseStatement();
		        	break;

		        	case 8:
		        	    $this->enterOuterAlt($localContext, 8);
		        	    $this->setState(829);
		        	    $this->lockTables();
		        	break;

		        	case 9:
		        	    $this->enterOuterAlt($localContext, 9);
		        	    $this->setState(830);
		        	    $this->unlockTables();
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function replicationStatement(): Context\ReplicationStatementContext
		{
		    $localContext = new Context\ReplicationStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 14, self::RULE_replicationStatement);

		    try {
		        $this->setState(848);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 13, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(833);
		        	    $this->changeMaster();
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(834);
		        	    $this->changeReplicationFilter();
		        	break;

		        	case 3:
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(835);
		        	    $this->purgeBinaryLogs();
		        	break;

		        	case 4:
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(836);
		        	    $this->resetMaster();
		        	break;

		        	case 5:
		        	    $this->enterOuterAlt($localContext, 5);
		        	    $this->setState(837);
		        	    $this->resetSlave();
		        	break;

		        	case 6:
		        	    $this->enterOuterAlt($localContext, 6);
		        	    $this->setState(838);
		        	    $this->startSlave();
		        	break;

		        	case 7:
		        	    $this->enterOuterAlt($localContext, 7);
		        	    $this->setState(839);
		        	    $this->stopSlave();
		        	break;

		        	case 8:
		        	    $this->enterOuterAlt($localContext, 8);
		        	    $this->setState(840);
		        	    $this->startGroupReplication();
		        	break;

		        	case 9:
		        	    $this->enterOuterAlt($localContext, 9);
		        	    $this->setState(841);
		        	    $this->stopGroupReplication();
		        	break;

		        	case 10:
		        	    $this->enterOuterAlt($localContext, 10);
		        	    $this->setState(842);
		        	    $this->xaStartTransaction();
		        	break;

		        	case 11:
		        	    $this->enterOuterAlt($localContext, 11);
		        	    $this->setState(843);
		        	    $this->xaEndTransaction();
		        	break;

		        	case 12:
		        	    $this->enterOuterAlt($localContext, 12);
		        	    $this->setState(844);
		        	    $this->xaPrepareStatement();
		        	break;

		        	case 13:
		        	    $this->enterOuterAlt($localContext, 13);
		        	    $this->setState(845);
		        	    $this->xaCommitWork();
		        	break;

		        	case 14:
		        	    $this->enterOuterAlt($localContext, 14);
		        	    $this->setState(846);
		        	    $this->xaRollbackWork();
		        	break;

		        	case 15:
		        	    $this->enterOuterAlt($localContext, 15);
		        	    $this->setState(847);
		        	    $this->xaRecoverWork();
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function preparedStatement(): Context\PreparedStatementContext
		{
		    $localContext = new Context\PreparedStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 16, self::RULE_preparedStatement);

		    try {
		        $this->setState(853);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::PREPARE:
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(850);
		            	$this->prepareStatement();
		            	break;

		            case self::EXECUTE:
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(851);
		            	$this->executeStatement();
		            	break;

		            case self::DROP:
		            case self::DEALLOCATE:
		            	$this->enterOuterAlt($localContext, 3);
		            	$this->setState(852);
		            	$this->deallocatePrepare();
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function compoundStatement(): Context\CompoundStatementContext
		{
		    $localContext = new Context\CompoundStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 18, self::RULE_compoundStatement);

		    try {
		        $this->setState(865);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 15, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(855);
		        	    $this->blockStatement();
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(856);
		        	    $this->caseStatement();
		        	break;

		        	case 3:
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(857);
		        	    $this->ifStatement();
		        	break;

		        	case 4:
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(858);
		        	    $this->leaveStatement();
		        	break;

		        	case 5:
		        	    $this->enterOuterAlt($localContext, 5);
		        	    $this->setState(859);
		        	    $this->loopStatement();
		        	break;

		        	case 6:
		        	    $this->enterOuterAlt($localContext, 6);
		        	    $this->setState(860);
		        	    $this->repeatStatement();
		        	break;

		        	case 7:
		        	    $this->enterOuterAlt($localContext, 7);
		        	    $this->setState(861);
		        	    $this->whileStatement();
		        	break;

		        	case 8:
		        	    $this->enterOuterAlt($localContext, 8);
		        	    $this->setState(862);
		        	    $this->iterateStatement();
		        	break;

		        	case 9:
		        	    $this->enterOuterAlt($localContext, 9);
		        	    $this->setState(863);
		        	    $this->returnStatement();
		        	break;

		        	case 10:
		        	    $this->enterOuterAlt($localContext, 10);
		        	    $this->setState(864);
		        	    $this->cursorStatement();
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function administrationStatement(): Context\AdministrationStatementContext
		{
		    $localContext = new Context\AdministrationStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 20, self::RULE_administrationStatement);

		    try {
		        $this->setState(892);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 16, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(867);
		        	    $this->alterUser();
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(868);
		        	    $this->createUser();
		        	break;

		        	case 3:
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(869);
		        	    $this->dropUser();
		        	break;

		        	case 4:
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(870);
		        	    $this->grantStatement();
		        	break;

		        	case 5:
		        	    $this->enterOuterAlt($localContext, 5);
		        	    $this->setState(871);
		        	    $this->grantProxy();
		        	break;

		        	case 6:
		        	    $this->enterOuterAlt($localContext, 6);
		        	    $this->setState(872);
		        	    $this->renameUser();
		        	break;

		        	case 7:
		        	    $this->enterOuterAlt($localContext, 7);
		        	    $this->setState(873);
		        	    $this->revokeStatement();
		        	break;

		        	case 8:
		        	    $this->enterOuterAlt($localContext, 8);
		        	    $this->setState(874);
		        	    $this->revokeProxy();
		        	break;

		        	case 9:
		        	    $this->enterOuterAlt($localContext, 9);
		        	    $this->setState(875);
		        	    $this->analyzeTable();
		        	break;

		        	case 10:
		        	    $this->enterOuterAlt($localContext, 10);
		        	    $this->setState(876);
		        	    $this->checkTable();
		        	break;

		        	case 11:
		        	    $this->enterOuterAlt($localContext, 11);
		        	    $this->setState(877);
		        	    $this->checksumTable();
		        	break;

		        	case 12:
		        	    $this->enterOuterAlt($localContext, 12);
		        	    $this->setState(878);
		        	    $this->optimizeTable();
		        	break;

		        	case 13:
		        	    $this->enterOuterAlt($localContext, 13);
		        	    $this->setState(879);
		        	    $this->repairTable();
		        	break;

		        	case 14:
		        	    $this->enterOuterAlt($localContext, 14);
		        	    $this->setState(880);
		        	    $this->createUdfunction();
		        	break;

		        	case 15:
		        	    $this->enterOuterAlt($localContext, 15);
		        	    $this->setState(881);
		        	    $this->installPlugin();
		        	break;

		        	case 16:
		        	    $this->enterOuterAlt($localContext, 16);
		        	    $this->setState(882);
		        	    $this->uninstallPlugin();
		        	break;

		        	case 17:
		        	    $this->enterOuterAlt($localContext, 17);
		        	    $this->setState(883);
		        	    $this->setStatement();
		        	break;

		        	case 18:
		        	    $this->enterOuterAlt($localContext, 18);
		        	    $this->setState(884);
		        	    $this->showStatement();
		        	break;

		        	case 19:
		        	    $this->enterOuterAlt($localContext, 19);
		        	    $this->setState(885);
		        	    $this->binlogStatement();
		        	break;

		        	case 20:
		        	    $this->enterOuterAlt($localContext, 20);
		        	    $this->setState(886);
		        	    $this->cacheIndexStatement();
		        	break;

		        	case 21:
		        	    $this->enterOuterAlt($localContext, 21);
		        	    $this->setState(887);
		        	    $this->flushStatement();
		        	break;

		        	case 22:
		        	    $this->enterOuterAlt($localContext, 22);
		        	    $this->setState(888);
		        	    $this->killStatement();
		        	break;

		        	case 23:
		        	    $this->enterOuterAlt($localContext, 23);
		        	    $this->setState(889);
		        	    $this->loadIndexIntoCache();
		        	break;

		        	case 24:
		        	    $this->enterOuterAlt($localContext, 24);
		        	    $this->setState(890);
		        	    $this->resetStatement();
		        	break;

		        	case 25:
		        	    $this->enterOuterAlt($localContext, 25);
		        	    $this->setState(891);
		        	    $this->shutdownStatement();
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function utilityStatement(): Context\UtilityStatementContext
		{
		    $localContext = new Context\UtilityStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 22, self::RULE_utilityStatement);

		    try {
		        $this->setState(901);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 17, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(894);
		        	    $this->simpleDescribeStatement();
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(895);
		        	    $this->fullDescribeStatement();
		        	break;

		        	case 3:
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(896);
		        	    $this->helpStatement();
		        	break;

		        	case 4:
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(897);
		        	    $this->useStatement();
		        	break;

		        	case 5:
		        	    $this->enterOuterAlt($localContext, 5);
		        	    $this->setState(898);
		        	    $this->signalStatement();
		        	break;

		        	case 6:
		        	    $this->enterOuterAlt($localContext, 6);
		        	    $this->setState(899);
		        	    $this->resignalStatement();
		        	break;

		        	case 7:
		        	    $this->enterOuterAlt($localContext, 7);
		        	    $this->setState(900);
		        	    $this->diagnosticsStatement();
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function createDatabase(): Context\CreateDatabaseContext
		{
		    $localContext = new Context\CreateDatabaseContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 24, self::RULE_createDatabase);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(903);
		        $this->match(self::CREATE);
		        $this->setState(904);

		        $localContext->dbFormat = $this->input->LT(1);
		        $_la = $this->input->LA(1);

		        if (!($_la === self::DATABASE || $_la === self::SCHEMA)) {
		        	    $localContext->dbFormat = $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		        $this->setState(906);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 18, $this->ctx)) {
		            case 1:
		        	    $this->setState(905);
		        	    $this->ifNotExists();
		        	break;
		        }
		        $this->setState(908);
		        $this->uid();
		        $this->setState(912);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while (((($_la) & ~0x3f) === 0 && ((1 << $_la) & 4398214283264) !== 0) || $_la === self::READ || $_la === self::CHAR || $_la === self::ENCRYPTION || $_la === self::CHARSET) {
		        	$this->setState(909);
		        	$this->createDatabaseOption();
		        	$this->setState(914);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function createEvent(): Context\CreateEventContext
		{
		    $localContext = new Context\CreateEventContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 26, self::RULE_createEvent);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(915);
		        $this->match(self::CREATE);
		        $this->setState(917);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::DEFINER) {
		        	$this->setState(916);
		        	$this->ownerStatement();
		        }
		        $this->setState(919);
		        $this->match(self::EVENT);
		        $this->setState(921);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 21, $this->ctx)) {
		            case 1:
		        	    $this->setState(920);
		        	    $this->ifNotExists();
		        	break;
		        }
		        $this->setState(923);
		        $this->fullId();
		        $this->setState(924);
		        $this->match(self::ON);
		        $this->setState(925);
		        $this->match(self::SCHEDULE);
		        $this->setState(926);
		        $this->scheduleExpression();
		        $this->setState(933);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::ON) {
		        	$this->setState(927);
		        	$this->match(self::ON);
		        	$this->setState(928);
		        	$this->match(self::COMPLETION);
		        	$this->setState(930);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);

		        	if ($_la === self::NOT) {
		        		$this->setState(929);
		        		$this->match(self::NOT);
		        	}
		        	$this->setState(932);
		        	$this->match(self::PRESERVE);
		        }
		        $this->setState(936);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::DISABLE || $_la === self::ENABLE) {
		        	$this->setState(935);
		        	$this->enableType();
		        }
		        $this->setState(940);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::COMMENT) {
		        	$this->setState(938);
		        	$this->match(self::COMMENT);
		        	$this->setState(939);
		        	$this->match(self::STRING_LITERAL);
		        }
		        $this->setState(942);
		        $this->match(self::DO);
		        $this->setState(943);
		        $this->routineBody();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function createIndex(): Context\CreateIndexContext
		{
		    $localContext = new Context\CreateIndexContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 28, self::RULE_createIndex);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(945);
		        $this->match(self::CREATE);
		        $this->setState(947);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::OFFLINE || $_la === self::ONLINE) {
		        	$this->setState(946);

		        	$localContext->intimeAction = $this->input->LT(1);
		        	$_la = $this->input->LA(1);

		        	if (!($_la === self::OFFLINE || $_la === self::ONLINE)) {
		        		    $localContext->intimeAction = $this->errorHandler->recoverInline($this);
		        	} else {
		        		if ($this->input->LA(1) === Token::EOF) {
		        		    $this->matchedEOF = true;
		        	    }

		        		$this->errorHandler->reportMatch($this);
		        		$this->consume();
		        	}
		        }
		        $this->setState(950);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::FULLTEXT || $_la === self::SPATIAL || $_la === self::UNIQUE) {
		        	$this->setState(949);

		        	$localContext->indexCategory = $this->input->LT(1);
		        	$_la = $this->input->LA(1);

		        	if (!($_la === self::FULLTEXT || $_la === self::SPATIAL || $_la === self::UNIQUE)) {
		        		    $localContext->indexCategory = $this->errorHandler->recoverInline($this);
		        	} else {
		        		if ($this->input->LA(1) === Token::EOF) {
		        		    $this->matchedEOF = true;
		        	    }

		        		$this->errorHandler->reportMatch($this);
		        		$this->consume();
		        	}
		        }
		        $this->setState(952);
		        $this->match(self::INDEX);
		        $this->setState(953);
		        $this->uid();
		        $this->setState(955);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::USING) {
		        	$this->setState(954);
		        	$this->indexType();
		        }
		        $this->setState(957);
		        $this->match(self::ON);
		        $this->setState(958);
		        $this->tableName();
		        $this->setState(959);
		        $this->indexColumnNames();
		        $this->setState(963);
		        $this->errorHandler->sync($this);

		        $alt = $this->getInterpreter()->adaptivePredict($this->input, 29, $this->ctx);

		        while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
		        	if ($alt === 1) {
		        		$this->setState(960);
		        		$this->indexOption(); 
		        	}

		        	$this->setState(965);
		        	$this->errorHandler->sync($this);

		        	$alt = $this->getInterpreter()->adaptivePredict($this->input, 29, $this->ctx);
		        }
		        $this->setState(978);
		        $this->errorHandler->sync($this);

		        $alt = $this->getInterpreter()->adaptivePredict($this->input, 33, $this->ctx);

		        while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
		        	if ($alt === 1) {
		        		$this->setState(976);
		        		$this->errorHandler->sync($this);

		        		switch ($this->input->LA(1)) {
		        		    case self::ALGORITHM:
		        		    	$this->setState(966);
		        		    	$this->match(self::ALGORITHM);
		        		    	$this->setState(968);
		        		    	$this->errorHandler->sync($this);
		        		    	$_la = $this->input->LA(1);

		        		    	if ($_la === self::EQUAL_SYMBOL) {
		        		    		$this->setState(967);
		        		    		$this->match(self::EQUAL_SYMBOL);
		        		    	}
		        		    	$this->setState(970);

		        		    	$localContext->algType = $this->input->LT(1);
		        		    	$_la = $this->input->LA(1);

		        		    	if (!($_la === self::DEFAULT || $_la === self::COPY || $_la === self::INPLACE)) {
		        		    		    $localContext->algType = $this->errorHandler->recoverInline($this);
		        		    	} else {
		        		    		if ($this->input->LA(1) === Token::EOF) {
		        		    		    $this->matchedEOF = true;
		        		    	    }

		        		    		$this->errorHandler->reportMatch($this);
		        		    		$this->consume();
		        		    	}
		        		    	break;

		        		    case self::LOCK:
		        		    	$this->setState(971);
		        		    	$this->match(self::LOCK);
		        		    	$this->setState(973);
		        		    	$this->errorHandler->sync($this);
		        		    	$_la = $this->input->LA(1);

		        		    	if ($_la === self::EQUAL_SYMBOL) {
		        		    		$this->setState(972);
		        		    		$this->match(self::EQUAL_SYMBOL);
		        		    	}
		        		    	$this->setState(975);

		        		    	$localContext->lockType = $this->input->LT(1);
		        		    	$_la = $this->input->LA(1);

		        		    	if (!($_la === self::DEFAULT || $_la === self::EXCLUSIVE || $_la === self::NONE || $_la === self::SHARED)) {
		        		    		    $localContext->lockType = $this->errorHandler->recoverInline($this);
		        		    	} else {
		        		    		if ($this->input->LA(1) === Token::EOF) {
		        		    		    $this->matchedEOF = true;
		        		    	    }

		        		    		$this->errorHandler->reportMatch($this);
		        		    		$this->consume();
		        		    	}
		        		    	break;

		        		default:
		        			throw new NoViableAltException($this);
		        		} 
		        	}

		        	$this->setState(980);
		        	$this->errorHandler->sync($this);

		        	$alt = $this->getInterpreter()->adaptivePredict($this->input, 33, $this->ctx);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function createLogfileGroup(): Context\CreateLogfileGroupContext
		{
		    $localContext = new Context\CreateLogfileGroupContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 30, self::RULE_createLogfileGroup);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(981);
		        $this->match(self::CREATE);
		        $this->setState(982);
		        $this->match(self::LOGFILE);
		        $this->setState(983);
		        $this->match(self::GROUP);
		        $this->setState(984);
		        $this->uid();
		        $this->setState(985);
		        $this->match(self::ADD);
		        $this->setState(986);
		        $this->match(self::UNDOFILE);
		        $this->setState(987);
		        $localContext->undoFile = $this->match(self::STRING_LITERAL);
		        $this->setState(993);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::INITIAL_SIZE) {
		        	$this->setState(988);
		        	$this->match(self::INITIAL_SIZE);
		        	$this->setState(990);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);

		        	if ($_la === self::EQUAL_SYMBOL) {
		        		$this->setState(989);
		        		$this->match(self::EQUAL_SYMBOL);
		        	}
		        	$this->setState(992);
		        	$localContext->initSize = $this->fileSizeLiteral();
		        }
		        $this->setState(1000);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::UNDO_BUFFER_SIZE) {
		        	$this->setState(995);
		        	$this->match(self::UNDO_BUFFER_SIZE);
		        	$this->setState(997);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);

		        	if ($_la === self::EQUAL_SYMBOL) {
		        		$this->setState(996);
		        		$this->match(self::EQUAL_SYMBOL);
		        	}
		        	$this->setState(999);
		        	$localContext->undoSize = $this->fileSizeLiteral();
		        }
		        $this->setState(1007);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::REDO_BUFFER_SIZE) {
		        	$this->setState(1002);
		        	$this->match(self::REDO_BUFFER_SIZE);
		        	$this->setState(1004);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);

		        	if ($_la === self::EQUAL_SYMBOL) {
		        		$this->setState(1003);
		        		$this->match(self::EQUAL_SYMBOL);
		        	}
		        	$this->setState(1006);
		        	$localContext->redoSize = $this->fileSizeLiteral();
		        }
		        $this->setState(1014);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::NODEGROUP) {
		        	$this->setState(1009);
		        	$this->match(self::NODEGROUP);
		        	$this->setState(1011);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);

		        	if ($_la === self::EQUAL_SYMBOL) {
		        		$this->setState(1010);
		        		$this->match(self::EQUAL_SYMBOL);
		        	}
		        	$this->setState(1013);
		        	$this->uid();
		        }
		        $this->setState(1017);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::WAIT) {
		        	$this->setState(1016);
		        	$this->match(self::WAIT);
		        }
		        $this->setState(1024);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::COMMENT) {
		        	$this->setState(1019);
		        	$this->match(self::COMMENT);
		        	$this->setState(1021);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);

		        	if ($_la === self::EQUAL_SYMBOL) {
		        		$this->setState(1020);
		        		$this->match(self::EQUAL_SYMBOL);
		        	}
		        	$this->setState(1023);
		        	$localContext->comment = $this->match(self::STRING_LITERAL);
		        }
		        $this->setState(1026);
		        $this->match(self::ENGINE);
		        $this->setState(1028);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::EQUAL_SYMBOL) {
		        	$this->setState(1027);
		        	$this->match(self::EQUAL_SYMBOL);
		        }
		        $this->setState(1030);
		        $this->engineName();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function createProcedure(): Context\CreateProcedureContext
		{
		    $localContext = new Context\CreateProcedureContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 32, self::RULE_createProcedure);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(1032);
		        $this->match(self::CREATE);
		        $this->setState(1034);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::DEFINER) {
		        	$this->setState(1033);
		        	$this->ownerStatement();
		        }
		        $this->setState(1036);
		        $this->match(self::PROCEDURE);
		        $this->setState(1037);
		        $this->fullId();
		        $this->setState(1038);
		        $this->match(self::LR_BRACKET);
		        $this->setState(1040);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if (((($_la) & ~0x3f) === 0 && ((1 << $_la) & 756891332513122304) !== 0) || (((($_la - 73)) & ~0x3f) === 0 && ((1 << ($_la - 73)) & 151169654698547409) !== 0) || (((($_la - 140)) & ~0x3f) === 0 && ((1 << ($_la - 140)) & 268698883) !== 0) || (((($_la - 217)) & ~0x3f) === 0 && ((1 << ($_la - 217)) & -17174494689) !== 0) || (((($_la - 281)) & ~0x3f) === 0 && ((1 << ($_la - 281)) & -1099511627777) !== 0) || (((($_la - 345)) & ~0x3f) === 0 && ((1 << ($_la - 345)) & -2882305960540372993) !== 0) || (((($_la - 409)) & ~0x3f) === 0 && ((1 << ($_la - 409)) & -4398063288321) !== 0) || (((($_la - 473)) & ~0x3f) === 0 && ((1 << ($_la - 473)) & -16325548649218049) !== 0) || (((($_la - 537)) & ~0x3f) === 0 && ((1 << ($_la - 537)) & -81064793296864001) !== 0) || (((($_la - 601)) & ~0x3f) === 0 && ((1 << ($_la - 601)) & -68719476801) !== 0) || (((($_la - 665)) & ~0x3f) === 0 && ((1 << ($_la - 665)) & -22236531750340609) !== 0) || (((($_la - 729)) & ~0x3f) === 0 && ((1 << ($_la - 729)) & -65) !== 0) || (((($_la - 793)) & ~0x3f) === 0 && ((1 << ($_la - 793)) & -6145) !== 0) || (((($_la - 857)) & ~0x3f) === 0 && ((1 << ($_la - 857)) & -1) !== 0) || (((($_la - 921)) & ~0x3f) === 0 && ((1 << ($_la - 921)) & -1) !== 0) || (((($_la - 985)) & ~0x3f) === 0 && ((1 << ($_la - 985)) & -1) !== 0) || (((($_la - 1049)) & ~0x3f) === 0 && ((1 << ($_la - 1049)) & 576460752303423487) !== 0) || (((($_la - 1123)) & ~0x3f) === 0 && ((1 << ($_la - 1123)) & 8627683329) !== 0)) {
		        	$this->setState(1039);
		        	$this->procedureParameter();
		        }
		        $this->setState(1046);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::COMMA) {
		        	$this->setState(1042);
		        	$this->match(self::COMMA);
		        	$this->setState(1043);
		        	$this->procedureParameter();
		        	$this->setState(1048);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		        $this->setState(1049);
		        $this->match(self::RR_BRACKET);
		        $this->setState(1053);
		        $this->errorHandler->sync($this);

		        $alt = $this->getInterpreter()->adaptivePredict($this->input, 49, $this->ctx);

		        while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
		        	if ($alt === 1) {
		        		$this->setState(1050);
		        		$this->routineOption(); 
		        	}

		        	$this->setState(1055);
		        	$this->errorHandler->sync($this);

		        	$alt = $this->getInterpreter()->adaptivePredict($this->input, 49, $this->ctx);
		        }
		        $this->setState(1056);
		        $this->routineBody();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function createFunction(): Context\CreateFunctionContext
		{
		    $localContext = new Context\CreateFunctionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 34, self::RULE_createFunction);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(1058);
		        $this->match(self::CREATE);
		        $this->setState(1060);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::DEFINER) {
		        	$this->setState(1059);
		        	$this->ownerStatement();
		        }
		        $this->setState(1063);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::AGGREGATE) {
		        	$this->setState(1062);
		        	$this->match(self::AGGREGATE);
		        }
		        $this->setState(1065);
		        $this->match(self::FUNCTION);
		        $this->setState(1067);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 52, $this->ctx)) {
		            case 1:
		        	    $this->setState(1066);
		        	    $this->ifNotExists();
		        	break;
		        }
		        $this->setState(1069);
		        $this->fullId();
		        $this->setState(1070);
		        $this->match(self::LR_BRACKET);
		        $this->setState(1072);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if (((($_la) & ~0x3f) === 0 && ((1 << $_la) & 756891332513122304) !== 0) || (((($_la - 73)) & ~0x3f) === 0 && ((1 << ($_la - 73)) & 146666055071174737) !== 0) || (((($_la - 140)) & ~0x3f) === 0 && ((1 << ($_la - 140)) & 268698883) !== 0) || (((($_la - 217)) & ~0x3f) === 0 && ((1 << ($_la - 217)) & -17174494689) !== 0) || (((($_la - 281)) & ~0x3f) === 0 && ((1 << ($_la - 281)) & -1099511627777) !== 0) || (((($_la - 345)) & ~0x3f) === 0 && ((1 << ($_la - 345)) & -2882305960540372993) !== 0) || (((($_la - 409)) & ~0x3f) === 0 && ((1 << ($_la - 409)) & -4398063288321) !== 0) || (((($_la - 473)) & ~0x3f) === 0 && ((1 << ($_la - 473)) & -16325548649218049) !== 0) || (((($_la - 537)) & ~0x3f) === 0 && ((1 << ($_la - 537)) & -81064793296864001) !== 0) || (((($_la - 601)) & ~0x3f) === 0 && ((1 << ($_la - 601)) & -68719476801) !== 0) || (((($_la - 665)) & ~0x3f) === 0 && ((1 << ($_la - 665)) & -22236531750340609) !== 0) || (((($_la - 729)) & ~0x3f) === 0 && ((1 << ($_la - 729)) & -65) !== 0) || (((($_la - 793)) & ~0x3f) === 0 && ((1 << ($_la - 793)) & -6145) !== 0) || (((($_la - 857)) & ~0x3f) === 0 && ((1 << ($_la - 857)) & -1) !== 0) || (((($_la - 921)) & ~0x3f) === 0 && ((1 << ($_la - 921)) & -1) !== 0) || (((($_la - 985)) & ~0x3f) === 0 && ((1 << ($_la - 985)) & -1) !== 0) || (((($_la - 1049)) & ~0x3f) === 0 && ((1 << ($_la - 1049)) & 576460752303423487) !== 0) || (((($_la - 1123)) & ~0x3f) === 0 && ((1 << ($_la - 1123)) & 8627683329) !== 0)) {
		        	$this->setState(1071);
		        	$this->functionParameter();
		        }
		        $this->setState(1078);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::COMMA) {
		        	$this->setState(1074);
		        	$this->match(self::COMMA);
		        	$this->setState(1075);
		        	$this->functionParameter();
		        	$this->setState(1080);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		        $this->setState(1081);
		        $this->match(self::RR_BRACKET);
		        $this->setState(1082);
		        $this->match(self::RETURNS);
		        $this->setState(1083);
		        $this->dataType();
		        $this->setState(1087);
		        $this->errorHandler->sync($this);

		        $alt = $this->getInterpreter()->adaptivePredict($this->input, 55, $this->ctx);

		        while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
		        	if ($alt === 1) {
		        		$this->setState(1084);
		        		$this->routineOption(); 
		        	}

		        	$this->setState(1089);
		        	$this->errorHandler->sync($this);

		        	$alt = $this->getInterpreter()->adaptivePredict($this->input, 55, $this->ctx);
		        }
		        $this->setState(1092);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::ALTER:
		            case self::ANALYZE:
		            case self::ARRAY:
		            case self::ATTRIBUTE:
		            case self::BUCKETS:
		            case self::CALL:
		            case self::CHANGE:
		            case self::CHECK:
		            case self::CONDITION:
		            case self::CREATE:
		            case self::CURRENT:
		            case self::CURRENT_USER:
		            case self::DATABASE:
		            case self::DEFAULT:
		            case self::DELETE:
		            case self::DESC:
		            case self::DESCRIBE:
		            case self::DIAGNOSTICS:
		            case self::DROP:
		            case self::EMPTY:
		            case self::ENFORCED:
		            case self::EXCEPT:
		            case self::EXPLAIN:
		            case self::GET:
		            case self::GRANT:
		            case self::GROUP:
		            case self::IF:
		            case self::IGNORED:
		            case self::INSERT:
		            case self::KILL:
		            case self::LATERAL:
		            case self::LEFT:
		            case self::LOAD:
		            case self::LOCK:
		            case self::NUMBER:
		            case self::OPTIMIZE:
		            case self::OPTIONAL:
		            case self::ORDER:
		            case self::PRIMARY:
		            case self::PURGE:
		            case self::RELEASE:
		            case self::RENAME:
		            case self::REPEAT:
		            case self::REPLACE:
		            case self::RESIGNAL:
		            case self::REVOKE:
		            case self::RIGHT:
		            case self::SCHEMA:
		            case self::SELECT:
		            case self::SET:
		            case self::SHOW:
		            case self::SIGNAL:
		            case self::SKIP_QUERY_REWRITE:
		            case self::STACKED:
		            case self::TABLE:
		            case self::UNLOCK:
		            case self::UPDATE:
		            case self::USE:
		            case self::VALUES:
		            case self::WITH:
		            case self::DATE:
		            case self::TIME:
		            case self::TIMESTAMP:
		            case self::DATETIME:
		            case self::YEAR:
		            case self::BINARY:
		            case self::TEXT:
		            case self::ENUM:
		            case self::SERIAL:
		            case self::JSON_ARRAY:
		            case self::JSON_ARRAYAGG:
		            case self::JSON_ARRAY_APPEND:
		            case self::JSON_ARRAY_INSERT:
		            case self::JSON_CONTAINS:
		            case self::JSON_CONTAINS_PATH:
		            case self::JSON_DEPTH:
		            case self::JSON_EXTRACT:
		            case self::JSON_INSERT:
		            case self::JSON_KEYS:
		            case self::JSON_LENGTH:
		            case self::JSON_MERGE:
		            case self::JSON_MERGE_PATCH:
		            case self::JSON_MERGE_PRESERVE:
		            case self::JSON_OBJECT:
		            case self::JSON_OBJECTAGG:
		            case self::JSON_OVERLAPS:
		            case self::JSON_PRETTY:
		            case self::JSON_QUOTE:
		            case self::JSON_REMOVE:
		            case self::JSON_REPLACE:
		            case self::JSON_SCHEMA_VALID:
		            case self::JSON_SCHEMA_VALIDATION_REPORT:
		            case self::JSON_SEARCH:
		            case self::JSON_SET:
		            case self::JSON_STORAGE_FREE:
		            case self::JSON_STORAGE_SIZE:
		            case self::JSON_TABLE:
		            case self::JSON_TYPE:
		            case self::JSON_UNQUOTE:
		            case self::JSON_VALID:
		            case self::JSON_VALUE:
		            case self::NESTED:
		            case self::ORDINALITY:
		            case self::PATH:
		            case self::AVG:
		            case self::BIT_AND:
		            case self::BIT_OR:
		            case self::BIT_XOR:
		            case self::COUNT:
		            case self::CUME_DIST:
		            case self::DENSE_RANK:
		            case self::FIRST_VALUE:
		            case self::GROUP_CONCAT:
		            case self::LAG:
		            case self::LAST_VALUE:
		            case self::LEAD:
		            case self::MAX:
		            case self::MIN:
		            case self::NTILE:
		            case self::NTH_VALUE:
		            case self::PERCENT_RANK:
		            case self::RANK:
		            case self::ROW_NUMBER:
		            case self::STD:
		            case self::STDDEV:
		            case self::STDDEV_POP:
		            case self::STDDEV_SAMP:
		            case self::SUM:
		            case self::VAR_POP:
		            case self::VAR_SAMP:
		            case self::VARIANCE:
		            case self::CURRENT_DATE:
		            case self::CURRENT_TIME:
		            case self::CURRENT_TIMESTAMP:
		            case self::LOCALTIME:
		            case self::CURDATE:
		            case self::CURTIME:
		            case self::DATE_ADD:
		            case self::DATE_SUB:
		            case self::LOCALTIMESTAMP:
		            case self::NOW:
		            case self::POSITION:
		            case self::SUBSTR:
		            case self::SUBSTRING:
		            case self::SYSDATE:
		            case self::TRIM:
		            case self::UTC_DATE:
		            case self::UTC_TIME:
		            case self::UTC_TIMESTAMP:
		            case self::ACCOUNT:
		            case self::ACTION:
		            case self::AFTER:
		            case self::AGGREGATE:
		            case self::ALGORITHM:
		            case self::ANY:
		            case self::AT:
		            case self::AUTHORS:
		            case self::AUTOCOMMIT:
		            case self::AUTOEXTEND_SIZE:
		            case self::AUTO_INCREMENT:
		            case self::AVG_ROW_LENGTH:
		            case self::BEGIN:
		            case self::BINLOG:
		            case self::BIT:
		            case self::BLOCK:
		            case self::BOOL:
		            case self::BOOLEAN:
		            case self::BTREE:
		            case self::CACHE:
		            case self::CASCADED:
		            case self::CHAIN:
		            case self::CHANGED:
		            case self::CHANNEL:
		            case self::CHECKSUM:
		            case self::PAGE_CHECKSUM:
		            case self::CIPHER:
		            case self::CLASS_ORIGIN:
		            case self::CLIENT:
		            case self::CLOSE:
		            case self::CLUSTERING:
		            case self::COALESCE:
		            case self::CODE:
		            case self::COLUMNS:
		            case self::COLUMN_FORMAT:
		            case self::COLUMN_NAME:
		            case self::COMMENT:
		            case self::COMMIT:
		            case self::COMPACT:
		            case self::COMPLETION:
		            case self::COMPRESSED:
		            case self::COMPRESSION:
		            case self::CONCURRENT:
		            case self::CONNECT:
		            case self::CONNECTION:
		            case self::CONSISTENT:
		            case self::CONSTRAINT_CATALOG:
		            case self::CONSTRAINT_SCHEMA:
		            case self::CONSTRAINT_NAME:
		            case self::CONTAINS:
		            case self::CONTEXT:
		            case self::CONTRIBUTORS:
		            case self::COPY:
		            case self::CPU:
		            case self::CURSOR_NAME:
		            case self::DATA:
		            case self::DATAFILE:
		            case self::DEALLOCATE:
		            case self::DEFAULT_AUTH:
		            case self::DEFINER:
		            case self::DELAY_KEY_WRITE:
		            case self::DES_KEY_FILE:
		            case self::DIRECTORY:
		            case self::DISABLE:
		            case self::DISCARD:
		            case self::DISK:
		            case self::DO:
		            case self::DUMPFILE:
		            case self::DUPLICATE:
		            case self::DYNAMIC:
		            case self::ENABLE:
		            case self::ENCRYPTION:
		            case self::END:
		            case self::ENDS:
		            case self::ENGINE:
		            case self::ENGINES:
		            case self::ERROR:
		            case self::ERRORS:
		            case self::ESCAPE:
		            case self::EVEN:
		            case self::EVENT:
		            case self::EVENTS:
		            case self::EVERY:
		            case self::EXCHANGE:
		            case self::EXCLUSIVE:
		            case self::EXPIRE:
		            case self::EXPORT:
		            case self::EXTENDED:
		            case self::EXTENT_SIZE:
		            case self::FAILED_LOGIN_ATTEMPTS:
		            case self::FAST:
		            case self::FAULTS:
		            case self::FIELDS:
		            case self::FILE_BLOCK_SIZE:
		            case self::FILTER:
		            case self::FIRST:
		            case self::FIXED:
		            case self::FLUSH:
		            case self::FOLLOWS:
		            case self::FOUND:
		            case self::FULL:
		            case self::FUNCTION:
		            case self::GENERAL:
		            case self::GLOBAL:
		            case self::GRANTS:
		            case self::GROUP_REPLICATION:
		            case self::HANDLER:
		            case self::HASH:
		            case self::HELP:
		            case self::HISTORY:
		            case self::HOST:
		            case self::HOSTS:
		            case self::IDENTIFIED:
		            case self::IGNORE_SERVER_IDS:
		            case self::IMPORT:
		            case self::INDEXES:
		            case self::INITIAL_SIZE:
		            case self::INPLACE:
		            case self::INSERT_METHOD:
		            case self::INSTALL:
		            case self::INSTANCE:
		            case self::INSTANT:
		            case self::INVISIBLE:
		            case self::INVOKER:
		            case self::IO:
		            case self::IO_THREAD:
		            case self::IPC:
		            case self::ISOLATION:
		            case self::ISSUER:
		            case self::JSON:
		            case self::KEY_BLOCK_SIZE:
		            case self::LANGUAGE:
		            case self::LAST:
		            case self::LEAVES:
		            case self::LESS:
		            case self::LEVEL:
		            case self::LIST:
		            case self::LOCAL:
		            case self::LOGFILE:
		            case self::LOGS:
		            case self::MASTER:
		            case self::MASTER_AUTO_POSITION:
		            case self::MASTER_CONNECT_RETRY:
		            case self::MASTER_DELAY:
		            case self::MASTER_HEARTBEAT_PERIOD:
		            case self::MASTER_HOST:
		            case self::MASTER_LOG_FILE:
		            case self::MASTER_LOG_POS:
		            case self::MASTER_PASSWORD:
		            case self::MASTER_PORT:
		            case self::MASTER_RETRY_COUNT:
		            case self::MASTER_SSL:
		            case self::MASTER_SSL_CA:
		            case self::MASTER_SSL_CAPATH:
		            case self::MASTER_SSL_CERT:
		            case self::MASTER_SSL_CIPHER:
		            case self::MASTER_SSL_CRL:
		            case self::MASTER_SSL_CRLPATH:
		            case self::MASTER_SSL_KEY:
		            case self::MASTER_TLS_VERSION:
		            case self::MASTER_USER:
		            case self::MAX_CONNECTIONS_PER_HOUR:
		            case self::MAX_QUERIES_PER_HOUR:
		            case self::MAX_ROWS:
		            case self::MAX_SIZE:
		            case self::MAX_UPDATES_PER_HOUR:
		            case self::MAX_USER_CONNECTIONS:
		            case self::MEDIUM:
		            case self::MEMBER:
		            case self::MERGE:
		            case self::MESSAGE_TEXT:
		            case self::MID:
		            case self::MIGRATE:
		            case self::MIN_ROWS:
		            case self::MODE:
		            case self::MODIFY:
		            case self::MUTEX:
		            case self::MYSQL:
		            case self::MYSQL_ERRNO:
		            case self::NAME:
		            case self::NAMES:
		            case self::NCHAR:
		            case self::NEVER:
		            case self::NEXT:
		            case self::NO:
		            case self::NOCOPY:
		            case self::NOWAIT:
		            case self::NODEGROUP:
		            case self::NONE:
		            case self::ODBC:
		            case self::OFFLINE:
		            case self::OFFSET:
		            case self::OF:
		            case self::OJ:
		            case self::OLD_PASSWORD:
		            case self::ONE:
		            case self::ONLINE:
		            case self::ONLY:
		            case self::OPEN:
		            case self::OPTIMIZER_COSTS:
		            case self::OPTIONS:
		            case self::OWNER:
		            case self::PACK_KEYS:
		            case self::PAGE:
		            case self::PARSER:
		            case self::PARTIAL:
		            case self::PARTITIONING:
		            case self::PARTITIONS:
		            case self::PASSWORD:
		            case self::PASSWORD_LOCK_TIME:
		            case self::PHASE:
		            case self::PLUGIN:
		            case self::PLUGIN_DIR:
		            case self::PLUGINS:
		            case self::PORT:
		            case self::PRECEDES:
		            case self::PREPARE:
		            case self::PRESERVE:
		            case self::PREV:
		            case self::PROCESSLIST:
		            case self::PROFILE:
		            case self::PROFILES:
		            case self::PROXY:
		            case self::QUERY:
		            case self::QUICK:
		            case self::REBUILD:
		            case self::RECOVER:
		            case self::RECURSIVE:
		            case self::REDO_BUFFER_SIZE:
		            case self::REDUNDANT:
		            case self::RELAY:
		            case self::RELAY_LOG_FILE:
		            case self::RELAY_LOG_POS:
		            case self::RELAYLOG:
		            case self::REMOVE:
		            case self::REORGANIZE:
		            case self::REPAIR:
		            case self::REPLICATE_DO_DB:
		            case self::REPLICATE_DO_TABLE:
		            case self::REPLICATE_IGNORE_DB:
		            case self::REPLICATE_IGNORE_TABLE:
		            case self::REPLICATE_REWRITE_DB:
		            case self::REPLICATE_WILD_DO_TABLE:
		            case self::REPLICATE_WILD_IGNORE_TABLE:
		            case self::REPLICATION:
		            case self::RESET:
		            case self::RESUME:
		            case self::RETURNED_SQLSTATE:
		            case self::RETURNS:
		            case self::REUSE:
		            case self::ROLE:
		            case self::ROLLBACK:
		            case self::ROLLUP:
		            case self::ROTATE:
		            case self::ROW:
		            case self::ROWS:
		            case self::ROW_FORMAT:
		            case self::RTREE:
		            case self::SAVEPOINT:
		            case self::SCHEDULE:
		            case self::SECURITY:
		            case self::SERVER:
		            case self::SESSION:
		            case self::SHARE:
		            case self::SHARED:
		            case self::SIGNED:
		            case self::SIMPLE:
		            case self::SLAVE:
		            case self::SLOW:
		            case self::SNAPSHOT:
		            case self::SOCKET:
		            case self::SOME:
		            case self::SONAME:
		            case self::SOUNDS:
		            case self::SOURCE:
		            case self::SQL_AFTER_GTIDS:
		            case self::SQL_AFTER_MTS_GAPS:
		            case self::SQL_BEFORE_GTIDS:
		            case self::SQL_BUFFER_RESULT:
		            case self::SQL_CACHE:
		            case self::SQL_NO_CACHE:
		            case self::SQL_THREAD:
		            case self::START:
		            case self::STARTS:
		            case self::STATS_AUTO_RECALC:
		            case self::STATS_PERSISTENT:
		            case self::STATS_SAMPLE_PAGES:
		            case self::STATUS:
		            case self::STOP:
		            case self::STORAGE:
		            case self::STRING:
		            case self::SUBCLASS_ORIGIN:
		            case self::SUBJECT:
		            case self::SUBPARTITION:
		            case self::SUBPARTITIONS:
		            case self::SUSPEND:
		            case self::SWAPS:
		            case self::SWITCHES:
		            case self::TABLE_NAME:
		            case self::TABLESPACE:
		            case self::TABLE_TYPE:
		            case self::TEMPORARY:
		            case self::TEMPTABLE:
		            case self::THAN:
		            case self::TRADITIONAL:
		            case self::TRANSACTION:
		            case self::TRANSACTIONAL:
		            case self::TRIGGERS:
		            case self::TRUNCATE:
		            case self::UNBOUNDED:
		            case self::UNDEFINED:
		            case self::UNDOFILE:
		            case self::UNDO_BUFFER_SIZE:
		            case self::UNINSTALL:
		            case self::UNKNOWN:
		            case self::UNTIL:
		            case self::UPGRADE:
		            case self::USER:
		            case self::USE_FRM:
		            case self::USER_RESOURCES:
		            case self::VALIDATION:
		            case self::VALUE:
		            case self::VARIABLES:
		            case self::VIEW:
		            case self::VIRTUAL:
		            case self::VISIBLE:
		            case self::WAIT:
		            case self::WARNINGS:
		            case self::WITHOUT:
		            case self::WORK:
		            case self::WRAPPER:
		            case self::X509:
		            case self::XA:
		            case self::XML:
		            case self::EUR:
		            case self::USA:
		            case self::JIS:
		            case self::ISO:
		            case self::INTERNAL:
		            case self::QUARTER:
		            case self::MONTH:
		            case self::DAY:
		            case self::HOUR:
		            case self::MINUTE:
		            case self::WEEK:
		            case self::SECOND:
		            case self::MICROSECOND:
		            case self::ADMIN:
		            case self::AUDIT_ABORT_EXEMPT:
		            case self::AUDIT_ADMIN:
		            case self::AUTHENTICATION_POLICY_ADMIN:
		            case self::BACKUP_ADMIN:
		            case self::BINLOG_ADMIN:
		            case self::BINLOG_ENCRYPTION_ADMIN:
		            case self::CLONE_ADMIN:
		            case self::CONNECTION_ADMIN:
		            case self::ENCRYPTION_KEY_ADMIN:
		            case self::EXECUTE:
		            case self::FILE:
		            case self::FIREWALL_ADMIN:
		            case self::FIREWALL_EXEMPT:
		            case self::FIREWALL_USER:
		            case self::GROUP_REPLICATION_ADMIN:
		            case self::INNODB_REDO_LOG_ARCHIVE:
		            case self::INVOKE:
		            case self::LAMBDA:
		            case self::NDB_STORED_USER:
		            case self::PASSWORDLESS_USER_ADMIN:
		            case self::PERSIST_RO_VARIABLES_ADMIN:
		            case self::PRIVILEGES:
		            case self::PROCESS:
		            case self::RELOAD:
		            case self::REPLICATION_APPLIER:
		            case self::REPLICATION_SLAVE_ADMIN:
		            case self::RESOURCE_GROUP_ADMIN:
		            case self::RESOURCE_GROUP_USER:
		            case self::ROLE_ADMIN:
		            case self::ROUTINE:
		            case self::S3:
		            case self::SESSION_VARIABLES_ADMIN:
		            case self::SET_USER_ID:
		            case self::SHOW_ROUTINE:
		            case self::SHUTDOWN:
		            case self::SUPER:
		            case self::SYSTEM_VARIABLES_ADMIN:
		            case self::TABLES:
		            case self::TABLE_ENCRYPTION_ADMIN:
		            case self::VERSION_TOKEN_ADMIN:
		            case self::XA_RECOVER_ADMIN:
		            case self::ARMSCII8:
		            case self::ASCII:
		            case self::BIG5:
		            case self::CP1250:
		            case self::CP1251:
		            case self::CP1256:
		            case self::CP1257:
		            case self::CP850:
		            case self::CP852:
		            case self::CP866:
		            case self::CP932:
		            case self::DEC8:
		            case self::EUCJPMS:
		            case self::EUCKR:
		            case self::GB18030:
		            case self::GB2312:
		            case self::GBK:
		            case self::GEOSTD8:
		            case self::GREEK:
		            case self::HEBREW:
		            case self::HP8:
		            case self::KEYBCS2:
		            case self::KOI8R:
		            case self::KOI8U:
		            case self::LATIN1:
		            case self::LATIN2:
		            case self::LATIN5:
		            case self::LATIN7:
		            case self::MACCE:
		            case self::MACROMAN:
		            case self::SJIS:
		            case self::SWE7:
		            case self::TIS620:
		            case self::UCS2:
		            case self::UJIS:
		            case self::UTF16:
		            case self::UTF16LE:
		            case self::UTF32:
		            case self::UTF8:
		            case self::UTF8MB3:
		            case self::UTF8MB4:
		            case self::ARCHIVE:
		            case self::BLACKHOLE:
		            case self::CSV:
		            case self::FEDERATED:
		            case self::INNODB:
		            case self::MEMORY:
		            case self::MRG_MYISAM:
		            case self::MYISAM:
		            case self::NDB:
		            case self::NDBCLUSTER:
		            case self::PERFORMANCE_SCHEMA:
		            case self::TOKUDB:
		            case self::REPEATABLE:
		            case self::COMMITTED:
		            case self::UNCOMMITTED:
		            case self::SERIALIZABLE:
		            case self::GEOMETRYCOLLECTION:
		            case self::LINESTRING:
		            case self::MULTILINESTRING:
		            case self::MULTIPOINT:
		            case self::MULTIPOLYGON:
		            case self::POINT:
		            case self::POLYGON:
		            case self::ABS:
		            case self::ACOS:
		            case self::ADDDATE:
		            case self::ADDTIME:
		            case self::AES_DECRYPT:
		            case self::AES_ENCRYPT:
		            case self::AREA:
		            case self::ASBINARY:
		            case self::ASIN:
		            case self::ASTEXT:
		            case self::ASWKB:
		            case self::ASWKT:
		            case self::ASYMMETRIC_DECRYPT:
		            case self::ASYMMETRIC_DERIVE:
		            case self::ASYMMETRIC_ENCRYPT:
		            case self::ASYMMETRIC_SIGN:
		            case self::ASYMMETRIC_VERIFY:
		            case self::ATAN:
		            case self::ATAN2:
		            case self::BENCHMARK:
		            case self::BIN:
		            case self::BIT_COUNT:
		            case self::BIT_LENGTH:
		            case self::BUFFER:
		            case self::CATALOG_NAME:
		            case self::CEIL:
		            case self::CEILING:
		            case self::CENTROID:
		            case self::CHARACTER_LENGTH:
		            case self::CHARSET:
		            case self::CHAR_LENGTH:
		            case self::COERCIBILITY:
		            case self::COLLATION:
		            case self::COMPRESS:
		            case self::CONCAT:
		            case self::CONCAT_WS:
		            case self::CONNECTION_ID:
		            case self::CONV:
		            case self::CONVERT_TZ:
		            case self::COS:
		            case self::COT:
		            case self::CRC32:
		            case self::CREATE_ASYMMETRIC_PRIV_KEY:
		            case self::CREATE_ASYMMETRIC_PUB_KEY:
		            case self::CREATE_DH_PARAMETERS:
		            case self::CREATE_DIGEST:
		            case self::CROSSES:
		            case self::DATEDIFF:
		            case self::DATE_FORMAT:
		            case self::DAYNAME:
		            case self::DAYOFMONTH:
		            case self::DAYOFWEEK:
		            case self::DAYOFYEAR:
		            case self::DECODE:
		            case self::DEGREES:
		            case self::DES_DECRYPT:
		            case self::DES_ENCRYPT:
		            case self::DIMENSION:
		            case self::DISJOINT:
		            case self::ELT:
		            case self::ENCODE:
		            case self::ENCRYPT:
		            case self::ENDPOINT:
		            case self::ENGINE_ATTRIBUTE:
		            case self::ENVELOPE:
		            case self::EQUALS:
		            case self::EXP:
		            case self::EXPORT_SET:
		            case self::EXTERIORRING:
		            case self::EXTRACTVALUE:
		            case self::FIELD:
		            case self::FIND_IN_SET:
		            case self::FLOOR:
		            case self::FORMAT:
		            case self::FOUND_ROWS:
		            case self::FROM_BASE64:
		            case self::FROM_DAYS:
		            case self::FROM_UNIXTIME:
		            case self::GEOMCOLLFROMTEXT:
		            case self::GEOMCOLLFROMWKB:
		            case self::GEOMETRYCOLLECTIONFROMTEXT:
		            case self::GEOMETRYCOLLECTIONFROMWKB:
		            case self::GEOMETRYFROMTEXT:
		            case self::GEOMETRYFROMWKB:
		            case self::GEOMETRYN:
		            case self::GEOMETRYTYPE:
		            case self::GEOMFROMTEXT:
		            case self::GEOMFROMWKB:
		            case self::GET_FORMAT:
		            case self::GET_LOCK:
		            case self::GLENGTH:
		            case self::GREATEST:
		            case self::GTID_SUBSET:
		            case self::GTID_SUBTRACT:
		            case self::HEX:
		            case self::IFNULL:
		            case self::INET6_ATON:
		            case self::INET6_NTOA:
		            case self::INET_ATON:
		            case self::INET_NTOA:
		            case self::INSTR:
		            case self::INTERIORRINGN:
		            case self::INTERSECTS:
		            case self::ISCLOSED:
		            case self::ISEMPTY:
		            case self::ISNULL:
		            case self::ISSIMPLE:
		            case self::IS_FREE_LOCK:
		            case self::IS_IPV4:
		            case self::IS_IPV4_COMPAT:
		            case self::IS_IPV4_MAPPED:
		            case self::IS_IPV6:
		            case self::IS_USED_LOCK:
		            case self::LAST_INSERT_ID:
		            case self::LCASE:
		            case self::LEAST:
		            case self::LENGTH:
		            case self::LINEFROMTEXT:
		            case self::LINEFROMWKB:
		            case self::LINESTRINGFROMTEXT:
		            case self::LINESTRINGFROMWKB:
		            case self::LN:
		            case self::LOAD_FILE:
		            case self::LOCATE:
		            case self::LOG:
		            case self::LOG10:
		            case self::LOG2:
		            case self::LOWER:
		            case self::LPAD:
		            case self::LTRIM:
		            case self::MAKEDATE:
		            case self::MAKETIME:
		            case self::MAKE_SET:
		            case self::MASTER_POS_WAIT:
		            case self::MBRCONTAINS:
		            case self::MBRDISJOINT:
		            case self::MBREQUAL:
		            case self::MBRINTERSECTS:
		            case self::MBROVERLAPS:
		            case self::MBRTOUCHES:
		            case self::MBRWITHIN:
		            case self::MD5:
		            case self::MLINEFROMTEXT:
		            case self::MLINEFROMWKB:
		            case self::MONTHNAME:
		            case self::MPOINTFROMTEXT:
		            case self::MPOINTFROMWKB:
		            case self::MPOLYFROMTEXT:
		            case self::MPOLYFROMWKB:
		            case self::MULTILINESTRINGFROMTEXT:
		            case self::MULTILINESTRINGFROMWKB:
		            case self::MULTIPOINTFROMTEXT:
		            case self::MULTIPOINTFROMWKB:
		            case self::MULTIPOLYGONFROMTEXT:
		            case self::MULTIPOLYGONFROMWKB:
		            case self::NAME_CONST:
		            case self::NULLIF:
		            case self::NUMGEOMETRIES:
		            case self::NUMINTERIORRINGS:
		            case self::NUMPOINTS:
		            case self::OCT:
		            case self::OCTET_LENGTH:
		            case self::ORD:
		            case self::OVERLAPS:
		            case self::PERIOD_ADD:
		            case self::PERIOD_DIFF:
		            case self::PI:
		            case self::POINTFROMTEXT:
		            case self::POINTFROMWKB:
		            case self::POINTN:
		            case self::POLYFROMTEXT:
		            case self::POLYFROMWKB:
		            case self::POLYGONFROMTEXT:
		            case self::POLYGONFROMWKB:
		            case self::POW:
		            case self::POWER:
		            case self::QUOTE:
		            case self::RADIANS:
		            case self::RAND:
		            case self::RANDOM:
		            case self::RANDOM_BYTES:
		            case self::RELEASE_LOCK:
		            case self::REVERSE:
		            case self::ROUND:
		            case self::ROW_COUNT:
		            case self::RPAD:
		            case self::RTRIM:
		            case self::SEC_TO_TIME:
		            case self::SECONDARY_ENGINE_ATTRIBUTE:
		            case self::SESSION_USER:
		            case self::SHA:
		            case self::SHA1:
		            case self::SHA2:
		            case self::SCHEMA_NAME:
		            case self::SIGN:
		            case self::SIN:
		            case self::SLEEP:
		            case self::SOUNDEX:
		            case self::SQL_THREAD_WAIT_AFTER_GTIDS:
		            case self::SQRT:
		            case self::SRID:
		            case self::STARTPOINT:
		            case self::STRCMP:
		            case self::STR_TO_DATE:
		            case self::ST_AREA:
		            case self::ST_ASBINARY:
		            case self::ST_ASTEXT:
		            case self::ST_ASWKB:
		            case self::ST_ASWKT:
		            case self::ST_BUFFER:
		            case self::ST_CENTROID:
		            case self::ST_CONTAINS:
		            case self::ST_CROSSES:
		            case self::ST_DIFFERENCE:
		            case self::ST_DIMENSION:
		            case self::ST_DISJOINT:
		            case self::ST_DISTANCE:
		            case self::ST_ENDPOINT:
		            case self::ST_ENVELOPE:
		            case self::ST_EQUALS:
		            case self::ST_EXTERIORRING:
		            case self::ST_GEOMCOLLFROMTEXT:
		            case self::ST_GEOMCOLLFROMTXT:
		            case self::ST_GEOMCOLLFROMWKB:
		            case self::ST_GEOMETRYCOLLECTIONFROMTEXT:
		            case self::ST_GEOMETRYCOLLECTIONFROMWKB:
		            case self::ST_GEOMETRYFROMTEXT:
		            case self::ST_GEOMETRYFROMWKB:
		            case self::ST_GEOMETRYN:
		            case self::ST_GEOMETRYTYPE:
		            case self::ST_GEOMFROMTEXT:
		            case self::ST_GEOMFROMWKB:
		            case self::ST_INTERIORRINGN:
		            case self::ST_INTERSECTION:
		            case self::ST_INTERSECTS:
		            case self::ST_ISCLOSED:
		            case self::ST_ISEMPTY:
		            case self::ST_ISSIMPLE:
		            case self::ST_LINEFROMTEXT:
		            case self::ST_LINEFROMWKB:
		            case self::ST_LINESTRINGFROMTEXT:
		            case self::ST_LINESTRINGFROMWKB:
		            case self::ST_NUMGEOMETRIES:
		            case self::ST_NUMINTERIORRING:
		            case self::ST_NUMINTERIORRINGS:
		            case self::ST_NUMPOINTS:
		            case self::ST_OVERLAPS:
		            case self::ST_POINTFROMTEXT:
		            case self::ST_POINTFROMWKB:
		            case self::ST_POINTN:
		            case self::ST_POLYFROMTEXT:
		            case self::ST_POLYFROMWKB:
		            case self::ST_POLYGONFROMTEXT:
		            case self::ST_POLYGONFROMWKB:
		            case self::ST_SRID:
		            case self::ST_STARTPOINT:
		            case self::ST_SYMDIFFERENCE:
		            case self::ST_TOUCHES:
		            case self::ST_UNION:
		            case self::ST_WITHIN:
		            case self::ST_X:
		            case self::ST_Y:
		            case self::SUBDATE:
		            case self::SUBSTRING_INDEX:
		            case self::SUBTIME:
		            case self::SYSTEM_USER:
		            case self::TAN:
		            case self::TIMEDIFF:
		            case self::TIMESTAMPADD:
		            case self::TIMESTAMPDIFF:
		            case self::TIME_FORMAT:
		            case self::TIME_TO_SEC:
		            case self::TOUCHES:
		            case self::TO_BASE64:
		            case self::TO_DAYS:
		            case self::TO_SECONDS:
		            case self::TP_CONNECTION_ADMIN:
		            case self::UCASE:
		            case self::UNCOMPRESS:
		            case self::UNCOMPRESSED_LENGTH:
		            case self::UNHEX:
		            case self::UNIX_TIMESTAMP:
		            case self::UPDATEXML:
		            case self::UPPER:
		            case self::UUID:
		            case self::UUID_SHORT:
		            case self::VALIDATE_PASSWORD_STRENGTH:
		            case self::VERSION:
		            case self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
		            case self::WEEKDAY:
		            case self::WEEKOFYEAR:
		            case self::WEIGHT_STRING:
		            case self::WITHIN:
		            case self::YEARWEEK:
		            case self::Y_FUNCTION:
		            case self::X_FUNCTION:
		            case self::MOD:
		            case self::LR_BRACKET:
		            case self::CHARSET_REVERSE_QOUTE_STRING:
		            case self::STRING_LITERAL:
		            case self::ID:
		            	$this->setState(1090);
		            	$this->routineBody();
		            	break;

		            case self::RETURN:
		            	$this->setState(1091);
		            	$this->returnStatement();
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function createRole(): Context\CreateRoleContext
		{
		    $localContext = new Context\CreateRoleContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 36, self::RULE_createRole);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(1094);
		        $this->match(self::CREATE);
		        $this->setState(1095);
		        $this->match(self::ROLE);
		        $this->setState(1097);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 57, $this->ctx)) {
		            case 1:
		        	    $this->setState(1096);
		        	    $this->ifNotExists();
		        	break;
		        }
		        $this->setState(1099);
		        $this->roleName();
		        $this->setState(1104);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::COMMA) {
		        	$this->setState(1100);
		        	$this->match(self::COMMA);
		        	$this->setState(1101);
		        	$this->roleName();
		        	$this->setState(1106);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function createServer(): Context\CreateServerContext
		{
		    $localContext = new Context\CreateServerContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 38, self::RULE_createServer);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(1107);
		        $this->match(self::CREATE);
		        $this->setState(1108);
		        $this->match(self::SERVER);
		        $this->setState(1109);
		        $this->uid();
		        $this->setState(1110);
		        $this->match(self::FOREIGN);
		        $this->setState(1111);
		        $this->match(self::DATA);
		        $this->setState(1112);
		        $this->match(self::WRAPPER);
		        $this->setState(1113);

		        $localContext->wrapperName = $this->input->LT(1);
		        $_la = $this->input->LA(1);

		        if (!($_la === self::MYSQL || $_la === self::STRING_LITERAL)) {
		        	    $localContext->wrapperName = $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		        $this->setState(1114);
		        $this->match(self::OPTIONS);
		        $this->setState(1115);
		        $this->match(self::LR_BRACKET);
		        $this->setState(1116);
		        $this->serverOption();
		        $this->setState(1121);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::COMMA) {
		        	$this->setState(1117);
		        	$this->match(self::COMMA);
		        	$this->setState(1118);
		        	$this->serverOption();
		        	$this->setState(1123);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		        $this->setState(1124);
		        $this->match(self::RR_BRACKET);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function createTable(): Context\CreateTableContext
		{
		    $localContext = new Context\CreateTableContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 40, self::RULE_createTable);

		    try {
		        $this->setState(1204);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 78, $this->ctx)) {
		        	case 1:
		        	    $localContext = new Context\CopyCreateTableContext($localContext);
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(1126);
		        	    $this->match(self::CREATE);
		        	    $this->setState(1128);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::TEMPORARY) {
		        	    	$this->setState(1127);
		        	    	$this->match(self::TEMPORARY);
		        	    }
		        	    $this->setState(1130);
		        	    $this->match(self::TABLE);
		        	    $this->setState(1132);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 61, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(1131);
		        	    	    $this->ifNotExists();
		        	    	break;
		        	    }
		        	    $this->setState(1134);
		        	    $this->tableName();
		        	    $this->setState(1142);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->input->LA(1)) {
		        	        case self::LIKE:
		        	        	$this->setState(1135);
		        	        	$this->match(self::LIKE);
		        	        	$this->setState(1136);
		        	        	$this->tableName();
		        	        	break;

		        	        case self::LR_BRACKET:
		        	        	$this->setState(1137);
		        	        	$this->match(self::LR_BRACKET);
		        	        	$this->setState(1138);
		        	        	$this->match(self::LIKE);
		        	        	$this->setState(1139);
		        	        	$localContext->parenthesisTable = $this->tableName();
		        	        	$this->setState(1140);
		        	        	$this->match(self::RR_BRACKET);
		        	        	break;

		        	    default:
		        	    	throw new NoViableAltException($this);
		        	    }
		        	break;

		        	case 2:
		        	    $localContext = new Context\QueryCreateTableContext($localContext);
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(1144);
		        	    $this->match(self::CREATE);
		        	    $this->setState(1146);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::TEMPORARY) {
		        	    	$this->setState(1145);
		        	    	$this->match(self::TEMPORARY);
		        	    }
		        	    $this->setState(1148);
		        	    $this->match(self::TABLE);
		        	    $this->setState(1150);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 64, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(1149);
		        	    	    $this->ifNotExists();
		        	    	break;
		        	    }
		        	    $this->setState(1152);
		        	    $this->tableName();
		        	    $this->setState(1154);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 65, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(1153);
		        	    	    $this->createDefinitions();
		        	    	break;
		        	    }
		        	    $this->setState(1166);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ((((($_la - 25)) & ~0x3f) === 0 && ((1 << ($_la - 25)) & 72057594038059013) !== 0) || $_la === self::UNION || $_la === self::CHAR || (((($_la - 341)) & ~0x3f) === 0 && ((1 << ($_la - 341)) & 4644375904747527) !== 0) || (((($_la - 405)) & ~0x3f) === 0 && ((1 << ($_la - 405)) & 4612811918334230547) !== 0) || (((($_la - 500)) & ~0x3f) === 0 && ((1 << ($_la - 500)) & 2366149022974977) !== 0) || (((($_la - 602)) & ~0x3f) === 0 && ((1 << ($_la - 602)) & 4609173815820289) !== 0) || $_la === self::CHARSET || $_la === self::ENGINE_ATTRIBUTE || $_la === self::SECONDARY_ENGINE_ATTRIBUTE || $_la === self::STRING_LITERAL) {
		        	    	$this->setState(1156);
		        	    	$this->tableOption();
		        	    	$this->setState(1163);
		        	    	$this->errorHandler->sync($this);

		        	    	$_la = $this->input->LA(1);
		        	    	while ((((($_la - 25)) & ~0x3f) === 0 && ((1 << ($_la - 25)) & 72057594038059013) !== 0) || $_la === self::UNION || $_la === self::CHAR || (((($_la - 341)) & ~0x3f) === 0 && ((1 << ($_la - 341)) & 4644375904747527) !== 0) || (((($_la - 405)) & ~0x3f) === 0 && ((1 << ($_la - 405)) & 4612811918334230547) !== 0) || (((($_la - 500)) & ~0x3f) === 0 && ((1 << ($_la - 500)) & 2366149022974977) !== 0) || (((($_la - 602)) & ~0x3f) === 0 && ((1 << ($_la - 602)) & 4609173815820289) !== 0) || $_la === self::CHARSET || $_la === self::ENGINE_ATTRIBUTE || $_la === self::SECONDARY_ENGINE_ATTRIBUTE || $_la === self::COMMA || $_la === self::STRING_LITERAL) {
		        	    		$this->setState(1158);
		        	    		$this->errorHandler->sync($this);
		        	    		$_la = $this->input->LA(1);

		        	    		if ($_la === self::COMMA) {
		        	    			$this->setState(1157);
		        	    			$this->match(self::COMMA);
		        	    		}
		        	    		$this->setState(1160);
		        	    		$this->tableOption();
		        	    		$this->setState(1165);
		        	    		$this->errorHandler->sync($this);
		        	    		$_la = $this->input->LA(1);
		        	    	}
		        	    }
		        	    $this->setState(1169);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::PARTITION) {
		        	    	$this->setState(1168);
		        	    	$this->partitionDefinitions();
		        	    }
		        	    $this->setState(1172);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::IGNORE || $_la === self::REPLACE) {
		        	    	$this->setState(1171);

		        	    	$localContext->keyViolate = $this->input->LT(1);
		        	    	$_la = $this->input->LA(1);

		        	    	if (!($_la === self::IGNORE || $_la === self::REPLACE)) {
		        	    		    $localContext->keyViolate = $this->errorHandler->recoverInline($this);
		        	    	} else {
		        	    		if ($this->input->LA(1) === Token::EOF) {
		        	    		    $this->matchedEOF = true;
		        	    	    }

		        	    		$this->errorHandler->reportMatch($this);
		        	    		$this->consume();
		        	    	}
		        	    }
		        	    $this->setState(1175);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::AS) {
		        	    	$this->setState(1174);
		        	    	$this->match(self::AS);
		        	    }
		        	    $this->setState(1177);
		        	    $this->selectStatement();
		        	break;

		        	case 3:
		        	    $localContext = new Context\ColumnCreateTableContext($localContext);
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(1179);
		        	    $this->match(self::CREATE);
		        	    $this->setState(1181);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::TEMPORARY) {
		        	    	$this->setState(1180);
		        	    	$this->match(self::TEMPORARY);
		        	    }
		        	    $this->setState(1183);
		        	    $this->match(self::TABLE);
		        	    $this->setState(1185);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 73, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(1184);
		        	    	    $this->ifNotExists();
		        	    	break;
		        	    }
		        	    $this->setState(1187);
		        	    $this->tableName();
		        	    $this->setState(1188);
		        	    $this->createDefinitions();
		        	    $this->setState(1199);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 76, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(1189);
		        	    	    $this->tableOption();
		        	    	    $this->setState(1196);
		        	    	    $this->errorHandler->sync($this);

		        	    	    $alt = $this->getInterpreter()->adaptivePredict($this->input, 75, $this->ctx);

		        	    	    while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
		        	    	    	if ($alt === 1) {
		        	    	    		$this->setState(1191);
		        	    	    		$this->errorHandler->sync($this);
		        	    	    		$_la = $this->input->LA(1);

		        	    	    		if ($_la === self::COMMA) {
		        	    	    			$this->setState(1190);
		        	    	    			$this->match(self::COMMA);
		        	    	    		}
		        	    	    		$this->setState(1193);
		        	    	    		$this->tableOption(); 
		        	    	    	}

		        	    	    	$this->setState(1198);
		        	    	    	$this->errorHandler->sync($this);

		        	    	    	$alt = $this->getInterpreter()->adaptivePredict($this->input, 75, $this->ctx);
		        	    	    }
		        	    	break;
		        	    }
		        	    $this->setState(1202);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::PARTITION) {
		        	    	$this->setState(1201);
		        	    	$this->partitionDefinitions();
		        	    }
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function createTablespaceInnodb(): Context\CreateTablespaceInnodbContext
		{
		    $localContext = new Context\CreateTablespaceInnodbContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 42, self::RULE_createTablespaceInnodb);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(1206);
		        $this->match(self::CREATE);
		        $this->setState(1207);
		        $this->match(self::TABLESPACE);
		        $this->setState(1208);
		        $this->uid();
		        $this->setState(1209);
		        $this->match(self::ADD);
		        $this->setState(1210);
		        $this->match(self::DATAFILE);
		        $this->setState(1211);
		        $localContext->datafile = $this->match(self::STRING_LITERAL);
		        $this->setState(1215);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::FILE_BLOCK_SIZE) {
		        	$this->setState(1212);
		        	$this->match(self::FILE_BLOCK_SIZE);
		        	$this->setState(1213);
		        	$this->match(self::EQUAL_SYMBOL);
		        	$this->setState(1214);
		        	$localContext->fileBlockSize = $this->fileSizeLiteral();
		        }
		        $this->setState(1222);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::ENGINE) {
		        	$this->setState(1217);
		        	$this->match(self::ENGINE);
		        	$this->setState(1219);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);

		        	if ($_la === self::EQUAL_SYMBOL) {
		        		$this->setState(1218);
		        		$this->match(self::EQUAL_SYMBOL);
		        	}
		        	$this->setState(1221);
		        	$this->engineName();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function createTablespaceNdb(): Context\CreateTablespaceNdbContext
		{
		    $localContext = new Context\CreateTablespaceNdbContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 44, self::RULE_createTablespaceNdb);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(1224);
		        $this->match(self::CREATE);
		        $this->setState(1225);
		        $this->match(self::TABLESPACE);
		        $this->setState(1226);
		        $this->uid();
		        $this->setState(1227);
		        $this->match(self::ADD);
		        $this->setState(1228);
		        $this->match(self::DATAFILE);
		        $this->setState(1229);
		        $localContext->datafile = $this->match(self::STRING_LITERAL);
		        $this->setState(1230);
		        $this->match(self::USE);
		        $this->setState(1231);
		        $this->match(self::LOGFILE);
		        $this->setState(1232);
		        $this->match(self::GROUP);
		        $this->setState(1233);
		        $this->uid();
		        $this->setState(1239);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::EXTENT_SIZE) {
		        	$this->setState(1234);
		        	$this->match(self::EXTENT_SIZE);
		        	$this->setState(1236);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);

		        	if ($_la === self::EQUAL_SYMBOL) {
		        		$this->setState(1235);
		        		$this->match(self::EQUAL_SYMBOL);
		        	}
		        	$this->setState(1238);
		        	$localContext->extentSize = $this->fileSizeLiteral();
		        }
		        $this->setState(1246);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::INITIAL_SIZE) {
		        	$this->setState(1241);
		        	$this->match(self::INITIAL_SIZE);
		        	$this->setState(1243);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);

		        	if ($_la === self::EQUAL_SYMBOL) {
		        		$this->setState(1242);
		        		$this->match(self::EQUAL_SYMBOL);
		        	}
		        	$this->setState(1245);
		        	$localContext->initialSize = $this->fileSizeLiteral();
		        }
		        $this->setState(1253);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::AUTOEXTEND_SIZE) {
		        	$this->setState(1248);
		        	$this->match(self::AUTOEXTEND_SIZE);
		        	$this->setState(1250);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);

		        	if ($_la === self::EQUAL_SYMBOL) {
		        		$this->setState(1249);
		        		$this->match(self::EQUAL_SYMBOL);
		        	}
		        	$this->setState(1252);
		        	$localContext->autoextendSize = $this->fileSizeLiteral();
		        }
		        $this->setState(1260);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::MAX_SIZE) {
		        	$this->setState(1255);
		        	$this->match(self::MAX_SIZE);
		        	$this->setState(1257);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);

		        	if ($_la === self::EQUAL_SYMBOL) {
		        		$this->setState(1256);
		        		$this->match(self::EQUAL_SYMBOL);
		        	}
		        	$this->setState(1259);
		        	$localContext->maxSize = $this->fileSizeLiteral();
		        }
		        $this->setState(1267);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::NODEGROUP) {
		        	$this->setState(1262);
		        	$this->match(self::NODEGROUP);
		        	$this->setState(1264);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);

		        	if ($_la === self::EQUAL_SYMBOL) {
		        		$this->setState(1263);
		        		$this->match(self::EQUAL_SYMBOL);
		        	}
		        	$this->setState(1266);
		        	$this->uid();
		        }
		        $this->setState(1270);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::WAIT) {
		        	$this->setState(1269);
		        	$this->match(self::WAIT);
		        }
		        $this->setState(1277);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::COMMENT) {
		        	$this->setState(1272);
		        	$this->match(self::COMMENT);
		        	$this->setState(1274);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);

		        	if ($_la === self::EQUAL_SYMBOL) {
		        		$this->setState(1273);
		        		$this->match(self::EQUAL_SYMBOL);
		        	}
		        	$this->setState(1276);
		        	$localContext->comment = $this->match(self::STRING_LITERAL);
		        }
		        $this->setState(1279);
		        $this->match(self::ENGINE);
		        $this->setState(1281);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::EQUAL_SYMBOL) {
		        	$this->setState(1280);
		        	$this->match(self::EQUAL_SYMBOL);
		        }
		        $this->setState(1283);
		        $this->engineName();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function createTrigger(): Context\CreateTriggerContext
		{
		    $localContext = new Context\CreateTriggerContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 46, self::RULE_createTrigger);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(1285);
		        $this->match(self::CREATE);
		        $this->setState(1287);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::DEFINER) {
		        	$this->setState(1286);
		        	$this->ownerStatement();
		        }
		        $this->setState(1289);
		        $this->match(self::TRIGGER);
		        $this->setState(1290);
		        $localContext->thisTrigger = $this->fullId();
		        $this->setState(1291);

		        $localContext->triggerTime = $this->input->LT(1);
		        $_la = $this->input->LA(1);

		        if (!($_la === self::BEFORE || $_la === self::AFTER)) {
		        	    $localContext->triggerTime = $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		        $this->setState(1292);

		        $localContext->triggerEvent = $this->input->LT(1);
		        $_la = $this->input->LA(1);

		        if (!($_la === self::DELETE || $_la === self::INSERT || $_la === self::UPDATE)) {
		        	    $localContext->triggerEvent = $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		        $this->setState(1293);
		        $this->match(self::ON);
		        $this->setState(1294);
		        $this->tableName();
		        $this->setState(1295);
		        $this->match(self::FOR);
		        $this->setState(1296);
		        $this->match(self::EACH);
		        $this->setState(1297);
		        $this->match(self::ROW);
		        $this->setState(1300);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 97, $this->ctx)) {
		            case 1:
		        	    $this->setState(1298);

		        	    $localContext->triggerPlace = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::FOLLOWS || $_la === self::PRECEDES)) {
		        	    	    $localContext->triggerPlace = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	    $this->setState(1299);
		        	    $localContext->otherTrigger = $this->fullId();
		        	break;
		        }
		        $this->setState(1302);
		        $this->routineBody();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function withClause(): Context\WithClauseContext
		{
		    $localContext = new Context\WithClauseContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 48, self::RULE_withClause);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(1304);
		        $this->match(self::WITH);
		        $this->setState(1306);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 98, $this->ctx)) {
		            case 1:
		        	    $this->setState(1305);
		        	    $this->match(self::RECURSIVE);
		        	break;
		        }
		        $this->setState(1308);
		        $this->commonTableExpressions();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function commonTableExpressions(): Context\CommonTableExpressionsContext
		{
		    $localContext = new Context\CommonTableExpressionsContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 50, self::RULE_commonTableExpressions);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(1310);
		        $this->cteName();
		        $this->setState(1322);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::LR_BRACKET) {
		        	$this->setState(1311);
		        	$this->match(self::LR_BRACKET);
		        	$this->setState(1312);
		        	$this->cteColumnName();
		        	$this->setState(1317);
		        	$this->errorHandler->sync($this);

		        	$_la = $this->input->LA(1);
		        	while ($_la === self::COMMA) {
		        		$this->setState(1313);
		        		$this->match(self::COMMA);
		        		$this->setState(1314);
		        		$this->cteColumnName();
		        		$this->setState(1319);
		        		$this->errorHandler->sync($this);
		        		$_la = $this->input->LA(1);
		        	}
		        	$this->setState(1320);
		        	$this->match(self::RR_BRACKET);
		        }
		        $this->setState(1324);
		        $this->match(self::AS);
		        $this->setState(1325);
		        $this->match(self::LR_BRACKET);
		        $this->setState(1326);
		        $this->dmlStatement();
		        $this->setState(1327);
		        $this->match(self::RR_BRACKET);
		        $this->setState(1330);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 101, $this->ctx)) {
		            case 1:
		        	    $this->setState(1328);
		        	    $this->match(self::COMMA);
		        	    $this->setState(1329);
		        	    $this->commonTableExpressions();
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function cteName(): Context\CteNameContext
		{
		    $localContext = new Context\CteNameContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 52, self::RULE_cteName);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(1332);
		        $this->uid();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function cteColumnName(): Context\CteColumnNameContext
		{
		    $localContext = new Context\CteColumnNameContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 54, self::RULE_cteColumnName);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(1334);
		        $this->uid();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function createView(): Context\CreateViewContext
		{
		    $localContext = new Context\CreateViewContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 56, self::RULE_createView);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(1336);
		        $this->match(self::CREATE);
		        $this->setState(1338);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::OR) {
		        	$this->setState(1337);
		        	$this->orReplace();
		        }
		        $this->setState(1343);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::ALGORITHM) {
		        	$this->setState(1340);
		        	$this->match(self::ALGORITHM);
		        	$this->setState(1341);
		        	$this->match(self::EQUAL_SYMBOL);
		        	$this->setState(1342);

		        	$localContext->algType = $this->input->LT(1);
		        	$_la = $this->input->LA(1);

		        	if (!($_la === self::MERGE || $_la === self::TEMPTABLE || $_la === self::UNDEFINED)) {
		        		    $localContext->algType = $this->errorHandler->recoverInline($this);
		        	} else {
		        		if ($this->input->LA(1) === Token::EOF) {
		        		    $this->matchedEOF = true;
		        	    }

		        		$this->errorHandler->reportMatch($this);
		        		$this->consume();
		        	}
		        }
		        $this->setState(1346);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::DEFINER) {
		        	$this->setState(1345);
		        	$this->ownerStatement();
		        }
		        $this->setState(1351);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::SQL) {
		        	$this->setState(1348);
		        	$this->match(self::SQL);
		        	$this->setState(1349);
		        	$this->match(self::SECURITY);
		        	$this->setState(1350);

		        	$localContext->secContext = $this->input->LT(1);
		        	$_la = $this->input->LA(1);

		        	if (!($_la === self::DEFINER || $_la === self::INVOKER)) {
		        		    $localContext->secContext = $this->errorHandler->recoverInline($this);
		        	} else {
		        		if ($this->input->LA(1) === Token::EOF) {
		        		    $this->matchedEOF = true;
		        	    }

		        		$this->errorHandler->reportMatch($this);
		        		$this->consume();
		        	}
		        }
		        $this->setState(1353);
		        $this->match(self::VIEW);
		        $this->setState(1354);
		        $this->fullId();
		        $this->setState(1359);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::LR_BRACKET) {
		        	$this->setState(1355);
		        	$this->match(self::LR_BRACKET);
		        	$this->setState(1356);
		        	$this->uidList();
		        	$this->setState(1357);
		        	$this->match(self::RR_BRACKET);
		        }
		        $this->setState(1361);
		        $this->match(self::AS);
		        $this->setState(1381);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 111, $this->ctx)) {
		        	case 1:
		        	    $this->setState(1362);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(1364);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::WITH) {
		        	    	$this->setState(1363);
		        	    	$this->withClause();
		        	    }
		        	    $this->setState(1366);
		        	    $this->selectStatement();
		        	    $this->setState(1367);
		        	    $this->match(self::RR_BRACKET);
		        	break;

		        	case 2:
		        	    $this->setState(1370);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::WITH) {
		        	    	$this->setState(1369);
		        	    	$this->withClause();
		        	    }
		        	    $this->setState(1372);
		        	    $this->selectStatement();
		        	    $this->setState(1379);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 110, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(1373);
		        	    	    $this->match(self::WITH);
		        	    	    $this->setState(1375);
		        	    	    $this->errorHandler->sync($this);
		        	    	    $_la = $this->input->LA(1);

		        	    	    if ($_la === self::CASCADED || $_la === self::LOCAL) {
		        	    	    	$this->setState(1374);

		        	    	    	$localContext->checkOption = $this->input->LT(1);
		        	    	    	$_la = $this->input->LA(1);

		        	    	    	if (!($_la === self::CASCADED || $_la === self::LOCAL)) {
		        	    	    		    $localContext->checkOption = $this->errorHandler->recoverInline($this);
		        	    	    	} else {
		        	    	    		if ($this->input->LA(1) === Token::EOF) {
		        	    	    		    $this->matchedEOF = true;
		        	    	    	    }

		        	    	    		$this->errorHandler->reportMatch($this);
		        	    	    		$this->consume();
		        	    	    	}
		        	    	    }
		        	    	    $this->setState(1377);
		        	    	    $this->match(self::CHECK);
		        	    	    $this->setState(1378);
		        	    	    $this->match(self::OPTION);
		        	    	break;
		        	    }
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function createDatabaseOption(): Context\CreateDatabaseOptionContext
		{
		    $localContext = new Context\CreateDatabaseOptionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 58, self::RULE_createDatabaseOption);

		    try {
		        $this->setState(1416);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 120, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(1384);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::DEFAULT) {
		        	    	$this->setState(1383);
		        	    	$this->match(self::DEFAULT);
		        	    }
		        	    $this->setState(1386);
		        	    $this->charSet();
		        	    $this->setState(1388);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::EQUAL_SYMBOL) {
		        	    	$this->setState(1387);
		        	    	$this->match(self::EQUAL_SYMBOL);
		        	    }
		        	    $this->setState(1392);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->input->LA(1)) {
		        	        case self::BINARY:
		        	        case self::ARMSCII8:
		        	        case self::ASCII:
		        	        case self::BIG5:
		        	        case self::CP1250:
		        	        case self::CP1251:
		        	        case self::CP1256:
		        	        case self::CP1257:
		        	        case self::CP850:
		        	        case self::CP852:
		        	        case self::CP866:
		        	        case self::CP932:
		        	        case self::DEC8:
		        	        case self::EUCJPMS:
		        	        case self::EUCKR:
		        	        case self::GB18030:
		        	        case self::GB2312:
		        	        case self::GBK:
		        	        case self::GEOSTD8:
		        	        case self::GREEK:
		        	        case self::HEBREW:
		        	        case self::HP8:
		        	        case self::KEYBCS2:
		        	        case self::KOI8R:
		        	        case self::KOI8U:
		        	        case self::LATIN1:
		        	        case self::LATIN2:
		        	        case self::LATIN5:
		        	        case self::LATIN7:
		        	        case self::MACCE:
		        	        case self::MACROMAN:
		        	        case self::SJIS:
		        	        case self::SWE7:
		        	        case self::TIS620:
		        	        case self::UCS2:
		        	        case self::UJIS:
		        	        case self::UTF16:
		        	        case self::UTF16LE:
		        	        case self::UTF32:
		        	        case self::UTF8:
		        	        case self::UTF8MB3:
		        	        case self::UTF8MB4:
		        	        case self::CHARSET_REVERSE_QOUTE_STRING:
		        	        case self::STRING_LITERAL:
		        	        	$this->setState(1390);
		        	        	$this->charsetName();
		        	        	break;

		        	        case self::DEFAULT:
		        	        	$this->setState(1391);
		        	        	$this->match(self::DEFAULT);
		        	        	break;

		        	    default:
		        	    	throw new NoViableAltException($this);
		        	    }
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(1395);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::DEFAULT) {
		        	    	$this->setState(1394);
		        	    	$this->match(self::DEFAULT);
		        	    }
		        	    $this->setState(1397);
		        	    $this->match(self::COLLATE);
		        	    $this->setState(1399);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::EQUAL_SYMBOL) {
		        	    	$this->setState(1398);
		        	    	$this->match(self::EQUAL_SYMBOL);
		        	    }
		        	    $this->setState(1401);
		        	    $this->collationName();
		        	break;

		        	case 3:
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(1403);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::DEFAULT) {
		        	    	$this->setState(1402);
		        	    	$this->match(self::DEFAULT);
		        	    }
		        	    $this->setState(1405);
		        	    $this->match(self::ENCRYPTION);
		        	    $this->setState(1407);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::EQUAL_SYMBOL) {
		        	    	$this->setState(1406);
		        	    	$this->match(self::EQUAL_SYMBOL);
		        	    }
		        	    $this->setState(1409);
		        	    $this->match(self::STRING_LITERAL);
		        	break;

		        	case 4:
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(1410);
		        	    $this->match(self::READ);
		        	    $this->setState(1411);
		        	    $this->match(self::ONLY);
		        	    $this->setState(1413);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::EQUAL_SYMBOL) {
		        	    	$this->setState(1412);
		        	    	$this->match(self::EQUAL_SYMBOL);
		        	    }
		        	    $this->setState(1415);

		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::DEFAULT || $_la === self::ZERO_DECIMAL || $_la === self::ONE_DECIMAL)) {
		        	    $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function charSet(): Context\CharSetContext
		{
		    $localContext = new Context\CharSetContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 60, self::RULE_charSet);

		    try {
		        $this->setState(1423);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::CHARACTER:
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(1418);
		            	$this->match(self::CHARACTER);
		            	$this->setState(1419);
		            	$this->match(self::SET);
		            	break;

		            case self::CHARSET:
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(1420);
		            	$this->match(self::CHARSET);
		            	break;

		            case self::CHAR:
		            	$this->enterOuterAlt($localContext, 3);
		            	$this->setState(1421);
		            	$this->match(self::CHAR);
		            	$this->setState(1422);
		            	$this->match(self::SET);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function currentUserExpression(): Context\CurrentUserExpressionContext
		{
		    $localContext = new Context\CurrentUserExpressionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 62, self::RULE_currentUserExpression);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(1425);
		        $this->match(self::CURRENT_USER);
		        $this->setState(1428);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 122, $this->ctx)) {
		            case 1:
		        	    $this->setState(1426);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(1427);
		        	    $this->match(self::RR_BRACKET);
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function ownerStatement(): Context\OwnerStatementContext
		{
		    $localContext = new Context\OwnerStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 64, self::RULE_ownerStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(1430);
		        $this->match(self::DEFINER);
		        $this->setState(1431);
		        $this->match(self::EQUAL_SYMBOL);
		        $this->setState(1434);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 123, $this->ctx)) {
		        	case 1:
		        	    $this->setState(1432);
		        	    $this->userName();
		        	break;

		        	case 2:
		        	    $this->setState(1433);
		        	    $this->currentUserExpression();
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function scheduleExpression(): Context\ScheduleExpressionContext
		{
		    $localContext = new Context\ScheduleExpressionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 66, self::RULE_scheduleExpression);

		    try {
		        $this->setState(1470);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::AT:
		            	$localContext = new Context\PreciseScheduleContext($localContext);
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(1436);
		            	$this->match(self::AT);
		            	$this->setState(1437);
		            	$this->timestampValue();
		            	$this->setState(1441);
		            	$this->errorHandler->sync($this);

		            	$_la = $this->input->LA(1);
		            	while ($_la === self::PLUS) {
		            		$this->setState(1438);
		            		$this->intervalExpr();
		            		$this->setState(1443);
		            		$this->errorHandler->sync($this);
		            		$_la = $this->input->LA(1);
		            	}
		            	break;

		            case self::EVERY:
		            	$localContext = new Context\IntervalScheduleContext($localContext);
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(1444);
		            	$this->match(self::EVERY);
		            	$this->setState(1447);
		            	$this->errorHandler->sync($this);

		            	switch ($this->getInterpreter()->adaptivePredict($this->input, 125, $this->ctx)) {
		            		case 1:
		            		    $this->setState(1445);
		            		    $this->decimalLiteral();
		            		break;

		            		case 2:
		            		    $this->setState(1446);
		            		    $this->recursiveExpression(0);
		            		break;
		            	}
		            	$this->setState(1449);
		            	$this->intervalType();
		            	$this->setState(1458);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::STARTS) {
		            		$this->setState(1450);
		            		$this->match(self::STARTS);
		            		$this->setState(1451);
		            		$localContext->startTimestamp = $this->timestampValue();
		            		$this->setState(1455);
		            		$this->errorHandler->sync($this);

		            		$_la = $this->input->LA(1);
		            		while ($_la === self::PLUS) {
		            			$this->setState(1452);
		            			$localContext->intervalExpr = $this->intervalExpr();
		            			$localContext->startIntervals[] = $localContext->intervalExpr;
		            			$this->setState(1457);
		            			$this->errorHandler->sync($this);
		            			$_la = $this->input->LA(1);
		            		}
		            	}
		            	$this->setState(1468);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::ENDS) {
		            		$this->setState(1460);
		            		$this->match(self::ENDS);
		            		$this->setState(1461);
		            		$localContext->endTimestamp = $this->timestampValue();
		            		$this->setState(1465);
		            		$this->errorHandler->sync($this);

		            		$_la = $this->input->LA(1);
		            		while ($_la === self::PLUS) {
		            			$this->setState(1462);
		            			$localContext->intervalExpr = $this->intervalExpr();
		            			$localContext->endIntervals[] = $localContext->intervalExpr;
		            			$this->setState(1467);
		            			$this->errorHandler->sync($this);
		            			$_la = $this->input->LA(1);
		            		}
		            	}
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function timestampValue(): Context\TimestampValueContext
		{
		    $localContext = new Context\TimestampValueContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 68, self::RULE_timestampValue);

		    try {
		        $this->setState(1476);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 131, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(1472);
		        	    $this->match(self::CURRENT_TIMESTAMP);
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(1473);
		        	    $this->stringLiteral();
		        	break;

		        	case 3:
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(1474);
		        	    $this->decimalLiteral();
		        	break;

		        	case 4:
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(1475);
		        	    $this->recursiveExpression(0);
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function intervalExpr(): Context\IntervalExprContext
		{
		    $localContext = new Context\IntervalExprContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 70, self::RULE_intervalExpr);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(1478);
		        $this->match(self::PLUS);
		        $this->setState(1479);
		        $this->match(self::INTERVAL);
		        $this->setState(1482);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 132, $this->ctx)) {
		        	case 1:
		        	    $this->setState(1480);
		        	    $this->decimalLiteral();
		        	break;

		        	case 2:
		        	    $this->setState(1481);
		        	    $this->recursiveExpression(0);
		        	break;
		        }
		        $this->setState(1484);
		        $this->intervalType();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function intervalType(): Context\IntervalTypeContext
		{
		    $localContext = new Context\IntervalTypeContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 72, self::RULE_intervalType);

		    try {
		        $this->setState(1499);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::QUARTER:
		            case self::MONTH:
		            case self::DAY:
		            case self::HOUR:
		            case self::MINUTE:
		            case self::WEEK:
		            case self::SECOND:
		            case self::MICROSECOND:
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(1486);
		            	$this->intervalTypeBase();
		            	break;

		            case self::YEAR:
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(1487);
		            	$this->match(self::YEAR);
		            	break;

		            case self::YEAR_MONTH:
		            	$this->enterOuterAlt($localContext, 3);
		            	$this->setState(1488);
		            	$this->match(self::YEAR_MONTH);
		            	break;

		            case self::DAY_HOUR:
		            	$this->enterOuterAlt($localContext, 4);
		            	$this->setState(1489);
		            	$this->match(self::DAY_HOUR);
		            	break;

		            case self::DAY_MINUTE:
		            	$this->enterOuterAlt($localContext, 5);
		            	$this->setState(1490);
		            	$this->match(self::DAY_MINUTE);
		            	break;

		            case self::DAY_SECOND:
		            	$this->enterOuterAlt($localContext, 6);
		            	$this->setState(1491);
		            	$this->match(self::DAY_SECOND);
		            	break;

		            case self::HOUR_MINUTE:
		            	$this->enterOuterAlt($localContext, 7);
		            	$this->setState(1492);
		            	$this->match(self::HOUR_MINUTE);
		            	break;

		            case self::HOUR_SECOND:
		            	$this->enterOuterAlt($localContext, 8);
		            	$this->setState(1493);
		            	$this->match(self::HOUR_SECOND);
		            	break;

		            case self::MINUTE_SECOND:
		            	$this->enterOuterAlt($localContext, 9);
		            	$this->setState(1494);
		            	$this->match(self::MINUTE_SECOND);
		            	break;

		            case self::SECOND_MICROSECOND:
		            	$this->enterOuterAlt($localContext, 10);
		            	$this->setState(1495);
		            	$this->match(self::SECOND_MICROSECOND);
		            	break;

		            case self::MINUTE_MICROSECOND:
		            	$this->enterOuterAlt($localContext, 11);
		            	$this->setState(1496);
		            	$this->match(self::MINUTE_MICROSECOND);
		            	break;

		            case self::HOUR_MICROSECOND:
		            	$this->enterOuterAlt($localContext, 12);
		            	$this->setState(1497);
		            	$this->match(self::HOUR_MICROSECOND);
		            	break;

		            case self::DAY_MICROSECOND:
		            	$this->enterOuterAlt($localContext, 13);
		            	$this->setState(1498);
		            	$this->match(self::DAY_MICROSECOND);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function enableType(): Context\EnableTypeContext
		{
		    $localContext = new Context\EnableTypeContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 74, self::RULE_enableType);

		    try {
		        $this->setState(1506);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 134, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(1501);
		        	    $this->match(self::ENABLE);
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(1502);
		        	    $this->match(self::DISABLE);
		        	break;

		        	case 3:
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(1503);
		        	    $this->match(self::DISABLE);
		        	    $this->setState(1504);
		        	    $this->match(self::ON);
		        	    $this->setState(1505);
		        	    $this->match(self::SLAVE);
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function indexType(): Context\IndexTypeContext
		{
		    $localContext = new Context\IndexTypeContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 76, self::RULE_indexType);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(1508);
		        $this->match(self::USING);
		        $this->setState(1509);

		        $_la = $this->input->LA(1);

		        if (!($_la === self::BTREE || $_la === self::HASH)) {
		        $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function indexOption(): Context\IndexOptionContext
		{
		    $localContext = new Context\IndexOptionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 78, self::RULE_indexOption);

		    try {
		        $this->setState(1533);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::KEY_BLOCK_SIZE:
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(1511);
		            	$this->match(self::KEY_BLOCK_SIZE);
		            	$this->setState(1513);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::EQUAL_SYMBOL) {
		            		$this->setState(1512);
		            		$this->match(self::EQUAL_SYMBOL);
		            	}
		            	$this->setState(1515);
		            	$this->fileSizeLiteral();
		            	break;

		            case self::USING:
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(1516);
		            	$this->indexType();
		            	break;

		            case self::WITH:
		            	$this->enterOuterAlt($localContext, 3);
		            	$this->setState(1517);
		            	$this->match(self::WITH);
		            	$this->setState(1518);
		            	$this->match(self::PARSER);
		            	$this->setState(1519);
		            	$this->uid();
		            	break;

		            case self::COMMENT:
		            	$this->enterOuterAlt($localContext, 4);
		            	$this->setState(1520);
		            	$this->match(self::COMMENT);
		            	$this->setState(1521);
		            	$this->match(self::STRING_LITERAL);
		            	break;

		            case self::INVISIBLE:
		            case self::VISIBLE:
		            	$this->enterOuterAlt($localContext, 5);
		            	$this->setState(1522);

		            	$_la = $this->input->LA(1);

		            	if (!($_la === self::INVISIBLE || $_la === self::VISIBLE)) {
		            	$this->errorHandler->recoverInline($this);
		            	} else {
		            		if ($this->input->LA(1) === Token::EOF) {
		            		    $this->matchedEOF = true;
		            	    }

		            		$this->errorHandler->reportMatch($this);
		            		$this->consume();
		            	}
		            	break;

		            case self::ENGINE_ATTRIBUTE:
		            	$this->enterOuterAlt($localContext, 6);
		            	$this->setState(1523);
		            	$this->match(self::ENGINE_ATTRIBUTE);
		            	$this->setState(1525);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::EQUAL_SYMBOL) {
		            		$this->setState(1524);
		            		$this->match(self::EQUAL_SYMBOL);
		            	}
		            	$this->setState(1527);
		            	$this->match(self::STRING_LITERAL);
		            	break;

		            case self::SECONDARY_ENGINE_ATTRIBUTE:
		            	$this->enterOuterAlt($localContext, 7);
		            	$this->setState(1528);
		            	$this->match(self::SECONDARY_ENGINE_ATTRIBUTE);
		            	$this->setState(1530);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::EQUAL_SYMBOL) {
		            		$this->setState(1529);
		            		$this->match(self::EQUAL_SYMBOL);
		            	}
		            	$this->setState(1532);
		            	$this->match(self::STRING_LITERAL);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function procedureParameter(): Context\ProcedureParameterContext
		{
		    $localContext = new Context\ProcedureParameterContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 80, self::RULE_procedureParameter);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(1536);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ((((($_la - 80)) & ~0x3f) === 0 && ((1 << ($_la - 80)) & 35184372088849) !== 0)) {
		        	$this->setState(1535);

		        	$localContext->direction = $this->input->LT(1);
		        	$_la = $this->input->LA(1);

		        	if (!((((($_la - 80)) & ~0x3f) === 0 && ((1 << ($_la - 80)) & 35184372088849) !== 0))) {
		        		    $localContext->direction = $this->errorHandler->recoverInline($this);
		        	} else {
		        		if ($this->input->LA(1) === Token::EOF) {
		        		    $this->matchedEOF = true;
		        	    }

		        		$this->errorHandler->reportMatch($this);
		        		$this->consume();
		        	}
		        }
		        $this->setState(1538);
		        $this->uid();
		        $this->setState(1539);
		        $this->dataType();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function functionParameter(): Context\FunctionParameterContext
		{
		    $localContext = new Context\FunctionParameterContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 82, self::RULE_functionParameter);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(1541);
		        $this->uid();
		        $this->setState(1542);
		        $this->dataType();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function routineOption(): Context\RoutineOptionContext
		{
		    $localContext = new Context\RoutineOptionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 84, self::RULE_routineOption);

		    try {
		        $this->setState(1567);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::COMMENT:
		            	$localContext = new Context\RoutineCommentContext($localContext);
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(1544);
		            	$this->match(self::COMMENT);
		            	$this->setState(1545);
		            	$this->match(self::STRING_LITERAL);
		            	break;

		            case self::LANGUAGE:
		            	$localContext = new Context\RoutineLanguageContext($localContext);
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(1546);
		            	$this->match(self::LANGUAGE);
		            	$this->setState(1547);
		            	$this->match(self::SQL);
		            	break;

		            case self::DETERMINISTIC:
		            case self::NOT:
		            	$localContext = new Context\RoutineBehaviorContext($localContext);
		            	$this->enterOuterAlt($localContext, 3);
		            	$this->setState(1549);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::NOT) {
		            		$this->setState(1548);
		            		$this->match(self::NOT);
		            	}
		            	$this->setState(1551);
		            	$this->match(self::DETERMINISTIC);
		            	break;

		            case self::MODIFIES:
		            case self::READS:
		            case self::CONTAINS:
		            case self::NO:
		            	$localContext = new Context\RoutineDataContext($localContext);
		            	$this->enterOuterAlt($localContext, 4);
		            	$this->setState(1562);
		            	$this->errorHandler->sync($this);

		            	switch ($this->input->LA(1)) {
		            	    case self::CONTAINS:
		            	    	$this->setState(1552);
		            	    	$this->match(self::CONTAINS);
		            	    	$this->setState(1553);
		            	    	$this->match(self::SQL);
		            	    	break;

		            	    case self::NO:
		            	    	$this->setState(1554);
		            	    	$this->match(self::NO);
		            	    	$this->setState(1555);
		            	    	$this->match(self::SQL);
		            	    	break;

		            	    case self::READS:
		            	    	$this->setState(1556);
		            	    	$this->match(self::READS);
		            	    	$this->setState(1557);
		            	    	$this->match(self::SQL);
		            	    	$this->setState(1558);
		            	    	$this->match(self::DATA);
		            	    	break;

		            	    case self::MODIFIES:
		            	    	$this->setState(1559);
		            	    	$this->match(self::MODIFIES);
		            	    	$this->setState(1560);
		            	    	$this->match(self::SQL);
		            	    	$this->setState(1561);
		            	    	$this->match(self::DATA);
		            	    	break;

		            	default:
		            		throw new NoViableAltException($this);
		            	}
		            	break;

		            case self::SQL:
		            	$localContext = new Context\RoutineSecurityContext($localContext);
		            	$this->enterOuterAlt($localContext, 5);
		            	$this->setState(1564);
		            	$this->match(self::SQL);
		            	$this->setState(1565);
		            	$this->match(self::SECURITY);
		            	$this->setState(1566);

		            	$localContext->context = $this->input->LT(1);
		            	$_la = $this->input->LA(1);

		            	if (!($_la === self::DEFINER || $_la === self::INVOKER)) {
		            		    $localContext->context = $this->errorHandler->recoverInline($this);
		            	} else {
		            		if ($this->input->LA(1) === Token::EOF) {
		            		    $this->matchedEOF = true;
		            	    }

		            		$this->errorHandler->reportMatch($this);
		            		$this->consume();
		            	}
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function serverOption(): Context\ServerOptionContext
		{
		    $localContext = new Context\ServerOptionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 86, self::RULE_serverOption);

		    try {
		        $this->setState(1583);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::HOST:
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(1569);
		            	$this->match(self::HOST);
		            	$this->setState(1570);
		            	$this->match(self::STRING_LITERAL);
		            	break;

		            case self::DATABASE:
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(1571);
		            	$this->match(self::DATABASE);
		            	$this->setState(1572);
		            	$this->match(self::STRING_LITERAL);
		            	break;

		            case self::USER:
		            	$this->enterOuterAlt($localContext, 3);
		            	$this->setState(1573);
		            	$this->match(self::USER);
		            	$this->setState(1574);
		            	$this->match(self::STRING_LITERAL);
		            	break;

		            case self::PASSWORD:
		            	$this->enterOuterAlt($localContext, 4);
		            	$this->setState(1575);
		            	$this->match(self::PASSWORD);
		            	$this->setState(1576);
		            	$this->match(self::STRING_LITERAL);
		            	break;

		            case self::SOCKET:
		            	$this->enterOuterAlt($localContext, 5);
		            	$this->setState(1577);
		            	$this->match(self::SOCKET);
		            	$this->setState(1578);
		            	$this->match(self::STRING_LITERAL);
		            	break;

		            case self::OWNER:
		            	$this->enterOuterAlt($localContext, 6);
		            	$this->setState(1579);
		            	$this->match(self::OWNER);
		            	$this->setState(1580);
		            	$this->match(self::STRING_LITERAL);
		            	break;

		            case self::PORT:
		            	$this->enterOuterAlt($localContext, 7);
		            	$this->setState(1581);
		            	$this->match(self::PORT);
		            	$this->setState(1582);
		            	$this->decimalLiteral();
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function createDefinitions(): Context\CreateDefinitionsContext
		{
		    $localContext = new Context\CreateDefinitionsContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 88, self::RULE_createDefinitions);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(1585);
		        $this->match(self::LR_BRACKET);
		        $this->setState(1586);
		        $this->createDefinition();
		        $this->setState(1591);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::COMMA) {
		        	$this->setState(1587);
		        	$this->match(self::COMMA);
		        	$this->setState(1588);
		        	$this->createDefinition();
		        	$this->setState(1593);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		        $this->setState(1594);
		        $this->match(self::RR_BRACKET);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function createDefinition(): Context\CreateDefinitionContext
		{
		    $localContext = new Context\CreateDefinitionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 90, self::RULE_createDefinition);

		    try {
		        $this->setState(1607);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 147, $this->ctx)) {
		        	case 1:
		        	    $localContext = new Context\ColumnDeclarationContext($localContext);
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(1596);
		        	    $this->fullColumnName();
		        	    $this->setState(1597);
		        	    $this->columnDefinition();
		        	break;

		        	case 2:
		        	    $localContext = new Context\ConstraintDeclarationContext($localContext);
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(1599);
		        	    $this->tableConstraint();
		        	    $this->setState(1601);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::NOT) {
		        	    	$this->setState(1600);
		        	    	$this->match(self::NOT);
		        	    }
		        	    $this->setState(1604);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::ENFORCED) {
		        	    	$this->setState(1603);
		        	    	$this->match(self::ENFORCED);
		        	    }
		        	break;

		        	case 3:
		        	    $localContext = new Context\IndexDeclarationContext($localContext);
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(1606);
		        	    $this->indexColumnDefinition();
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function columnDefinition(): Context\ColumnDefinitionContext
		{
		    $localContext = new Context\ColumnDefinitionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 92, self::RULE_columnDefinition);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(1609);
		        $this->dataType();
		        $this->setState(1613);
		        $this->errorHandler->sync($this);

		        $alt = $this->getInterpreter()->adaptivePredict($this->input, 148, $this->ctx);

		        while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
		        	if ($alt === 1) {
		        		$this->setState(1610);
		        		$this->columnConstraint(); 
		        	}

		        	$this->setState(1615);
		        	$this->errorHandler->sync($this);

		        	$alt = $this->getInterpreter()->adaptivePredict($this->input, 148, $this->ctx);
		        }
		        $this->setState(1617);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::NOT) {
		        	$this->setState(1616);
		        	$this->match(self::NOT);
		        }
		        $this->setState(1620);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::ENFORCED) {
		        	$this->setState(1619);
		        	$this->match(self::ENFORCED);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function columnConstraint(): Context\ColumnConstraintContext
		{
		    $localContext = new Context\ColumnConstraintContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 94, self::RULE_columnConstraint);

		    try {
		        $this->setState(1675);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::NOT:
		            case self::NULL_LITERAL:
		            case self::NULL_SPEC_LITERAL:
		            	$localContext = new Context\NullColumnConstraintContext($localContext);
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(1622);
		            	$this->nullNotnull();
		            	break;

		            case self::DEFAULT:
		            	$localContext = new Context\DefaultColumnConstraintContext($localContext);
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(1623);
		            	$this->match(self::DEFAULT);
		            	$this->setState(1624);
		            	$this->defaultValue();
		            	break;

		            case self::VISIBLE:
		            	$localContext = new Context\VisibilityColumnConstraintContext($localContext);
		            	$this->enterOuterAlt($localContext, 3);
		            	$this->setState(1625);
		            	$this->match(self::VISIBLE);
		            	break;

		            case self::INVISIBLE:
		            	$localContext = new Context\InvisibilityColumnConstraintContext($localContext);
		            	$this->enterOuterAlt($localContext, 4);
		            	$this->setState(1626);
		            	$this->match(self::INVISIBLE);
		            	break;

		            case self::ON:
		            case self::AUTO_INCREMENT:
		            	$localContext = new Context\AutoIncrementColumnConstraintContext($localContext);
		            	$this->enterOuterAlt($localContext, 5);
		            	$this->setState(1631);
		            	$this->errorHandler->sync($this);

		            	switch ($this->input->LA(1)) {
		            	    case self::AUTO_INCREMENT:
		            	    	$this->setState(1627);
		            	    	$this->match(self::AUTO_INCREMENT);
		            	    	break;

		            	    case self::ON:
		            	    	$this->setState(1628);
		            	    	$this->match(self::ON);
		            	    	$this->setState(1629);
		            	    	$this->match(self::UPDATE);
		            	    	$this->setState(1630);
		            	    	$this->currentTimestamp();
		            	    	break;

		            	default:
		            		throw new NoViableAltException($this);
		            	}
		            	break;

		            case self::KEY:
		            case self::PRIMARY:
		            	$localContext = new Context\PrimaryKeyColumnConstraintContext($localContext);
		            	$this->enterOuterAlt($localContext, 6);
		            	$this->setState(1634);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::PRIMARY) {
		            		$this->setState(1633);
		            		$this->match(self::PRIMARY);
		            	}
		            	$this->setState(1636);
		            	$this->match(self::KEY);
		            	break;

		            case self::UNIQUE:
		            	$localContext = new Context\UniqueKeyColumnConstraintContext($localContext);
		            	$this->enterOuterAlt($localContext, 7);
		            	$this->setState(1637);
		            	$this->match(self::UNIQUE);
		            	$this->setState(1639);
		            	$this->errorHandler->sync($this);

		            	switch ($this->getInterpreter()->adaptivePredict($this->input, 153, $this->ctx)) {
		            	    case 1:
		            		    $this->setState(1638);
		            		    $this->match(self::KEY);
		            		break;
		            	}
		            	break;

		            case self::COMMENT:
		            	$localContext = new Context\CommentColumnConstraintContext($localContext);
		            	$this->enterOuterAlt($localContext, 8);
		            	$this->setState(1641);
		            	$this->match(self::COMMENT);
		            	$this->setState(1642);
		            	$this->match(self::STRING_LITERAL);
		            	break;

		            case self::COLUMN_FORMAT:
		            	$localContext = new Context\FormatColumnConstraintContext($localContext);
		            	$this->enterOuterAlt($localContext, 9);
		            	$this->setState(1643);
		            	$this->match(self::COLUMN_FORMAT);
		            	$this->setState(1644);

		            	$localContext->colformat = $this->input->LT(1);
		            	$_la = $this->input->LA(1);

		            	if (!($_la === self::DEFAULT || $_la === self::DYNAMIC || $_la === self::FIXED)) {
		            		    $localContext->colformat = $this->errorHandler->recoverInline($this);
		            	} else {
		            		if ($this->input->LA(1) === Token::EOF) {
		            		    $this->matchedEOF = true;
		            	    }

		            		$this->errorHandler->reportMatch($this);
		            		$this->consume();
		            	}
		            	break;

		            case self::STORAGE:
		            	$localContext = new Context\StorageColumnConstraintContext($localContext);
		            	$this->enterOuterAlt($localContext, 10);
		            	$this->setState(1645);
		            	$this->match(self::STORAGE);
		            	$this->setState(1646);

		            	$localContext->storageval = $this->input->LT(1);
		            	$_la = $this->input->LA(1);

		            	if (!($_la === self::DEFAULT || $_la === self::DISK || $_la === self::MEMORY)) {
		            		    $localContext->storageval = $this->errorHandler->recoverInline($this);
		            	} else {
		            		if ($this->input->LA(1) === Token::EOF) {
		            		    $this->matchedEOF = true;
		            	    }

		            		$this->errorHandler->reportMatch($this);
		            		$this->consume();
		            	}
		            	break;

		            case self::REFERENCES:
		            	$localContext = new Context\ReferenceColumnConstraintContext($localContext);
		            	$this->enterOuterAlt($localContext, 11);
		            	$this->setState(1647);
		            	$this->referenceDefinition();
		            	break;

		            case self::COLLATE:
		            	$localContext = new Context\CollateColumnConstraintContext($localContext);
		            	$this->enterOuterAlt($localContext, 12);
		            	$this->setState(1648);
		            	$this->match(self::COLLATE);
		            	$this->setState(1649);
		            	$this->collationName();
		            	break;

		            case self::AS:
		            case self::GENERATED:
		            	$localContext = new Context\GeneratedColumnConstraintContext($localContext);
		            	$this->enterOuterAlt($localContext, 13);
		            	$this->setState(1652);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::GENERATED) {
		            		$this->setState(1650);
		            		$this->match(self::GENERATED);
		            		$this->setState(1651);
		            		$this->match(self::ALWAYS);
		            	}
		            	$this->setState(1654);
		            	$this->match(self::AS);
		            	$this->setState(1655);
		            	$this->match(self::LR_BRACKET);
		            	$this->setState(1656);
		            	$this->recursiveExpression(0);
		            	$this->setState(1657);
		            	$this->match(self::RR_BRACKET);
		            	$this->setState(1659);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::STORED || $_la === self::VIRTUAL) {
		            		$this->setState(1658);

		            		$_la = $this->input->LA(1);

		            		if (!($_la === self::STORED || $_la === self::VIRTUAL)) {
		            		$this->errorHandler->recoverInline($this);
		            		} else {
		            			if ($this->input->LA(1) === Token::EOF) {
		            			    $this->matchedEOF = true;
		            		    }

		            			$this->errorHandler->reportMatch($this);
		            			$this->consume();
		            		}
		            	}
		            	break;

		            case self::SERIAL:
		            	$localContext = new Context\SerialDefaultColumnConstraintContext($localContext);
		            	$this->enterOuterAlt($localContext, 14);
		            	$this->setState(1661);
		            	$this->match(self::SERIAL);
		            	$this->setState(1662);
		            	$this->match(self::DEFAULT);
		            	$this->setState(1663);
		            	$this->match(self::VALUE);
		            	break;

		            case self::CHECK:
		            case self::CONSTRAINT:
		            	$localContext = new Context\CheckColumnConstraintContext($localContext);
		            	$this->enterOuterAlt($localContext, 15);
		            	$this->setState(1668);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::CONSTRAINT) {
		            		$this->setState(1664);
		            		$this->match(self::CONSTRAINT);
		            		$this->setState(1666);
		            		$this->errorHandler->sync($this);
		            		$_la = $this->input->LA(1);

		            		if (((($_la) & ~0x3f) === 0 && ((1 << $_la) & 756891332513122304) !== 0) || (((($_la - 73)) & ~0x3f) === 0 && ((1 << ($_la - 73)) & 146666055071174737) !== 0) || (((($_la - 140)) & ~0x3f) === 0 && ((1 << ($_la - 140)) & 268698883) !== 0) || (((($_la - 217)) & ~0x3f) === 0 && ((1 << ($_la - 217)) & -17174494689) !== 0) || (((($_la - 281)) & ~0x3f) === 0 && ((1 << ($_la - 281)) & -1099511627777) !== 0) || (((($_la - 345)) & ~0x3f) === 0 && ((1 << ($_la - 345)) & -2882305960540372993) !== 0) || (((($_la - 409)) & ~0x3f) === 0 && ((1 << ($_la - 409)) & -4398063288321) !== 0) || (((($_la - 473)) & ~0x3f) === 0 && ((1 << ($_la - 473)) & -16325548649218049) !== 0) || (((($_la - 537)) & ~0x3f) === 0 && ((1 << ($_la - 537)) & -81064793296864001) !== 0) || (((($_la - 601)) & ~0x3f) === 0 && ((1 << ($_la - 601)) & -68719476801) !== 0) || (((($_la - 665)) & ~0x3f) === 0 && ((1 << ($_la - 665)) & -22236531750340609) !== 0) || (((($_la - 729)) & ~0x3f) === 0 && ((1 << ($_la - 729)) & -65) !== 0) || (((($_la - 793)) & ~0x3f) === 0 && ((1 << ($_la - 793)) & -6145) !== 0) || (((($_la - 857)) & ~0x3f) === 0 && ((1 << ($_la - 857)) & -1) !== 0) || (((($_la - 921)) & ~0x3f) === 0 && ((1 << ($_la - 921)) & -1) !== 0) || (((($_la - 985)) & ~0x3f) === 0 && ((1 << ($_la - 985)) & -1) !== 0) || (((($_la - 1049)) & ~0x3f) === 0 && ((1 << ($_la - 1049)) & 576460752303423487) !== 0) || (((($_la - 1123)) & ~0x3f) === 0 && ((1 << ($_la - 1123)) & 8627683329) !== 0)) {
		            			$this->setState(1665);
		            			$localContext->name = $this->uid();
		            		}
		            	}
		            	$this->setState(1670);
		            	$this->match(self::CHECK);
		            	$this->setState(1671);
		            	$this->match(self::LR_BRACKET);
		            	$this->setState(1672);
		            	$this->recursiveExpression(0);
		            	$this->setState(1673);
		            	$this->match(self::RR_BRACKET);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function tableConstraint(): Context\TableConstraintContext
		{
		    $localContext = new Context\TableConstraintContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 96, self::RULE_tableConstraint);

		    try {
		        $this->setState(1746);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 175, $this->ctx)) {
		        	case 1:
		        	    $localContext = new Context\PrimaryKeyTableConstraintContext($localContext);
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(1681);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::CONSTRAINT) {
		        	    	$this->setState(1677);
		        	    	$this->match(self::CONSTRAINT);
		        	    	$this->setState(1679);
		        	    	$this->errorHandler->sync($this);

		        	    	switch ($this->getInterpreter()->adaptivePredict($this->input, 159, $this->ctx)) {
		        	    	    case 1:
		        	    		    $this->setState(1678);
		        	    		    $localContext->name = $this->uid();
		        	    		break;
		        	    	}
		        	    }
		        	    $this->setState(1683);
		        	    $this->match(self::PRIMARY);
		        	    $this->setState(1684);
		        	    $this->match(self::KEY);
		        	    $this->setState(1686);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if (((($_la) & ~0x3f) === 0 && ((1 << $_la) & 756891332513122304) !== 0) || (((($_la - 73)) & ~0x3f) === 0 && ((1 << ($_la - 73)) & 146666055071174737) !== 0) || (((($_la - 140)) & ~0x3f) === 0 && ((1 << ($_la - 140)) & 268698883) !== 0) || (((($_la - 217)) & ~0x3f) === 0 && ((1 << ($_la - 217)) & -17174494689) !== 0) || (((($_la - 281)) & ~0x3f) === 0 && ((1 << ($_la - 281)) & -1099511627777) !== 0) || (((($_la - 345)) & ~0x3f) === 0 && ((1 << ($_la - 345)) & -2882305960540372993) !== 0) || (((($_la - 409)) & ~0x3f) === 0 && ((1 << ($_la - 409)) & -4398063288321) !== 0) || (((($_la - 473)) & ~0x3f) === 0 && ((1 << ($_la - 473)) & -16325548649218049) !== 0) || (((($_la - 537)) & ~0x3f) === 0 && ((1 << ($_la - 537)) & -81064793296864001) !== 0) || (((($_la - 601)) & ~0x3f) === 0 && ((1 << ($_la - 601)) & -68719476801) !== 0) || (((($_la - 665)) & ~0x3f) === 0 && ((1 << ($_la - 665)) & -22236531750340609) !== 0) || (((($_la - 729)) & ~0x3f) === 0 && ((1 << ($_la - 729)) & -65) !== 0) || (((($_la - 793)) & ~0x3f) === 0 && ((1 << ($_la - 793)) & -6145) !== 0) || (((($_la - 857)) & ~0x3f) === 0 && ((1 << ($_la - 857)) & -1) !== 0) || (((($_la - 921)) & ~0x3f) === 0 && ((1 << ($_la - 921)) & -1) !== 0) || (((($_la - 985)) & ~0x3f) === 0 && ((1 << ($_la - 985)) & -1) !== 0) || (((($_la - 1049)) & ~0x3f) === 0 && ((1 << ($_la - 1049)) & 576460752303423487) !== 0) || (((($_la - 1123)) & ~0x3f) === 0 && ((1 << ($_la - 1123)) & 8627683329) !== 0)) {
		        	    	$this->setState(1685);
		        	    	$localContext->index = $this->uid();
		        	    }
		        	    $this->setState(1689);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::USING) {
		        	    	$this->setState(1688);
		        	    	$this->indexType();
		        	    }
		        	    $this->setState(1691);
		        	    $this->indexColumnNames();
		        	    $this->setState(1695);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::USING || $_la === self::WITH || $_la === self::COMMENT || $_la === self::INVISIBLE || $_la === self::KEY_BLOCK_SIZE || $_la === self::VISIBLE || $_la === self::ENGINE_ATTRIBUTE || $_la === self::SECONDARY_ENGINE_ATTRIBUTE) {
		        	    	$this->setState(1692);
		        	    	$this->indexOption();
		        	    	$this->setState(1697);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	break;

		        	case 2:
		        	    $localContext = new Context\UniqueKeyTableConstraintContext($localContext);
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(1702);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::CONSTRAINT) {
		        	    	$this->setState(1698);
		        	    	$this->match(self::CONSTRAINT);
		        	    	$this->setState(1700);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);

		        	    	if (((($_la) & ~0x3f) === 0 && ((1 << $_la) & 756891332513122304) !== 0) || (((($_la - 73)) & ~0x3f) === 0 && ((1 << ($_la - 73)) & 146666055071174737) !== 0) || (((($_la - 140)) & ~0x3f) === 0 && ((1 << ($_la - 140)) & 268698883) !== 0) || (((($_la - 217)) & ~0x3f) === 0 && ((1 << ($_la - 217)) & -17174494689) !== 0) || (((($_la - 281)) & ~0x3f) === 0 && ((1 << ($_la - 281)) & -1099511627777) !== 0) || (((($_la - 345)) & ~0x3f) === 0 && ((1 << ($_la - 345)) & -2882305960540372993) !== 0) || (((($_la - 409)) & ~0x3f) === 0 && ((1 << ($_la - 409)) & -4398063288321) !== 0) || (((($_la - 473)) & ~0x3f) === 0 && ((1 << ($_la - 473)) & -16325548649218049) !== 0) || (((($_la - 537)) & ~0x3f) === 0 && ((1 << ($_la - 537)) & -81064793296864001) !== 0) || (((($_la - 601)) & ~0x3f) === 0 && ((1 << ($_la - 601)) & -68719476801) !== 0) || (((($_la - 665)) & ~0x3f) === 0 && ((1 << ($_la - 665)) & -22236531750340609) !== 0) || (((($_la - 729)) & ~0x3f) === 0 && ((1 << ($_la - 729)) & -65) !== 0) || (((($_la - 793)) & ~0x3f) === 0 && ((1 << ($_la - 793)) & -6145) !== 0) || (((($_la - 857)) & ~0x3f) === 0 && ((1 << ($_la - 857)) & -1) !== 0) || (((($_la - 921)) & ~0x3f) === 0 && ((1 << ($_la - 921)) & -1) !== 0) || (((($_la - 985)) & ~0x3f) === 0 && ((1 << ($_la - 985)) & -1) !== 0) || (((($_la - 1049)) & ~0x3f) === 0 && ((1 << ($_la - 1049)) & 576460752303423487) !== 0) || (((($_la - 1123)) & ~0x3f) === 0 && ((1 << ($_la - 1123)) & 8627683329) !== 0)) {
		        	    		$this->setState(1699);
		        	    		$localContext->name = $this->uid();
		        	    	}
		        	    }
		        	    $this->setState(1704);
		        	    $this->match(self::UNIQUE);
		        	    $this->setState(1706);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::INDEX || $_la === self::KEY) {
		        	    	$this->setState(1705);

		        	    	$localContext->indexFormat = $this->input->LT(1);
		        	    	$_la = $this->input->LA(1);

		        	    	if (!($_la === self::INDEX || $_la === self::KEY)) {
		        	    		    $localContext->indexFormat = $this->errorHandler->recoverInline($this);
		        	    	} else {
		        	    		if ($this->input->LA(1) === Token::EOF) {
		        	    		    $this->matchedEOF = true;
		        	    	    }

		        	    		$this->errorHandler->reportMatch($this);
		        	    		$this->consume();
		        	    	}
		        	    }
		        	    $this->setState(1709);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if (((($_la) & ~0x3f) === 0 && ((1 << $_la) & 756891332513122304) !== 0) || (((($_la - 73)) & ~0x3f) === 0 && ((1 << ($_la - 73)) & 146666055071174737) !== 0) || (((($_la - 140)) & ~0x3f) === 0 && ((1 << ($_la - 140)) & 268698883) !== 0) || (((($_la - 217)) & ~0x3f) === 0 && ((1 << ($_la - 217)) & -17174494689) !== 0) || (((($_la - 281)) & ~0x3f) === 0 && ((1 << ($_la - 281)) & -1099511627777) !== 0) || (((($_la - 345)) & ~0x3f) === 0 && ((1 << ($_la - 345)) & -2882305960540372993) !== 0) || (((($_la - 409)) & ~0x3f) === 0 && ((1 << ($_la - 409)) & -4398063288321) !== 0) || (((($_la - 473)) & ~0x3f) === 0 && ((1 << ($_la - 473)) & -16325548649218049) !== 0) || (((($_la - 537)) & ~0x3f) === 0 && ((1 << ($_la - 537)) & -81064793296864001) !== 0) || (((($_la - 601)) & ~0x3f) === 0 && ((1 << ($_la - 601)) & -68719476801) !== 0) || (((($_la - 665)) & ~0x3f) === 0 && ((1 << ($_la - 665)) & -22236531750340609) !== 0) || (((($_la - 729)) & ~0x3f) === 0 && ((1 << ($_la - 729)) & -65) !== 0) || (((($_la - 793)) & ~0x3f) === 0 && ((1 << ($_la - 793)) & -6145) !== 0) || (((($_la - 857)) & ~0x3f) === 0 && ((1 << ($_la - 857)) & -1) !== 0) || (((($_la - 921)) & ~0x3f) === 0 && ((1 << ($_la - 921)) & -1) !== 0) || (((($_la - 985)) & ~0x3f) === 0 && ((1 << ($_la - 985)) & -1) !== 0) || (((($_la - 1049)) & ~0x3f) === 0 && ((1 << ($_la - 1049)) & 576460752303423487) !== 0) || (((($_la - 1123)) & ~0x3f) === 0 && ((1 << ($_la - 1123)) & 8627683329) !== 0)) {
		        	    	$this->setState(1708);
		        	    	$localContext->index = $this->uid();
		        	    }
		        	    $this->setState(1712);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::USING) {
		        	    	$this->setState(1711);
		        	    	$this->indexType();
		        	    }
		        	    $this->setState(1714);
		        	    $this->indexColumnNames();
		        	    $this->setState(1718);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::USING || $_la === self::WITH || $_la === self::COMMENT || $_la === self::INVISIBLE || $_la === self::KEY_BLOCK_SIZE || $_la === self::VISIBLE || $_la === self::ENGINE_ATTRIBUTE || $_la === self::SECONDARY_ENGINE_ATTRIBUTE) {
		        	    	$this->setState(1715);
		        	    	$this->indexOption();
		        	    	$this->setState(1720);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	break;

		        	case 3:
		        	    $localContext = new Context\ForeignKeyTableConstraintContext($localContext);
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(1725);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::CONSTRAINT) {
		        	    	$this->setState(1721);
		        	    	$this->match(self::CONSTRAINT);
		        	    	$this->setState(1723);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);

		        	    	if (((($_la) & ~0x3f) === 0 && ((1 << $_la) & 756891332513122304) !== 0) || (((($_la - 73)) & ~0x3f) === 0 && ((1 << ($_la - 73)) & 146666055071174737) !== 0) || (((($_la - 140)) & ~0x3f) === 0 && ((1 << ($_la - 140)) & 268698883) !== 0) || (((($_la - 217)) & ~0x3f) === 0 && ((1 << ($_la - 217)) & -17174494689) !== 0) || (((($_la - 281)) & ~0x3f) === 0 && ((1 << ($_la - 281)) & -1099511627777) !== 0) || (((($_la - 345)) & ~0x3f) === 0 && ((1 << ($_la - 345)) & -2882305960540372993) !== 0) || (((($_la - 409)) & ~0x3f) === 0 && ((1 << ($_la - 409)) & -4398063288321) !== 0) || (((($_la - 473)) & ~0x3f) === 0 && ((1 << ($_la - 473)) & -16325548649218049) !== 0) || (((($_la - 537)) & ~0x3f) === 0 && ((1 << ($_la - 537)) & -81064793296864001) !== 0) || (((($_la - 601)) & ~0x3f) === 0 && ((1 << ($_la - 601)) & -68719476801) !== 0) || (((($_la - 665)) & ~0x3f) === 0 && ((1 << ($_la - 665)) & -22236531750340609) !== 0) || (((($_la - 729)) & ~0x3f) === 0 && ((1 << ($_la - 729)) & -65) !== 0) || (((($_la - 793)) & ~0x3f) === 0 && ((1 << ($_la - 793)) & -6145) !== 0) || (((($_la - 857)) & ~0x3f) === 0 && ((1 << ($_la - 857)) & -1) !== 0) || (((($_la - 921)) & ~0x3f) === 0 && ((1 << ($_la - 921)) & -1) !== 0) || (((($_la - 985)) & ~0x3f) === 0 && ((1 << ($_la - 985)) & -1) !== 0) || (((($_la - 1049)) & ~0x3f) === 0 && ((1 << ($_la - 1049)) & 576460752303423487) !== 0) || (((($_la - 1123)) & ~0x3f) === 0 && ((1 << ($_la - 1123)) & 8627683329) !== 0)) {
		        	    		$this->setState(1722);
		        	    		$localContext->name = $this->uid();
		        	    	}
		        	    }
		        	    $this->setState(1727);
		        	    $this->match(self::FOREIGN);
		        	    $this->setState(1728);
		        	    $this->match(self::KEY);
		        	    $this->setState(1730);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if (((($_la) & ~0x3f) === 0 && ((1 << $_la) & 756891332513122304) !== 0) || (((($_la - 73)) & ~0x3f) === 0 && ((1 << ($_la - 73)) & 146666055071174737) !== 0) || (((($_la - 140)) & ~0x3f) === 0 && ((1 << ($_la - 140)) & 268698883) !== 0) || (((($_la - 217)) & ~0x3f) === 0 && ((1 << ($_la - 217)) & -17174494689) !== 0) || (((($_la - 281)) & ~0x3f) === 0 && ((1 << ($_la - 281)) & -1099511627777) !== 0) || (((($_la - 345)) & ~0x3f) === 0 && ((1 << ($_la - 345)) & -2882305960540372993) !== 0) || (((($_la - 409)) & ~0x3f) === 0 && ((1 << ($_la - 409)) & -4398063288321) !== 0) || (((($_la - 473)) & ~0x3f) === 0 && ((1 << ($_la - 473)) & -16325548649218049) !== 0) || (((($_la - 537)) & ~0x3f) === 0 && ((1 << ($_la - 537)) & -81064793296864001) !== 0) || (((($_la - 601)) & ~0x3f) === 0 && ((1 << ($_la - 601)) & -68719476801) !== 0) || (((($_la - 665)) & ~0x3f) === 0 && ((1 << ($_la - 665)) & -22236531750340609) !== 0) || (((($_la - 729)) & ~0x3f) === 0 && ((1 << ($_la - 729)) & -65) !== 0) || (((($_la - 793)) & ~0x3f) === 0 && ((1 << ($_la - 793)) & -6145) !== 0) || (((($_la - 857)) & ~0x3f) === 0 && ((1 << ($_la - 857)) & -1) !== 0) || (((($_la - 921)) & ~0x3f) === 0 && ((1 << ($_la - 921)) & -1) !== 0) || (((($_la - 985)) & ~0x3f) === 0 && ((1 << ($_la - 985)) & -1) !== 0) || (((($_la - 1049)) & ~0x3f) === 0 && ((1 << ($_la - 1049)) & 576460752303423487) !== 0) || (((($_la - 1123)) & ~0x3f) === 0 && ((1 << ($_la - 1123)) & 8627683329) !== 0)) {
		        	    	$this->setState(1729);
		        	    	$localContext->index = $this->uid();
		        	    }
		        	    $this->setState(1732);
		        	    $this->indexColumnNames();
		        	    $this->setState(1733);
		        	    $this->referenceDefinition();
		        	break;

		        	case 4:
		        	    $localContext = new Context\CheckTableConstraintContext($localContext);
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(1739);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::CONSTRAINT) {
		        	    	$this->setState(1735);
		        	    	$this->match(self::CONSTRAINT);
		        	    	$this->setState(1737);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);

		        	    	if (((($_la) & ~0x3f) === 0 && ((1 << $_la) & 756891332513122304) !== 0) || (((($_la - 73)) & ~0x3f) === 0 && ((1 << ($_la - 73)) & 146666055071174737) !== 0) || (((($_la - 140)) & ~0x3f) === 0 && ((1 << ($_la - 140)) & 268698883) !== 0) || (((($_la - 217)) & ~0x3f) === 0 && ((1 << ($_la - 217)) & -17174494689) !== 0) || (((($_la - 281)) & ~0x3f) === 0 && ((1 << ($_la - 281)) & -1099511627777) !== 0) || (((($_la - 345)) & ~0x3f) === 0 && ((1 << ($_la - 345)) & -2882305960540372993) !== 0) || (((($_la - 409)) & ~0x3f) === 0 && ((1 << ($_la - 409)) & -4398063288321) !== 0) || (((($_la - 473)) & ~0x3f) === 0 && ((1 << ($_la - 473)) & -16325548649218049) !== 0) || (((($_la - 537)) & ~0x3f) === 0 && ((1 << ($_la - 537)) & -81064793296864001) !== 0) || (((($_la - 601)) & ~0x3f) === 0 && ((1 << ($_la - 601)) & -68719476801) !== 0) || (((($_la - 665)) & ~0x3f) === 0 && ((1 << ($_la - 665)) & -22236531750340609) !== 0) || (((($_la - 729)) & ~0x3f) === 0 && ((1 << ($_la - 729)) & -65) !== 0) || (((($_la - 793)) & ~0x3f) === 0 && ((1 << ($_la - 793)) & -6145) !== 0) || (((($_la - 857)) & ~0x3f) === 0 && ((1 << ($_la - 857)) & -1) !== 0) || (((($_la - 921)) & ~0x3f) === 0 && ((1 << ($_la - 921)) & -1) !== 0) || (((($_la - 985)) & ~0x3f) === 0 && ((1 << ($_la - 985)) & -1) !== 0) || (((($_la - 1049)) & ~0x3f) === 0 && ((1 << ($_la - 1049)) & 576460752303423487) !== 0) || (((($_la - 1123)) & ~0x3f) === 0 && ((1 << ($_la - 1123)) & 8627683329) !== 0)) {
		        	    		$this->setState(1736);
		        	    		$localContext->name = $this->uid();
		        	    	}
		        	    }
		        	    $this->setState(1741);
		        	    $this->match(self::CHECK);
		        	    $this->setState(1742);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(1743);
		        	    $this->recursiveExpression(0);
		        	    $this->setState(1744);
		        	    $this->match(self::RR_BRACKET);
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function referenceDefinition(): Context\ReferenceDefinitionContext
		{
		    $localContext = new Context\ReferenceDefinitionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 98, self::RULE_referenceDefinition);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(1748);
		        $this->match(self::REFERENCES);
		        $this->setState(1749);
		        $this->tableName();
		        $this->setState(1751);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 176, $this->ctx)) {
		            case 1:
		        	    $this->setState(1750);
		        	    $this->indexColumnNames();
		        	break;
		        }
		        $this->setState(1755);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::MATCH) {
		        	$this->setState(1753);
		        	$this->match(self::MATCH);
		        	$this->setState(1754);

		        	$localContext->matchType = $this->input->LT(1);
		        	$_la = $this->input->LA(1);

		        	if (!($_la === self::FULL || $_la === self::PARTIAL || $_la === self::SIMPLE)) {
		        		    $localContext->matchType = $this->errorHandler->recoverInline($this);
		        	} else {
		        		if ($this->input->LA(1) === Token::EOF) {
		        		    $this->matchedEOF = true;
		        	    }

		        		$this->errorHandler->reportMatch($this);
		        		$this->consume();
		        	}
		        }
		        $this->setState(1758);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 178, $this->ctx)) {
		            case 1:
		        	    $this->setState(1757);
		        	    $this->referenceAction();
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function referenceAction(): Context\ReferenceActionContext
		{
		    $localContext = new Context\ReferenceActionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 100, self::RULE_referenceAction);

		    try {
		        $this->setState(1776);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 181, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(1760);
		        	    $this->match(self::ON);
		        	    $this->setState(1761);
		        	    $this->match(self::DELETE);
		        	    $this->setState(1762);
		        	    $localContext->onDelete = $this->referenceControlType();
		        	    $this->setState(1766);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 179, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(1763);
		        	    	    $this->match(self::ON);
		        	    	    $this->setState(1764);
		        	    	    $this->match(self::UPDATE);
		        	    	    $this->setState(1765);
		        	    	    $localContext->onUpdate = $this->referenceControlType();
		        	    	break;
		        	    }
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(1768);
		        	    $this->match(self::ON);
		        	    $this->setState(1769);
		        	    $this->match(self::UPDATE);
		        	    $this->setState(1770);
		        	    $localContext->onUpdate = $this->referenceControlType();
		        	    $this->setState(1774);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 180, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(1771);
		        	    	    $this->match(self::ON);
		        	    	    $this->setState(1772);
		        	    	    $this->match(self::DELETE);
		        	    	    $this->setState(1773);
		        	    	    $localContext->onDelete = $this->referenceControlType();
		        	    	break;
		        	    }
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function referenceControlType(): Context\ReferenceControlTypeContext
		{
		    $localContext = new Context\ReferenceControlTypeContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 102, self::RULE_referenceControlType);

		    try {
		        $this->setState(1786);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 182, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(1778);
		        	    $this->match(self::RESTRICT);
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(1779);
		        	    $this->match(self::CASCADE);
		        	break;

		        	case 3:
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(1780);
		        	    $this->match(self::SET);
		        	    $this->setState(1781);
		        	    $this->match(self::NULL_LITERAL);
		        	break;

		        	case 4:
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(1782);
		        	    $this->match(self::NO);
		        	    $this->setState(1783);
		        	    $this->match(self::ACTION);
		        	break;

		        	case 5:
		        	    $this->enterOuterAlt($localContext, 5);
		        	    $this->setState(1784);
		        	    $this->match(self::SET);
		        	    $this->setState(1785);
		        	    $this->match(self::DEFAULT);
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function indexColumnDefinition(): Context\IndexColumnDefinitionContext
		{
		    $localContext = new Context\IndexColumnDefinitionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 104, self::RULE_indexColumnDefinition);

		    try {
		        $this->setState(1816);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::INDEX:
		            case self::KEY:
		            	$localContext = new Context\SimpleIndexDeclarationContext($localContext);
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(1788);

		            	$localContext->indexFormat = $this->input->LT(1);
		            	$_la = $this->input->LA(1);

		            	if (!($_la === self::INDEX || $_la === self::KEY)) {
		            		    $localContext->indexFormat = $this->errorHandler->recoverInline($this);
		            	} else {
		            		if ($this->input->LA(1) === Token::EOF) {
		            		    $this->matchedEOF = true;
		            	    }

		            		$this->errorHandler->reportMatch($this);
		            		$this->consume();
		            	}
		            	$this->setState(1790);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if (((($_la) & ~0x3f) === 0 && ((1 << $_la) & 756891332513122304) !== 0) || (((($_la - 73)) & ~0x3f) === 0 && ((1 << ($_la - 73)) & 146666055071174737) !== 0) || (((($_la - 140)) & ~0x3f) === 0 && ((1 << ($_la - 140)) & 268698883) !== 0) || (((($_la - 217)) & ~0x3f) === 0 && ((1 << ($_la - 217)) & -17174494689) !== 0) || (((($_la - 281)) & ~0x3f) === 0 && ((1 << ($_la - 281)) & -1099511627777) !== 0) || (((($_la - 345)) & ~0x3f) === 0 && ((1 << ($_la - 345)) & -2882305960540372993) !== 0) || (((($_la - 409)) & ~0x3f) === 0 && ((1 << ($_la - 409)) & -4398063288321) !== 0) || (((($_la - 473)) & ~0x3f) === 0 && ((1 << ($_la - 473)) & -16325548649218049) !== 0) || (((($_la - 537)) & ~0x3f) === 0 && ((1 << ($_la - 537)) & -81064793296864001) !== 0) || (((($_la - 601)) & ~0x3f) === 0 && ((1 << ($_la - 601)) & -68719476801) !== 0) || (((($_la - 665)) & ~0x3f) === 0 && ((1 << ($_la - 665)) & -22236531750340609) !== 0) || (((($_la - 729)) & ~0x3f) === 0 && ((1 << ($_la - 729)) & -65) !== 0) || (((($_la - 793)) & ~0x3f) === 0 && ((1 << ($_la - 793)) & -6145) !== 0) || (((($_la - 857)) & ~0x3f) === 0 && ((1 << ($_la - 857)) & -1) !== 0) || (((($_la - 921)) & ~0x3f) === 0 && ((1 << ($_la - 921)) & -1) !== 0) || (((($_la - 985)) & ~0x3f) === 0 && ((1 << ($_la - 985)) & -1) !== 0) || (((($_la - 1049)) & ~0x3f) === 0 && ((1 << ($_la - 1049)) & 576460752303423487) !== 0) || (((($_la - 1123)) & ~0x3f) === 0 && ((1 << ($_la - 1123)) & 8627683329) !== 0)) {
		            		$this->setState(1789);
		            		$this->uid();
		            	}
		            	$this->setState(1793);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::USING) {
		            		$this->setState(1792);
		            		$this->indexType();
		            	}
		            	$this->setState(1795);
		            	$this->indexColumnNames();
		            	$this->setState(1799);
		            	$this->errorHandler->sync($this);

		            	$_la = $this->input->LA(1);
		            	while ($_la === self::USING || $_la === self::WITH || $_la === self::COMMENT || $_la === self::INVISIBLE || $_la === self::KEY_BLOCK_SIZE || $_la === self::VISIBLE || $_la === self::ENGINE_ATTRIBUTE || $_la === self::SECONDARY_ENGINE_ATTRIBUTE) {
		            		$this->setState(1796);
		            		$this->indexOption();
		            		$this->setState(1801);
		            		$this->errorHandler->sync($this);
		            		$_la = $this->input->LA(1);
		            	}
		            	break;

		            case self::FULLTEXT:
		            case self::SPATIAL:
		            	$localContext = new Context\SpecialIndexDeclarationContext($localContext);
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(1802);

		            	$_la = $this->input->LA(1);

		            	if (!($_la === self::FULLTEXT || $_la === self::SPATIAL)) {
		            	$this->errorHandler->recoverInline($this);
		            	} else {
		            		if ($this->input->LA(1) === Token::EOF) {
		            		    $this->matchedEOF = true;
		            	    }

		            		$this->errorHandler->reportMatch($this);
		            		$this->consume();
		            	}
		            	$this->setState(1804);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::INDEX || $_la === self::KEY) {
		            		$this->setState(1803);

		            		$localContext->indexFormat = $this->input->LT(1);
		            		$_la = $this->input->LA(1);

		            		if (!($_la === self::INDEX || $_la === self::KEY)) {
		            			    $localContext->indexFormat = $this->errorHandler->recoverInline($this);
		            		} else {
		            			if ($this->input->LA(1) === Token::EOF) {
		            			    $this->matchedEOF = true;
		            		    }

		            			$this->errorHandler->reportMatch($this);
		            			$this->consume();
		            		}
		            	}
		            	$this->setState(1807);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if (((($_la) & ~0x3f) === 0 && ((1 << $_la) & 756891332513122304) !== 0) || (((($_la - 73)) & ~0x3f) === 0 && ((1 << ($_la - 73)) & 146666055071174737) !== 0) || (((($_la - 140)) & ~0x3f) === 0 && ((1 << ($_la - 140)) & 268698883) !== 0) || (((($_la - 217)) & ~0x3f) === 0 && ((1 << ($_la - 217)) & -17174494689) !== 0) || (((($_la - 281)) & ~0x3f) === 0 && ((1 << ($_la - 281)) & -1099511627777) !== 0) || (((($_la - 345)) & ~0x3f) === 0 && ((1 << ($_la - 345)) & -2882305960540372993) !== 0) || (((($_la - 409)) & ~0x3f) === 0 && ((1 << ($_la - 409)) & -4398063288321) !== 0) || (((($_la - 473)) & ~0x3f) === 0 && ((1 << ($_la - 473)) & -16325548649218049) !== 0) || (((($_la - 537)) & ~0x3f) === 0 && ((1 << ($_la - 537)) & -81064793296864001) !== 0) || (((($_la - 601)) & ~0x3f) === 0 && ((1 << ($_la - 601)) & -68719476801) !== 0) || (((($_la - 665)) & ~0x3f) === 0 && ((1 << ($_la - 665)) & -22236531750340609) !== 0) || (((($_la - 729)) & ~0x3f) === 0 && ((1 << ($_la - 729)) & -65) !== 0) || (((($_la - 793)) & ~0x3f) === 0 && ((1 << ($_la - 793)) & -6145) !== 0) || (((($_la - 857)) & ~0x3f) === 0 && ((1 << ($_la - 857)) & -1) !== 0) || (((($_la - 921)) & ~0x3f) === 0 && ((1 << ($_la - 921)) & -1) !== 0) || (((($_la - 985)) & ~0x3f) === 0 && ((1 << ($_la - 985)) & -1) !== 0) || (((($_la - 1049)) & ~0x3f) === 0 && ((1 << ($_la - 1049)) & 576460752303423487) !== 0) || (((($_la - 1123)) & ~0x3f) === 0 && ((1 << ($_la - 1123)) & 8627683329) !== 0)) {
		            		$this->setState(1806);
		            		$this->uid();
		            	}
		            	$this->setState(1809);
		            	$this->indexColumnNames();
		            	$this->setState(1813);
		            	$this->errorHandler->sync($this);

		            	$_la = $this->input->LA(1);
		            	while ($_la === self::USING || $_la === self::WITH || $_la === self::COMMENT || $_la === self::INVISIBLE || $_la === self::KEY_BLOCK_SIZE || $_la === self::VISIBLE || $_la === self::ENGINE_ATTRIBUTE || $_la === self::SECONDARY_ENGINE_ATTRIBUTE) {
		            		$this->setState(1810);
		            		$this->indexOption();
		            		$this->setState(1815);
		            		$this->errorHandler->sync($this);
		            		$_la = $this->input->LA(1);
		            	}
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function tableOption(): Context\TableOptionContext
		{
		    $localContext = new Context\TableOptionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 106, self::RULE_tableOption);

		    try {
		        $this->setState(2003);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 227, $this->ctx)) {
		        	case 1:
		        	    $localContext = new Context\TableOptionEngineContext($localContext);
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(1818);
		        	    $this->match(self::ENGINE);
		        	    $this->setState(1820);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::EQUAL_SYMBOL) {
		        	    	$this->setState(1819);
		        	    	$this->match(self::EQUAL_SYMBOL);
		        	    }
		        	    $this->setState(1823);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 191, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(1822);
		        	    	    $this->engineName();
		        	    	break;
		        	    }
		        	break;

		        	case 2:
		        	    $localContext = new Context\TableOptionEngineAttributeContext($localContext);
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(1825);
		        	    $this->match(self::ENGINE_ATTRIBUTE);
		        	    $this->setState(1827);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::EQUAL_SYMBOL) {
		        	    	$this->setState(1826);
		        	    	$this->match(self::EQUAL_SYMBOL);
		        	    }
		        	    $this->setState(1829);
		        	    $this->match(self::STRING_LITERAL);
		        	break;

		        	case 3:
		        	    $localContext = new Context\TableOptionAutoextendSizeContext($localContext);
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(1830);
		        	    $this->match(self::AUTOEXTEND_SIZE);
		        	    $this->setState(1832);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::EQUAL_SYMBOL) {
		        	    	$this->setState(1831);
		        	    	$this->match(self::EQUAL_SYMBOL);
		        	    }
		        	    $this->setState(1834);
		        	    $this->decimalLiteral();
		        	break;

		        	case 4:
		        	    $localContext = new Context\TableOptionAutoIncrementContext($localContext);
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(1835);
		        	    $this->match(self::AUTO_INCREMENT);
		        	    $this->setState(1837);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::EQUAL_SYMBOL) {
		        	    	$this->setState(1836);
		        	    	$this->match(self::EQUAL_SYMBOL);
		        	    }
		        	    $this->setState(1839);
		        	    $this->decimalLiteral();
		        	break;

		        	case 5:
		        	    $localContext = new Context\TableOptionAverageContext($localContext);
		        	    $this->enterOuterAlt($localContext, 5);
		        	    $this->setState(1840);
		        	    $this->match(self::AVG_ROW_LENGTH);
		        	    $this->setState(1842);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::EQUAL_SYMBOL) {
		        	    	$this->setState(1841);
		        	    	$this->match(self::EQUAL_SYMBOL);
		        	    }
		        	    $this->setState(1844);
		        	    $this->decimalLiteral();
		        	break;

		        	case 6:
		        	    $localContext = new Context\TableOptionCharsetContext($localContext);
		        	    $this->enterOuterAlt($localContext, 6);
		        	    $this->setState(1846);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::DEFAULT) {
		        	    	$this->setState(1845);
		        	    	$this->match(self::DEFAULT);
		        	    }
		        	    $this->setState(1848);
		        	    $this->charSet();
		        	    $this->setState(1850);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::EQUAL_SYMBOL) {
		        	    	$this->setState(1849);
		        	    	$this->match(self::EQUAL_SYMBOL);
		        	    }
		        	    $this->setState(1854);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->input->LA(1)) {
		        	        case self::BINARY:
		        	        case self::ARMSCII8:
		        	        case self::ASCII:
		        	        case self::BIG5:
		        	        case self::CP1250:
		        	        case self::CP1251:
		        	        case self::CP1256:
		        	        case self::CP1257:
		        	        case self::CP850:
		        	        case self::CP852:
		        	        case self::CP866:
		        	        case self::CP932:
		        	        case self::DEC8:
		        	        case self::EUCJPMS:
		        	        case self::EUCKR:
		        	        case self::GB18030:
		        	        case self::GB2312:
		        	        case self::GBK:
		        	        case self::GEOSTD8:
		        	        case self::GREEK:
		        	        case self::HEBREW:
		        	        case self::HP8:
		        	        case self::KEYBCS2:
		        	        case self::KOI8R:
		        	        case self::KOI8U:
		        	        case self::LATIN1:
		        	        case self::LATIN2:
		        	        case self::LATIN5:
		        	        case self::LATIN7:
		        	        case self::MACCE:
		        	        case self::MACROMAN:
		        	        case self::SJIS:
		        	        case self::SWE7:
		        	        case self::TIS620:
		        	        case self::UCS2:
		        	        case self::UJIS:
		        	        case self::UTF16:
		        	        case self::UTF16LE:
		        	        case self::UTF32:
		        	        case self::UTF8:
		        	        case self::UTF8MB3:
		        	        case self::UTF8MB4:
		        	        case self::CHARSET_REVERSE_QOUTE_STRING:
		        	        case self::STRING_LITERAL:
		        	        	$this->setState(1852);
		        	        	$this->charsetName();
		        	        	break;

		        	        case self::DEFAULT:
		        	        	$this->setState(1853);
		        	        	$this->match(self::DEFAULT);
		        	        	break;

		        	    default:
		        	    	throw new NoViableAltException($this);
		        	    }
		        	break;

		        	case 7:
		        	    $localContext = new Context\TableOptionChecksumContext($localContext);
		        	    $this->enterOuterAlt($localContext, 7);
		        	    $this->setState(1856);

		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::CHECKSUM || $_la === self::PAGE_CHECKSUM)) {
		        	    $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	    $this->setState(1858);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::EQUAL_SYMBOL) {
		        	    	$this->setState(1857);
		        	    	$this->match(self::EQUAL_SYMBOL);
		        	    }
		        	    $this->setState(1860);

		        	    $localContext->boolValue = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::ZERO_DECIMAL || $_la === self::ONE_DECIMAL)) {
		        	    	    $localContext->boolValue = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	break;

		        	case 8:
		        	    $localContext = new Context\TableOptionCollateContext($localContext);
		        	    $this->enterOuterAlt($localContext, 8);
		        	    $this->setState(1862);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::DEFAULT) {
		        	    	$this->setState(1861);
		        	    	$this->match(self::DEFAULT);
		        	    }
		        	    $this->setState(1864);
		        	    $this->match(self::COLLATE);
		        	    $this->setState(1866);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::EQUAL_SYMBOL) {
		        	    	$this->setState(1865);
		        	    	$this->match(self::EQUAL_SYMBOL);
		        	    }
		        	    $this->setState(1868);
		        	    $this->collationName();
		        	break;

		        	case 9:
		        	    $localContext = new Context\TableOptionCommentContext($localContext);
		        	    $this->enterOuterAlt($localContext, 9);
		        	    $this->setState(1869);
		        	    $this->match(self::COMMENT);
		        	    $this->setState(1871);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::EQUAL_SYMBOL) {
		        	    	$this->setState(1870);
		        	    	$this->match(self::EQUAL_SYMBOL);
		        	    }
		        	    $this->setState(1873);
		        	    $this->match(self::STRING_LITERAL);
		        	break;

		        	case 10:
		        	    $localContext = new Context\TableOptionCompressionContext($localContext);
		        	    $this->enterOuterAlt($localContext, 10);
		        	    $this->setState(1874);
		        	    $this->match(self::COMPRESSION);
		        	    $this->setState(1876);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::EQUAL_SYMBOL) {
		        	    	$this->setState(1875);
		        	    	$this->match(self::EQUAL_SYMBOL);
		        	    }
		        	    $this->setState(1878);

		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::STRING_LITERAL || $_la === self::ID)) {
		        	    $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	break;

		        	case 11:
		        	    $localContext = new Context\TableOptionConnectionContext($localContext);
		        	    $this->enterOuterAlt($localContext, 11);
		        	    $this->setState(1879);
		        	    $this->match(self::CONNECTION);
		        	    $this->setState(1881);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::EQUAL_SYMBOL) {
		        	    	$this->setState(1880);
		        	    	$this->match(self::EQUAL_SYMBOL);
		        	    }
		        	    $this->setState(1883);
		        	    $this->match(self::STRING_LITERAL);
		        	break;

		        	case 12:
		        	    $localContext = new Context\TableOptionDataDirectoryContext($localContext);
		        	    $this->enterOuterAlt($localContext, 12);
		        	    $this->setState(1884);

		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::INDEX || $_la === self::DATA)) {
		        	    $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	    $this->setState(1885);
		        	    $this->match(self::DIRECTORY);
		        	    $this->setState(1887);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::EQUAL_SYMBOL) {
		        	    	$this->setState(1886);
		        	    	$this->match(self::EQUAL_SYMBOL);
		        	    }
		        	    $this->setState(1889);
		        	    $this->match(self::STRING_LITERAL);
		        	break;

		        	case 13:
		        	    $localContext = new Context\TableOptionDelayContext($localContext);
		        	    $this->enterOuterAlt($localContext, 13);
		        	    $this->setState(1890);
		        	    $this->match(self::DELAY_KEY_WRITE);
		        	    $this->setState(1892);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::EQUAL_SYMBOL) {
		        	    	$this->setState(1891);
		        	    	$this->match(self::EQUAL_SYMBOL);
		        	    }
		        	    $this->setState(1894);

		        	    $localContext->boolValue = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::ZERO_DECIMAL || $_la === self::ONE_DECIMAL)) {
		        	    	    $localContext->boolValue = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	break;

		        	case 14:
		        	    $localContext = new Context\TableOptionEncryptionContext($localContext);
		        	    $this->enterOuterAlt($localContext, 14);
		        	    $this->setState(1895);
		        	    $this->match(self::ENCRYPTION);
		        	    $this->setState(1897);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::EQUAL_SYMBOL) {
		        	    	$this->setState(1896);
		        	    	$this->match(self::EQUAL_SYMBOL);
		        	    }
		        	    $this->setState(1899);
		        	    $this->match(self::STRING_LITERAL);
		        	break;

		        	case 15:
		        	    $localContext = new Context\TableOptionPageCompressedContext($localContext);
		        	    $this->enterOuterAlt($localContext, 15);
		        	    $this->setState(1900);

		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::PAGE_COMPRESSED || $_la === self::STRING_LITERAL)) {
		        	    $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	    $this->setState(1902);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::EQUAL_SYMBOL) {
		        	    	$this->setState(1901);
		        	    	$this->match(self::EQUAL_SYMBOL);
		        	    }
		        	    $this->setState(1904);

		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::ZERO_DECIMAL || $_la === self::ONE_DECIMAL)) {
		        	    $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	break;

		        	case 16:
		        	    $localContext = new Context\TableOptionPageCompressionLevelContext($localContext);
		        	    $this->enterOuterAlt($localContext, 16);
		        	    $this->setState(1905);

		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::PAGE_COMPRESSION_LEVEL || $_la === self::STRING_LITERAL)) {
		        	    $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	    $this->setState(1907);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::EQUAL_SYMBOL) {
		        	    	$this->setState(1906);
		        	    	$this->match(self::EQUAL_SYMBOL);
		        	    }
		        	    $this->setState(1909);
		        	    $this->decimalLiteral();
		        	break;

		        	case 17:
		        	    $localContext = new Context\TableOptionEncryptionKeyIdContext($localContext);
		        	    $this->enterOuterAlt($localContext, 17);
		        	    $this->setState(1910);
		        	    $this->match(self::ENCRYPTION_KEY_ID);
		        	    $this->setState(1912);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::EQUAL_SYMBOL) {
		        	    	$this->setState(1911);
		        	    	$this->match(self::EQUAL_SYMBOL);
		        	    }
		        	    $this->setState(1914);
		        	    $this->decimalLiteral();
		        	break;

		        	case 18:
		        	    $localContext = new Context\TableOptionIndexDirectoryContext($localContext);
		        	    $this->enterOuterAlt($localContext, 18);
		        	    $this->setState(1915);
		        	    $this->match(self::INDEX);
		        	    $this->setState(1916);
		        	    $this->match(self::DIRECTORY);
		        	    $this->setState(1918);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::EQUAL_SYMBOL) {
		        	    	$this->setState(1917);
		        	    	$this->match(self::EQUAL_SYMBOL);
		        	    }
		        	    $this->setState(1920);
		        	    $this->match(self::STRING_LITERAL);
		        	break;

		        	case 19:
		        	    $localContext = new Context\TableOptionInsertMethodContext($localContext);
		        	    $this->enterOuterAlt($localContext, 19);
		        	    $this->setState(1921);
		        	    $this->match(self::INSERT_METHOD);
		        	    $this->setState(1923);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::EQUAL_SYMBOL) {
		        	    	$this->setState(1922);
		        	    	$this->match(self::EQUAL_SYMBOL);
		        	    }
		        	    $this->setState(1925);

		        	    $localContext->insertMethod = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::FIRST || $_la === self::LAST || $_la === self::NO)) {
		        	    	    $localContext->insertMethod = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	break;

		        	case 20:
		        	    $localContext = new Context\TableOptionKeyBlockSizeContext($localContext);
		        	    $this->enterOuterAlt($localContext, 20);
		        	    $this->setState(1926);
		        	    $this->match(self::KEY_BLOCK_SIZE);
		        	    $this->setState(1928);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::EQUAL_SYMBOL) {
		        	    	$this->setState(1927);
		        	    	$this->match(self::EQUAL_SYMBOL);
		        	    }
		        	    $this->setState(1930);
		        	    $this->fileSizeLiteral();
		        	break;

		        	case 21:
		        	    $localContext = new Context\TableOptionMaxRowsContext($localContext);
		        	    $this->enterOuterAlt($localContext, 21);
		        	    $this->setState(1931);
		        	    $this->match(self::MAX_ROWS);
		        	    $this->setState(1933);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::EQUAL_SYMBOL) {
		        	    	$this->setState(1932);
		        	    	$this->match(self::EQUAL_SYMBOL);
		        	    }
		        	    $this->setState(1935);
		        	    $this->decimalLiteral();
		        	break;

		        	case 22:
		        	    $localContext = new Context\TableOptionMinRowsContext($localContext);
		        	    $this->enterOuterAlt($localContext, 22);
		        	    $this->setState(1936);
		        	    $this->match(self::MIN_ROWS);
		        	    $this->setState(1938);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::EQUAL_SYMBOL) {
		        	    	$this->setState(1937);
		        	    	$this->match(self::EQUAL_SYMBOL);
		        	    }
		        	    $this->setState(1940);
		        	    $this->decimalLiteral();
		        	break;

		        	case 23:
		        	    $localContext = new Context\TableOptionPackKeysContext($localContext);
		        	    $this->enterOuterAlt($localContext, 23);
		        	    $this->setState(1941);
		        	    $this->match(self::PACK_KEYS);
		        	    $this->setState(1943);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::EQUAL_SYMBOL) {
		        	    	$this->setState(1942);
		        	    	$this->match(self::EQUAL_SYMBOL);
		        	    }
		        	    $this->setState(1945);

		        	    $localContext->extBoolValue = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::DEFAULT || $_la === self::ZERO_DECIMAL || $_la === self::ONE_DECIMAL)) {
		        	    	    $localContext->extBoolValue = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	break;

		        	case 24:
		        	    $localContext = new Context\TableOptionPasswordContext($localContext);
		        	    $this->enterOuterAlt($localContext, 24);
		        	    $this->setState(1946);
		        	    $this->match(self::PASSWORD);
		        	    $this->setState(1948);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::EQUAL_SYMBOL) {
		        	    	$this->setState(1947);
		        	    	$this->match(self::EQUAL_SYMBOL);
		        	    }
		        	    $this->setState(1950);
		        	    $this->match(self::STRING_LITERAL);
		        	break;

		        	case 25:
		        	    $localContext = new Context\TableOptionRowFormatContext($localContext);
		        	    $this->enterOuterAlt($localContext, 25);
		        	    $this->setState(1951);
		        	    $this->match(self::ROW_FORMAT);
		        	    $this->setState(1953);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::EQUAL_SYMBOL) {
		        	    	$this->setState(1952);
		        	    	$this->match(self::EQUAL_SYMBOL);
		        	    }
		        	    $this->setState(1955);

		        	    $localContext->rowFormat = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::DEFAULT || (((($_la - 370)) & ~0x3f) === 0 && ((1 << ($_la - 370)) & 2305843013508661253) !== 0) || $_la === self::REDUNDANT || $_la === self::ID)) {
		        	    	    $localContext->rowFormat = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	break;

		        	case 26:
		        	    $localContext = new Context\TableOptionStartTransactionContext($localContext);
		        	    $this->enterOuterAlt($localContext, 26);
		        	    $this->setState(1956);
		        	    $this->match(self::START);
		        	    $this->setState(1957);
		        	    $this->match(self::TRANSACTION);
		        	break;

		        	case 27:
		        	    $localContext = new Context\TableOptionSecondaryEngineAttributeContext($localContext);
		        	    $this->enterOuterAlt($localContext, 27);
		        	    $this->setState(1958);
		        	    $this->match(self::SECONDARY_ENGINE_ATTRIBUTE);
		        	    $this->setState(1960);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::EQUAL_SYMBOL) {
		        	    	$this->setState(1959);
		        	    	$this->match(self::EQUAL_SYMBOL);
		        	    }
		        	    $this->setState(1962);
		        	    $this->match(self::STRING_LITERAL);
		        	break;

		        	case 28:
		        	    $localContext = new Context\TableOptionRecalculationContext($localContext);
		        	    $this->enterOuterAlt($localContext, 28);
		        	    $this->setState(1963);
		        	    $this->match(self::STATS_AUTO_RECALC);
		        	    $this->setState(1965);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::EQUAL_SYMBOL) {
		        	    	$this->setState(1964);
		        	    	$this->match(self::EQUAL_SYMBOL);
		        	    }
		        	    $this->setState(1967);

		        	    $localContext->extBoolValue = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::DEFAULT || $_la === self::ZERO_DECIMAL || $_la === self::ONE_DECIMAL)) {
		        	    	    $localContext->extBoolValue = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	break;

		        	case 29:
		        	    $localContext = new Context\TableOptionPersistentContext($localContext);
		        	    $this->enterOuterAlt($localContext, 29);
		        	    $this->setState(1968);
		        	    $this->match(self::STATS_PERSISTENT);
		        	    $this->setState(1970);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::EQUAL_SYMBOL) {
		        	    	$this->setState(1969);
		        	    	$this->match(self::EQUAL_SYMBOL);
		        	    }
		        	    $this->setState(1972);

		        	    $localContext->extBoolValue = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::DEFAULT || $_la === self::ZERO_DECIMAL || $_la === self::ONE_DECIMAL)) {
		        	    	    $localContext->extBoolValue = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	break;

		        	case 30:
		        	    $localContext = new Context\TableOptionSamplePageContext($localContext);
		        	    $this->enterOuterAlt($localContext, 30);
		        	    $this->setState(1973);
		        	    $this->match(self::STATS_SAMPLE_PAGES);
		        	    $this->setState(1975);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::EQUAL_SYMBOL) {
		        	    	$this->setState(1974);
		        	    	$this->match(self::EQUAL_SYMBOL);
		        	    }
		        	    $this->setState(1979);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->input->LA(1)) {
		        	        case self::DEFAULT:
		        	        	$this->setState(1977);
		        	        	$this->match(self::DEFAULT);
		        	        	break;

		        	        case self::ZERO_DECIMAL:
		        	        case self::ONE_DECIMAL:
		        	        case self::TWO_DECIMAL:
		        	        case self::DECIMAL_LITERAL:
		        	        case self::REAL_LITERAL:
		        	        	$this->setState(1978);
		        	        	$this->decimalLiteral();
		        	        	break;

		        	    default:
		        	    	throw new NoViableAltException($this);
		        	    }
		        	break;

		        	case 31:
		        	    $localContext = new Context\TableOptionTablespaceContext($localContext);
		        	    $this->enterOuterAlt($localContext, 31);
		        	    $this->setState(1981);
		        	    $this->match(self::TABLESPACE);
		        	    $this->setState(1982);
		        	    $this->uid();
		        	    $this->setState(1984);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 224, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(1983);
		        	    	    $this->tablespaceStorage();
		        	    	break;
		        	    }
		        	break;

		        	case 32:
		        	    $localContext = new Context\TableOptionTableTypeContext($localContext);
		        	    $this->enterOuterAlt($localContext, 32);
		        	    $this->setState(1986);
		        	    $this->match(self::TABLE_TYPE);
		        	    $this->setState(1987);
		        	    $this->match(self::EQUAL_SYMBOL);
		        	    $this->setState(1988);
		        	    $this->tableType();
		        	break;

		        	case 33:
		        	    $localContext = new Context\TableOptionTablespaceContext($localContext);
		        	    $this->enterOuterAlt($localContext, 33);
		        	    $this->setState(1989);
		        	    $this->tablespaceStorage();
		        	break;

		        	case 34:
		        	    $localContext = new Context\TableOptionTransactionalContext($localContext);
		        	    $this->enterOuterAlt($localContext, 34);
		        	    $this->setState(1990);
		        	    $this->match(self::TRANSACTIONAL);
		        	    $this->setState(1992);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::EQUAL_SYMBOL) {
		        	    	$this->setState(1991);
		        	    	$this->match(self::EQUAL_SYMBOL);
		        	    }
		        	    $this->setState(1994);

		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::ZERO_DECIMAL || $_la === self::ONE_DECIMAL)) {
		        	    $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	break;

		        	case 35:
		        	    $localContext = new Context\TableOptionUnionContext($localContext);
		        	    $this->enterOuterAlt($localContext, 35);
		        	    $this->setState(1995);
		        	    $this->match(self::UNION);
		        	    $this->setState(1997);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::EQUAL_SYMBOL) {
		        	    	$this->setState(1996);
		        	    	$this->match(self::EQUAL_SYMBOL);
		        	    }
		        	    $this->setState(1999);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(2000);
		        	    $this->tables();
		        	    $this->setState(2001);
		        	    $this->match(self::RR_BRACKET);
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function tableType(): Context\TableTypeContext
		{
		    $localContext = new Context\TableTypeContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 108, self::RULE_tableType);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(2005);

		        $_la = $this->input->LA(1);

		        if (!($_la === self::MYSQL || $_la === self::ODBC)) {
		        $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function tablespaceStorage(): Context\TablespaceStorageContext
		{
		    $localContext = new Context\TablespaceStorageContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 110, self::RULE_tablespaceStorage);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(2007);
		        $this->match(self::STORAGE);
		        $this->setState(2008);

		        $_la = $this->input->LA(1);

		        if (!($_la === self::DEFAULT || $_la === self::DISK || $_la === self::MEMORY)) {
		        $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function partitionDefinitions(): Context\PartitionDefinitionsContext
		{
		    $localContext = new Context\PartitionDefinitionsContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 112, self::RULE_partitionDefinitions);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(2010);
		        $this->match(self::PARTITION);
		        $this->setState(2011);
		        $this->match(self::BY);
		        $this->setState(2012);
		        $this->partitionFunctionDefinition();
		        $this->setState(2015);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::PARTITIONS) {
		        	$this->setState(2013);
		        	$this->match(self::PARTITIONS);
		        	$this->setState(2014);
		        	$localContext->count = $this->decimalLiteral();
		        }
		        $this->setState(2024);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::SUBPARTITION) {
		        	$this->setState(2017);
		        	$this->match(self::SUBPARTITION);
		        	$this->setState(2018);
		        	$this->match(self::BY);
		        	$this->setState(2019);
		        	$this->subpartitionFunctionDefinition();
		        	$this->setState(2022);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);

		        	if ($_la === self::SUBPARTITIONS) {
		        		$this->setState(2020);
		        		$this->match(self::SUBPARTITIONS);
		        		$this->setState(2021);
		        		$localContext->subCount = $this->decimalLiteral();
		        	}
		        }
		        $this->setState(2037);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 232, $this->ctx)) {
		            case 1:
		        	    $this->setState(2026);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(2027);
		        	    $this->partitionDefinition();
		        	    $this->setState(2032);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::COMMA) {
		        	    	$this->setState(2028);
		        	    	$this->match(self::COMMA);
		        	    	$this->setState(2029);
		        	    	$this->partitionDefinition();
		        	    	$this->setState(2034);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	    $this->setState(2035);
		        	    $this->match(self::RR_BRACKET);
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function partitionFunctionDefinition(): Context\PartitionFunctionDefinitionContext
		{
		    $localContext = new Context\PartitionFunctionDefinitionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 114, self::RULE_partitionFunctionDefinition);

		    try {
		        $this->setState(2085);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 239, $this->ctx)) {
		        	case 1:
		        	    $localContext = new Context\PartitionFunctionHashContext($localContext);
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(2040);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::LINEAR) {
		        	    	$this->setState(2039);
		        	    	$this->match(self::LINEAR);
		        	    }
		        	    $this->setState(2042);
		        	    $this->match(self::HASH);
		        	    $this->setState(2043);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(2044);
		        	    $this->recursiveExpression(0);
		        	    $this->setState(2045);
		        	    $this->match(self::RR_BRACKET);
		        	break;

		        	case 2:
		        	    $localContext = new Context\PartitionFunctionKeyContext($localContext);
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(2048);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::LINEAR) {
		        	    	$this->setState(2047);
		        	    	$this->match(self::LINEAR);
		        	    }
		        	    $this->setState(2050);
		        	    $this->match(self::KEY);
		        	    $this->setState(2054);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::ALGORITHM) {
		        	    	$this->setState(2051);
		        	    	$this->match(self::ALGORITHM);
		        	    	$this->setState(2052);
		        	    	$this->match(self::EQUAL_SYMBOL);
		        	    	$this->setState(2053);

		        	    	$localContext->algType = $this->input->LT(1);
		        	    	$_la = $this->input->LA(1);

		        	    	if (!($_la === self::ONE_DECIMAL || $_la === self::TWO_DECIMAL)) {
		        	    		    $localContext->algType = $this->errorHandler->recoverInline($this);
		        	    	} else {
		        	    		if ($this->input->LA(1) === Token::EOF) {
		        	    		    $this->matchedEOF = true;
		        	    	    }

		        	    		$this->errorHandler->reportMatch($this);
		        	    		$this->consume();
		        	    	}
		        	    }
		        	    $this->setState(2056);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(2058);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if (((($_la) & ~0x3f) === 0 && ((1 << $_la) & 756891332513122304) !== 0) || (((($_la - 73)) & ~0x3f) === 0 && ((1 << ($_la - 73)) & 146666055071174737) !== 0) || (((($_la - 140)) & ~0x3f) === 0 && ((1 << ($_la - 140)) & 268698883) !== 0) || (((($_la - 217)) & ~0x3f) === 0 && ((1 << ($_la - 217)) & -17174494689) !== 0) || (((($_la - 281)) & ~0x3f) === 0 && ((1 << ($_la - 281)) & -1099511627777) !== 0) || (((($_la - 345)) & ~0x3f) === 0 && ((1 << ($_la - 345)) & -2882305960540372993) !== 0) || (((($_la - 409)) & ~0x3f) === 0 && ((1 << ($_la - 409)) & -4398063288321) !== 0) || (((($_la - 473)) & ~0x3f) === 0 && ((1 << ($_la - 473)) & -16325548649218049) !== 0) || (((($_la - 537)) & ~0x3f) === 0 && ((1 << ($_la - 537)) & -81064793296864001) !== 0) || (((($_la - 601)) & ~0x3f) === 0 && ((1 << ($_la - 601)) & -68719476801) !== 0) || (((($_la - 665)) & ~0x3f) === 0 && ((1 << ($_la - 665)) & -22236531750340609) !== 0) || (((($_la - 729)) & ~0x3f) === 0 && ((1 << ($_la - 729)) & -65) !== 0) || (((($_la - 793)) & ~0x3f) === 0 && ((1 << ($_la - 793)) & -6145) !== 0) || (((($_la - 857)) & ~0x3f) === 0 && ((1 << ($_la - 857)) & -1) !== 0) || (((($_la - 921)) & ~0x3f) === 0 && ((1 << ($_la - 921)) & -1) !== 0) || (((($_la - 985)) & ~0x3f) === 0 && ((1 << ($_la - 985)) & -1) !== 0) || (((($_la - 1049)) & ~0x3f) === 0 && ((1 << ($_la - 1049)) & 576460752303423487) !== 0) || (((($_la - 1123)) & ~0x3f) === 0 && ((1 << ($_la - 1123)) & 8627683329) !== 0)) {
		        	    	$this->setState(2057);
		        	    	$this->uidList();
		        	    }
		        	    $this->setState(2060);
		        	    $this->match(self::RR_BRACKET);
		        	break;

		        	case 3:
		        	    $localContext = new Context\PartitionFunctionRangeContext($localContext);
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(2061);
		        	    $this->match(self::RANGE);
		        	    $this->setState(2071);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->input->LA(1)) {
		        	        case self::LR_BRACKET:
		        	        	$this->setState(2062);
		        	        	$this->match(self::LR_BRACKET);
		        	        	$this->setState(2063);
		        	        	$this->recursiveExpression(0);
		        	        	$this->setState(2064);
		        	        	$this->match(self::RR_BRACKET);
		        	        	break;

		        	        case self::COLUMNS:
		        	        	$this->setState(2066);
		        	        	$this->match(self::COLUMNS);
		        	        	$this->setState(2067);
		        	        	$this->match(self::LR_BRACKET);
		        	        	$this->setState(2068);
		        	        	$this->uidList();
		        	        	$this->setState(2069);
		        	        	$this->match(self::RR_BRACKET);
		        	        	break;

		        	    default:
		        	    	throw new NoViableAltException($this);
		        	    }
		        	break;

		        	case 4:
		        	    $localContext = new Context\PartitionFunctionListContext($localContext);
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(2073);
		        	    $this->match(self::LIST);
		        	    $this->setState(2083);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->input->LA(1)) {
		        	        case self::LR_BRACKET:
		        	        	$this->setState(2074);
		        	        	$this->match(self::LR_BRACKET);
		        	        	$this->setState(2075);
		        	        	$this->recursiveExpression(0);
		        	        	$this->setState(2076);
		        	        	$this->match(self::RR_BRACKET);
		        	        	break;

		        	        case self::COLUMNS:
		        	        	$this->setState(2078);
		        	        	$this->match(self::COLUMNS);
		        	        	$this->setState(2079);
		        	        	$this->match(self::LR_BRACKET);
		        	        	$this->setState(2080);
		        	        	$this->uidList();
		        	        	$this->setState(2081);
		        	        	$this->match(self::RR_BRACKET);
		        	        	break;

		        	    default:
		        	    	throw new NoViableAltException($this);
		        	    }
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function subpartitionFunctionDefinition(): Context\SubpartitionFunctionDefinitionContext
		{
		    $localContext = new Context\SubpartitionFunctionDefinitionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 116, self::RULE_subpartitionFunctionDefinition);

		    try {
		        $this->setState(2108);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 243, $this->ctx)) {
		        	case 1:
		        	    $localContext = new Context\SubPartitionFunctionHashContext($localContext);
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(2088);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::LINEAR) {
		        	    	$this->setState(2087);
		        	    	$this->match(self::LINEAR);
		        	    }
		        	    $this->setState(2090);
		        	    $this->match(self::HASH);
		        	    $this->setState(2091);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(2092);
		        	    $this->recursiveExpression(0);
		        	    $this->setState(2093);
		        	    $this->match(self::RR_BRACKET);
		        	break;

		        	case 2:
		        	    $localContext = new Context\SubPartitionFunctionKeyContext($localContext);
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(2096);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::LINEAR) {
		        	    	$this->setState(2095);
		        	    	$this->match(self::LINEAR);
		        	    }
		        	    $this->setState(2098);
		        	    $this->match(self::KEY);
		        	    $this->setState(2102);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::ALGORITHM) {
		        	    	$this->setState(2099);
		        	    	$this->match(self::ALGORITHM);
		        	    	$this->setState(2100);
		        	    	$this->match(self::EQUAL_SYMBOL);
		        	    	$this->setState(2101);

		        	    	$localContext->algType = $this->input->LT(1);
		        	    	$_la = $this->input->LA(1);

		        	    	if (!($_la === self::ONE_DECIMAL || $_la === self::TWO_DECIMAL)) {
		        	    		    $localContext->algType = $this->errorHandler->recoverInline($this);
		        	    	} else {
		        	    		if ($this->input->LA(1) === Token::EOF) {
		        	    		    $this->matchedEOF = true;
		        	    	    }

		        	    		$this->errorHandler->reportMatch($this);
		        	    		$this->consume();
		        	    	}
		        	    }
		        	    $this->setState(2104);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(2105);
		        	    $this->uidList();
		        	    $this->setState(2106);
		        	    $this->match(self::RR_BRACKET);
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function partitionDefinition(): Context\PartitionDefinitionContext
		{
		    $localContext = new Context\PartitionDefinitionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 118, self::RULE_partitionDefinition);

		    try {
		        $this->setState(2256);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 262, $this->ctx)) {
		        	case 1:
		        	    $localContext = new Context\PartitionComparisonContext($localContext);
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(2110);
		        	    $this->match(self::PARTITION);
		        	    $this->setState(2111);
		        	    $this->uid();
		        	    $this->setState(2112);
		        	    $this->match(self::VALUES);
		        	    $this->setState(2113);
		        	    $this->match(self::LESS);
		        	    $this->setState(2114);
		        	    $this->match(self::THAN);
		        	    $this->setState(2115);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(2116);
		        	    $this->partitionDefinerAtom();
		        	    $this->setState(2121);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::COMMA) {
		        	    	$this->setState(2117);
		        	    	$this->match(self::COMMA);
		        	    	$this->setState(2118);
		        	    	$this->partitionDefinerAtom();
		        	    	$this->setState(2123);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	    $this->setState(2124);
		        	    $this->match(self::RR_BRACKET);
		        	    $this->setState(2128);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::DEFAULT || $_la === self::INDEX || (((($_la - 368)) & ~0x3f) === 0 && ((1 << ($_la - 368)) & 2199024304129) !== 0) || (((($_la - 500)) & ~0x3f) === 0 && ((1 << ($_la - 500)) & 268436481) !== 0) || $_la === self::STORAGE || $_la === self::TABLESPACE) {
		        	    	$this->setState(2125);
		        	    	$this->partitionOption();
		        	    	$this->setState(2130);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	    $this->setState(2142);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::LR_BRACKET) {
		        	    	$this->setState(2131);
		        	    	$this->match(self::LR_BRACKET);
		        	    	$this->setState(2132);
		        	    	$this->subpartitionDefinition();
		        	    	$this->setState(2137);
		        	    	$this->errorHandler->sync($this);

		        	    	$_la = $this->input->LA(1);
		        	    	while ($_la === self::COMMA) {
		        	    		$this->setState(2133);
		        	    		$this->match(self::COMMA);
		        	    		$this->setState(2134);
		        	    		$this->subpartitionDefinition();
		        	    		$this->setState(2139);
		        	    		$this->errorHandler->sync($this);
		        	    		$_la = $this->input->LA(1);
		        	    	}
		        	    	$this->setState(2140);
		        	    	$this->match(self::RR_BRACKET);
		        	    }
		        	break;

		        	case 2:
		        	    $localContext = new Context\PartitionComparisonContext($localContext);
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(2144);
		        	    $this->match(self::PARTITION);
		        	    $this->setState(2145);
		        	    $this->uid();
		        	    $this->setState(2146);
		        	    $this->match(self::VALUES);
		        	    $this->setState(2147);
		        	    $this->match(self::LESS);
		        	    $this->setState(2148);
		        	    $this->match(self::THAN);
		        	    $this->setState(2149);
		        	    $this->partitionDefinerAtom();
		        	    $this->setState(2153);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::DEFAULT || $_la === self::INDEX || (((($_la - 368)) & ~0x3f) === 0 && ((1 << ($_la - 368)) & 2199024304129) !== 0) || (((($_la - 500)) & ~0x3f) === 0 && ((1 << ($_la - 500)) & 268436481) !== 0) || $_la === self::STORAGE || $_la === self::TABLESPACE) {
		        	    	$this->setState(2150);
		        	    	$this->partitionOption();
		        	    	$this->setState(2155);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	    $this->setState(2167);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::LR_BRACKET) {
		        	    	$this->setState(2156);
		        	    	$this->match(self::LR_BRACKET);
		        	    	$this->setState(2157);
		        	    	$this->subpartitionDefinition();
		        	    	$this->setState(2162);
		        	    	$this->errorHandler->sync($this);

		        	    	$_la = $this->input->LA(1);
		        	    	while ($_la === self::COMMA) {
		        	    		$this->setState(2158);
		        	    		$this->match(self::COMMA);
		        	    		$this->setState(2159);
		        	    		$this->subpartitionDefinition();
		        	    		$this->setState(2164);
		        	    		$this->errorHandler->sync($this);
		        	    		$_la = $this->input->LA(1);
		        	    	}
		        	    	$this->setState(2165);
		        	    	$this->match(self::RR_BRACKET);
		        	    }
		        	break;

		        	case 3:
		        	    $localContext = new Context\PartitionListAtomContext($localContext);
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(2169);
		        	    $this->match(self::PARTITION);
		        	    $this->setState(2170);
		        	    $this->uid();
		        	    $this->setState(2171);
		        	    $this->match(self::VALUES);
		        	    $this->setState(2172);
		        	    $this->match(self::IN);
		        	    $this->setState(2173);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(2174);
		        	    $this->partitionDefinerAtom();
		        	    $this->setState(2179);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::COMMA) {
		        	    	$this->setState(2175);
		        	    	$this->match(self::COMMA);
		        	    	$this->setState(2176);
		        	    	$this->partitionDefinerAtom();
		        	    	$this->setState(2181);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	    $this->setState(2182);
		        	    $this->match(self::RR_BRACKET);
		        	    $this->setState(2186);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::DEFAULT || $_la === self::INDEX || (((($_la - 368)) & ~0x3f) === 0 && ((1 << ($_la - 368)) & 2199024304129) !== 0) || (((($_la - 500)) & ~0x3f) === 0 && ((1 << ($_la - 500)) & 268436481) !== 0) || $_la === self::STORAGE || $_la === self::TABLESPACE) {
		        	    	$this->setState(2183);
		        	    	$this->partitionOption();
		        	    	$this->setState(2188);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	    $this->setState(2200);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::LR_BRACKET) {
		        	    	$this->setState(2189);
		        	    	$this->match(self::LR_BRACKET);
		        	    	$this->setState(2190);
		        	    	$this->subpartitionDefinition();
		        	    	$this->setState(2195);
		        	    	$this->errorHandler->sync($this);

		        	    	$_la = $this->input->LA(1);
		        	    	while ($_la === self::COMMA) {
		        	    		$this->setState(2191);
		        	    		$this->match(self::COMMA);
		        	    		$this->setState(2192);
		        	    		$this->subpartitionDefinition();
		        	    		$this->setState(2197);
		        	    		$this->errorHandler->sync($this);
		        	    		$_la = $this->input->LA(1);
		        	    	}
		        	    	$this->setState(2198);
		        	    	$this->match(self::RR_BRACKET);
		        	    }
		        	break;

		        	case 4:
		        	    $localContext = new Context\PartitionListVectorContext($localContext);
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(2202);
		        	    $this->match(self::PARTITION);
		        	    $this->setState(2203);
		        	    $this->uid();
		        	    $this->setState(2204);
		        	    $this->match(self::VALUES);
		        	    $this->setState(2205);
		        	    $this->match(self::IN);
		        	    $this->setState(2206);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(2207);
		        	    $this->partitionDefinerVector();
		        	    $this->setState(2212);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::COMMA) {
		        	    	$this->setState(2208);
		        	    	$this->match(self::COMMA);
		        	    	$this->setState(2209);
		        	    	$this->partitionDefinerVector();
		        	    	$this->setState(2214);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	    $this->setState(2215);
		        	    $this->match(self::RR_BRACKET);
		        	    $this->setState(2219);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::DEFAULT || $_la === self::INDEX || (((($_la - 368)) & ~0x3f) === 0 && ((1 << ($_la - 368)) & 2199024304129) !== 0) || (((($_la - 500)) & ~0x3f) === 0 && ((1 << ($_la - 500)) & 268436481) !== 0) || $_la === self::STORAGE || $_la === self::TABLESPACE) {
		        	    	$this->setState(2216);
		        	    	$this->partitionOption();
		        	    	$this->setState(2221);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	    $this->setState(2233);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::LR_BRACKET) {
		        	    	$this->setState(2222);
		        	    	$this->match(self::LR_BRACKET);
		        	    	$this->setState(2223);
		        	    	$this->subpartitionDefinition();
		        	    	$this->setState(2228);
		        	    	$this->errorHandler->sync($this);

		        	    	$_la = $this->input->LA(1);
		        	    	while ($_la === self::COMMA) {
		        	    		$this->setState(2224);
		        	    		$this->match(self::COMMA);
		        	    		$this->setState(2225);
		        	    		$this->subpartitionDefinition();
		        	    		$this->setState(2230);
		        	    		$this->errorHandler->sync($this);
		        	    		$_la = $this->input->LA(1);
		        	    	}
		        	    	$this->setState(2231);
		        	    	$this->match(self::RR_BRACKET);
		        	    }
		        	break;

		        	case 5:
		        	    $localContext = new Context\PartitionSimpleContext($localContext);
		        	    $this->enterOuterAlt($localContext, 5);
		        	    $this->setState(2235);
		        	    $this->match(self::PARTITION);
		        	    $this->setState(2236);
		        	    $this->uid();
		        	    $this->setState(2240);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::DEFAULT || $_la === self::INDEX || (((($_la - 368)) & ~0x3f) === 0 && ((1 << ($_la - 368)) & 2199024304129) !== 0) || (((($_la - 500)) & ~0x3f) === 0 && ((1 << ($_la - 500)) & 268436481) !== 0) || $_la === self::STORAGE || $_la === self::TABLESPACE) {
		        	    	$this->setState(2237);
		        	    	$this->partitionOption();
		        	    	$this->setState(2242);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	    $this->setState(2254);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::LR_BRACKET) {
		        	    	$this->setState(2243);
		        	    	$this->match(self::LR_BRACKET);
		        	    	$this->setState(2244);
		        	    	$this->subpartitionDefinition();
		        	    	$this->setState(2249);
		        	    	$this->errorHandler->sync($this);

		        	    	$_la = $this->input->LA(1);
		        	    	while ($_la === self::COMMA) {
		        	    		$this->setState(2245);
		        	    		$this->match(self::COMMA);
		        	    		$this->setState(2246);
		        	    		$this->subpartitionDefinition();
		        	    		$this->setState(2251);
		        	    		$this->errorHandler->sync($this);
		        	    		$_la = $this->input->LA(1);
		        	    	}
		        	    	$this->setState(2252);
		        	    	$this->match(self::RR_BRACKET);
		        	    }
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function partitionDefinerAtom(): Context\PartitionDefinerAtomContext
		{
		    $localContext = new Context\PartitionDefinerAtomContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 120, self::RULE_partitionDefinerAtom);

		    try {
		        $this->setState(2261);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 263, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(2258);
		        	    $this->constant();
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(2259);
		        	    $this->recursiveExpression(0);
		        	break;

		        	case 3:
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(2260);
		        	    $this->match(self::MAXVALUE);
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function partitionDefinerVector(): Context\PartitionDefinerVectorContext
		{
		    $localContext = new Context\PartitionDefinerVectorContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 122, self::RULE_partitionDefinerVector);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(2263);
		        $this->match(self::LR_BRACKET);
		        $this->setState(2264);
		        $this->partitionDefinerAtom();
		        $this->setState(2267); 
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        do {
		        	$this->setState(2265);
		        	$this->match(self::COMMA);
		        	$this->setState(2266);
		        	$this->partitionDefinerAtom();
		        	$this->setState(2269); 
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        } while ($_la === self::COMMA);
		        $this->setState(2271);
		        $this->match(self::RR_BRACKET);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function subpartitionDefinition(): Context\SubpartitionDefinitionContext
		{
		    $localContext = new Context\SubpartitionDefinitionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 124, self::RULE_subpartitionDefinition);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(2273);
		        $this->match(self::SUBPARTITION);
		        $this->setState(2274);
		        $this->uid();
		        $this->setState(2278);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::DEFAULT || $_la === self::INDEX || (((($_la - 368)) & ~0x3f) === 0 && ((1 << ($_la - 368)) & 2199024304129) !== 0) || (((($_la - 500)) & ~0x3f) === 0 && ((1 << ($_la - 500)) & 268436481) !== 0) || $_la === self::STORAGE || $_la === self::TABLESPACE) {
		        	$this->setState(2275);
		        	$this->partitionOption();
		        	$this->setState(2280);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function partitionOption(): Context\PartitionOptionContext
		{
		    $localContext = new Context\PartitionOptionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 126, self::RULE_partitionOption);

		    try {
		        $this->setState(2329);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::DEFAULT:
		            case self::ENGINE:
		            case self::STORAGE:
		            	$localContext = new Context\PartitionOptionEngineContext($localContext);
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(2282);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::DEFAULT) {
		            		$this->setState(2281);
		            		$this->match(self::DEFAULT);
		            	}
		            	$this->setState(2285);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::STORAGE) {
		            		$this->setState(2284);
		            		$this->match(self::STORAGE);
		            	}
		            	$this->setState(2287);
		            	$this->match(self::ENGINE);
		            	$this->setState(2289);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::EQUAL_SYMBOL) {
		            		$this->setState(2288);
		            		$this->match(self::EQUAL_SYMBOL);
		            	}
		            	$this->setState(2291);
		            	$this->engineName();
		            	break;

		            case self::COMMENT:
		            	$localContext = new Context\PartitionOptionCommentContext($localContext);
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(2292);
		            	$this->match(self::COMMENT);
		            	$this->setState(2294);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::EQUAL_SYMBOL) {
		            		$this->setState(2293);
		            		$this->match(self::EQUAL_SYMBOL);
		            	}
		            	$this->setState(2296);
		            	$localContext->comment = $this->match(self::STRING_LITERAL);
		            	break;

		            case self::DATA:
		            	$localContext = new Context\PartitionOptionDataDirectoryContext($localContext);
		            	$this->enterOuterAlt($localContext, 3);
		            	$this->setState(2297);
		            	$this->match(self::DATA);
		            	$this->setState(2298);
		            	$this->match(self::DIRECTORY);
		            	$this->setState(2300);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::EQUAL_SYMBOL) {
		            		$this->setState(2299);
		            		$this->match(self::EQUAL_SYMBOL);
		            	}
		            	$this->setState(2302);
		            	$localContext->dataDirectory = $this->match(self::STRING_LITERAL);
		            	break;

		            case self::INDEX:
		            	$localContext = new Context\PartitionOptionIndexDirectoryContext($localContext);
		            	$this->enterOuterAlt($localContext, 4);
		            	$this->setState(2303);
		            	$this->match(self::INDEX);
		            	$this->setState(2304);
		            	$this->match(self::DIRECTORY);
		            	$this->setState(2306);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::EQUAL_SYMBOL) {
		            		$this->setState(2305);
		            		$this->match(self::EQUAL_SYMBOL);
		            	}
		            	$this->setState(2308);
		            	$localContext->indexDirectory = $this->match(self::STRING_LITERAL);
		            	break;

		            case self::MAX_ROWS:
		            	$localContext = new Context\PartitionOptionMaxRowsContext($localContext);
		            	$this->enterOuterAlt($localContext, 5);
		            	$this->setState(2309);
		            	$this->match(self::MAX_ROWS);
		            	$this->setState(2311);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::EQUAL_SYMBOL) {
		            		$this->setState(2310);
		            		$this->match(self::EQUAL_SYMBOL);
		            	}
		            	$this->setState(2313);
		            	$localContext->maxRows = $this->decimalLiteral();
		            	break;

		            case self::MIN_ROWS:
		            	$localContext = new Context\PartitionOptionMinRowsContext($localContext);
		            	$this->enterOuterAlt($localContext, 6);
		            	$this->setState(2314);
		            	$this->match(self::MIN_ROWS);
		            	$this->setState(2316);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::EQUAL_SYMBOL) {
		            		$this->setState(2315);
		            		$this->match(self::EQUAL_SYMBOL);
		            	}
		            	$this->setState(2318);
		            	$localContext->minRows = $this->decimalLiteral();
		            	break;

		            case self::TABLESPACE:
		            	$localContext = new Context\PartitionOptionTablespaceContext($localContext);
		            	$this->enterOuterAlt($localContext, 7);
		            	$this->setState(2319);
		            	$this->match(self::TABLESPACE);
		            	$this->setState(2321);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::EQUAL_SYMBOL) {
		            		$this->setState(2320);
		            		$this->match(self::EQUAL_SYMBOL);
		            	}
		            	$this->setState(2323);
		            	$localContext->tablespace = $this->uid();
		            	break;

		            case self::NODEGROUP:
		            	$localContext = new Context\PartitionOptionNodeGroupContext($localContext);
		            	$this->enterOuterAlt($localContext, 8);
		            	$this->setState(2324);
		            	$this->match(self::NODEGROUP);
		            	$this->setState(2326);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::EQUAL_SYMBOL) {
		            		$this->setState(2325);
		            		$this->match(self::EQUAL_SYMBOL);
		            	}
		            	$this->setState(2328);
		            	$localContext->nodegroup = $this->uid();
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function alterDatabase(): Context\AlterDatabaseContext
		{
		    $localContext = new Context\AlterDatabaseContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 128, self::RULE_alterDatabase);

		    try {
		        $this->setState(2349);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 279, $this->ctx)) {
		        	case 1:
		        	    $localContext = new Context\AlterSimpleDatabaseContext($localContext);
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(2331);
		        	    $this->match(self::ALTER);
		        	    $this->setState(2332);

		        	    $localContext->dbFormat = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::DATABASE || $_la === self::SCHEMA)) {
		        	    	    $localContext->dbFormat = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	    $this->setState(2334);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 277, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(2333);
		        	    	    $this->uid();
		        	    	break;
		        	    }
		        	    $this->setState(2337); 
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    do {
		        	    	$this->setState(2336);
		        	    	$this->createDatabaseOption();
		        	    	$this->setState(2339); 
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    } while (((($_la) & ~0x3f) === 0 && ((1 << $_la) & 4398214283264) !== 0) || $_la === self::READ || $_la === self::CHAR || $_la === self::ENCRYPTION || $_la === self::CHARSET);
		        	break;

		        	case 2:
		        	    $localContext = new Context\AlterUpgradeNameContext($localContext);
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(2341);
		        	    $this->match(self::ALTER);
		        	    $this->setState(2342);

		        	    $localContext->dbFormat = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::DATABASE || $_la === self::SCHEMA)) {
		        	    	    $localContext->dbFormat = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	    $this->setState(2343);
		        	    $this->uid();
		        	    $this->setState(2344);
		        	    $this->match(self::UPGRADE);
		        	    $this->setState(2345);
		        	    $this->match(self::DATA);
		        	    $this->setState(2346);
		        	    $this->match(self::DIRECTORY);
		        	    $this->setState(2347);
		        	    $this->match(self::NAME);
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function alterEvent(): Context\AlterEventContext
		{
		    $localContext = new Context\AlterEventContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 130, self::RULE_alterEvent);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(2351);
		        $this->match(self::ALTER);
		        $this->setState(2353);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::DEFINER) {
		        	$this->setState(2352);
		        	$this->ownerStatement();
		        }
		        $this->setState(2355);
		        $this->match(self::EVENT);
		        $this->setState(2356);
		        $this->fullId();
		        $this->setState(2360);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 281, $this->ctx)) {
		            case 1:
		        	    $this->setState(2357);
		        	    $this->match(self::ON);
		        	    $this->setState(2358);
		        	    $this->match(self::SCHEDULE);
		        	    $this->setState(2359);
		        	    $this->scheduleExpression();
		        	break;
		        }
		        $this->setState(2368);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::ON) {
		        	$this->setState(2362);
		        	$this->match(self::ON);
		        	$this->setState(2363);
		        	$this->match(self::COMPLETION);
		        	$this->setState(2365);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);

		        	if ($_la === self::NOT) {
		        		$this->setState(2364);
		        		$this->match(self::NOT);
		        	}
		        	$this->setState(2367);
		        	$this->match(self::PRESERVE);
		        }
		        $this->setState(2373);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 284, $this->ctx)) {
		            case 1:
		        	    $this->setState(2370);
		        	    $this->match(self::RENAME);
		        	    $this->setState(2371);
		        	    $this->match(self::TO);
		        	    $this->setState(2372);
		        	    $this->fullId();
		        	break;
		        }
		        $this->setState(2376);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::DISABLE || $_la === self::ENABLE) {
		        	$this->setState(2375);
		        	$this->enableType();
		        }
		        $this->setState(2380);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::COMMENT) {
		        	$this->setState(2378);
		        	$this->match(self::COMMENT);
		        	$this->setState(2379);
		        	$this->match(self::STRING_LITERAL);
		        }
		        $this->setState(2384);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 287, $this->ctx)) {
		            case 1:
		        	    $this->setState(2382);
		        	    $this->match(self::DO);
		        	    $this->setState(2383);
		        	    $this->routineBody();
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function alterFunction(): Context\AlterFunctionContext
		{
		    $localContext = new Context\AlterFunctionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 132, self::RULE_alterFunction);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(2386);
		        $this->match(self::ALTER);
		        $this->setState(2387);
		        $this->match(self::FUNCTION);
		        $this->setState(2388);
		        $this->fullId();
		        $this->setState(2392);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::DETERMINISTIC || (((($_la - 112)) & ~0x3f) === 0 && ((1 << ($_la - 112)) & 281474985099269) !== 0) || $_la === self::COMMENT || $_la === self::CONTAINS || $_la === self::LANGUAGE || $_la === self::NO) {
		        	$this->setState(2389);
		        	$this->routineOption();
		        	$this->setState(2394);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function alterInstance(): Context\AlterInstanceContext
		{
		    $localContext = new Context\AlterInstanceContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 134, self::RULE_alterInstance);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(2395);
		        $this->match(self::ALTER);
		        $this->setState(2396);
		        $this->match(self::INSTANCE);
		        $this->setState(2397);
		        $this->match(self::ROTATE);
		        $this->setState(2398);
		        $this->match(self::INNODB);
		        $this->setState(2399);
		        $this->match(self::MASTER);
		        $this->setState(2400);
		        $this->match(self::KEY);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function alterLogfileGroup(): Context\AlterLogfileGroupContext
		{
		    $localContext = new Context\AlterLogfileGroupContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 136, self::RULE_alterLogfileGroup);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(2402);
		        $this->match(self::ALTER);
		        $this->setState(2403);
		        $this->match(self::LOGFILE);
		        $this->setState(2404);
		        $this->match(self::GROUP);
		        $this->setState(2405);
		        $this->uid();
		        $this->setState(2406);
		        $this->match(self::ADD);
		        $this->setState(2407);
		        $this->match(self::UNDOFILE);
		        $this->setState(2408);
		        $this->match(self::STRING_LITERAL);
		        $this->setState(2414);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::INITIAL_SIZE) {
		        	$this->setState(2409);
		        	$this->match(self::INITIAL_SIZE);
		        	$this->setState(2411);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);

		        	if ($_la === self::EQUAL_SYMBOL) {
		        		$this->setState(2410);
		        		$this->match(self::EQUAL_SYMBOL);
		        	}
		        	$this->setState(2413);
		        	$this->fileSizeLiteral();
		        }
		        $this->setState(2417);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::WAIT) {
		        	$this->setState(2416);
		        	$this->match(self::WAIT);
		        }
		        $this->setState(2419);
		        $this->match(self::ENGINE);
		        $this->setState(2421);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::EQUAL_SYMBOL) {
		        	$this->setState(2420);
		        	$this->match(self::EQUAL_SYMBOL);
		        }
		        $this->setState(2423);
		        $this->engineName();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function alterProcedure(): Context\AlterProcedureContext
		{
		    $localContext = new Context\AlterProcedureContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 138, self::RULE_alterProcedure);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(2425);
		        $this->match(self::ALTER);
		        $this->setState(2426);
		        $this->match(self::PROCEDURE);
		        $this->setState(2427);
		        $this->fullId();
		        $this->setState(2431);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::DETERMINISTIC || (((($_la - 112)) & ~0x3f) === 0 && ((1 << ($_la - 112)) & 281474985099269) !== 0) || $_la === self::COMMENT || $_la === self::CONTAINS || $_la === self::LANGUAGE || $_la === self::NO) {
		        	$this->setState(2428);
		        	$this->routineOption();
		        	$this->setState(2433);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function alterServer(): Context\AlterServerContext
		{
		    $localContext = new Context\AlterServerContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 140, self::RULE_alterServer);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(2434);
		        $this->match(self::ALTER);
		        $this->setState(2435);
		        $this->match(self::SERVER);
		        $this->setState(2436);
		        $this->uid();
		        $this->setState(2437);
		        $this->match(self::OPTIONS);
		        $this->setState(2438);
		        $this->match(self::LR_BRACKET);
		        $this->setState(2439);
		        $this->serverOption();
		        $this->setState(2444);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::COMMA) {
		        	$this->setState(2440);
		        	$this->match(self::COMMA);
		        	$this->setState(2441);
		        	$this->serverOption();
		        	$this->setState(2446);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		        $this->setState(2447);
		        $this->match(self::RR_BRACKET);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function alterTable(): Context\AlterTableContext
		{
		    $localContext = new Context\AlterTableContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 142, self::RULE_alterTable);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(2449);
		        $this->match(self::ALTER);
		        $this->setState(2451);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::OFFLINE || $_la === self::ONLINE) {
		        	$this->setState(2450);

		        	$localContext->intimeAction = $this->input->LT(1);
		        	$_la = $this->input->LA(1);

		        	if (!($_la === self::OFFLINE || $_la === self::ONLINE)) {
		        		    $localContext->intimeAction = $this->errorHandler->recoverInline($this);
		        	} else {
		        		if ($this->input->LA(1) === Token::EOF) {
		        		    $this->matchedEOF = true;
		        	    }

		        		$this->errorHandler->reportMatch($this);
		        		$this->consume();
		        	}
		        }
		        $this->setState(2454);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::IGNORE) {
		        	$this->setState(2453);
		        	$this->match(self::IGNORE);
		        }
		        $this->setState(2456);
		        $this->match(self::TABLE);
		        $this->setState(2457);
		        $this->tableName();
		        $this->setState(2459);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::NOWAIT || $_la === self::WAIT) {
		        	$this->setState(2458);
		        	$this->waitNowaitClause();
		        }
		        $this->setState(2469);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 299, $this->ctx)) {
		            case 1:
		        	    $this->setState(2461);
		        	    $this->alterSpecification();
		        	    $this->setState(2466);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::COMMA) {
		        	    	$this->setState(2462);
		        	    	$this->match(self::COMMA);
		        	    	$this->setState(2463);
		        	    	$this->alterSpecification();
		        	    	$this->setState(2468);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	break;
		        }
		        $this->setState(2472);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::PARTITION) {
		        	$this->setState(2471);
		        	$this->partitionDefinitions();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function alterTablespace(): Context\AlterTablespaceContext
		{
		    $localContext = new Context\AlterTablespaceContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 144, self::RULE_alterTablespace);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(2474);
		        $this->match(self::ALTER);
		        $this->setState(2475);
		        $this->match(self::TABLESPACE);
		        $this->setState(2476);
		        $this->uid();
		        $this->setState(2477);

		        $localContext->objectAction = $this->input->LT(1);
		        $_la = $this->input->LA(1);

		        if (!($_la === self::ADD || $_la === self::DROP)) {
		        	    $localContext->objectAction = $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		        $this->setState(2478);
		        $this->match(self::DATAFILE);
		        $this->setState(2479);
		        $this->match(self::STRING_LITERAL);
		        $this->setState(2483);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::INITIAL_SIZE) {
		        	$this->setState(2480);
		        	$this->match(self::INITIAL_SIZE);
		        	$this->setState(2481);
		        	$this->match(self::EQUAL_SYMBOL);
		        	$this->setState(2482);
		        	$this->fileSizeLiteral();
		        }
		        $this->setState(2486);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::WAIT) {
		        	$this->setState(2485);
		        	$this->match(self::WAIT);
		        }
		        $this->setState(2488);
		        $this->match(self::ENGINE);
		        $this->setState(2490);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::EQUAL_SYMBOL) {
		        	$this->setState(2489);
		        	$this->match(self::EQUAL_SYMBOL);
		        }
		        $this->setState(2492);
		        $this->engineName();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function alterView(): Context\AlterViewContext
		{
		    $localContext = new Context\AlterViewContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 146, self::RULE_alterView);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(2494);
		        $this->match(self::ALTER);
		        $this->setState(2498);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::ALGORITHM) {
		        	$this->setState(2495);
		        	$this->match(self::ALGORITHM);
		        	$this->setState(2496);
		        	$this->match(self::EQUAL_SYMBOL);
		        	$this->setState(2497);

		        	$localContext->algType = $this->input->LT(1);
		        	$_la = $this->input->LA(1);

		        	if (!($_la === self::MERGE || $_la === self::TEMPTABLE || $_la === self::UNDEFINED)) {
		        		    $localContext->algType = $this->errorHandler->recoverInline($this);
		        	} else {
		        		if ($this->input->LA(1) === Token::EOF) {
		        		    $this->matchedEOF = true;
		        	    }

		        		$this->errorHandler->reportMatch($this);
		        		$this->consume();
		        	}
		        }
		        $this->setState(2501);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::DEFINER) {
		        	$this->setState(2500);
		        	$this->ownerStatement();
		        }
		        $this->setState(2506);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::SQL) {
		        	$this->setState(2503);
		        	$this->match(self::SQL);
		        	$this->setState(2504);
		        	$this->match(self::SECURITY);
		        	$this->setState(2505);

		        	$localContext->secContext = $this->input->LT(1);
		        	$_la = $this->input->LA(1);

		        	if (!($_la === self::DEFINER || $_la === self::INVOKER)) {
		        		    $localContext->secContext = $this->errorHandler->recoverInline($this);
		        	} else {
		        		if ($this->input->LA(1) === Token::EOF) {
		        		    $this->matchedEOF = true;
		        	    }

		        		$this->errorHandler->reportMatch($this);
		        		$this->consume();
		        	}
		        }
		        $this->setState(2508);
		        $this->match(self::VIEW);
		        $this->setState(2509);
		        $this->fullId();
		        $this->setState(2514);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::LR_BRACKET) {
		        	$this->setState(2510);
		        	$this->match(self::LR_BRACKET);
		        	$this->setState(2511);
		        	$this->uidList();
		        	$this->setState(2512);
		        	$this->match(self::RR_BRACKET);
		        }
		        $this->setState(2516);
		        $this->match(self::AS);
		        $this->setState(2517);
		        $this->selectStatement();
		        $this->setState(2524);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 309, $this->ctx)) {
		            case 1:
		        	    $this->setState(2518);
		        	    $this->match(self::WITH);
		        	    $this->setState(2520);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::CASCADED || $_la === self::LOCAL) {
		        	    	$this->setState(2519);

		        	    	$localContext->checkOpt = $this->input->LT(1);
		        	    	$_la = $this->input->LA(1);

		        	    	if (!($_la === self::CASCADED || $_la === self::LOCAL)) {
		        	    		    $localContext->checkOpt = $this->errorHandler->recoverInline($this);
		        	    	} else {
		        	    		if ($this->input->LA(1) === Token::EOF) {
		        	    		    $this->matchedEOF = true;
		        	    	    }

		        	    		$this->errorHandler->reportMatch($this);
		        	    		$this->consume();
		        	    	}
		        	    }
		        	    $this->setState(2522);
		        	    $this->match(self::CHECK);
		        	    $this->setState(2523);
		        	    $this->match(self::OPTION);
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function alterSpecification(): Context\AlterSpecificationContext
		{
		    $localContext = new Context\AlterSpecificationContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 148, self::RULE_alterSpecification);

		    try {
		        $this->setState(2877);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 369, $this->ctx)) {
		        	case 1:
		        	    $localContext = new Context\AlterByTableOptionContext($localContext);
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(2526);
		        	    $this->tableOption();
		        	    $this->setState(2533);
		        	    $this->errorHandler->sync($this);

		        	    $alt = $this->getInterpreter()->adaptivePredict($this->input, 311, $this->ctx);

		        	    while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
		        	    	if ($alt === 1) {
		        	    		$this->setState(2528);
		        	    		$this->errorHandler->sync($this);
		        	    		$_la = $this->input->LA(1);

		        	    		if ($_la === self::COMMA) {
		        	    			$this->setState(2527);
		        	    			$this->match(self::COMMA);
		        	    		}
		        	    		$this->setState(2530);
		        	    		$this->tableOption(); 
		        	    	}

		        	    	$this->setState(2535);
		        	    	$this->errorHandler->sync($this);

		        	    	$alt = $this->getInterpreter()->adaptivePredict($this->input, 311, $this->ctx);
		        	    }
		        	break;

		        	case 2:
		        	    $localContext = new Context\AlterByAddColumnContext($localContext);
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(2536);
		        	    $this->match(self::ADD);
		        	    $this->setState(2538);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::COLUMN) {
		        	    	$this->setState(2537);
		        	    	$this->match(self::COLUMN);
		        	    }
		        	    $this->setState(2540);
		        	    $this->uid();
		        	    $this->setState(2541);
		        	    $this->columnDefinition();
		        	    $this->setState(2545);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->input->LA(1)) {
		        	        case self::FIRST:
		        	        	$this->setState(2542);
		        	        	$this->match(self::FIRST);
		        	        	break;

		        	        case self::AFTER:
		        	        	$this->setState(2543);
		        	        	$this->match(self::AFTER);
		        	        	$this->setState(2544);
		        	        	$this->uid();
		        	        	break;

		        	        case self::EOF:
		        	        case self::ALTER:
		        	        case self::ANALYZE:
		        	        case self::CALL:
		        	        case self::CHANGE:
		        	        case self::CHECK:
		        	        case self::CREATE:
		        	        case self::DELETE:
		        	        case self::DESC:
		        	        case self::DESCRIBE:
		        	        case self::DROP:
		        	        case self::EXPLAIN:
		        	        case self::GET:
		        	        case self::GRANT:
		        	        case self::INSERT:
		        	        case self::KILL:
		        	        case self::LOAD:
		        	        case self::LOCK:
		        	        case self::OPTIMIZE:
		        	        case self::PARTITION:
		        	        case self::PURGE:
		        	        case self::RELEASE:
		        	        case self::RENAME:
		        	        case self::REPLACE:
		        	        case self::RESIGNAL:
		        	        case self::REVOKE:
		        	        case self::SELECT:
		        	        case self::SET:
		        	        case self::SHOW:
		        	        case self::SIGNAL:
		        	        case self::TABLE:
		        	        case self::UNLOCK:
		        	        case self::UPDATE:
		        	        case self::USE:
		        	        case self::VALUES:
		        	        case self::WITH:
		        	        case self::BEGIN:
		        	        case self::BINLOG:
		        	        case self::CACHE:
		        	        case self::CHECKSUM:
		        	        case self::COMMIT:
		        	        case self::DEALLOCATE:
		        	        case self::DO:
		        	        case self::FLUSH:
		        	        case self::HANDLER:
		        	        case self::HELP:
		        	        case self::INSTALL:
		        	        case self::PREPARE:
		        	        case self::REPAIR:
		        	        case self::RESET:
		        	        case self::ROLLBACK:
		        	        case self::SAVEPOINT:
		        	        case self::START:
		        	        case self::STOP:
		        	        case self::TRUNCATE:
		        	        case self::UNINSTALL:
		        	        case self::XA:
		        	        case self::EXECUTE:
		        	        case self::SHUTDOWN:
		        	        case self::MINUS:
		        	        case self::LR_BRACKET:
		        	        case self::COMMA:
		        	        case self::SEMI:
		        	        	break;

		        	    default:
		        	    	break;
		        	    }
		        	break;

		        	case 3:
		        	    $localContext = new Context\AlterByAddColumnsContext($localContext);
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(2547);
		        	    $this->match(self::ADD);
		        	    $this->setState(2549);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::COLUMN) {
		        	    	$this->setState(2548);
		        	    	$this->match(self::COLUMN);
		        	    }
		        	    $this->setState(2551);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(2552);
		        	    $this->uid();
		        	    $this->setState(2553);
		        	    $this->columnDefinition();
		        	    $this->setState(2560);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::COMMA) {
		        	    	$this->setState(2554);
		        	    	$this->match(self::COMMA);
		        	    	$this->setState(2555);
		        	    	$this->uid();
		        	    	$this->setState(2556);
		        	    	$this->columnDefinition();
		        	    	$this->setState(2562);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	    $this->setState(2563);
		        	    $this->match(self::RR_BRACKET);
		        	break;

		        	case 4:
		        	    $localContext = new Context\AlterByAddIndexContext($localContext);
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(2565);
		        	    $this->match(self::ADD);
		        	    $this->setState(2566);

		        	    $localContext->indexFormat = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::INDEX || $_la === self::KEY)) {
		        	    	    $localContext->indexFormat = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	    $this->setState(2568);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if (((($_la) & ~0x3f) === 0 && ((1 << $_la) & 756891332513122304) !== 0) || (((($_la - 73)) & ~0x3f) === 0 && ((1 << ($_la - 73)) & 146666055071174737) !== 0) || (((($_la - 140)) & ~0x3f) === 0 && ((1 << ($_la - 140)) & 268698883) !== 0) || (((($_la - 217)) & ~0x3f) === 0 && ((1 << ($_la - 217)) & -17174494689) !== 0) || (((($_la - 281)) & ~0x3f) === 0 && ((1 << ($_la - 281)) & -1099511627777) !== 0) || (((($_la - 345)) & ~0x3f) === 0 && ((1 << ($_la - 345)) & -2882305960540372993) !== 0) || (((($_la - 409)) & ~0x3f) === 0 && ((1 << ($_la - 409)) & -4398063288321) !== 0) || (((($_la - 473)) & ~0x3f) === 0 && ((1 << ($_la - 473)) & -16325548649218049) !== 0) || (((($_la - 537)) & ~0x3f) === 0 && ((1 << ($_la - 537)) & -81064793296864001) !== 0) || (((($_la - 601)) & ~0x3f) === 0 && ((1 << ($_la - 601)) & -68719476801) !== 0) || (((($_la - 665)) & ~0x3f) === 0 && ((1 << ($_la - 665)) & -22236531750340609) !== 0) || (((($_la - 729)) & ~0x3f) === 0 && ((1 << ($_la - 729)) & -65) !== 0) || (((($_la - 793)) & ~0x3f) === 0 && ((1 << ($_la - 793)) & -6145) !== 0) || (((($_la - 857)) & ~0x3f) === 0 && ((1 << ($_la - 857)) & -1) !== 0) || (((($_la - 921)) & ~0x3f) === 0 && ((1 << ($_la - 921)) & -1) !== 0) || (((($_la - 985)) & ~0x3f) === 0 && ((1 << ($_la - 985)) & -1) !== 0) || (((($_la - 1049)) & ~0x3f) === 0 && ((1 << ($_la - 1049)) & 576460752303423487) !== 0) || (((($_la - 1123)) & ~0x3f) === 0 && ((1 << ($_la - 1123)) & 8627683329) !== 0)) {
		        	    	$this->setState(2567);
		        	    	$this->uid();
		        	    }
		        	    $this->setState(2571);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::USING) {
		        	    	$this->setState(2570);
		        	    	$this->indexType();
		        	    }
		        	    $this->setState(2573);
		        	    $this->indexColumnNames();
		        	    $this->setState(2577);
		        	    $this->errorHandler->sync($this);

		        	    $alt = $this->getInterpreter()->adaptivePredict($this->input, 318, $this->ctx);

		        	    while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
		        	    	if ($alt === 1) {
		        	    		$this->setState(2574);
		        	    		$this->indexOption(); 
		        	    	}

		        	    	$this->setState(2579);
		        	    	$this->errorHandler->sync($this);

		        	    	$alt = $this->getInterpreter()->adaptivePredict($this->input, 318, $this->ctx);
		        	    }
		        	break;

		        	case 5:
		        	    $localContext = new Context\AlterByAddPrimaryKeyContext($localContext);
		        	    $this->enterOuterAlt($localContext, 5);
		        	    $this->setState(2580);
		        	    $this->match(self::ADD);
		        	    $this->setState(2585);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::CONSTRAINT) {
		        	    	$this->setState(2581);
		        	    	$this->match(self::CONSTRAINT);
		        	    	$this->setState(2583);
		        	    	$this->errorHandler->sync($this);

		        	    	switch ($this->getInterpreter()->adaptivePredict($this->input, 319, $this->ctx)) {
		        	    	    case 1:
		        	    		    $this->setState(2582);
		        	    		    $localContext->name = $this->uid();
		        	    		break;
		        	    	}
		        	    }
		        	    $this->setState(2587);
		        	    $this->match(self::PRIMARY);
		        	    $this->setState(2588);
		        	    $this->match(self::KEY);
		        	    $this->setState(2590);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if (((($_la) & ~0x3f) === 0 && ((1 << $_la) & 756891332513122304) !== 0) || (((($_la - 73)) & ~0x3f) === 0 && ((1 << ($_la - 73)) & 146666055071174737) !== 0) || (((($_la - 140)) & ~0x3f) === 0 && ((1 << ($_la - 140)) & 268698883) !== 0) || (((($_la - 217)) & ~0x3f) === 0 && ((1 << ($_la - 217)) & -17174494689) !== 0) || (((($_la - 281)) & ~0x3f) === 0 && ((1 << ($_la - 281)) & -1099511627777) !== 0) || (((($_la - 345)) & ~0x3f) === 0 && ((1 << ($_la - 345)) & -2882305960540372993) !== 0) || (((($_la - 409)) & ~0x3f) === 0 && ((1 << ($_la - 409)) & -4398063288321) !== 0) || (((($_la - 473)) & ~0x3f) === 0 && ((1 << ($_la - 473)) & -16325548649218049) !== 0) || (((($_la - 537)) & ~0x3f) === 0 && ((1 << ($_la - 537)) & -81064793296864001) !== 0) || (((($_la - 601)) & ~0x3f) === 0 && ((1 << ($_la - 601)) & -68719476801) !== 0) || (((($_la - 665)) & ~0x3f) === 0 && ((1 << ($_la - 665)) & -22236531750340609) !== 0) || (((($_la - 729)) & ~0x3f) === 0 && ((1 << ($_la - 729)) & -65) !== 0) || (((($_la - 793)) & ~0x3f) === 0 && ((1 << ($_la - 793)) & -6145) !== 0) || (((($_la - 857)) & ~0x3f) === 0 && ((1 << ($_la - 857)) & -1) !== 0) || (((($_la - 921)) & ~0x3f) === 0 && ((1 << ($_la - 921)) & -1) !== 0) || (((($_la - 985)) & ~0x3f) === 0 && ((1 << ($_la - 985)) & -1) !== 0) || (((($_la - 1049)) & ~0x3f) === 0 && ((1 << ($_la - 1049)) & 576460752303423487) !== 0) || (((($_la - 1123)) & ~0x3f) === 0 && ((1 << ($_la - 1123)) & 8627683329) !== 0)) {
		        	    	$this->setState(2589);
		        	    	$localContext->index = $this->uid();
		        	    }
		        	    $this->setState(2593);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::USING) {
		        	    	$this->setState(2592);
		        	    	$this->indexType();
		        	    }
		        	    $this->setState(2595);
		        	    $this->indexColumnNames();
		        	    $this->setState(2599);
		        	    $this->errorHandler->sync($this);

		        	    $alt = $this->getInterpreter()->adaptivePredict($this->input, 323, $this->ctx);

		        	    while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
		        	    	if ($alt === 1) {
		        	    		$this->setState(2596);
		        	    		$this->indexOption(); 
		        	    	}

		        	    	$this->setState(2601);
		        	    	$this->errorHandler->sync($this);

		        	    	$alt = $this->getInterpreter()->adaptivePredict($this->input, 323, $this->ctx);
		        	    }
		        	break;

		        	case 6:
		        	    $localContext = new Context\AlterByAddUniqueKeyContext($localContext);
		        	    $this->enterOuterAlt($localContext, 6);
		        	    $this->setState(2602);
		        	    $this->match(self::ADD);
		        	    $this->setState(2607);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::CONSTRAINT) {
		        	    	$this->setState(2603);
		        	    	$this->match(self::CONSTRAINT);
		        	    	$this->setState(2605);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);

		        	    	if (((($_la) & ~0x3f) === 0 && ((1 << $_la) & 756891332513122304) !== 0) || (((($_la - 73)) & ~0x3f) === 0 && ((1 << ($_la - 73)) & 146666055071174737) !== 0) || (((($_la - 140)) & ~0x3f) === 0 && ((1 << ($_la - 140)) & 268698883) !== 0) || (((($_la - 217)) & ~0x3f) === 0 && ((1 << ($_la - 217)) & -17174494689) !== 0) || (((($_la - 281)) & ~0x3f) === 0 && ((1 << ($_la - 281)) & -1099511627777) !== 0) || (((($_la - 345)) & ~0x3f) === 0 && ((1 << ($_la - 345)) & -2882305960540372993) !== 0) || (((($_la - 409)) & ~0x3f) === 0 && ((1 << ($_la - 409)) & -4398063288321) !== 0) || (((($_la - 473)) & ~0x3f) === 0 && ((1 << ($_la - 473)) & -16325548649218049) !== 0) || (((($_la - 537)) & ~0x3f) === 0 && ((1 << ($_la - 537)) & -81064793296864001) !== 0) || (((($_la - 601)) & ~0x3f) === 0 && ((1 << ($_la - 601)) & -68719476801) !== 0) || (((($_la - 665)) & ~0x3f) === 0 && ((1 << ($_la - 665)) & -22236531750340609) !== 0) || (((($_la - 729)) & ~0x3f) === 0 && ((1 << ($_la - 729)) & -65) !== 0) || (((($_la - 793)) & ~0x3f) === 0 && ((1 << ($_la - 793)) & -6145) !== 0) || (((($_la - 857)) & ~0x3f) === 0 && ((1 << ($_la - 857)) & -1) !== 0) || (((($_la - 921)) & ~0x3f) === 0 && ((1 << ($_la - 921)) & -1) !== 0) || (((($_la - 985)) & ~0x3f) === 0 && ((1 << ($_la - 985)) & -1) !== 0) || (((($_la - 1049)) & ~0x3f) === 0 && ((1 << ($_la - 1049)) & 576460752303423487) !== 0) || (((($_la - 1123)) & ~0x3f) === 0 && ((1 << ($_la - 1123)) & 8627683329) !== 0)) {
		        	    		$this->setState(2604);
		        	    		$localContext->name = $this->uid();
		        	    	}
		        	    }
		        	    $this->setState(2609);
		        	    $this->match(self::UNIQUE);
		        	    $this->setState(2611);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::INDEX || $_la === self::KEY) {
		        	    	$this->setState(2610);

		        	    	$localContext->indexFormat = $this->input->LT(1);
		        	    	$_la = $this->input->LA(1);

		        	    	if (!($_la === self::INDEX || $_la === self::KEY)) {
		        	    		    $localContext->indexFormat = $this->errorHandler->recoverInline($this);
		        	    	} else {
		        	    		if ($this->input->LA(1) === Token::EOF) {
		        	    		    $this->matchedEOF = true;
		        	    	    }

		        	    		$this->errorHandler->reportMatch($this);
		        	    		$this->consume();
		        	    	}
		        	    }
		        	    $this->setState(2614);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if (((($_la) & ~0x3f) === 0 && ((1 << $_la) & 756891332513122304) !== 0) || (((($_la - 73)) & ~0x3f) === 0 && ((1 << ($_la - 73)) & 146666055071174737) !== 0) || (((($_la - 140)) & ~0x3f) === 0 && ((1 << ($_la - 140)) & 268698883) !== 0) || (((($_la - 217)) & ~0x3f) === 0 && ((1 << ($_la - 217)) & -17174494689) !== 0) || (((($_la - 281)) & ~0x3f) === 0 && ((1 << ($_la - 281)) & -1099511627777) !== 0) || (((($_la - 345)) & ~0x3f) === 0 && ((1 << ($_la - 345)) & -2882305960540372993) !== 0) || (((($_la - 409)) & ~0x3f) === 0 && ((1 << ($_la - 409)) & -4398063288321) !== 0) || (((($_la - 473)) & ~0x3f) === 0 && ((1 << ($_la - 473)) & -16325548649218049) !== 0) || (((($_la - 537)) & ~0x3f) === 0 && ((1 << ($_la - 537)) & -81064793296864001) !== 0) || (((($_la - 601)) & ~0x3f) === 0 && ((1 << ($_la - 601)) & -68719476801) !== 0) || (((($_la - 665)) & ~0x3f) === 0 && ((1 << ($_la - 665)) & -22236531750340609) !== 0) || (((($_la - 729)) & ~0x3f) === 0 && ((1 << ($_la - 729)) & -65) !== 0) || (((($_la - 793)) & ~0x3f) === 0 && ((1 << ($_la - 793)) & -6145) !== 0) || (((($_la - 857)) & ~0x3f) === 0 && ((1 << ($_la - 857)) & -1) !== 0) || (((($_la - 921)) & ~0x3f) === 0 && ((1 << ($_la - 921)) & -1) !== 0) || (((($_la - 985)) & ~0x3f) === 0 && ((1 << ($_la - 985)) & -1) !== 0) || (((($_la - 1049)) & ~0x3f) === 0 && ((1 << ($_la - 1049)) & 576460752303423487) !== 0) || (((($_la - 1123)) & ~0x3f) === 0 && ((1 << ($_la - 1123)) & 8627683329) !== 0)) {
		        	    	$this->setState(2613);
		        	    	$localContext->indexName = $this->uid();
		        	    }
		        	    $this->setState(2617);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::USING) {
		        	    	$this->setState(2616);
		        	    	$this->indexType();
		        	    }
		        	    $this->setState(2619);
		        	    $this->indexColumnNames();
		        	    $this->setState(2623);
		        	    $this->errorHandler->sync($this);

		        	    $alt = $this->getInterpreter()->adaptivePredict($this->input, 329, $this->ctx);

		        	    while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
		        	    	if ($alt === 1) {
		        	    		$this->setState(2620);
		        	    		$this->indexOption(); 
		        	    	}

		        	    	$this->setState(2625);
		        	    	$this->errorHandler->sync($this);

		        	    	$alt = $this->getInterpreter()->adaptivePredict($this->input, 329, $this->ctx);
		        	    }
		        	break;

		        	case 7:
		        	    $localContext = new Context\AlterByAddSpecialIndexContext($localContext);
		        	    $this->enterOuterAlt($localContext, 7);
		        	    $this->setState(2626);
		        	    $this->match(self::ADD);
		        	    $this->setState(2627);

		        	    $localContext->keyType = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::FULLTEXT || $_la === self::SPATIAL)) {
		        	    	    $localContext->keyType = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	    $this->setState(2629);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::INDEX || $_la === self::KEY) {
		        	    	$this->setState(2628);

		        	    	$localContext->indexFormat = $this->input->LT(1);
		        	    	$_la = $this->input->LA(1);

		        	    	if (!($_la === self::INDEX || $_la === self::KEY)) {
		        	    		    $localContext->indexFormat = $this->errorHandler->recoverInline($this);
		        	    	} else {
		        	    		if ($this->input->LA(1) === Token::EOF) {
		        	    		    $this->matchedEOF = true;
		        	    	    }

		        	    		$this->errorHandler->reportMatch($this);
		        	    		$this->consume();
		        	    	}
		        	    }
		        	    $this->setState(2632);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if (((($_la) & ~0x3f) === 0 && ((1 << $_la) & 756891332513122304) !== 0) || (((($_la - 73)) & ~0x3f) === 0 && ((1 << ($_la - 73)) & 146666055071174737) !== 0) || (((($_la - 140)) & ~0x3f) === 0 && ((1 << ($_la - 140)) & 268698883) !== 0) || (((($_la - 217)) & ~0x3f) === 0 && ((1 << ($_la - 217)) & -17174494689) !== 0) || (((($_la - 281)) & ~0x3f) === 0 && ((1 << ($_la - 281)) & -1099511627777) !== 0) || (((($_la - 345)) & ~0x3f) === 0 && ((1 << ($_la - 345)) & -2882305960540372993) !== 0) || (((($_la - 409)) & ~0x3f) === 0 && ((1 << ($_la - 409)) & -4398063288321) !== 0) || (((($_la - 473)) & ~0x3f) === 0 && ((1 << ($_la - 473)) & -16325548649218049) !== 0) || (((($_la - 537)) & ~0x3f) === 0 && ((1 << ($_la - 537)) & -81064793296864001) !== 0) || (((($_la - 601)) & ~0x3f) === 0 && ((1 << ($_la - 601)) & -68719476801) !== 0) || (((($_la - 665)) & ~0x3f) === 0 && ((1 << ($_la - 665)) & -22236531750340609) !== 0) || (((($_la - 729)) & ~0x3f) === 0 && ((1 << ($_la - 729)) & -65) !== 0) || (((($_la - 793)) & ~0x3f) === 0 && ((1 << ($_la - 793)) & -6145) !== 0) || (((($_la - 857)) & ~0x3f) === 0 && ((1 << ($_la - 857)) & -1) !== 0) || (((($_la - 921)) & ~0x3f) === 0 && ((1 << ($_la - 921)) & -1) !== 0) || (((($_la - 985)) & ~0x3f) === 0 && ((1 << ($_la - 985)) & -1) !== 0) || (((($_la - 1049)) & ~0x3f) === 0 && ((1 << ($_la - 1049)) & 576460752303423487) !== 0) || (((($_la - 1123)) & ~0x3f) === 0 && ((1 << ($_la - 1123)) & 8627683329) !== 0)) {
		        	    	$this->setState(2631);
		        	    	$this->uid();
		        	    }
		        	    $this->setState(2634);
		        	    $this->indexColumnNames();
		        	    $this->setState(2638);
		        	    $this->errorHandler->sync($this);

		        	    $alt = $this->getInterpreter()->adaptivePredict($this->input, 332, $this->ctx);

		        	    while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
		        	    	if ($alt === 1) {
		        	    		$this->setState(2635);
		        	    		$this->indexOption(); 
		        	    	}

		        	    	$this->setState(2640);
		        	    	$this->errorHandler->sync($this);

		        	    	$alt = $this->getInterpreter()->adaptivePredict($this->input, 332, $this->ctx);
		        	    }
		        	break;

		        	case 8:
		        	    $localContext = new Context\AlterByAddForeignKeyContext($localContext);
		        	    $this->enterOuterAlt($localContext, 8);
		        	    $this->setState(2641);
		        	    $this->match(self::ADD);
		        	    $this->setState(2646);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::CONSTRAINT) {
		        	    	$this->setState(2642);
		        	    	$this->match(self::CONSTRAINT);
		        	    	$this->setState(2644);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);

		        	    	if (((($_la) & ~0x3f) === 0 && ((1 << $_la) & 756891332513122304) !== 0) || (((($_la - 73)) & ~0x3f) === 0 && ((1 << ($_la - 73)) & 146666055071174737) !== 0) || (((($_la - 140)) & ~0x3f) === 0 && ((1 << ($_la - 140)) & 268698883) !== 0) || (((($_la - 217)) & ~0x3f) === 0 && ((1 << ($_la - 217)) & -17174494689) !== 0) || (((($_la - 281)) & ~0x3f) === 0 && ((1 << ($_la - 281)) & -1099511627777) !== 0) || (((($_la - 345)) & ~0x3f) === 0 && ((1 << ($_la - 345)) & -2882305960540372993) !== 0) || (((($_la - 409)) & ~0x3f) === 0 && ((1 << ($_la - 409)) & -4398063288321) !== 0) || (((($_la - 473)) & ~0x3f) === 0 && ((1 << ($_la - 473)) & -16325548649218049) !== 0) || (((($_la - 537)) & ~0x3f) === 0 && ((1 << ($_la - 537)) & -81064793296864001) !== 0) || (((($_la - 601)) & ~0x3f) === 0 && ((1 << ($_la - 601)) & -68719476801) !== 0) || (((($_la - 665)) & ~0x3f) === 0 && ((1 << ($_la - 665)) & -22236531750340609) !== 0) || (((($_la - 729)) & ~0x3f) === 0 && ((1 << ($_la - 729)) & -65) !== 0) || (((($_la - 793)) & ~0x3f) === 0 && ((1 << ($_la - 793)) & -6145) !== 0) || (((($_la - 857)) & ~0x3f) === 0 && ((1 << ($_la - 857)) & -1) !== 0) || (((($_la - 921)) & ~0x3f) === 0 && ((1 << ($_la - 921)) & -1) !== 0) || (((($_la - 985)) & ~0x3f) === 0 && ((1 << ($_la - 985)) & -1) !== 0) || (((($_la - 1049)) & ~0x3f) === 0 && ((1 << ($_la - 1049)) & 576460752303423487) !== 0) || (((($_la - 1123)) & ~0x3f) === 0 && ((1 << ($_la - 1123)) & 8627683329) !== 0)) {
		        	    		$this->setState(2643);
		        	    		$localContext->name = $this->uid();
		        	    	}
		        	    }
		        	    $this->setState(2648);
		        	    $this->match(self::FOREIGN);
		        	    $this->setState(2649);
		        	    $this->match(self::KEY);
		        	    $this->setState(2651);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if (((($_la) & ~0x3f) === 0 && ((1 << $_la) & 756891332513122304) !== 0) || (((($_la - 73)) & ~0x3f) === 0 && ((1 << ($_la - 73)) & 146666055071174737) !== 0) || (((($_la - 140)) & ~0x3f) === 0 && ((1 << ($_la - 140)) & 268698883) !== 0) || (((($_la - 217)) & ~0x3f) === 0 && ((1 << ($_la - 217)) & -17174494689) !== 0) || (((($_la - 281)) & ~0x3f) === 0 && ((1 << ($_la - 281)) & -1099511627777) !== 0) || (((($_la - 345)) & ~0x3f) === 0 && ((1 << ($_la - 345)) & -2882305960540372993) !== 0) || (((($_la - 409)) & ~0x3f) === 0 && ((1 << ($_la - 409)) & -4398063288321) !== 0) || (((($_la - 473)) & ~0x3f) === 0 && ((1 << ($_la - 473)) & -16325548649218049) !== 0) || (((($_la - 537)) & ~0x3f) === 0 && ((1 << ($_la - 537)) & -81064793296864001) !== 0) || (((($_la - 601)) & ~0x3f) === 0 && ((1 << ($_la - 601)) & -68719476801) !== 0) || (((($_la - 665)) & ~0x3f) === 0 && ((1 << ($_la - 665)) & -22236531750340609) !== 0) || (((($_la - 729)) & ~0x3f) === 0 && ((1 << ($_la - 729)) & -65) !== 0) || (((($_la - 793)) & ~0x3f) === 0 && ((1 << ($_la - 793)) & -6145) !== 0) || (((($_la - 857)) & ~0x3f) === 0 && ((1 << ($_la - 857)) & -1) !== 0) || (((($_la - 921)) & ~0x3f) === 0 && ((1 << ($_la - 921)) & -1) !== 0) || (((($_la - 985)) & ~0x3f) === 0 && ((1 << ($_la - 985)) & -1) !== 0) || (((($_la - 1049)) & ~0x3f) === 0 && ((1 << ($_la - 1049)) & 576460752303423487) !== 0) || (((($_la - 1123)) & ~0x3f) === 0 && ((1 << ($_la - 1123)) & 8627683329) !== 0)) {
		        	    	$this->setState(2650);
		        	    	$localContext->indexName = $this->uid();
		        	    }
		        	    $this->setState(2653);
		        	    $this->indexColumnNames();
		        	    $this->setState(2654);
		        	    $this->referenceDefinition();
		        	break;

		        	case 9:
		        	    $localContext = new Context\AlterByAddCheckTableConstraintContext($localContext);
		        	    $this->enterOuterAlt($localContext, 9);
		        	    $this->setState(2656);
		        	    $this->match(self::ADD);
		        	    $this->setState(2661);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::CONSTRAINT) {
		        	    	$this->setState(2657);
		        	    	$this->match(self::CONSTRAINT);
		        	    	$this->setState(2659);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);

		        	    	if (((($_la) & ~0x3f) === 0 && ((1 << $_la) & 756891332513122304) !== 0) || (((($_la - 73)) & ~0x3f) === 0 && ((1 << ($_la - 73)) & 146666055071174737) !== 0) || (((($_la - 140)) & ~0x3f) === 0 && ((1 << ($_la - 140)) & 268698883) !== 0) || (((($_la - 217)) & ~0x3f) === 0 && ((1 << ($_la - 217)) & -17174494689) !== 0) || (((($_la - 281)) & ~0x3f) === 0 && ((1 << ($_la - 281)) & -1099511627777) !== 0) || (((($_la - 345)) & ~0x3f) === 0 && ((1 << ($_la - 345)) & -2882305960540372993) !== 0) || (((($_la - 409)) & ~0x3f) === 0 && ((1 << ($_la - 409)) & -4398063288321) !== 0) || (((($_la - 473)) & ~0x3f) === 0 && ((1 << ($_la - 473)) & -16325548649218049) !== 0) || (((($_la - 537)) & ~0x3f) === 0 && ((1 << ($_la - 537)) & -81064793296864001) !== 0) || (((($_la - 601)) & ~0x3f) === 0 && ((1 << ($_la - 601)) & -68719476801) !== 0) || (((($_la - 665)) & ~0x3f) === 0 && ((1 << ($_la - 665)) & -22236531750340609) !== 0) || (((($_la - 729)) & ~0x3f) === 0 && ((1 << ($_la - 729)) & -65) !== 0) || (((($_la - 793)) & ~0x3f) === 0 && ((1 << ($_la - 793)) & -6145) !== 0) || (((($_la - 857)) & ~0x3f) === 0 && ((1 << ($_la - 857)) & -1) !== 0) || (((($_la - 921)) & ~0x3f) === 0 && ((1 << ($_la - 921)) & -1) !== 0) || (((($_la - 985)) & ~0x3f) === 0 && ((1 << ($_la - 985)) & -1) !== 0) || (((($_la - 1049)) & ~0x3f) === 0 && ((1 << ($_la - 1049)) & 576460752303423487) !== 0) || (((($_la - 1123)) & ~0x3f) === 0 && ((1 << ($_la - 1123)) & 8627683329) !== 0)) {
		        	    		$this->setState(2658);
		        	    		$localContext->name = $this->uid();
		        	    	}
		        	    }
		        	    $this->setState(2663);
		        	    $this->match(self::CHECK);
		        	    $this->setState(2670);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 338, $this->ctx)) {
		        	    	case 1:
		        	    	    $this->setState(2664);
		        	    	    $this->uid();
		        	    	break;

		        	    	case 2:
		        	    	    $this->setState(2665);
		        	    	    $this->stringLiteral();
		        	    	break;

		        	    	case 3:
		        	    	    $this->setState(2666);
		        	    	    $this->match(self::LR_BRACKET);
		        	    	    $this->setState(2667);
		        	    	    $this->recursiveExpression(0);
		        	    	    $this->setState(2668);
		        	    	    $this->match(self::RR_BRACKET);
		        	    	break;
		        	    }
		        	    $this->setState(2673);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::NOT) {
		        	    	$this->setState(2672);
		        	    	$this->match(self::NOT);
		        	    }
		        	    $this->setState(2676);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::ENFORCED) {
		        	    	$this->setState(2675);
		        	    	$this->match(self::ENFORCED);
		        	    }
		        	break;

		        	case 10:
		        	    $localContext = new Context\AlterByAlterCheckTableConstraintContext($localContext);
		        	    $this->enterOuterAlt($localContext, 10);
		        	    $this->setState(2678);
		        	    $this->match(self::ALTER);
		        	    $this->setState(2683);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::CONSTRAINT) {
		        	    	$this->setState(2679);
		        	    	$this->match(self::CONSTRAINT);
		        	    	$this->setState(2681);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);

		        	    	if (((($_la) & ~0x3f) === 0 && ((1 << $_la) & 756891332513122304) !== 0) || (((($_la - 73)) & ~0x3f) === 0 && ((1 << ($_la - 73)) & 146666055071174737) !== 0) || (((($_la - 140)) & ~0x3f) === 0 && ((1 << ($_la - 140)) & 268698883) !== 0) || (((($_la - 217)) & ~0x3f) === 0 && ((1 << ($_la - 217)) & -17174494689) !== 0) || (((($_la - 281)) & ~0x3f) === 0 && ((1 << ($_la - 281)) & -1099511627777) !== 0) || (((($_la - 345)) & ~0x3f) === 0 && ((1 << ($_la - 345)) & -2882305960540372993) !== 0) || (((($_la - 409)) & ~0x3f) === 0 && ((1 << ($_la - 409)) & -4398063288321) !== 0) || (((($_la - 473)) & ~0x3f) === 0 && ((1 << ($_la - 473)) & -16325548649218049) !== 0) || (((($_la - 537)) & ~0x3f) === 0 && ((1 << ($_la - 537)) & -81064793296864001) !== 0) || (((($_la - 601)) & ~0x3f) === 0 && ((1 << ($_la - 601)) & -68719476801) !== 0) || (((($_la - 665)) & ~0x3f) === 0 && ((1 << ($_la - 665)) & -22236531750340609) !== 0) || (((($_la - 729)) & ~0x3f) === 0 && ((1 << ($_la - 729)) & -65) !== 0) || (((($_la - 793)) & ~0x3f) === 0 && ((1 << ($_la - 793)) & -6145) !== 0) || (((($_la - 857)) & ~0x3f) === 0 && ((1 << ($_la - 857)) & -1) !== 0) || (((($_la - 921)) & ~0x3f) === 0 && ((1 << ($_la - 921)) & -1) !== 0) || (((($_la - 985)) & ~0x3f) === 0 && ((1 << ($_la - 985)) & -1) !== 0) || (((($_la - 1049)) & ~0x3f) === 0 && ((1 << ($_la - 1049)) & 576460752303423487) !== 0) || (((($_la - 1123)) & ~0x3f) === 0 && ((1 << ($_la - 1123)) & 8627683329) !== 0)) {
		        	    		$this->setState(2680);
		        	    		$localContext->name = $this->uid();
		        	    	}
		        	    }
		        	    $this->setState(2685);
		        	    $this->match(self::CHECK);
		        	    $this->setState(2692);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 343, $this->ctx)) {
		        	    	case 1:
		        	    	    $this->setState(2686);
		        	    	    $this->uid();
		        	    	break;

		        	    	case 2:
		        	    	    $this->setState(2687);
		        	    	    $this->stringLiteral();
		        	    	break;

		        	    	case 3:
		        	    	    $this->setState(2688);
		        	    	    $this->match(self::LR_BRACKET);
		        	    	    $this->setState(2689);
		        	    	    $this->recursiveExpression(0);
		        	    	    $this->setState(2690);
		        	    	    $this->match(self::RR_BRACKET);
		        	    	break;
		        	    }
		        	    $this->setState(2695);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::NOT) {
		        	    	$this->setState(2694);
		        	    	$this->match(self::NOT);
		        	    }
		        	    $this->setState(2698);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::ENFORCED) {
		        	    	$this->setState(2697);
		        	    	$this->match(self::ENFORCED);
		        	    }
		        	break;

		        	case 11:
		        	    $localContext = new Context\AlterByAddCheckTableConstraintContext($localContext);
		        	    $this->enterOuterAlt($localContext, 11);
		        	    $this->setState(2700);
		        	    $this->match(self::ADD);
		        	    $this->setState(2705);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::CONSTRAINT) {
		        	    	$this->setState(2701);
		        	    	$this->match(self::CONSTRAINT);
		        	    	$this->setState(2703);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);

		        	    	if (((($_la) & ~0x3f) === 0 && ((1 << $_la) & 756891332513122304) !== 0) || (((($_la - 73)) & ~0x3f) === 0 && ((1 << ($_la - 73)) & 146666055071174737) !== 0) || (((($_la - 140)) & ~0x3f) === 0 && ((1 << ($_la - 140)) & 268698883) !== 0) || (((($_la - 217)) & ~0x3f) === 0 && ((1 << ($_la - 217)) & -17174494689) !== 0) || (((($_la - 281)) & ~0x3f) === 0 && ((1 << ($_la - 281)) & -1099511627777) !== 0) || (((($_la - 345)) & ~0x3f) === 0 && ((1 << ($_la - 345)) & -2882305960540372993) !== 0) || (((($_la - 409)) & ~0x3f) === 0 && ((1 << ($_la - 409)) & -4398063288321) !== 0) || (((($_la - 473)) & ~0x3f) === 0 && ((1 << ($_la - 473)) & -16325548649218049) !== 0) || (((($_la - 537)) & ~0x3f) === 0 && ((1 << ($_la - 537)) & -81064793296864001) !== 0) || (((($_la - 601)) & ~0x3f) === 0 && ((1 << ($_la - 601)) & -68719476801) !== 0) || (((($_la - 665)) & ~0x3f) === 0 && ((1 << ($_la - 665)) & -22236531750340609) !== 0) || (((($_la - 729)) & ~0x3f) === 0 && ((1 << ($_la - 729)) & -65) !== 0) || (((($_la - 793)) & ~0x3f) === 0 && ((1 << ($_la - 793)) & -6145) !== 0) || (((($_la - 857)) & ~0x3f) === 0 && ((1 << ($_la - 857)) & -1) !== 0) || (((($_la - 921)) & ~0x3f) === 0 && ((1 << ($_la - 921)) & -1) !== 0) || (((($_la - 985)) & ~0x3f) === 0 && ((1 << ($_la - 985)) & -1) !== 0) || (((($_la - 1049)) & ~0x3f) === 0 && ((1 << ($_la - 1049)) & 576460752303423487) !== 0) || (((($_la - 1123)) & ~0x3f) === 0 && ((1 << ($_la - 1123)) & 8627683329) !== 0)) {
		        	    		$this->setState(2702);
		        	    		$localContext->name = $this->uid();
		        	    	}
		        	    }
		        	    $this->setState(2707);
		        	    $this->match(self::CHECK);
		        	    $this->setState(2708);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(2709);
		        	    $this->recursiveExpression(0);
		        	    $this->setState(2710);
		        	    $this->match(self::RR_BRACKET);
		        	break;

		        	case 12:
		        	    $localContext = new Context\AlterBySetAlgorithmContext($localContext);
		        	    $this->enterOuterAlt($localContext, 12);
		        	    $this->setState(2712);
		        	    $this->match(self::ALGORITHM);
		        	    $this->setState(2714);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::EQUAL_SYMBOL) {
		        	    	$this->setState(2713);
		        	    	$this->match(self::EQUAL_SYMBOL);
		        	    }
		        	    $this->setState(2716);

		        	    $localContext->algType = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::DEFAULT || $_la === self::COPY || $_la === self::INPLACE || $_la === self::INSTANT)) {
		        	    	    $localContext->algType = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	break;

		        	case 13:
		        	    $localContext = new Context\AlterByChangeDefaultContext($localContext);
		        	    $this->enterOuterAlt($localContext, 13);
		        	    $this->setState(2717);
		        	    $this->match(self::ALTER);
		        	    $this->setState(2719);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::COLUMN) {
		        	    	$this->setState(2718);
		        	    	$this->match(self::COLUMN);
		        	    }
		        	    $this->setState(2721);
		        	    $this->uid();
		        	    $this->setState(2727);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->input->LA(1)) {
		        	        case self::SET:
		        	        	$this->setState(2722);
		        	        	$this->match(self::SET);
		        	        	$this->setState(2723);
		        	        	$this->match(self::DEFAULT);
		        	        	$this->setState(2724);
		        	        	$this->defaultValue();
		        	        	break;

		        	        case self::DROP:
		        	        	$this->setState(2725);
		        	        	$this->match(self::DROP);
		        	        	$this->setState(2726);
		        	        	$this->match(self::DEFAULT);
		        	        	break;

		        	    default:
		        	    	throw new NoViableAltException($this);
		        	    }
		        	break;

		        	case 14:
		        	    $localContext = new Context\AlterByChangeColumnContext($localContext);
		        	    $this->enterOuterAlt($localContext, 14);
		        	    $this->setState(2729);
		        	    $this->match(self::CHANGE);
		        	    $this->setState(2731);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::COLUMN) {
		        	    	$this->setState(2730);
		        	    	$this->match(self::COLUMN);
		        	    }
		        	    $this->setState(2733);
		        	    $localContext->oldColumn = $this->uid();
		        	    $this->setState(2734);
		        	    $localContext->newColumn = $this->uid();
		        	    $this->setState(2735);
		        	    $this->columnDefinition();
		        	    $this->setState(2739);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->input->LA(1)) {
		        	        case self::FIRST:
		        	        	$this->setState(2736);
		        	        	$this->match(self::FIRST);
		        	        	break;

		        	        case self::AFTER:
		        	        	$this->setState(2737);
		        	        	$this->match(self::AFTER);
		        	        	$this->setState(2738);
		        	        	$localContext->afterColumn = $this->uid();
		        	        	break;

		        	        case self::EOF:
		        	        case self::ALTER:
		        	        case self::ANALYZE:
		        	        case self::CALL:
		        	        case self::CHANGE:
		        	        case self::CHECK:
		        	        case self::CREATE:
		        	        case self::DELETE:
		        	        case self::DESC:
		        	        case self::DESCRIBE:
		        	        case self::DROP:
		        	        case self::EXPLAIN:
		        	        case self::GET:
		        	        case self::GRANT:
		        	        case self::INSERT:
		        	        case self::KILL:
		        	        case self::LOAD:
		        	        case self::LOCK:
		        	        case self::OPTIMIZE:
		        	        case self::PARTITION:
		        	        case self::PURGE:
		        	        case self::RELEASE:
		        	        case self::RENAME:
		        	        case self::REPLACE:
		        	        case self::RESIGNAL:
		        	        case self::REVOKE:
		        	        case self::SELECT:
		        	        case self::SET:
		        	        case self::SHOW:
		        	        case self::SIGNAL:
		        	        case self::TABLE:
		        	        case self::UNLOCK:
		        	        case self::UPDATE:
		        	        case self::USE:
		        	        case self::VALUES:
		        	        case self::WITH:
		        	        case self::BEGIN:
		        	        case self::BINLOG:
		        	        case self::CACHE:
		        	        case self::CHECKSUM:
		        	        case self::COMMIT:
		        	        case self::DEALLOCATE:
		        	        case self::DO:
		        	        case self::FLUSH:
		        	        case self::HANDLER:
		        	        case self::HELP:
		        	        case self::INSTALL:
		        	        case self::PREPARE:
		        	        case self::REPAIR:
		        	        case self::RESET:
		        	        case self::ROLLBACK:
		        	        case self::SAVEPOINT:
		        	        case self::START:
		        	        case self::STOP:
		        	        case self::TRUNCATE:
		        	        case self::UNINSTALL:
		        	        case self::XA:
		        	        case self::EXECUTE:
		        	        case self::SHUTDOWN:
		        	        case self::MINUS:
		        	        case self::LR_BRACKET:
		        	        case self::COMMA:
		        	        case self::SEMI:
		        	        	break;

		        	    default:
		        	    	break;
		        	    }
		        	break;

		        	case 15:
		        	    $localContext = new Context\AlterByRenameColumnContext($localContext);
		        	    $this->enterOuterAlt($localContext, 15);
		        	    $this->setState(2741);
		        	    $this->match(self::RENAME);
		        	    $this->setState(2742);
		        	    $this->match(self::COLUMN);
		        	    $this->setState(2743);
		        	    $localContext->oldColumn = $this->uid();
		        	    $this->setState(2744);
		        	    $this->match(self::TO);
		        	    $this->setState(2745);
		        	    $localContext->newColumn = $this->uid();
		        	break;

		        	case 16:
		        	    $localContext = new Context\AlterByLockContext($localContext);
		        	    $this->enterOuterAlt($localContext, 16);
		        	    $this->setState(2747);
		        	    $this->match(self::LOCK);
		        	    $this->setState(2749);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::EQUAL_SYMBOL) {
		        	    	$this->setState(2748);
		        	    	$this->match(self::EQUAL_SYMBOL);
		        	    }
		        	    $this->setState(2751);

		        	    $localContext->lockType = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::DEFAULT || $_la === self::EXCLUSIVE || $_la === self::NONE || $_la === self::SHARED)) {
		        	    	    $localContext->lockType = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	break;

		        	case 17:
		        	    $localContext = new Context\AlterByModifyColumnContext($localContext);
		        	    $this->enterOuterAlt($localContext, 17);
		        	    $this->setState(2752);
		        	    $this->match(self::MODIFY);
		        	    $this->setState(2754);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::COLUMN) {
		        	    	$this->setState(2753);
		        	    	$this->match(self::COLUMN);
		        	    }
		        	    $this->setState(2756);
		        	    $this->uid();
		        	    $this->setState(2757);
		        	    $this->columnDefinition();
		        	    $this->setState(2761);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->input->LA(1)) {
		        	        case self::FIRST:
		        	        	$this->setState(2758);
		        	        	$this->match(self::FIRST);
		        	        	break;

		        	        case self::AFTER:
		        	        	$this->setState(2759);
		        	        	$this->match(self::AFTER);
		        	        	$this->setState(2760);
		        	        	$this->uid();
		        	        	break;

		        	        case self::EOF:
		        	        case self::ALTER:
		        	        case self::ANALYZE:
		        	        case self::CALL:
		        	        case self::CHANGE:
		        	        case self::CHECK:
		        	        case self::CREATE:
		        	        case self::DELETE:
		        	        case self::DESC:
		        	        case self::DESCRIBE:
		        	        case self::DROP:
		        	        case self::EXPLAIN:
		        	        case self::GET:
		        	        case self::GRANT:
		        	        case self::INSERT:
		        	        case self::KILL:
		        	        case self::LOAD:
		        	        case self::LOCK:
		        	        case self::OPTIMIZE:
		        	        case self::PARTITION:
		        	        case self::PURGE:
		        	        case self::RELEASE:
		        	        case self::RENAME:
		        	        case self::REPLACE:
		        	        case self::RESIGNAL:
		        	        case self::REVOKE:
		        	        case self::SELECT:
		        	        case self::SET:
		        	        case self::SHOW:
		        	        case self::SIGNAL:
		        	        case self::TABLE:
		        	        case self::UNLOCK:
		        	        case self::UPDATE:
		        	        case self::USE:
		        	        case self::VALUES:
		        	        case self::WITH:
		        	        case self::BEGIN:
		        	        case self::BINLOG:
		        	        case self::CACHE:
		        	        case self::CHECKSUM:
		        	        case self::COMMIT:
		        	        case self::DEALLOCATE:
		        	        case self::DO:
		        	        case self::FLUSH:
		        	        case self::HANDLER:
		        	        case self::HELP:
		        	        case self::INSTALL:
		        	        case self::PREPARE:
		        	        case self::REPAIR:
		        	        case self::RESET:
		        	        case self::ROLLBACK:
		        	        case self::SAVEPOINT:
		        	        case self::START:
		        	        case self::STOP:
		        	        case self::TRUNCATE:
		        	        case self::UNINSTALL:
		        	        case self::XA:
		        	        case self::EXECUTE:
		        	        case self::SHUTDOWN:
		        	        case self::MINUS:
		        	        case self::LR_BRACKET:
		        	        case self::COMMA:
		        	        case self::SEMI:
		        	        	break;

		        	    default:
		        	    	break;
		        	    }
		        	break;

		        	case 18:
		        	    $localContext = new Context\AlterByDropColumnContext($localContext);
		        	    $this->enterOuterAlt($localContext, 18);
		        	    $this->setState(2763);
		        	    $this->match(self::DROP);
		        	    $this->setState(2765);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::COLUMN) {
		        	    	$this->setState(2764);
		        	    	$this->match(self::COLUMN);
		        	    }
		        	    $this->setState(2767);
		        	    $this->uid();
		        	    $this->setState(2769);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::RESTRICT) {
		        	    	$this->setState(2768);
		        	    	$this->match(self::RESTRICT);
		        	    }
		        	break;

		        	case 19:
		        	    $localContext = new Context\AlterByDropConstraintCheckContext($localContext);
		        	    $this->enterOuterAlt($localContext, 19);
		        	    $this->setState(2771);
		        	    $this->match(self::DROP);
		        	    $this->setState(2772);

		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::CHECK || $_la === self::CONSTRAINT)) {
		        	    $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	    $this->setState(2773);
		        	    $this->uid();
		        	break;

		        	case 20:
		        	    $localContext = new Context\AlterByDropPrimaryKeyContext($localContext);
		        	    $this->enterOuterAlt($localContext, 20);
		        	    $this->setState(2774);
		        	    $this->match(self::DROP);
		        	    $this->setState(2775);
		        	    $this->match(self::PRIMARY);
		        	    $this->setState(2776);
		        	    $this->match(self::KEY);
		        	break;

		        	case 21:
		        	    $localContext = new Context\AlterByDropIndexContext($localContext);
		        	    $this->enterOuterAlt($localContext, 21);
		        	    $this->setState(2777);
		        	    $this->match(self::DROP);
		        	    $this->setState(2778);

		        	    $localContext->indexFormat = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::INDEX || $_la === self::KEY)) {
		        	    	    $localContext->indexFormat = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	    $this->setState(2779);
		        	    $this->uid();
		        	break;

		        	case 22:
		        	    $localContext = new Context\AlterByRenameIndexContext($localContext);
		        	    $this->enterOuterAlt($localContext, 22);
		        	    $this->setState(2780);
		        	    $this->match(self::RENAME);
		        	    $this->setState(2781);

		        	    $localContext->indexFormat = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::INDEX || $_la === self::KEY)) {
		        	    	    $localContext->indexFormat = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	    $this->setState(2782);
		        	    $this->uid();
		        	    $this->setState(2783);
		        	    $this->match(self::TO);
		        	    $this->setState(2784);
		        	    $this->uid();
		        	break;

		        	case 23:
		        	    $localContext = new Context\AlterByAlterColumnDefaultContext($localContext);
		        	    $this->enterOuterAlt($localContext, 23);
		        	    $this->setState(2786);
		        	    $this->match(self::ALTER);
		        	    $this->setState(2788);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::COLUMN) {
		        	    	$this->setState(2787);
		        	    	$this->match(self::COLUMN);
		        	    }
		        	    $this->setState(2790);
		        	    $this->uid();
		        	    $this->setState(2804);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 360, $this->ctx)) {
		        	    	case 1:
		        	    	    $this->setState(2791);
		        	    	    $this->match(self::SET);
		        	    	    $this->setState(2792);
		        	    	    $this->match(self::DEFAULT);
		        	    	    $this->setState(2798);
		        	    	    $this->errorHandler->sync($this);

		        	    	    switch ($this->input->LA(1)) {
		        	    	        case self::START_NATIONAL_STRING_LITERAL:
		        	    	        case self::STRING_LITERAL:
		        	    	        case self::STRING_CHARSET_NAME:
		        	    	        	$this->setState(2793);
		        	    	        	$this->stringLiteral();
		        	    	        	break;

		        	    	        case self::LR_BRACKET:
		        	    	        	$this->setState(2794);
		        	    	        	$this->match(self::LR_BRACKET);
		        	    	        	$this->setState(2795);
		        	    	        	$this->recursiveExpression(0);
		        	    	        	$this->setState(2796);
		        	    	        	$this->match(self::RR_BRACKET);
		        	    	        	break;

		        	    	    default:
		        	    	    	throw new NoViableAltException($this);
		        	    	    }
		        	    	break;

		        	    	case 2:
		        	    	    $this->setState(2800);
		        	    	    $this->match(self::SET);
		        	    	    $this->setState(2801);

		        	    	    $_la = $this->input->LA(1);

		        	    	    if (!($_la === self::INVISIBLE || $_la === self::VISIBLE)) {
		        	    	    $this->errorHandler->recoverInline($this);
		        	    	    } else {
		        	    	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    	    $this->matchedEOF = true;
		        	    	        }

		        	    	    	$this->errorHandler->reportMatch($this);
		        	    	    	$this->consume();
		        	    	    }
		        	    	break;

		        	    	case 3:
		        	    	    $this->setState(2802);
		        	    	    $this->match(self::DROP);
		        	    	    $this->setState(2803);
		        	    	    $this->match(self::DEFAULT);
		        	    	break;
		        	    }
		        	break;

		        	case 24:
		        	    $localContext = new Context\AlterByAlterIndexVisibilityContext($localContext);
		        	    $this->enterOuterAlt($localContext, 24);
		        	    $this->setState(2806);
		        	    $this->match(self::ALTER);
		        	    $this->setState(2807);
		        	    $this->match(self::INDEX);
		        	    $this->setState(2808);
		        	    $this->uid();
		        	    $this->setState(2809);

		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::INVISIBLE || $_la === self::VISIBLE)) {
		        	    $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	break;

		        	case 25:
		        	    $localContext = new Context\AlterByDropForeignKeyContext($localContext);
		        	    $this->enterOuterAlt($localContext, 25);
		        	    $this->setState(2811);
		        	    $this->match(self::DROP);
		        	    $this->setState(2812);
		        	    $this->match(self::FOREIGN);
		        	    $this->setState(2813);
		        	    $this->match(self::KEY);
		        	    $this->setState(2814);
		        	    $this->uid();
		        	break;

		        	case 26:
		        	    $localContext = new Context\AlterByDisableKeysContext($localContext);
		        	    $this->enterOuterAlt($localContext, 26);
		        	    $this->setState(2815);
		        	    $this->match(self::DISABLE);
		        	    $this->setState(2816);
		        	    $this->match(self::KEYS);
		        	break;

		        	case 27:
		        	    $localContext = new Context\AlterByEnableKeysContext($localContext);
		        	    $this->enterOuterAlt($localContext, 27);
		        	    $this->setState(2817);
		        	    $this->match(self::ENABLE);
		        	    $this->setState(2818);
		        	    $this->match(self::KEYS);
		        	break;

		        	case 28:
		        	    $localContext = new Context\AlterByRenameContext($localContext);
		        	    $this->enterOuterAlt($localContext, 28);
		        	    $this->setState(2819);
		        	    $this->match(self::RENAME);
		        	    $this->setState(2821);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::AS || $_la === self::TO) {
		        	    	$this->setState(2820);

		        	    	$localContext->renameFormat = $this->input->LT(1);
		        	    	$_la = $this->input->LA(1);

		        	    	if (!($_la === self::AS || $_la === self::TO)) {
		        	    		    $localContext->renameFormat = $this->errorHandler->recoverInline($this);
		        	    	} else {
		        	    		if ($this->input->LA(1) === Token::EOF) {
		        	    		    $this->matchedEOF = true;
		        	    	    }

		        	    		$this->errorHandler->reportMatch($this);
		        	    		$this->consume();
		        	    	}
		        	    }
		        	    $this->setState(2825);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 362, $this->ctx)) {
		        	    	case 1:
		        	    	    $this->setState(2823);
		        	    	    $this->uid();
		        	    	break;

		        	    	case 2:
		        	    	    $this->setState(2824);
		        	    	    $this->fullId();
		        	    	break;
		        	    }
		        	break;

		        	case 29:
		        	    $localContext = new Context\AlterByOrderContext($localContext);
		        	    $this->enterOuterAlt($localContext, 29);
		        	    $this->setState(2827);
		        	    $this->match(self::ORDER);
		        	    $this->setState(2828);
		        	    $this->match(self::BY);
		        	    $this->setState(2829);
		        	    $this->uidList();
		        	break;

		        	case 30:
		        	    $localContext = new Context\AlterByConvertCharsetContext($localContext);
		        	    $this->enterOuterAlt($localContext, 30);
		        	    $this->setState(2830);
		        	    $this->match(self::CONVERT);
		        	    $this->setState(2831);
		        	    $this->match(self::TO);
		        	    $this->setState(2835);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->input->LA(1)) {
		        	        case self::CHARSET:
		        	        	$this->setState(2832);
		        	        	$this->match(self::CHARSET);
		        	        	break;

		        	        case self::CHARACTER:
		        	        	$this->setState(2833);
		        	        	$this->match(self::CHARACTER);
		        	        	$this->setState(2834);
		        	        	$this->match(self::SET);
		        	        	break;

		        	    default:
		        	    	throw new NoViableAltException($this);
		        	    }
		        	    $this->setState(2837);
		        	    $this->charsetName();
		        	    $this->setState(2840);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::COLLATE) {
		        	    	$this->setState(2838);
		        	    	$this->match(self::COLLATE);
		        	    	$this->setState(2839);
		        	    	$this->collationName();
		        	    }
		        	break;

		        	case 31:
		        	    $localContext = new Context\AlterByDefaultCharsetContext($localContext);
		        	    $this->enterOuterAlt($localContext, 31);
		        	    $this->setState(2843);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::DEFAULT) {
		        	    	$this->setState(2842);
		        	    	$this->match(self::DEFAULT);
		        	    }
		        	    $this->setState(2845);
		        	    $this->match(self::CHARACTER);
		        	    $this->setState(2846);
		        	    $this->match(self::SET);
		        	    $this->setState(2847);
		        	    $this->match(self::EQUAL_SYMBOL);
		        	    $this->setState(2848);
		        	    $this->charsetName();
		        	    $this->setState(2852);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::COLLATE) {
		        	    	$this->setState(2849);
		        	    	$this->match(self::COLLATE);
		        	    	$this->setState(2850);
		        	    	$this->match(self::EQUAL_SYMBOL);
		        	    	$this->setState(2851);
		        	    	$this->collationName();
		        	    }
		        	break;

		        	case 32:
		        	    $localContext = new Context\AlterByDiscardTablespaceContext($localContext);
		        	    $this->enterOuterAlt($localContext, 32);
		        	    $this->setState(2854);
		        	    $this->match(self::DISCARD);
		        	    $this->setState(2855);
		        	    $this->match(self::TABLESPACE);
		        	break;

		        	case 33:
		        	    $localContext = new Context\AlterByImportTablespaceContext($localContext);
		        	    $this->enterOuterAlt($localContext, 33);
		        	    $this->setState(2856);
		        	    $this->match(self::IMPORT);
		        	    $this->setState(2857);
		        	    $this->match(self::TABLESPACE);
		        	break;

		        	case 34:
		        	    $localContext = new Context\AlterByForceContext($localContext);
		        	    $this->enterOuterAlt($localContext, 34);
		        	    $this->setState(2858);
		        	    $this->match(self::FORCE);
		        	break;

		        	case 35:
		        	    $localContext = new Context\AlterByValidateContext($localContext);
		        	    $this->enterOuterAlt($localContext, 35);
		        	    $this->setState(2859);

		        	    $localContext->validationFormat = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::WITH || $_la === self::WITHOUT)) {
		        	    	    $localContext->validationFormat = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	    $this->setState(2860);
		        	    $this->match(self::VALIDATION);
		        	break;

		        	case 36:
		        	    $localContext = new Context\AlterByAddDefinitionsContext($localContext);
		        	    $this->enterOuterAlt($localContext, 36);
		        	    $this->setState(2861);
		        	    $this->match(self::ADD);
		        	    $this->setState(2863);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::COLUMN) {
		        	    	$this->setState(2862);
		        	    	$this->match(self::COLUMN);
		        	    }
		        	    $this->setState(2865);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(2866);
		        	    $this->createDefinition();
		        	    $this->setState(2871);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::COMMA) {
		        	    	$this->setState(2867);
		        	    	$this->match(self::COMMA);
		        	    	$this->setState(2868);
		        	    	$this->createDefinition();
		        	    	$this->setState(2873);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	    $this->setState(2874);
		        	    $this->match(self::RR_BRACKET);
		        	break;

		        	case 37:
		        	    $localContext = new Context\AlterPartitionContext($localContext);
		        	    $this->enterOuterAlt($localContext, 37);
		        	    $this->setState(2876);
		        	    $this->alterPartitionSpecification();
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function alterPartitionSpecification(): Context\AlterPartitionSpecificationContext
		{
		    $localContext = new Context\AlterPartitionSpecificationContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 150, self::RULE_alterPartitionSpecification);

		    try {
		        $this->setState(2977);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::ADD:
		            	$localContext = new Context\AlterByAddPartitionContext($localContext);
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(2879);
		            	$this->match(self::ADD);
		            	$this->setState(2880);
		            	$this->match(self::PARTITION);
		            	$this->setState(2881);
		            	$this->match(self::LR_BRACKET);
		            	$this->setState(2882);
		            	$this->partitionDefinition();
		            	$this->setState(2887);
		            	$this->errorHandler->sync($this);

		            	$_la = $this->input->LA(1);
		            	while ($_la === self::COMMA) {
		            		$this->setState(2883);
		            		$this->match(self::COMMA);
		            		$this->setState(2884);
		            		$this->partitionDefinition();
		            		$this->setState(2889);
		            		$this->errorHandler->sync($this);
		            		$_la = $this->input->LA(1);
		            	}
		            	$this->setState(2890);
		            	$this->match(self::RR_BRACKET);
		            	break;

		            case self::DROP:
		            	$localContext = new Context\AlterByDropPartitionContext($localContext);
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(2892);
		            	$this->match(self::DROP);
		            	$this->setState(2893);
		            	$this->match(self::PARTITION);
		            	$this->setState(2894);
		            	$this->uidList();
		            	break;

		            case self::DISCARD:
		            	$localContext = new Context\AlterByDiscardPartitionContext($localContext);
		            	$this->enterOuterAlt($localContext, 3);
		            	$this->setState(2895);
		            	$this->match(self::DISCARD);
		            	$this->setState(2896);
		            	$this->match(self::PARTITION);
		            	$this->setState(2899);
		            	$this->errorHandler->sync($this);

		            	switch ($this->input->LA(1)) {
		            	    case self::ARRAY:
		            	    case self::ATTRIBUTE:
		            	    case self::BUCKETS:
		            	    case self::CONDITION:
		            	    case self::CURRENT:
		            	    case self::CURRENT_USER:
		            	    case self::DATABASE:
		            	    case self::DEFAULT:
		            	    case self::DIAGNOSTICS:
		            	    case self::EMPTY:
		            	    case self::ENFORCED:
		            	    case self::EXCEPT:
		            	    case self::GROUP:
		            	    case self::IF:
		            	    case self::IGNORED:
		            	    case self::INSERT:
		            	    case self::LATERAL:
		            	    case self::LEFT:
		            	    case self::NUMBER:
		            	    case self::OPTIONAL:
		            	    case self::ORDER:
		            	    case self::PRIMARY:
		            	    case self::REPEAT:
		            	    case self::REPLACE:
		            	    case self::RIGHT:
		            	    case self::SCHEMA:
		            	    case self::SKIP_QUERY_REWRITE:
		            	    case self::STACKED:
		            	    case self::DATE:
		            	    case self::TIME:
		            	    case self::TIMESTAMP:
		            	    case self::DATETIME:
		            	    case self::YEAR:
		            	    case self::BINARY:
		            	    case self::TEXT:
		            	    case self::ENUM:
		            	    case self::SERIAL:
		            	    case self::JSON_ARRAY:
		            	    case self::JSON_ARRAYAGG:
		            	    case self::JSON_ARRAY_APPEND:
		            	    case self::JSON_ARRAY_INSERT:
		            	    case self::JSON_CONTAINS:
		            	    case self::JSON_CONTAINS_PATH:
		            	    case self::JSON_DEPTH:
		            	    case self::JSON_EXTRACT:
		            	    case self::JSON_INSERT:
		            	    case self::JSON_KEYS:
		            	    case self::JSON_LENGTH:
		            	    case self::JSON_MERGE:
		            	    case self::JSON_MERGE_PATCH:
		            	    case self::JSON_MERGE_PRESERVE:
		            	    case self::JSON_OBJECT:
		            	    case self::JSON_OBJECTAGG:
		            	    case self::JSON_OVERLAPS:
		            	    case self::JSON_PRETTY:
		            	    case self::JSON_QUOTE:
		            	    case self::JSON_REMOVE:
		            	    case self::JSON_REPLACE:
		            	    case self::JSON_SCHEMA_VALID:
		            	    case self::JSON_SCHEMA_VALIDATION_REPORT:
		            	    case self::JSON_SEARCH:
		            	    case self::JSON_SET:
		            	    case self::JSON_STORAGE_FREE:
		            	    case self::JSON_STORAGE_SIZE:
		            	    case self::JSON_TABLE:
		            	    case self::JSON_TYPE:
		            	    case self::JSON_UNQUOTE:
		            	    case self::JSON_VALID:
		            	    case self::JSON_VALUE:
		            	    case self::NESTED:
		            	    case self::ORDINALITY:
		            	    case self::PATH:
		            	    case self::AVG:
		            	    case self::BIT_AND:
		            	    case self::BIT_OR:
		            	    case self::BIT_XOR:
		            	    case self::COUNT:
		            	    case self::CUME_DIST:
		            	    case self::DENSE_RANK:
		            	    case self::FIRST_VALUE:
		            	    case self::GROUP_CONCAT:
		            	    case self::LAG:
		            	    case self::LAST_VALUE:
		            	    case self::LEAD:
		            	    case self::MAX:
		            	    case self::MIN:
		            	    case self::NTILE:
		            	    case self::NTH_VALUE:
		            	    case self::PERCENT_RANK:
		            	    case self::RANK:
		            	    case self::ROW_NUMBER:
		            	    case self::STD:
		            	    case self::STDDEV:
		            	    case self::STDDEV_POP:
		            	    case self::STDDEV_SAMP:
		            	    case self::SUM:
		            	    case self::VAR_POP:
		            	    case self::VAR_SAMP:
		            	    case self::VARIANCE:
		            	    case self::CURRENT_DATE:
		            	    case self::CURRENT_TIME:
		            	    case self::CURRENT_TIMESTAMP:
		            	    case self::LOCALTIME:
		            	    case self::CURDATE:
		            	    case self::CURTIME:
		            	    case self::DATE_ADD:
		            	    case self::DATE_SUB:
		            	    case self::LOCALTIMESTAMP:
		            	    case self::NOW:
		            	    case self::POSITION:
		            	    case self::SUBSTR:
		            	    case self::SUBSTRING:
		            	    case self::SYSDATE:
		            	    case self::TRIM:
		            	    case self::UTC_DATE:
		            	    case self::UTC_TIME:
		            	    case self::UTC_TIMESTAMP:
		            	    case self::ACCOUNT:
		            	    case self::ACTION:
		            	    case self::AFTER:
		            	    case self::AGGREGATE:
		            	    case self::ALGORITHM:
		            	    case self::ANY:
		            	    case self::AT:
		            	    case self::AUTHORS:
		            	    case self::AUTOCOMMIT:
		            	    case self::AUTOEXTEND_SIZE:
		            	    case self::AUTO_INCREMENT:
		            	    case self::AVG_ROW_LENGTH:
		            	    case self::BEGIN:
		            	    case self::BINLOG:
		            	    case self::BIT:
		            	    case self::BLOCK:
		            	    case self::BOOL:
		            	    case self::BOOLEAN:
		            	    case self::BTREE:
		            	    case self::CACHE:
		            	    case self::CASCADED:
		            	    case self::CHAIN:
		            	    case self::CHANGED:
		            	    case self::CHANNEL:
		            	    case self::CHECKSUM:
		            	    case self::PAGE_CHECKSUM:
		            	    case self::CIPHER:
		            	    case self::CLASS_ORIGIN:
		            	    case self::CLIENT:
		            	    case self::CLOSE:
		            	    case self::CLUSTERING:
		            	    case self::COALESCE:
		            	    case self::CODE:
		            	    case self::COLUMNS:
		            	    case self::COLUMN_FORMAT:
		            	    case self::COLUMN_NAME:
		            	    case self::COMMENT:
		            	    case self::COMMIT:
		            	    case self::COMPACT:
		            	    case self::COMPLETION:
		            	    case self::COMPRESSED:
		            	    case self::COMPRESSION:
		            	    case self::CONCURRENT:
		            	    case self::CONNECT:
		            	    case self::CONNECTION:
		            	    case self::CONSISTENT:
		            	    case self::CONSTRAINT_CATALOG:
		            	    case self::CONSTRAINT_SCHEMA:
		            	    case self::CONSTRAINT_NAME:
		            	    case self::CONTAINS:
		            	    case self::CONTEXT:
		            	    case self::CONTRIBUTORS:
		            	    case self::COPY:
		            	    case self::CPU:
		            	    case self::CURSOR_NAME:
		            	    case self::DATA:
		            	    case self::DATAFILE:
		            	    case self::DEALLOCATE:
		            	    case self::DEFAULT_AUTH:
		            	    case self::DEFINER:
		            	    case self::DELAY_KEY_WRITE:
		            	    case self::DES_KEY_FILE:
		            	    case self::DIRECTORY:
		            	    case self::DISABLE:
		            	    case self::DISCARD:
		            	    case self::DISK:
		            	    case self::DO:
		            	    case self::DUMPFILE:
		            	    case self::DUPLICATE:
		            	    case self::DYNAMIC:
		            	    case self::ENABLE:
		            	    case self::ENCRYPTION:
		            	    case self::END:
		            	    case self::ENDS:
		            	    case self::ENGINE:
		            	    case self::ENGINES:
		            	    case self::ERROR:
		            	    case self::ERRORS:
		            	    case self::ESCAPE:
		            	    case self::EVEN:
		            	    case self::EVENT:
		            	    case self::EVENTS:
		            	    case self::EVERY:
		            	    case self::EXCHANGE:
		            	    case self::EXCLUSIVE:
		            	    case self::EXPIRE:
		            	    case self::EXPORT:
		            	    case self::EXTENDED:
		            	    case self::EXTENT_SIZE:
		            	    case self::FAILED_LOGIN_ATTEMPTS:
		            	    case self::FAST:
		            	    case self::FAULTS:
		            	    case self::FIELDS:
		            	    case self::FILE_BLOCK_SIZE:
		            	    case self::FILTER:
		            	    case self::FIRST:
		            	    case self::FIXED:
		            	    case self::FLUSH:
		            	    case self::FOLLOWS:
		            	    case self::FOUND:
		            	    case self::FULL:
		            	    case self::FUNCTION:
		            	    case self::GENERAL:
		            	    case self::GLOBAL:
		            	    case self::GRANTS:
		            	    case self::GROUP_REPLICATION:
		            	    case self::HANDLER:
		            	    case self::HASH:
		            	    case self::HELP:
		            	    case self::HISTORY:
		            	    case self::HOST:
		            	    case self::HOSTS:
		            	    case self::IDENTIFIED:
		            	    case self::IGNORE_SERVER_IDS:
		            	    case self::IMPORT:
		            	    case self::INDEXES:
		            	    case self::INITIAL_SIZE:
		            	    case self::INPLACE:
		            	    case self::INSERT_METHOD:
		            	    case self::INSTALL:
		            	    case self::INSTANCE:
		            	    case self::INSTANT:
		            	    case self::INVISIBLE:
		            	    case self::INVOKER:
		            	    case self::IO:
		            	    case self::IO_THREAD:
		            	    case self::IPC:
		            	    case self::ISOLATION:
		            	    case self::ISSUER:
		            	    case self::JSON:
		            	    case self::KEY_BLOCK_SIZE:
		            	    case self::LANGUAGE:
		            	    case self::LAST:
		            	    case self::LEAVES:
		            	    case self::LESS:
		            	    case self::LEVEL:
		            	    case self::LIST:
		            	    case self::LOCAL:
		            	    case self::LOGFILE:
		            	    case self::LOGS:
		            	    case self::MASTER:
		            	    case self::MASTER_AUTO_POSITION:
		            	    case self::MASTER_CONNECT_RETRY:
		            	    case self::MASTER_DELAY:
		            	    case self::MASTER_HEARTBEAT_PERIOD:
		            	    case self::MASTER_HOST:
		            	    case self::MASTER_LOG_FILE:
		            	    case self::MASTER_LOG_POS:
		            	    case self::MASTER_PASSWORD:
		            	    case self::MASTER_PORT:
		            	    case self::MASTER_RETRY_COUNT:
		            	    case self::MASTER_SSL:
		            	    case self::MASTER_SSL_CA:
		            	    case self::MASTER_SSL_CAPATH:
		            	    case self::MASTER_SSL_CERT:
		            	    case self::MASTER_SSL_CIPHER:
		            	    case self::MASTER_SSL_CRL:
		            	    case self::MASTER_SSL_CRLPATH:
		            	    case self::MASTER_SSL_KEY:
		            	    case self::MASTER_TLS_VERSION:
		            	    case self::MASTER_USER:
		            	    case self::MAX_CONNECTIONS_PER_HOUR:
		            	    case self::MAX_QUERIES_PER_HOUR:
		            	    case self::MAX_ROWS:
		            	    case self::MAX_SIZE:
		            	    case self::MAX_UPDATES_PER_HOUR:
		            	    case self::MAX_USER_CONNECTIONS:
		            	    case self::MEDIUM:
		            	    case self::MEMBER:
		            	    case self::MERGE:
		            	    case self::MESSAGE_TEXT:
		            	    case self::MID:
		            	    case self::MIGRATE:
		            	    case self::MIN_ROWS:
		            	    case self::MODE:
		            	    case self::MODIFY:
		            	    case self::MUTEX:
		            	    case self::MYSQL:
		            	    case self::MYSQL_ERRNO:
		            	    case self::NAME:
		            	    case self::NAMES:
		            	    case self::NCHAR:
		            	    case self::NEVER:
		            	    case self::NEXT:
		            	    case self::NO:
		            	    case self::NOCOPY:
		            	    case self::NOWAIT:
		            	    case self::NODEGROUP:
		            	    case self::NONE:
		            	    case self::ODBC:
		            	    case self::OFFLINE:
		            	    case self::OFFSET:
		            	    case self::OF:
		            	    case self::OJ:
		            	    case self::OLD_PASSWORD:
		            	    case self::ONE:
		            	    case self::ONLINE:
		            	    case self::ONLY:
		            	    case self::OPEN:
		            	    case self::OPTIMIZER_COSTS:
		            	    case self::OPTIONS:
		            	    case self::OWNER:
		            	    case self::PACK_KEYS:
		            	    case self::PAGE:
		            	    case self::PARSER:
		            	    case self::PARTIAL:
		            	    case self::PARTITIONING:
		            	    case self::PARTITIONS:
		            	    case self::PASSWORD:
		            	    case self::PASSWORD_LOCK_TIME:
		            	    case self::PHASE:
		            	    case self::PLUGIN:
		            	    case self::PLUGIN_DIR:
		            	    case self::PLUGINS:
		            	    case self::PORT:
		            	    case self::PRECEDES:
		            	    case self::PREPARE:
		            	    case self::PRESERVE:
		            	    case self::PREV:
		            	    case self::PROCESSLIST:
		            	    case self::PROFILE:
		            	    case self::PROFILES:
		            	    case self::PROXY:
		            	    case self::QUERY:
		            	    case self::QUICK:
		            	    case self::REBUILD:
		            	    case self::RECOVER:
		            	    case self::RECURSIVE:
		            	    case self::REDO_BUFFER_SIZE:
		            	    case self::REDUNDANT:
		            	    case self::RELAY:
		            	    case self::RELAY_LOG_FILE:
		            	    case self::RELAY_LOG_POS:
		            	    case self::RELAYLOG:
		            	    case self::REMOVE:
		            	    case self::REORGANIZE:
		            	    case self::REPAIR:
		            	    case self::REPLICATE_DO_DB:
		            	    case self::REPLICATE_DO_TABLE:
		            	    case self::REPLICATE_IGNORE_DB:
		            	    case self::REPLICATE_IGNORE_TABLE:
		            	    case self::REPLICATE_REWRITE_DB:
		            	    case self::REPLICATE_WILD_DO_TABLE:
		            	    case self::REPLICATE_WILD_IGNORE_TABLE:
		            	    case self::REPLICATION:
		            	    case self::RESET:
		            	    case self::RESUME:
		            	    case self::RETURNED_SQLSTATE:
		            	    case self::RETURNS:
		            	    case self::REUSE:
		            	    case self::ROLE:
		            	    case self::ROLLBACK:
		            	    case self::ROLLUP:
		            	    case self::ROTATE:
		            	    case self::ROW:
		            	    case self::ROWS:
		            	    case self::ROW_FORMAT:
		            	    case self::RTREE:
		            	    case self::SAVEPOINT:
		            	    case self::SCHEDULE:
		            	    case self::SECURITY:
		            	    case self::SERVER:
		            	    case self::SESSION:
		            	    case self::SHARE:
		            	    case self::SHARED:
		            	    case self::SIGNED:
		            	    case self::SIMPLE:
		            	    case self::SLAVE:
		            	    case self::SLOW:
		            	    case self::SNAPSHOT:
		            	    case self::SOCKET:
		            	    case self::SOME:
		            	    case self::SONAME:
		            	    case self::SOUNDS:
		            	    case self::SOURCE:
		            	    case self::SQL_AFTER_GTIDS:
		            	    case self::SQL_AFTER_MTS_GAPS:
		            	    case self::SQL_BEFORE_GTIDS:
		            	    case self::SQL_BUFFER_RESULT:
		            	    case self::SQL_CACHE:
		            	    case self::SQL_NO_CACHE:
		            	    case self::SQL_THREAD:
		            	    case self::START:
		            	    case self::STARTS:
		            	    case self::STATS_AUTO_RECALC:
		            	    case self::STATS_PERSISTENT:
		            	    case self::STATS_SAMPLE_PAGES:
		            	    case self::STATUS:
		            	    case self::STOP:
		            	    case self::STORAGE:
		            	    case self::STRING:
		            	    case self::SUBCLASS_ORIGIN:
		            	    case self::SUBJECT:
		            	    case self::SUBPARTITION:
		            	    case self::SUBPARTITIONS:
		            	    case self::SUSPEND:
		            	    case self::SWAPS:
		            	    case self::SWITCHES:
		            	    case self::TABLE_NAME:
		            	    case self::TABLESPACE:
		            	    case self::TABLE_TYPE:
		            	    case self::TEMPORARY:
		            	    case self::TEMPTABLE:
		            	    case self::THAN:
		            	    case self::TRADITIONAL:
		            	    case self::TRANSACTION:
		            	    case self::TRANSACTIONAL:
		            	    case self::TRIGGERS:
		            	    case self::TRUNCATE:
		            	    case self::UNBOUNDED:
		            	    case self::UNDEFINED:
		            	    case self::UNDOFILE:
		            	    case self::UNDO_BUFFER_SIZE:
		            	    case self::UNINSTALL:
		            	    case self::UNKNOWN:
		            	    case self::UNTIL:
		            	    case self::UPGRADE:
		            	    case self::USER:
		            	    case self::USE_FRM:
		            	    case self::USER_RESOURCES:
		            	    case self::VALIDATION:
		            	    case self::VALUE:
		            	    case self::VARIABLES:
		            	    case self::VIEW:
		            	    case self::VIRTUAL:
		            	    case self::VISIBLE:
		            	    case self::WAIT:
		            	    case self::WARNINGS:
		            	    case self::WITHOUT:
		            	    case self::WORK:
		            	    case self::WRAPPER:
		            	    case self::X509:
		            	    case self::XA:
		            	    case self::XML:
		            	    case self::EUR:
		            	    case self::USA:
		            	    case self::JIS:
		            	    case self::ISO:
		            	    case self::INTERNAL:
		            	    case self::QUARTER:
		            	    case self::MONTH:
		            	    case self::DAY:
		            	    case self::HOUR:
		            	    case self::MINUTE:
		            	    case self::WEEK:
		            	    case self::SECOND:
		            	    case self::MICROSECOND:
		            	    case self::ADMIN:
		            	    case self::AUDIT_ABORT_EXEMPT:
		            	    case self::AUDIT_ADMIN:
		            	    case self::AUTHENTICATION_POLICY_ADMIN:
		            	    case self::BACKUP_ADMIN:
		            	    case self::BINLOG_ADMIN:
		            	    case self::BINLOG_ENCRYPTION_ADMIN:
		            	    case self::CLONE_ADMIN:
		            	    case self::CONNECTION_ADMIN:
		            	    case self::ENCRYPTION_KEY_ADMIN:
		            	    case self::EXECUTE:
		            	    case self::FILE:
		            	    case self::FIREWALL_ADMIN:
		            	    case self::FIREWALL_EXEMPT:
		            	    case self::FIREWALL_USER:
		            	    case self::GROUP_REPLICATION_ADMIN:
		            	    case self::INNODB_REDO_LOG_ARCHIVE:
		            	    case self::INVOKE:
		            	    case self::LAMBDA:
		            	    case self::NDB_STORED_USER:
		            	    case self::PASSWORDLESS_USER_ADMIN:
		            	    case self::PERSIST_RO_VARIABLES_ADMIN:
		            	    case self::PRIVILEGES:
		            	    case self::PROCESS:
		            	    case self::RELOAD:
		            	    case self::REPLICATION_APPLIER:
		            	    case self::REPLICATION_SLAVE_ADMIN:
		            	    case self::RESOURCE_GROUP_ADMIN:
		            	    case self::RESOURCE_GROUP_USER:
		            	    case self::ROLE_ADMIN:
		            	    case self::ROUTINE:
		            	    case self::S3:
		            	    case self::SESSION_VARIABLES_ADMIN:
		            	    case self::SET_USER_ID:
		            	    case self::SHOW_ROUTINE:
		            	    case self::SHUTDOWN:
		            	    case self::SUPER:
		            	    case self::SYSTEM_VARIABLES_ADMIN:
		            	    case self::TABLES:
		            	    case self::TABLE_ENCRYPTION_ADMIN:
		            	    case self::VERSION_TOKEN_ADMIN:
		            	    case self::XA_RECOVER_ADMIN:
		            	    case self::ARMSCII8:
		            	    case self::ASCII:
		            	    case self::BIG5:
		            	    case self::CP1250:
		            	    case self::CP1251:
		            	    case self::CP1256:
		            	    case self::CP1257:
		            	    case self::CP850:
		            	    case self::CP852:
		            	    case self::CP866:
		            	    case self::CP932:
		            	    case self::DEC8:
		            	    case self::EUCJPMS:
		            	    case self::EUCKR:
		            	    case self::GB18030:
		            	    case self::GB2312:
		            	    case self::GBK:
		            	    case self::GEOSTD8:
		            	    case self::GREEK:
		            	    case self::HEBREW:
		            	    case self::HP8:
		            	    case self::KEYBCS2:
		            	    case self::KOI8R:
		            	    case self::KOI8U:
		            	    case self::LATIN1:
		            	    case self::LATIN2:
		            	    case self::LATIN5:
		            	    case self::LATIN7:
		            	    case self::MACCE:
		            	    case self::MACROMAN:
		            	    case self::SJIS:
		            	    case self::SWE7:
		            	    case self::TIS620:
		            	    case self::UCS2:
		            	    case self::UJIS:
		            	    case self::UTF16:
		            	    case self::UTF16LE:
		            	    case self::UTF32:
		            	    case self::UTF8:
		            	    case self::UTF8MB3:
		            	    case self::UTF8MB4:
		            	    case self::ARCHIVE:
		            	    case self::BLACKHOLE:
		            	    case self::CSV:
		            	    case self::FEDERATED:
		            	    case self::INNODB:
		            	    case self::MEMORY:
		            	    case self::MRG_MYISAM:
		            	    case self::MYISAM:
		            	    case self::NDB:
		            	    case self::NDBCLUSTER:
		            	    case self::PERFORMANCE_SCHEMA:
		            	    case self::TOKUDB:
		            	    case self::REPEATABLE:
		            	    case self::COMMITTED:
		            	    case self::UNCOMMITTED:
		            	    case self::SERIALIZABLE:
		            	    case self::GEOMETRYCOLLECTION:
		            	    case self::LINESTRING:
		            	    case self::MULTILINESTRING:
		            	    case self::MULTIPOINT:
		            	    case self::MULTIPOLYGON:
		            	    case self::POINT:
		            	    case self::POLYGON:
		            	    case self::ABS:
		            	    case self::ACOS:
		            	    case self::ADDDATE:
		            	    case self::ADDTIME:
		            	    case self::AES_DECRYPT:
		            	    case self::AES_ENCRYPT:
		            	    case self::AREA:
		            	    case self::ASBINARY:
		            	    case self::ASIN:
		            	    case self::ASTEXT:
		            	    case self::ASWKB:
		            	    case self::ASWKT:
		            	    case self::ASYMMETRIC_DECRYPT:
		            	    case self::ASYMMETRIC_DERIVE:
		            	    case self::ASYMMETRIC_ENCRYPT:
		            	    case self::ASYMMETRIC_SIGN:
		            	    case self::ASYMMETRIC_VERIFY:
		            	    case self::ATAN:
		            	    case self::ATAN2:
		            	    case self::BENCHMARK:
		            	    case self::BIN:
		            	    case self::BIT_COUNT:
		            	    case self::BIT_LENGTH:
		            	    case self::BUFFER:
		            	    case self::CATALOG_NAME:
		            	    case self::CEIL:
		            	    case self::CEILING:
		            	    case self::CENTROID:
		            	    case self::CHARACTER_LENGTH:
		            	    case self::CHARSET:
		            	    case self::CHAR_LENGTH:
		            	    case self::COERCIBILITY:
		            	    case self::COLLATION:
		            	    case self::COMPRESS:
		            	    case self::CONCAT:
		            	    case self::CONCAT_WS:
		            	    case self::CONNECTION_ID:
		            	    case self::CONV:
		            	    case self::CONVERT_TZ:
		            	    case self::COS:
		            	    case self::COT:
		            	    case self::CRC32:
		            	    case self::CREATE_ASYMMETRIC_PRIV_KEY:
		            	    case self::CREATE_ASYMMETRIC_PUB_KEY:
		            	    case self::CREATE_DH_PARAMETERS:
		            	    case self::CREATE_DIGEST:
		            	    case self::CROSSES:
		            	    case self::DATEDIFF:
		            	    case self::DATE_FORMAT:
		            	    case self::DAYNAME:
		            	    case self::DAYOFMONTH:
		            	    case self::DAYOFWEEK:
		            	    case self::DAYOFYEAR:
		            	    case self::DECODE:
		            	    case self::DEGREES:
		            	    case self::DES_DECRYPT:
		            	    case self::DES_ENCRYPT:
		            	    case self::DIMENSION:
		            	    case self::DISJOINT:
		            	    case self::ELT:
		            	    case self::ENCODE:
		            	    case self::ENCRYPT:
		            	    case self::ENDPOINT:
		            	    case self::ENGINE_ATTRIBUTE:
		            	    case self::ENVELOPE:
		            	    case self::EQUALS:
		            	    case self::EXP:
		            	    case self::EXPORT_SET:
		            	    case self::EXTERIORRING:
		            	    case self::EXTRACTVALUE:
		            	    case self::FIELD:
		            	    case self::FIND_IN_SET:
		            	    case self::FLOOR:
		            	    case self::FORMAT:
		            	    case self::FOUND_ROWS:
		            	    case self::FROM_BASE64:
		            	    case self::FROM_DAYS:
		            	    case self::FROM_UNIXTIME:
		            	    case self::GEOMCOLLFROMTEXT:
		            	    case self::GEOMCOLLFROMWKB:
		            	    case self::GEOMETRYCOLLECTIONFROMTEXT:
		            	    case self::GEOMETRYCOLLECTIONFROMWKB:
		            	    case self::GEOMETRYFROMTEXT:
		            	    case self::GEOMETRYFROMWKB:
		            	    case self::GEOMETRYN:
		            	    case self::GEOMETRYTYPE:
		            	    case self::GEOMFROMTEXT:
		            	    case self::GEOMFROMWKB:
		            	    case self::GET_FORMAT:
		            	    case self::GET_LOCK:
		            	    case self::GLENGTH:
		            	    case self::GREATEST:
		            	    case self::GTID_SUBSET:
		            	    case self::GTID_SUBTRACT:
		            	    case self::HEX:
		            	    case self::IFNULL:
		            	    case self::INET6_ATON:
		            	    case self::INET6_NTOA:
		            	    case self::INET_ATON:
		            	    case self::INET_NTOA:
		            	    case self::INSTR:
		            	    case self::INTERIORRINGN:
		            	    case self::INTERSECTS:
		            	    case self::ISCLOSED:
		            	    case self::ISEMPTY:
		            	    case self::ISNULL:
		            	    case self::ISSIMPLE:
		            	    case self::IS_FREE_LOCK:
		            	    case self::IS_IPV4:
		            	    case self::IS_IPV4_COMPAT:
		            	    case self::IS_IPV4_MAPPED:
		            	    case self::IS_IPV6:
		            	    case self::IS_USED_LOCK:
		            	    case self::LAST_INSERT_ID:
		            	    case self::LCASE:
		            	    case self::LEAST:
		            	    case self::LENGTH:
		            	    case self::LINEFROMTEXT:
		            	    case self::LINEFROMWKB:
		            	    case self::LINESTRINGFROMTEXT:
		            	    case self::LINESTRINGFROMWKB:
		            	    case self::LN:
		            	    case self::LOAD_FILE:
		            	    case self::LOCATE:
		            	    case self::LOG:
		            	    case self::LOG10:
		            	    case self::LOG2:
		            	    case self::LOWER:
		            	    case self::LPAD:
		            	    case self::LTRIM:
		            	    case self::MAKEDATE:
		            	    case self::MAKETIME:
		            	    case self::MAKE_SET:
		            	    case self::MASTER_POS_WAIT:
		            	    case self::MBRCONTAINS:
		            	    case self::MBRDISJOINT:
		            	    case self::MBREQUAL:
		            	    case self::MBRINTERSECTS:
		            	    case self::MBROVERLAPS:
		            	    case self::MBRTOUCHES:
		            	    case self::MBRWITHIN:
		            	    case self::MD5:
		            	    case self::MLINEFROMTEXT:
		            	    case self::MLINEFROMWKB:
		            	    case self::MONTHNAME:
		            	    case self::MPOINTFROMTEXT:
		            	    case self::MPOINTFROMWKB:
		            	    case self::MPOLYFROMTEXT:
		            	    case self::MPOLYFROMWKB:
		            	    case self::MULTILINESTRINGFROMTEXT:
		            	    case self::MULTILINESTRINGFROMWKB:
		            	    case self::MULTIPOINTFROMTEXT:
		            	    case self::MULTIPOINTFROMWKB:
		            	    case self::MULTIPOLYGONFROMTEXT:
		            	    case self::MULTIPOLYGONFROMWKB:
		            	    case self::NAME_CONST:
		            	    case self::NULLIF:
		            	    case self::NUMGEOMETRIES:
		            	    case self::NUMINTERIORRINGS:
		            	    case self::NUMPOINTS:
		            	    case self::OCT:
		            	    case self::OCTET_LENGTH:
		            	    case self::ORD:
		            	    case self::OVERLAPS:
		            	    case self::PERIOD_ADD:
		            	    case self::PERIOD_DIFF:
		            	    case self::PI:
		            	    case self::POINTFROMTEXT:
		            	    case self::POINTFROMWKB:
		            	    case self::POINTN:
		            	    case self::POLYFROMTEXT:
		            	    case self::POLYFROMWKB:
		            	    case self::POLYGONFROMTEXT:
		            	    case self::POLYGONFROMWKB:
		            	    case self::POW:
		            	    case self::POWER:
		            	    case self::QUOTE:
		            	    case self::RADIANS:
		            	    case self::RAND:
		            	    case self::RANDOM:
		            	    case self::RANDOM_BYTES:
		            	    case self::RELEASE_LOCK:
		            	    case self::REVERSE:
		            	    case self::ROUND:
		            	    case self::ROW_COUNT:
		            	    case self::RPAD:
		            	    case self::RTRIM:
		            	    case self::SEC_TO_TIME:
		            	    case self::SECONDARY_ENGINE_ATTRIBUTE:
		            	    case self::SESSION_USER:
		            	    case self::SHA:
		            	    case self::SHA1:
		            	    case self::SHA2:
		            	    case self::SCHEMA_NAME:
		            	    case self::SIGN:
		            	    case self::SIN:
		            	    case self::SLEEP:
		            	    case self::SOUNDEX:
		            	    case self::SQL_THREAD_WAIT_AFTER_GTIDS:
		            	    case self::SQRT:
		            	    case self::SRID:
		            	    case self::STARTPOINT:
		            	    case self::STRCMP:
		            	    case self::STR_TO_DATE:
		            	    case self::ST_AREA:
		            	    case self::ST_ASBINARY:
		            	    case self::ST_ASTEXT:
		            	    case self::ST_ASWKB:
		            	    case self::ST_ASWKT:
		            	    case self::ST_BUFFER:
		            	    case self::ST_CENTROID:
		            	    case self::ST_CONTAINS:
		            	    case self::ST_CROSSES:
		            	    case self::ST_DIFFERENCE:
		            	    case self::ST_DIMENSION:
		            	    case self::ST_DISJOINT:
		            	    case self::ST_DISTANCE:
		            	    case self::ST_ENDPOINT:
		            	    case self::ST_ENVELOPE:
		            	    case self::ST_EQUALS:
		            	    case self::ST_EXTERIORRING:
		            	    case self::ST_GEOMCOLLFROMTEXT:
		            	    case self::ST_GEOMCOLLFROMTXT:
		            	    case self::ST_GEOMCOLLFROMWKB:
		            	    case self::ST_GEOMETRYCOLLECTIONFROMTEXT:
		            	    case self::ST_GEOMETRYCOLLECTIONFROMWKB:
		            	    case self::ST_GEOMETRYFROMTEXT:
		            	    case self::ST_GEOMETRYFROMWKB:
		            	    case self::ST_GEOMETRYN:
		            	    case self::ST_GEOMETRYTYPE:
		            	    case self::ST_GEOMFROMTEXT:
		            	    case self::ST_GEOMFROMWKB:
		            	    case self::ST_INTERIORRINGN:
		            	    case self::ST_INTERSECTION:
		            	    case self::ST_INTERSECTS:
		            	    case self::ST_ISCLOSED:
		            	    case self::ST_ISEMPTY:
		            	    case self::ST_ISSIMPLE:
		            	    case self::ST_LINEFROMTEXT:
		            	    case self::ST_LINEFROMWKB:
		            	    case self::ST_LINESTRINGFROMTEXT:
		            	    case self::ST_LINESTRINGFROMWKB:
		            	    case self::ST_NUMGEOMETRIES:
		            	    case self::ST_NUMINTERIORRING:
		            	    case self::ST_NUMINTERIORRINGS:
		            	    case self::ST_NUMPOINTS:
		            	    case self::ST_OVERLAPS:
		            	    case self::ST_POINTFROMTEXT:
		            	    case self::ST_POINTFROMWKB:
		            	    case self::ST_POINTN:
		            	    case self::ST_POLYFROMTEXT:
		            	    case self::ST_POLYFROMWKB:
		            	    case self::ST_POLYGONFROMTEXT:
		            	    case self::ST_POLYGONFROMWKB:
		            	    case self::ST_SRID:
		            	    case self::ST_STARTPOINT:
		            	    case self::ST_SYMDIFFERENCE:
		            	    case self::ST_TOUCHES:
		            	    case self::ST_UNION:
		            	    case self::ST_WITHIN:
		            	    case self::ST_X:
		            	    case self::ST_Y:
		            	    case self::SUBDATE:
		            	    case self::SUBSTRING_INDEX:
		            	    case self::SUBTIME:
		            	    case self::SYSTEM_USER:
		            	    case self::TAN:
		            	    case self::TIMEDIFF:
		            	    case self::TIMESTAMPADD:
		            	    case self::TIMESTAMPDIFF:
		            	    case self::TIME_FORMAT:
		            	    case self::TIME_TO_SEC:
		            	    case self::TOUCHES:
		            	    case self::TO_BASE64:
		            	    case self::TO_DAYS:
		            	    case self::TO_SECONDS:
		            	    case self::TP_CONNECTION_ADMIN:
		            	    case self::UCASE:
		            	    case self::UNCOMPRESS:
		            	    case self::UNCOMPRESSED_LENGTH:
		            	    case self::UNHEX:
		            	    case self::UNIX_TIMESTAMP:
		            	    case self::UPDATEXML:
		            	    case self::UPPER:
		            	    case self::UUID:
		            	    case self::UUID_SHORT:
		            	    case self::VALIDATE_PASSWORD_STRENGTH:
		            	    case self::VERSION:
		            	    case self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
		            	    case self::WEEKDAY:
		            	    case self::WEEKOFYEAR:
		            	    case self::WEIGHT_STRING:
		            	    case self::WITHIN:
		            	    case self::YEARWEEK:
		            	    case self::Y_FUNCTION:
		            	    case self::X_FUNCTION:
		            	    case self::MOD:
		            	    case self::CHARSET_REVERSE_QOUTE_STRING:
		            	    case self::STRING_LITERAL:
		            	    case self::ID:
		            	    	$this->setState(2897);
		            	    	$this->uidList();
		            	    	break;

		            	    case self::ALL:
		            	    	$this->setState(2898);
		            	    	$this->match(self::ALL);
		            	    	break;

		            	default:
		            		throw new NoViableAltException($this);
		            	}
		            	$this->setState(2901);
		            	$this->match(self::TABLESPACE);
		            	break;

		            case self::IMPORT:
		            	$localContext = new Context\AlterByImportPartitionContext($localContext);
		            	$this->enterOuterAlt($localContext, 4);
		            	$this->setState(2902);
		            	$this->match(self::IMPORT);
		            	$this->setState(2903);
		            	$this->match(self::PARTITION);
		            	$this->setState(2906);
		            	$this->errorHandler->sync($this);

		            	switch ($this->input->LA(1)) {
		            	    case self::ARRAY:
		            	    case self::ATTRIBUTE:
		            	    case self::BUCKETS:
		            	    case self::CONDITION:
		            	    case self::CURRENT:
		            	    case self::CURRENT_USER:
		            	    case self::DATABASE:
		            	    case self::DEFAULT:
		            	    case self::DIAGNOSTICS:
		            	    case self::EMPTY:
		            	    case self::ENFORCED:
		            	    case self::EXCEPT:
		            	    case self::GROUP:
		            	    case self::IF:
		            	    case self::IGNORED:
		            	    case self::INSERT:
		            	    case self::LATERAL:
		            	    case self::LEFT:
		            	    case self::NUMBER:
		            	    case self::OPTIONAL:
		            	    case self::ORDER:
		            	    case self::PRIMARY:
		            	    case self::REPEAT:
		            	    case self::REPLACE:
		            	    case self::RIGHT:
		            	    case self::SCHEMA:
		            	    case self::SKIP_QUERY_REWRITE:
		            	    case self::STACKED:
		            	    case self::DATE:
		            	    case self::TIME:
		            	    case self::TIMESTAMP:
		            	    case self::DATETIME:
		            	    case self::YEAR:
		            	    case self::BINARY:
		            	    case self::TEXT:
		            	    case self::ENUM:
		            	    case self::SERIAL:
		            	    case self::JSON_ARRAY:
		            	    case self::JSON_ARRAYAGG:
		            	    case self::JSON_ARRAY_APPEND:
		            	    case self::JSON_ARRAY_INSERT:
		            	    case self::JSON_CONTAINS:
		            	    case self::JSON_CONTAINS_PATH:
		            	    case self::JSON_DEPTH:
		            	    case self::JSON_EXTRACT:
		            	    case self::JSON_INSERT:
		            	    case self::JSON_KEYS:
		            	    case self::JSON_LENGTH:
		            	    case self::JSON_MERGE:
		            	    case self::JSON_MERGE_PATCH:
		            	    case self::JSON_MERGE_PRESERVE:
		            	    case self::JSON_OBJECT:
		            	    case self::JSON_OBJECTAGG:
		            	    case self::JSON_OVERLAPS:
		            	    case self::JSON_PRETTY:
		            	    case self::JSON_QUOTE:
		            	    case self::JSON_REMOVE:
		            	    case self::JSON_REPLACE:
		            	    case self::JSON_SCHEMA_VALID:
		            	    case self::JSON_SCHEMA_VALIDATION_REPORT:
		            	    case self::JSON_SEARCH:
		            	    case self::JSON_SET:
		            	    case self::JSON_STORAGE_FREE:
		            	    case self::JSON_STORAGE_SIZE:
		            	    case self::JSON_TABLE:
		            	    case self::JSON_TYPE:
		            	    case self::JSON_UNQUOTE:
		            	    case self::JSON_VALID:
		            	    case self::JSON_VALUE:
		            	    case self::NESTED:
		            	    case self::ORDINALITY:
		            	    case self::PATH:
		            	    case self::AVG:
		            	    case self::BIT_AND:
		            	    case self::BIT_OR:
		            	    case self::BIT_XOR:
		            	    case self::COUNT:
		            	    case self::CUME_DIST:
		            	    case self::DENSE_RANK:
		            	    case self::FIRST_VALUE:
		            	    case self::GROUP_CONCAT:
		            	    case self::LAG:
		            	    case self::LAST_VALUE:
		            	    case self::LEAD:
		            	    case self::MAX:
		            	    case self::MIN:
		            	    case self::NTILE:
		            	    case self::NTH_VALUE:
		            	    case self::PERCENT_RANK:
		            	    case self::RANK:
		            	    case self::ROW_NUMBER:
		            	    case self::STD:
		            	    case self::STDDEV:
		            	    case self::STDDEV_POP:
		            	    case self::STDDEV_SAMP:
		            	    case self::SUM:
		            	    case self::VAR_POP:
		            	    case self::VAR_SAMP:
		            	    case self::VARIANCE:
		            	    case self::CURRENT_DATE:
		            	    case self::CURRENT_TIME:
		            	    case self::CURRENT_TIMESTAMP:
		            	    case self::LOCALTIME:
		            	    case self::CURDATE:
		            	    case self::CURTIME:
		            	    case self::DATE_ADD:
		            	    case self::DATE_SUB:
		            	    case self::LOCALTIMESTAMP:
		            	    case self::NOW:
		            	    case self::POSITION:
		            	    case self::SUBSTR:
		            	    case self::SUBSTRING:
		            	    case self::SYSDATE:
		            	    case self::TRIM:
		            	    case self::UTC_DATE:
		            	    case self::UTC_TIME:
		            	    case self::UTC_TIMESTAMP:
		            	    case self::ACCOUNT:
		            	    case self::ACTION:
		            	    case self::AFTER:
		            	    case self::AGGREGATE:
		            	    case self::ALGORITHM:
		            	    case self::ANY:
		            	    case self::AT:
		            	    case self::AUTHORS:
		            	    case self::AUTOCOMMIT:
		            	    case self::AUTOEXTEND_SIZE:
		            	    case self::AUTO_INCREMENT:
		            	    case self::AVG_ROW_LENGTH:
		            	    case self::BEGIN:
		            	    case self::BINLOG:
		            	    case self::BIT:
		            	    case self::BLOCK:
		            	    case self::BOOL:
		            	    case self::BOOLEAN:
		            	    case self::BTREE:
		            	    case self::CACHE:
		            	    case self::CASCADED:
		            	    case self::CHAIN:
		            	    case self::CHANGED:
		            	    case self::CHANNEL:
		            	    case self::CHECKSUM:
		            	    case self::PAGE_CHECKSUM:
		            	    case self::CIPHER:
		            	    case self::CLASS_ORIGIN:
		            	    case self::CLIENT:
		            	    case self::CLOSE:
		            	    case self::CLUSTERING:
		            	    case self::COALESCE:
		            	    case self::CODE:
		            	    case self::COLUMNS:
		            	    case self::COLUMN_FORMAT:
		            	    case self::COLUMN_NAME:
		            	    case self::COMMENT:
		            	    case self::COMMIT:
		            	    case self::COMPACT:
		            	    case self::COMPLETION:
		            	    case self::COMPRESSED:
		            	    case self::COMPRESSION:
		            	    case self::CONCURRENT:
		            	    case self::CONNECT:
		            	    case self::CONNECTION:
		            	    case self::CONSISTENT:
		            	    case self::CONSTRAINT_CATALOG:
		            	    case self::CONSTRAINT_SCHEMA:
		            	    case self::CONSTRAINT_NAME:
		            	    case self::CONTAINS:
		            	    case self::CONTEXT:
		            	    case self::CONTRIBUTORS:
		            	    case self::COPY:
		            	    case self::CPU:
		            	    case self::CURSOR_NAME:
		            	    case self::DATA:
		            	    case self::DATAFILE:
		            	    case self::DEALLOCATE:
		            	    case self::DEFAULT_AUTH:
		            	    case self::DEFINER:
		            	    case self::DELAY_KEY_WRITE:
		            	    case self::DES_KEY_FILE:
		            	    case self::DIRECTORY:
		            	    case self::DISABLE:
		            	    case self::DISCARD:
		            	    case self::DISK:
		            	    case self::DO:
		            	    case self::DUMPFILE:
		            	    case self::DUPLICATE:
		            	    case self::DYNAMIC:
		            	    case self::ENABLE:
		            	    case self::ENCRYPTION:
		            	    case self::END:
		            	    case self::ENDS:
		            	    case self::ENGINE:
		            	    case self::ENGINES:
		            	    case self::ERROR:
		            	    case self::ERRORS:
		            	    case self::ESCAPE:
		            	    case self::EVEN:
		            	    case self::EVENT:
		            	    case self::EVENTS:
		            	    case self::EVERY:
		            	    case self::EXCHANGE:
		            	    case self::EXCLUSIVE:
		            	    case self::EXPIRE:
		            	    case self::EXPORT:
		            	    case self::EXTENDED:
		            	    case self::EXTENT_SIZE:
		            	    case self::FAILED_LOGIN_ATTEMPTS:
		            	    case self::FAST:
		            	    case self::FAULTS:
		            	    case self::FIELDS:
		            	    case self::FILE_BLOCK_SIZE:
		            	    case self::FILTER:
		            	    case self::FIRST:
		            	    case self::FIXED:
		            	    case self::FLUSH:
		            	    case self::FOLLOWS:
		            	    case self::FOUND:
		            	    case self::FULL:
		            	    case self::FUNCTION:
		            	    case self::GENERAL:
		            	    case self::GLOBAL:
		            	    case self::GRANTS:
		            	    case self::GROUP_REPLICATION:
		            	    case self::HANDLER:
		            	    case self::HASH:
		            	    case self::HELP:
		            	    case self::HISTORY:
		            	    case self::HOST:
		            	    case self::HOSTS:
		            	    case self::IDENTIFIED:
		            	    case self::IGNORE_SERVER_IDS:
		            	    case self::IMPORT:
		            	    case self::INDEXES:
		            	    case self::INITIAL_SIZE:
		            	    case self::INPLACE:
		            	    case self::INSERT_METHOD:
		            	    case self::INSTALL:
		            	    case self::INSTANCE:
		            	    case self::INSTANT:
		            	    case self::INVISIBLE:
		            	    case self::INVOKER:
		            	    case self::IO:
		            	    case self::IO_THREAD:
		            	    case self::IPC:
		            	    case self::ISOLATION:
		            	    case self::ISSUER:
		            	    case self::JSON:
		            	    case self::KEY_BLOCK_SIZE:
		            	    case self::LANGUAGE:
		            	    case self::LAST:
		            	    case self::LEAVES:
		            	    case self::LESS:
		            	    case self::LEVEL:
		            	    case self::LIST:
		            	    case self::LOCAL:
		            	    case self::LOGFILE:
		            	    case self::LOGS:
		            	    case self::MASTER:
		            	    case self::MASTER_AUTO_POSITION:
		            	    case self::MASTER_CONNECT_RETRY:
		            	    case self::MASTER_DELAY:
		            	    case self::MASTER_HEARTBEAT_PERIOD:
		            	    case self::MASTER_HOST:
		            	    case self::MASTER_LOG_FILE:
		            	    case self::MASTER_LOG_POS:
		            	    case self::MASTER_PASSWORD:
		            	    case self::MASTER_PORT:
		            	    case self::MASTER_RETRY_COUNT:
		            	    case self::MASTER_SSL:
		            	    case self::MASTER_SSL_CA:
		            	    case self::MASTER_SSL_CAPATH:
		            	    case self::MASTER_SSL_CERT:
		            	    case self::MASTER_SSL_CIPHER:
		            	    case self::MASTER_SSL_CRL:
		            	    case self::MASTER_SSL_CRLPATH:
		            	    case self::MASTER_SSL_KEY:
		            	    case self::MASTER_TLS_VERSION:
		            	    case self::MASTER_USER:
		            	    case self::MAX_CONNECTIONS_PER_HOUR:
		            	    case self::MAX_QUERIES_PER_HOUR:
		            	    case self::MAX_ROWS:
		            	    case self::MAX_SIZE:
		            	    case self::MAX_UPDATES_PER_HOUR:
		            	    case self::MAX_USER_CONNECTIONS:
		            	    case self::MEDIUM:
		            	    case self::MEMBER:
		            	    case self::MERGE:
		            	    case self::MESSAGE_TEXT:
		            	    case self::MID:
		            	    case self::MIGRATE:
		            	    case self::MIN_ROWS:
		            	    case self::MODE:
		            	    case self::MODIFY:
		            	    case self::MUTEX:
		            	    case self::MYSQL:
		            	    case self::MYSQL_ERRNO:
		            	    case self::NAME:
		            	    case self::NAMES:
		            	    case self::NCHAR:
		            	    case self::NEVER:
		            	    case self::NEXT:
		            	    case self::NO:
		            	    case self::NOCOPY:
		            	    case self::NOWAIT:
		            	    case self::NODEGROUP:
		            	    case self::NONE:
		            	    case self::ODBC:
		            	    case self::OFFLINE:
		            	    case self::OFFSET:
		            	    case self::OF:
		            	    case self::OJ:
		            	    case self::OLD_PASSWORD:
		            	    case self::ONE:
		            	    case self::ONLINE:
		            	    case self::ONLY:
		            	    case self::OPEN:
		            	    case self::OPTIMIZER_COSTS:
		            	    case self::OPTIONS:
		            	    case self::OWNER:
		            	    case self::PACK_KEYS:
		            	    case self::PAGE:
		            	    case self::PARSER:
		            	    case self::PARTIAL:
		            	    case self::PARTITIONING:
		            	    case self::PARTITIONS:
		            	    case self::PASSWORD:
		            	    case self::PASSWORD_LOCK_TIME:
		            	    case self::PHASE:
		            	    case self::PLUGIN:
		            	    case self::PLUGIN_DIR:
		            	    case self::PLUGINS:
		            	    case self::PORT:
		            	    case self::PRECEDES:
		            	    case self::PREPARE:
		            	    case self::PRESERVE:
		            	    case self::PREV:
		            	    case self::PROCESSLIST:
		            	    case self::PROFILE:
		            	    case self::PROFILES:
		            	    case self::PROXY:
		            	    case self::QUERY:
		            	    case self::QUICK:
		            	    case self::REBUILD:
		            	    case self::RECOVER:
		            	    case self::RECURSIVE:
		            	    case self::REDO_BUFFER_SIZE:
		            	    case self::REDUNDANT:
		            	    case self::RELAY:
		            	    case self::RELAY_LOG_FILE:
		            	    case self::RELAY_LOG_POS:
		            	    case self::RELAYLOG:
		            	    case self::REMOVE:
		            	    case self::REORGANIZE:
		            	    case self::REPAIR:
		            	    case self::REPLICATE_DO_DB:
		            	    case self::REPLICATE_DO_TABLE:
		            	    case self::REPLICATE_IGNORE_DB:
		            	    case self::REPLICATE_IGNORE_TABLE:
		            	    case self::REPLICATE_REWRITE_DB:
		            	    case self::REPLICATE_WILD_DO_TABLE:
		            	    case self::REPLICATE_WILD_IGNORE_TABLE:
		            	    case self::REPLICATION:
		            	    case self::RESET:
		            	    case self::RESUME:
		            	    case self::RETURNED_SQLSTATE:
		            	    case self::RETURNS:
		            	    case self::REUSE:
		            	    case self::ROLE:
		            	    case self::ROLLBACK:
		            	    case self::ROLLUP:
		            	    case self::ROTATE:
		            	    case self::ROW:
		            	    case self::ROWS:
		            	    case self::ROW_FORMAT:
		            	    case self::RTREE:
		            	    case self::SAVEPOINT:
		            	    case self::SCHEDULE:
		            	    case self::SECURITY:
		            	    case self::SERVER:
		            	    case self::SESSION:
		            	    case self::SHARE:
		            	    case self::SHARED:
		            	    case self::SIGNED:
		            	    case self::SIMPLE:
		            	    case self::SLAVE:
		            	    case self::SLOW:
		            	    case self::SNAPSHOT:
		            	    case self::SOCKET:
		            	    case self::SOME:
		            	    case self::SONAME:
		            	    case self::SOUNDS:
		            	    case self::SOURCE:
		            	    case self::SQL_AFTER_GTIDS:
		            	    case self::SQL_AFTER_MTS_GAPS:
		            	    case self::SQL_BEFORE_GTIDS:
		            	    case self::SQL_BUFFER_RESULT:
		            	    case self::SQL_CACHE:
		            	    case self::SQL_NO_CACHE:
		            	    case self::SQL_THREAD:
		            	    case self::START:
		            	    case self::STARTS:
		            	    case self::STATS_AUTO_RECALC:
		            	    case self::STATS_PERSISTENT:
		            	    case self::STATS_SAMPLE_PAGES:
		            	    case self::STATUS:
		            	    case self::STOP:
		            	    case self::STORAGE:
		            	    case self::STRING:
		            	    case self::SUBCLASS_ORIGIN:
		            	    case self::SUBJECT:
		            	    case self::SUBPARTITION:
		            	    case self::SUBPARTITIONS:
		            	    case self::SUSPEND:
		            	    case self::SWAPS:
		            	    case self::SWITCHES:
		            	    case self::TABLE_NAME:
		            	    case self::TABLESPACE:
		            	    case self::TABLE_TYPE:
		            	    case self::TEMPORARY:
		            	    case self::TEMPTABLE:
		            	    case self::THAN:
		            	    case self::TRADITIONAL:
		            	    case self::TRANSACTION:
		            	    case self::TRANSACTIONAL:
		            	    case self::TRIGGERS:
		            	    case self::TRUNCATE:
		            	    case self::UNBOUNDED:
		            	    case self::UNDEFINED:
		            	    case self::UNDOFILE:
		            	    case self::UNDO_BUFFER_SIZE:
		            	    case self::UNINSTALL:
		            	    case self::UNKNOWN:
		            	    case self::UNTIL:
		            	    case self::UPGRADE:
		            	    case self::USER:
		            	    case self::USE_FRM:
		            	    case self::USER_RESOURCES:
		            	    case self::VALIDATION:
		            	    case self::VALUE:
		            	    case self::VARIABLES:
		            	    case self::VIEW:
		            	    case self::VIRTUAL:
		            	    case self::VISIBLE:
		            	    case self::WAIT:
		            	    case self::WARNINGS:
		            	    case self::WITHOUT:
		            	    case self::WORK:
		            	    case self::WRAPPER:
		            	    case self::X509:
		            	    case self::XA:
		            	    case self::XML:
		            	    case self::EUR:
		            	    case self::USA:
		            	    case self::JIS:
		            	    case self::ISO:
		            	    case self::INTERNAL:
		            	    case self::QUARTER:
		            	    case self::MONTH:
		            	    case self::DAY:
		            	    case self::HOUR:
		            	    case self::MINUTE:
		            	    case self::WEEK:
		            	    case self::SECOND:
		            	    case self::MICROSECOND:
		            	    case self::ADMIN:
		            	    case self::AUDIT_ABORT_EXEMPT:
		            	    case self::AUDIT_ADMIN:
		            	    case self::AUTHENTICATION_POLICY_ADMIN:
		            	    case self::BACKUP_ADMIN:
		            	    case self::BINLOG_ADMIN:
		            	    case self::BINLOG_ENCRYPTION_ADMIN:
		            	    case self::CLONE_ADMIN:
		            	    case self::CONNECTION_ADMIN:
		            	    case self::ENCRYPTION_KEY_ADMIN:
		            	    case self::EXECUTE:
		            	    case self::FILE:
		            	    case self::FIREWALL_ADMIN:
		            	    case self::FIREWALL_EXEMPT:
		            	    case self::FIREWALL_USER:
		            	    case self::GROUP_REPLICATION_ADMIN:
		            	    case self::INNODB_REDO_LOG_ARCHIVE:
		            	    case self::INVOKE:
		            	    case self::LAMBDA:
		            	    case self::NDB_STORED_USER:
		            	    case self::PASSWORDLESS_USER_ADMIN:
		            	    case self::PERSIST_RO_VARIABLES_ADMIN:
		            	    case self::PRIVILEGES:
		            	    case self::PROCESS:
		            	    case self::RELOAD:
		            	    case self::REPLICATION_APPLIER:
		            	    case self::REPLICATION_SLAVE_ADMIN:
		            	    case self::RESOURCE_GROUP_ADMIN:
		            	    case self::RESOURCE_GROUP_USER:
		            	    case self::ROLE_ADMIN:
		            	    case self::ROUTINE:
		            	    case self::S3:
		            	    case self::SESSION_VARIABLES_ADMIN:
		            	    case self::SET_USER_ID:
		            	    case self::SHOW_ROUTINE:
		            	    case self::SHUTDOWN:
		            	    case self::SUPER:
		            	    case self::SYSTEM_VARIABLES_ADMIN:
		            	    case self::TABLES:
		            	    case self::TABLE_ENCRYPTION_ADMIN:
		            	    case self::VERSION_TOKEN_ADMIN:
		            	    case self::XA_RECOVER_ADMIN:
		            	    case self::ARMSCII8:
		            	    case self::ASCII:
		            	    case self::BIG5:
		            	    case self::CP1250:
		            	    case self::CP1251:
		            	    case self::CP1256:
		            	    case self::CP1257:
		            	    case self::CP850:
		            	    case self::CP852:
		            	    case self::CP866:
		            	    case self::CP932:
		            	    case self::DEC8:
		            	    case self::EUCJPMS:
		            	    case self::EUCKR:
		            	    case self::GB18030:
		            	    case self::GB2312:
		            	    case self::GBK:
		            	    case self::GEOSTD8:
		            	    case self::GREEK:
		            	    case self::HEBREW:
		            	    case self::HP8:
		            	    case self::KEYBCS2:
		            	    case self::KOI8R:
		            	    case self::KOI8U:
		            	    case self::LATIN1:
		            	    case self::LATIN2:
		            	    case self::LATIN5:
		            	    case self::LATIN7:
		            	    case self::MACCE:
		            	    case self::MACROMAN:
		            	    case self::SJIS:
		            	    case self::SWE7:
		            	    case self::TIS620:
		            	    case self::UCS2:
		            	    case self::UJIS:
		            	    case self::UTF16:
		            	    case self::UTF16LE:
		            	    case self::UTF32:
		            	    case self::UTF8:
		            	    case self::UTF8MB3:
		            	    case self::UTF8MB4:
		            	    case self::ARCHIVE:
		            	    case self::BLACKHOLE:
		            	    case self::CSV:
		            	    case self::FEDERATED:
		            	    case self::INNODB:
		            	    case self::MEMORY:
		            	    case self::MRG_MYISAM:
		            	    case self::MYISAM:
		            	    case self::NDB:
		            	    case self::NDBCLUSTER:
		            	    case self::PERFORMANCE_SCHEMA:
		            	    case self::TOKUDB:
		            	    case self::REPEATABLE:
		            	    case self::COMMITTED:
		            	    case self::UNCOMMITTED:
		            	    case self::SERIALIZABLE:
		            	    case self::GEOMETRYCOLLECTION:
		            	    case self::LINESTRING:
		            	    case self::MULTILINESTRING:
		            	    case self::MULTIPOINT:
		            	    case self::MULTIPOLYGON:
		            	    case self::POINT:
		            	    case self::POLYGON:
		            	    case self::ABS:
		            	    case self::ACOS:
		            	    case self::ADDDATE:
		            	    case self::ADDTIME:
		            	    case self::AES_DECRYPT:
		            	    case self::AES_ENCRYPT:
		            	    case self::AREA:
		            	    case self::ASBINARY:
		            	    case self::ASIN:
		            	    case self::ASTEXT:
		            	    case self::ASWKB:
		            	    case self::ASWKT:
		            	    case self::ASYMMETRIC_DECRYPT:
		            	    case self::ASYMMETRIC_DERIVE:
		            	    case self::ASYMMETRIC_ENCRYPT:
		            	    case self::ASYMMETRIC_SIGN:
		            	    case self::ASYMMETRIC_VERIFY:
		            	    case self::ATAN:
		            	    case self::ATAN2:
		            	    case self::BENCHMARK:
		            	    case self::BIN:
		            	    case self::BIT_COUNT:
		            	    case self::BIT_LENGTH:
		            	    case self::BUFFER:
		            	    case self::CATALOG_NAME:
		            	    case self::CEIL:
		            	    case self::CEILING:
		            	    case self::CENTROID:
		            	    case self::CHARACTER_LENGTH:
		            	    case self::CHARSET:
		            	    case self::CHAR_LENGTH:
		            	    case self::COERCIBILITY:
		            	    case self::COLLATION:
		            	    case self::COMPRESS:
		            	    case self::CONCAT:
		            	    case self::CONCAT_WS:
		            	    case self::CONNECTION_ID:
		            	    case self::CONV:
		            	    case self::CONVERT_TZ:
		            	    case self::COS:
		            	    case self::COT:
		            	    case self::CRC32:
		            	    case self::CREATE_ASYMMETRIC_PRIV_KEY:
		            	    case self::CREATE_ASYMMETRIC_PUB_KEY:
		            	    case self::CREATE_DH_PARAMETERS:
		            	    case self::CREATE_DIGEST:
		            	    case self::CROSSES:
		            	    case self::DATEDIFF:
		            	    case self::DATE_FORMAT:
		            	    case self::DAYNAME:
		            	    case self::DAYOFMONTH:
		            	    case self::DAYOFWEEK:
		            	    case self::DAYOFYEAR:
		            	    case self::DECODE:
		            	    case self::DEGREES:
		            	    case self::DES_DECRYPT:
		            	    case self::DES_ENCRYPT:
		            	    case self::DIMENSION:
		            	    case self::DISJOINT:
		            	    case self::ELT:
		            	    case self::ENCODE:
		            	    case self::ENCRYPT:
		            	    case self::ENDPOINT:
		            	    case self::ENGINE_ATTRIBUTE:
		            	    case self::ENVELOPE:
		            	    case self::EQUALS:
		            	    case self::EXP:
		            	    case self::EXPORT_SET:
		            	    case self::EXTERIORRING:
		            	    case self::EXTRACTVALUE:
		            	    case self::FIELD:
		            	    case self::FIND_IN_SET:
		            	    case self::FLOOR:
		            	    case self::FORMAT:
		            	    case self::FOUND_ROWS:
		            	    case self::FROM_BASE64:
		            	    case self::FROM_DAYS:
		            	    case self::FROM_UNIXTIME:
		            	    case self::GEOMCOLLFROMTEXT:
		            	    case self::GEOMCOLLFROMWKB:
		            	    case self::GEOMETRYCOLLECTIONFROMTEXT:
		            	    case self::GEOMETRYCOLLECTIONFROMWKB:
		            	    case self::GEOMETRYFROMTEXT:
		            	    case self::GEOMETRYFROMWKB:
		            	    case self::GEOMETRYN:
		            	    case self::GEOMETRYTYPE:
		            	    case self::GEOMFROMTEXT:
		            	    case self::GEOMFROMWKB:
		            	    case self::GET_FORMAT:
		            	    case self::GET_LOCK:
		            	    case self::GLENGTH:
		            	    case self::GREATEST:
		            	    case self::GTID_SUBSET:
		            	    case self::GTID_SUBTRACT:
		            	    case self::HEX:
		            	    case self::IFNULL:
		            	    case self::INET6_ATON:
		            	    case self::INET6_NTOA:
		            	    case self::INET_ATON:
		            	    case self::INET_NTOA:
		            	    case self::INSTR:
		            	    case self::INTERIORRINGN:
		            	    case self::INTERSECTS:
		            	    case self::ISCLOSED:
		            	    case self::ISEMPTY:
		            	    case self::ISNULL:
		            	    case self::ISSIMPLE:
		            	    case self::IS_FREE_LOCK:
		            	    case self::IS_IPV4:
		            	    case self::IS_IPV4_COMPAT:
		            	    case self::IS_IPV4_MAPPED:
		            	    case self::IS_IPV6:
		            	    case self::IS_USED_LOCK:
		            	    case self::LAST_INSERT_ID:
		            	    case self::LCASE:
		            	    case self::LEAST:
		            	    case self::LENGTH:
		            	    case self::LINEFROMTEXT:
		            	    case self::LINEFROMWKB:
		            	    case self::LINESTRINGFROMTEXT:
		            	    case self::LINESTRINGFROMWKB:
		            	    case self::LN:
		            	    case self::LOAD_FILE:
		            	    case self::LOCATE:
		            	    case self::LOG:
		            	    case self::LOG10:
		            	    case self::LOG2:
		            	    case self::LOWER:
		            	    case self::LPAD:
		            	    case self::LTRIM:
		            	    case self::MAKEDATE:
		            	    case self::MAKETIME:
		            	    case self::MAKE_SET:
		            	    case self::MASTER_POS_WAIT:
		            	    case self::MBRCONTAINS:
		            	    case self::MBRDISJOINT:
		            	    case self::MBREQUAL:
		            	    case self::MBRINTERSECTS:
		            	    case self::MBROVERLAPS:
		            	    case self::MBRTOUCHES:
		            	    case self::MBRWITHIN:
		            	    case self::MD5:
		            	    case self::MLINEFROMTEXT:
		            	    case self::MLINEFROMWKB:
		            	    case self::MONTHNAME:
		            	    case self::MPOINTFROMTEXT:
		            	    case self::MPOINTFROMWKB:
		            	    case self::MPOLYFROMTEXT:
		            	    case self::MPOLYFROMWKB:
		            	    case self::MULTILINESTRINGFROMTEXT:
		            	    case self::MULTILINESTRINGFROMWKB:
		            	    case self::MULTIPOINTFROMTEXT:
		            	    case self::MULTIPOINTFROMWKB:
		            	    case self::MULTIPOLYGONFROMTEXT:
		            	    case self::MULTIPOLYGONFROMWKB:
		            	    case self::NAME_CONST:
		            	    case self::NULLIF:
		            	    case self::NUMGEOMETRIES:
		            	    case self::NUMINTERIORRINGS:
		            	    case self::NUMPOINTS:
		            	    case self::OCT:
		            	    case self::OCTET_LENGTH:
		            	    case self::ORD:
		            	    case self::OVERLAPS:
		            	    case self::PERIOD_ADD:
		            	    case self::PERIOD_DIFF:
		            	    case self::PI:
		            	    case self::POINTFROMTEXT:
		            	    case self::POINTFROMWKB:
		            	    case self::POINTN:
		            	    case self::POLYFROMTEXT:
		            	    case self::POLYFROMWKB:
		            	    case self::POLYGONFROMTEXT:
		            	    case self::POLYGONFROMWKB:
		            	    case self::POW:
		            	    case self::POWER:
		            	    case self::QUOTE:
		            	    case self::RADIANS:
		            	    case self::RAND:
		            	    case self::RANDOM:
		            	    case self::RANDOM_BYTES:
		            	    case self::RELEASE_LOCK:
		            	    case self::REVERSE:
		            	    case self::ROUND:
		            	    case self::ROW_COUNT:
		            	    case self::RPAD:
		            	    case self::RTRIM:
		            	    case self::SEC_TO_TIME:
		            	    case self::SECONDARY_ENGINE_ATTRIBUTE:
		            	    case self::SESSION_USER:
		            	    case self::SHA:
		            	    case self::SHA1:
		            	    case self::SHA2:
		            	    case self::SCHEMA_NAME:
		            	    case self::SIGN:
		            	    case self::SIN:
		            	    case self::SLEEP:
		            	    case self::SOUNDEX:
		            	    case self::SQL_THREAD_WAIT_AFTER_GTIDS:
		            	    case self::SQRT:
		            	    case self::SRID:
		            	    case self::STARTPOINT:
		            	    case self::STRCMP:
		            	    case self::STR_TO_DATE:
		            	    case self::ST_AREA:
		            	    case self::ST_ASBINARY:
		            	    case self::ST_ASTEXT:
		            	    case self::ST_ASWKB:
		            	    case self::ST_ASWKT:
		            	    case self::ST_BUFFER:
		            	    case self::ST_CENTROID:
		            	    case self::ST_CONTAINS:
		            	    case self::ST_CROSSES:
		            	    case self::ST_DIFFERENCE:
		            	    case self::ST_DIMENSION:
		            	    case self::ST_DISJOINT:
		            	    case self::ST_DISTANCE:
		            	    case self::ST_ENDPOINT:
		            	    case self::ST_ENVELOPE:
		            	    case self::ST_EQUALS:
		            	    case self::ST_EXTERIORRING:
		            	    case self::ST_GEOMCOLLFROMTEXT:
		            	    case self::ST_GEOMCOLLFROMTXT:
		            	    case self::ST_GEOMCOLLFROMWKB:
		            	    case self::ST_GEOMETRYCOLLECTIONFROMTEXT:
		            	    case self::ST_GEOMETRYCOLLECTIONFROMWKB:
		            	    case self::ST_GEOMETRYFROMTEXT:
		            	    case self::ST_GEOMETRYFROMWKB:
		            	    case self::ST_GEOMETRYN:
		            	    case self::ST_GEOMETRYTYPE:
		            	    case self::ST_GEOMFROMTEXT:
		            	    case self::ST_GEOMFROMWKB:
		            	    case self::ST_INTERIORRINGN:
		            	    case self::ST_INTERSECTION:
		            	    case self::ST_INTERSECTS:
		            	    case self::ST_ISCLOSED:
		            	    case self::ST_ISEMPTY:
		            	    case self::ST_ISSIMPLE:
		            	    case self::ST_LINEFROMTEXT:
		            	    case self::ST_LINEFROMWKB:
		            	    case self::ST_LINESTRINGFROMTEXT:
		            	    case self::ST_LINESTRINGFROMWKB:
		            	    case self::ST_NUMGEOMETRIES:
		            	    case self::ST_NUMINTERIORRING:
		            	    case self::ST_NUMINTERIORRINGS:
		            	    case self::ST_NUMPOINTS:
		            	    case self::ST_OVERLAPS:
		            	    case self::ST_POINTFROMTEXT:
		            	    case self::ST_POINTFROMWKB:
		            	    case self::ST_POINTN:
		            	    case self::ST_POLYFROMTEXT:
		            	    case self::ST_POLYFROMWKB:
		            	    case self::ST_POLYGONFROMTEXT:
		            	    case self::ST_POLYGONFROMWKB:
		            	    case self::ST_SRID:
		            	    case self::ST_STARTPOINT:
		            	    case self::ST_SYMDIFFERENCE:
		            	    case self::ST_TOUCHES:
		            	    case self::ST_UNION:
		            	    case self::ST_WITHIN:
		            	    case self::ST_X:
		            	    case self::ST_Y:
		            	    case self::SUBDATE:
		            	    case self::SUBSTRING_INDEX:
		            	    case self::SUBTIME:
		            	    case self::SYSTEM_USER:
		            	    case self::TAN:
		            	    case self::TIMEDIFF:
		            	    case self::TIMESTAMPADD:
		            	    case self::TIMESTAMPDIFF:
		            	    case self::TIME_FORMAT:
		            	    case self::TIME_TO_SEC:
		            	    case self::TOUCHES:
		            	    case self::TO_BASE64:
		            	    case self::TO_DAYS:
		            	    case self::TO_SECONDS:
		            	    case self::TP_CONNECTION_ADMIN:
		            	    case self::UCASE:
		            	    case self::UNCOMPRESS:
		            	    case self::UNCOMPRESSED_LENGTH:
		            	    case self::UNHEX:
		            	    case self::UNIX_TIMESTAMP:
		            	    case self::UPDATEXML:
		            	    case self::UPPER:
		            	    case self::UUID:
		            	    case self::UUID_SHORT:
		            	    case self::VALIDATE_PASSWORD_STRENGTH:
		            	    case self::VERSION:
		            	    case self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
		            	    case self::WEEKDAY:
		            	    case self::WEEKOFYEAR:
		            	    case self::WEIGHT_STRING:
		            	    case self::WITHIN:
		            	    case self::YEARWEEK:
		            	    case self::Y_FUNCTION:
		            	    case self::X_FUNCTION:
		            	    case self::MOD:
		            	    case self::CHARSET_REVERSE_QOUTE_STRING:
		            	    case self::STRING_LITERAL:
		            	    case self::ID:
		            	    	$this->setState(2904);
		            	    	$this->uidList();
		            	    	break;

		            	    case self::ALL:
		            	    	$this->setState(2905);
		            	    	$this->match(self::ALL);
		            	    	break;

		            	default:
		            		throw new NoViableAltException($this);
		            	}
		            	$this->setState(2908);
		            	$this->match(self::TABLESPACE);
		            	break;

		            case self::TRUNCATE:
		            	$localContext = new Context\AlterByTruncatePartitionContext($localContext);
		            	$this->enterOuterAlt($localContext, 5);
		            	$this->setState(2909);
		            	$this->match(self::TRUNCATE);
		            	$this->setState(2910);
		            	$this->match(self::PARTITION);
		            	$this->setState(2913);
		            	$this->errorHandler->sync($this);

		            	switch ($this->input->LA(1)) {
		            	    case self::ARRAY:
		            	    case self::ATTRIBUTE:
		            	    case self::BUCKETS:
		            	    case self::CONDITION:
		            	    case self::CURRENT:
		            	    case self::CURRENT_USER:
		            	    case self::DATABASE:
		            	    case self::DEFAULT:
		            	    case self::DIAGNOSTICS:
		            	    case self::EMPTY:
		            	    case self::ENFORCED:
		            	    case self::EXCEPT:
		            	    case self::GROUP:
		            	    case self::IF:
		            	    case self::IGNORED:
		            	    case self::INSERT:
		            	    case self::LATERAL:
		            	    case self::LEFT:
		            	    case self::NUMBER:
		            	    case self::OPTIONAL:
		            	    case self::ORDER:
		            	    case self::PRIMARY:
		            	    case self::REPEAT:
		            	    case self::REPLACE:
		            	    case self::RIGHT:
		            	    case self::SCHEMA:
		            	    case self::SKIP_QUERY_REWRITE:
		            	    case self::STACKED:
		            	    case self::DATE:
		            	    case self::TIME:
		            	    case self::TIMESTAMP:
		            	    case self::DATETIME:
		            	    case self::YEAR:
		            	    case self::BINARY:
		            	    case self::TEXT:
		            	    case self::ENUM:
		            	    case self::SERIAL:
		            	    case self::JSON_ARRAY:
		            	    case self::JSON_ARRAYAGG:
		            	    case self::JSON_ARRAY_APPEND:
		            	    case self::JSON_ARRAY_INSERT:
		            	    case self::JSON_CONTAINS:
		            	    case self::JSON_CONTAINS_PATH:
		            	    case self::JSON_DEPTH:
		            	    case self::JSON_EXTRACT:
		            	    case self::JSON_INSERT:
		            	    case self::JSON_KEYS:
		            	    case self::JSON_LENGTH:
		            	    case self::JSON_MERGE:
		            	    case self::JSON_MERGE_PATCH:
		            	    case self::JSON_MERGE_PRESERVE:
		            	    case self::JSON_OBJECT:
		            	    case self::JSON_OBJECTAGG:
		            	    case self::JSON_OVERLAPS:
		            	    case self::JSON_PRETTY:
		            	    case self::JSON_QUOTE:
		            	    case self::JSON_REMOVE:
		            	    case self::JSON_REPLACE:
		            	    case self::JSON_SCHEMA_VALID:
		            	    case self::JSON_SCHEMA_VALIDATION_REPORT:
		            	    case self::JSON_SEARCH:
		            	    case self::JSON_SET:
		            	    case self::JSON_STORAGE_FREE:
		            	    case self::JSON_STORAGE_SIZE:
		            	    case self::JSON_TABLE:
		            	    case self::JSON_TYPE:
		            	    case self::JSON_UNQUOTE:
		            	    case self::JSON_VALID:
		            	    case self::JSON_VALUE:
		            	    case self::NESTED:
		            	    case self::ORDINALITY:
		            	    case self::PATH:
		            	    case self::AVG:
		            	    case self::BIT_AND:
		            	    case self::BIT_OR:
		            	    case self::BIT_XOR:
		            	    case self::COUNT:
		            	    case self::CUME_DIST:
		            	    case self::DENSE_RANK:
		            	    case self::FIRST_VALUE:
		            	    case self::GROUP_CONCAT:
		            	    case self::LAG:
		            	    case self::LAST_VALUE:
		            	    case self::LEAD:
		            	    case self::MAX:
		            	    case self::MIN:
		            	    case self::NTILE:
		            	    case self::NTH_VALUE:
		            	    case self::PERCENT_RANK:
		            	    case self::RANK:
		            	    case self::ROW_NUMBER:
		            	    case self::STD:
		            	    case self::STDDEV:
		            	    case self::STDDEV_POP:
		            	    case self::STDDEV_SAMP:
		            	    case self::SUM:
		            	    case self::VAR_POP:
		            	    case self::VAR_SAMP:
		            	    case self::VARIANCE:
		            	    case self::CURRENT_DATE:
		            	    case self::CURRENT_TIME:
		            	    case self::CURRENT_TIMESTAMP:
		            	    case self::LOCALTIME:
		            	    case self::CURDATE:
		            	    case self::CURTIME:
		            	    case self::DATE_ADD:
		            	    case self::DATE_SUB:
		            	    case self::LOCALTIMESTAMP:
		            	    case self::NOW:
		            	    case self::POSITION:
		            	    case self::SUBSTR:
		            	    case self::SUBSTRING:
		            	    case self::SYSDATE:
		            	    case self::TRIM:
		            	    case self::UTC_DATE:
		            	    case self::UTC_TIME:
		            	    case self::UTC_TIMESTAMP:
		            	    case self::ACCOUNT:
		            	    case self::ACTION:
		            	    case self::AFTER:
		            	    case self::AGGREGATE:
		            	    case self::ALGORITHM:
		            	    case self::ANY:
		            	    case self::AT:
		            	    case self::AUTHORS:
		            	    case self::AUTOCOMMIT:
		            	    case self::AUTOEXTEND_SIZE:
		            	    case self::AUTO_INCREMENT:
		            	    case self::AVG_ROW_LENGTH:
		            	    case self::BEGIN:
		            	    case self::BINLOG:
		            	    case self::BIT:
		            	    case self::BLOCK:
		            	    case self::BOOL:
		            	    case self::BOOLEAN:
		            	    case self::BTREE:
		            	    case self::CACHE:
		            	    case self::CASCADED:
		            	    case self::CHAIN:
		            	    case self::CHANGED:
		            	    case self::CHANNEL:
		            	    case self::CHECKSUM:
		            	    case self::PAGE_CHECKSUM:
		            	    case self::CIPHER:
		            	    case self::CLASS_ORIGIN:
		            	    case self::CLIENT:
		            	    case self::CLOSE:
		            	    case self::CLUSTERING:
		            	    case self::COALESCE:
		            	    case self::CODE:
		            	    case self::COLUMNS:
		            	    case self::COLUMN_FORMAT:
		            	    case self::COLUMN_NAME:
		            	    case self::COMMENT:
		            	    case self::COMMIT:
		            	    case self::COMPACT:
		            	    case self::COMPLETION:
		            	    case self::COMPRESSED:
		            	    case self::COMPRESSION:
		            	    case self::CONCURRENT:
		            	    case self::CONNECT:
		            	    case self::CONNECTION:
		            	    case self::CONSISTENT:
		            	    case self::CONSTRAINT_CATALOG:
		            	    case self::CONSTRAINT_SCHEMA:
		            	    case self::CONSTRAINT_NAME:
		            	    case self::CONTAINS:
		            	    case self::CONTEXT:
		            	    case self::CONTRIBUTORS:
		            	    case self::COPY:
		            	    case self::CPU:
		            	    case self::CURSOR_NAME:
		            	    case self::DATA:
		            	    case self::DATAFILE:
		            	    case self::DEALLOCATE:
		            	    case self::DEFAULT_AUTH:
		            	    case self::DEFINER:
		            	    case self::DELAY_KEY_WRITE:
		            	    case self::DES_KEY_FILE:
		            	    case self::DIRECTORY:
		            	    case self::DISABLE:
		            	    case self::DISCARD:
		            	    case self::DISK:
		            	    case self::DO:
		            	    case self::DUMPFILE:
		            	    case self::DUPLICATE:
		            	    case self::DYNAMIC:
		            	    case self::ENABLE:
		            	    case self::ENCRYPTION:
		            	    case self::END:
		            	    case self::ENDS:
		            	    case self::ENGINE:
		            	    case self::ENGINES:
		            	    case self::ERROR:
		            	    case self::ERRORS:
		            	    case self::ESCAPE:
		            	    case self::EVEN:
		            	    case self::EVENT:
		            	    case self::EVENTS:
		            	    case self::EVERY:
		            	    case self::EXCHANGE:
		            	    case self::EXCLUSIVE:
		            	    case self::EXPIRE:
		            	    case self::EXPORT:
		            	    case self::EXTENDED:
		            	    case self::EXTENT_SIZE:
		            	    case self::FAILED_LOGIN_ATTEMPTS:
		            	    case self::FAST:
		            	    case self::FAULTS:
		            	    case self::FIELDS:
		            	    case self::FILE_BLOCK_SIZE:
		            	    case self::FILTER:
		            	    case self::FIRST:
		            	    case self::FIXED:
		            	    case self::FLUSH:
		            	    case self::FOLLOWS:
		            	    case self::FOUND:
		            	    case self::FULL:
		            	    case self::FUNCTION:
		            	    case self::GENERAL:
		            	    case self::GLOBAL:
		            	    case self::GRANTS:
		            	    case self::GROUP_REPLICATION:
		            	    case self::HANDLER:
		            	    case self::HASH:
		            	    case self::HELP:
		            	    case self::HISTORY:
		            	    case self::HOST:
		            	    case self::HOSTS:
		            	    case self::IDENTIFIED:
		            	    case self::IGNORE_SERVER_IDS:
		            	    case self::IMPORT:
		            	    case self::INDEXES:
		            	    case self::INITIAL_SIZE:
		            	    case self::INPLACE:
		            	    case self::INSERT_METHOD:
		            	    case self::INSTALL:
		            	    case self::INSTANCE:
		            	    case self::INSTANT:
		            	    case self::INVISIBLE:
		            	    case self::INVOKER:
		            	    case self::IO:
		            	    case self::IO_THREAD:
		            	    case self::IPC:
		            	    case self::ISOLATION:
		            	    case self::ISSUER:
		            	    case self::JSON:
		            	    case self::KEY_BLOCK_SIZE:
		            	    case self::LANGUAGE:
		            	    case self::LAST:
		            	    case self::LEAVES:
		            	    case self::LESS:
		            	    case self::LEVEL:
		            	    case self::LIST:
		            	    case self::LOCAL:
		            	    case self::LOGFILE:
		            	    case self::LOGS:
		            	    case self::MASTER:
		            	    case self::MASTER_AUTO_POSITION:
		            	    case self::MASTER_CONNECT_RETRY:
		            	    case self::MASTER_DELAY:
		            	    case self::MASTER_HEARTBEAT_PERIOD:
		            	    case self::MASTER_HOST:
		            	    case self::MASTER_LOG_FILE:
		            	    case self::MASTER_LOG_POS:
		            	    case self::MASTER_PASSWORD:
		            	    case self::MASTER_PORT:
		            	    case self::MASTER_RETRY_COUNT:
		            	    case self::MASTER_SSL:
		            	    case self::MASTER_SSL_CA:
		            	    case self::MASTER_SSL_CAPATH:
		            	    case self::MASTER_SSL_CERT:
		            	    case self::MASTER_SSL_CIPHER:
		            	    case self::MASTER_SSL_CRL:
		            	    case self::MASTER_SSL_CRLPATH:
		            	    case self::MASTER_SSL_KEY:
		            	    case self::MASTER_TLS_VERSION:
		            	    case self::MASTER_USER:
		            	    case self::MAX_CONNECTIONS_PER_HOUR:
		            	    case self::MAX_QUERIES_PER_HOUR:
		            	    case self::MAX_ROWS:
		            	    case self::MAX_SIZE:
		            	    case self::MAX_UPDATES_PER_HOUR:
		            	    case self::MAX_USER_CONNECTIONS:
		            	    case self::MEDIUM:
		            	    case self::MEMBER:
		            	    case self::MERGE:
		            	    case self::MESSAGE_TEXT:
		            	    case self::MID:
		            	    case self::MIGRATE:
		            	    case self::MIN_ROWS:
		            	    case self::MODE:
		            	    case self::MODIFY:
		            	    case self::MUTEX:
		            	    case self::MYSQL:
		            	    case self::MYSQL_ERRNO:
		            	    case self::NAME:
		            	    case self::NAMES:
		            	    case self::NCHAR:
		            	    case self::NEVER:
		            	    case self::NEXT:
		            	    case self::NO:
		            	    case self::NOCOPY:
		            	    case self::NOWAIT:
		            	    case self::NODEGROUP:
		            	    case self::NONE:
		            	    case self::ODBC:
		            	    case self::OFFLINE:
		            	    case self::OFFSET:
		            	    case self::OF:
		            	    case self::OJ:
		            	    case self::OLD_PASSWORD:
		            	    case self::ONE:
		            	    case self::ONLINE:
		            	    case self::ONLY:
		            	    case self::OPEN:
		            	    case self::OPTIMIZER_COSTS:
		            	    case self::OPTIONS:
		            	    case self::OWNER:
		            	    case self::PACK_KEYS:
		            	    case self::PAGE:
		            	    case self::PARSER:
		            	    case self::PARTIAL:
		            	    case self::PARTITIONING:
		            	    case self::PARTITIONS:
		            	    case self::PASSWORD:
		            	    case self::PASSWORD_LOCK_TIME:
		            	    case self::PHASE:
		            	    case self::PLUGIN:
		            	    case self::PLUGIN_DIR:
		            	    case self::PLUGINS:
		            	    case self::PORT:
		            	    case self::PRECEDES:
		            	    case self::PREPARE:
		            	    case self::PRESERVE:
		            	    case self::PREV:
		            	    case self::PROCESSLIST:
		            	    case self::PROFILE:
		            	    case self::PROFILES:
		            	    case self::PROXY:
		            	    case self::QUERY:
		            	    case self::QUICK:
		            	    case self::REBUILD:
		            	    case self::RECOVER:
		            	    case self::RECURSIVE:
		            	    case self::REDO_BUFFER_SIZE:
		            	    case self::REDUNDANT:
		            	    case self::RELAY:
		            	    case self::RELAY_LOG_FILE:
		            	    case self::RELAY_LOG_POS:
		            	    case self::RELAYLOG:
		            	    case self::REMOVE:
		            	    case self::REORGANIZE:
		            	    case self::REPAIR:
		            	    case self::REPLICATE_DO_DB:
		            	    case self::REPLICATE_DO_TABLE:
		            	    case self::REPLICATE_IGNORE_DB:
		            	    case self::REPLICATE_IGNORE_TABLE:
		            	    case self::REPLICATE_REWRITE_DB:
		            	    case self::REPLICATE_WILD_DO_TABLE:
		            	    case self::REPLICATE_WILD_IGNORE_TABLE:
		            	    case self::REPLICATION:
		            	    case self::RESET:
		            	    case self::RESUME:
		            	    case self::RETURNED_SQLSTATE:
		            	    case self::RETURNS:
		            	    case self::REUSE:
		            	    case self::ROLE:
		            	    case self::ROLLBACK:
		            	    case self::ROLLUP:
		            	    case self::ROTATE:
		            	    case self::ROW:
		            	    case self::ROWS:
		            	    case self::ROW_FORMAT:
		            	    case self::RTREE:
		            	    case self::SAVEPOINT:
		            	    case self::SCHEDULE:
		            	    case self::SECURITY:
		            	    case self::SERVER:
		            	    case self::SESSION:
		            	    case self::SHARE:
		            	    case self::SHARED:
		            	    case self::SIGNED:
		            	    case self::SIMPLE:
		            	    case self::SLAVE:
		            	    case self::SLOW:
		            	    case self::SNAPSHOT:
		            	    case self::SOCKET:
		            	    case self::SOME:
		            	    case self::SONAME:
		            	    case self::SOUNDS:
		            	    case self::SOURCE:
		            	    case self::SQL_AFTER_GTIDS:
		            	    case self::SQL_AFTER_MTS_GAPS:
		            	    case self::SQL_BEFORE_GTIDS:
		            	    case self::SQL_BUFFER_RESULT:
		            	    case self::SQL_CACHE:
		            	    case self::SQL_NO_CACHE:
		            	    case self::SQL_THREAD:
		            	    case self::START:
		            	    case self::STARTS:
		            	    case self::STATS_AUTO_RECALC:
		            	    case self::STATS_PERSISTENT:
		            	    case self::STATS_SAMPLE_PAGES:
		            	    case self::STATUS:
		            	    case self::STOP:
		            	    case self::STORAGE:
		            	    case self::STRING:
		            	    case self::SUBCLASS_ORIGIN:
		            	    case self::SUBJECT:
		            	    case self::SUBPARTITION:
		            	    case self::SUBPARTITIONS:
		            	    case self::SUSPEND:
		            	    case self::SWAPS:
		            	    case self::SWITCHES:
		            	    case self::TABLE_NAME:
		            	    case self::TABLESPACE:
		            	    case self::TABLE_TYPE:
		            	    case self::TEMPORARY:
		            	    case self::TEMPTABLE:
		            	    case self::THAN:
		            	    case self::TRADITIONAL:
		            	    case self::TRANSACTION:
		            	    case self::TRANSACTIONAL:
		            	    case self::TRIGGERS:
		            	    case self::TRUNCATE:
		            	    case self::UNBOUNDED:
		            	    case self::UNDEFINED:
		            	    case self::UNDOFILE:
		            	    case self::UNDO_BUFFER_SIZE:
		            	    case self::UNINSTALL:
		            	    case self::UNKNOWN:
		            	    case self::UNTIL:
		            	    case self::UPGRADE:
		            	    case self::USER:
		            	    case self::USE_FRM:
		            	    case self::USER_RESOURCES:
		            	    case self::VALIDATION:
		            	    case self::VALUE:
		            	    case self::VARIABLES:
		            	    case self::VIEW:
		            	    case self::VIRTUAL:
		            	    case self::VISIBLE:
		            	    case self::WAIT:
		            	    case self::WARNINGS:
		            	    case self::WITHOUT:
		            	    case self::WORK:
		            	    case self::WRAPPER:
		            	    case self::X509:
		            	    case self::XA:
		            	    case self::XML:
		            	    case self::EUR:
		            	    case self::USA:
		            	    case self::JIS:
		            	    case self::ISO:
		            	    case self::INTERNAL:
		            	    case self::QUARTER:
		            	    case self::MONTH:
		            	    case self::DAY:
		            	    case self::HOUR:
		            	    case self::MINUTE:
		            	    case self::WEEK:
		            	    case self::SECOND:
		            	    case self::MICROSECOND:
		            	    case self::ADMIN:
		            	    case self::AUDIT_ABORT_EXEMPT:
		            	    case self::AUDIT_ADMIN:
		            	    case self::AUTHENTICATION_POLICY_ADMIN:
		            	    case self::BACKUP_ADMIN:
		            	    case self::BINLOG_ADMIN:
		            	    case self::BINLOG_ENCRYPTION_ADMIN:
		            	    case self::CLONE_ADMIN:
		            	    case self::CONNECTION_ADMIN:
		            	    case self::ENCRYPTION_KEY_ADMIN:
		            	    case self::EXECUTE:
		            	    case self::FILE:
		            	    case self::FIREWALL_ADMIN:
		            	    case self::FIREWALL_EXEMPT:
		            	    case self::FIREWALL_USER:
		            	    case self::GROUP_REPLICATION_ADMIN:
		            	    case self::INNODB_REDO_LOG_ARCHIVE:
		            	    case self::INVOKE:
		            	    case self::LAMBDA:
		            	    case self::NDB_STORED_USER:
		            	    case self::PASSWORDLESS_USER_ADMIN:
		            	    case self::PERSIST_RO_VARIABLES_ADMIN:
		            	    case self::PRIVILEGES:
		            	    case self::PROCESS:
		            	    case self::RELOAD:
		            	    case self::REPLICATION_APPLIER:
		            	    case self::REPLICATION_SLAVE_ADMIN:
		            	    case self::RESOURCE_GROUP_ADMIN:
		            	    case self::RESOURCE_GROUP_USER:
		            	    case self::ROLE_ADMIN:
		            	    case self::ROUTINE:
		            	    case self::S3:
		            	    case self::SESSION_VARIABLES_ADMIN:
		            	    case self::SET_USER_ID:
		            	    case self::SHOW_ROUTINE:
		            	    case self::SHUTDOWN:
		            	    case self::SUPER:
		            	    case self::SYSTEM_VARIABLES_ADMIN:
		            	    case self::TABLES:
		            	    case self::TABLE_ENCRYPTION_ADMIN:
		            	    case self::VERSION_TOKEN_ADMIN:
		            	    case self::XA_RECOVER_ADMIN:
		            	    case self::ARMSCII8:
		            	    case self::ASCII:
		            	    case self::BIG5:
		            	    case self::CP1250:
		            	    case self::CP1251:
		            	    case self::CP1256:
		            	    case self::CP1257:
		            	    case self::CP850:
		            	    case self::CP852:
		            	    case self::CP866:
		            	    case self::CP932:
		            	    case self::DEC8:
		            	    case self::EUCJPMS:
		            	    case self::EUCKR:
		            	    case self::GB18030:
		            	    case self::GB2312:
		            	    case self::GBK:
		            	    case self::GEOSTD8:
		            	    case self::GREEK:
		            	    case self::HEBREW:
		            	    case self::HP8:
		            	    case self::KEYBCS2:
		            	    case self::KOI8R:
		            	    case self::KOI8U:
		            	    case self::LATIN1:
		            	    case self::LATIN2:
		            	    case self::LATIN5:
		            	    case self::LATIN7:
		            	    case self::MACCE:
		            	    case self::MACROMAN:
		            	    case self::SJIS:
		            	    case self::SWE7:
		            	    case self::TIS620:
		            	    case self::UCS2:
		            	    case self::UJIS:
		            	    case self::UTF16:
		            	    case self::UTF16LE:
		            	    case self::UTF32:
		            	    case self::UTF8:
		            	    case self::UTF8MB3:
		            	    case self::UTF8MB4:
		            	    case self::ARCHIVE:
		            	    case self::BLACKHOLE:
		            	    case self::CSV:
		            	    case self::FEDERATED:
		            	    case self::INNODB:
		            	    case self::MEMORY:
		            	    case self::MRG_MYISAM:
		            	    case self::MYISAM:
		            	    case self::NDB:
		            	    case self::NDBCLUSTER:
		            	    case self::PERFORMANCE_SCHEMA:
		            	    case self::TOKUDB:
		            	    case self::REPEATABLE:
		            	    case self::COMMITTED:
		            	    case self::UNCOMMITTED:
		            	    case self::SERIALIZABLE:
		            	    case self::GEOMETRYCOLLECTION:
		            	    case self::LINESTRING:
		            	    case self::MULTILINESTRING:
		            	    case self::MULTIPOINT:
		            	    case self::MULTIPOLYGON:
		            	    case self::POINT:
		            	    case self::POLYGON:
		            	    case self::ABS:
		            	    case self::ACOS:
		            	    case self::ADDDATE:
		            	    case self::ADDTIME:
		            	    case self::AES_DECRYPT:
		            	    case self::AES_ENCRYPT:
		            	    case self::AREA:
		            	    case self::ASBINARY:
		            	    case self::ASIN:
		            	    case self::ASTEXT:
		            	    case self::ASWKB:
		            	    case self::ASWKT:
		            	    case self::ASYMMETRIC_DECRYPT:
		            	    case self::ASYMMETRIC_DERIVE:
		            	    case self::ASYMMETRIC_ENCRYPT:
		            	    case self::ASYMMETRIC_SIGN:
		            	    case self::ASYMMETRIC_VERIFY:
		            	    case self::ATAN:
		            	    case self::ATAN2:
		            	    case self::BENCHMARK:
		            	    case self::BIN:
		            	    case self::BIT_COUNT:
		            	    case self::BIT_LENGTH:
		            	    case self::BUFFER:
		            	    case self::CATALOG_NAME:
		            	    case self::CEIL:
		            	    case self::CEILING:
		            	    case self::CENTROID:
		            	    case self::CHARACTER_LENGTH:
		            	    case self::CHARSET:
		            	    case self::CHAR_LENGTH:
		            	    case self::COERCIBILITY:
		            	    case self::COLLATION:
		            	    case self::COMPRESS:
		            	    case self::CONCAT:
		            	    case self::CONCAT_WS:
		            	    case self::CONNECTION_ID:
		            	    case self::CONV:
		            	    case self::CONVERT_TZ:
		            	    case self::COS:
		            	    case self::COT:
		            	    case self::CRC32:
		            	    case self::CREATE_ASYMMETRIC_PRIV_KEY:
		            	    case self::CREATE_ASYMMETRIC_PUB_KEY:
		            	    case self::CREATE_DH_PARAMETERS:
		            	    case self::CREATE_DIGEST:
		            	    case self::CROSSES:
		            	    case self::DATEDIFF:
		            	    case self::DATE_FORMAT:
		            	    case self::DAYNAME:
		            	    case self::DAYOFMONTH:
		            	    case self::DAYOFWEEK:
		            	    case self::DAYOFYEAR:
		            	    case self::DECODE:
		            	    case self::DEGREES:
		            	    case self::DES_DECRYPT:
		            	    case self::DES_ENCRYPT:
		            	    case self::DIMENSION:
		            	    case self::DISJOINT:
		            	    case self::ELT:
		            	    case self::ENCODE:
		            	    case self::ENCRYPT:
		            	    case self::ENDPOINT:
		            	    case self::ENGINE_ATTRIBUTE:
		            	    case self::ENVELOPE:
		            	    case self::EQUALS:
		            	    case self::EXP:
		            	    case self::EXPORT_SET:
		            	    case self::EXTERIORRING:
		            	    case self::EXTRACTVALUE:
		            	    case self::FIELD:
		            	    case self::FIND_IN_SET:
		            	    case self::FLOOR:
		            	    case self::FORMAT:
		            	    case self::FOUND_ROWS:
		            	    case self::FROM_BASE64:
		            	    case self::FROM_DAYS:
		            	    case self::FROM_UNIXTIME:
		            	    case self::GEOMCOLLFROMTEXT:
		            	    case self::GEOMCOLLFROMWKB:
		            	    case self::GEOMETRYCOLLECTIONFROMTEXT:
		            	    case self::GEOMETRYCOLLECTIONFROMWKB:
		            	    case self::GEOMETRYFROMTEXT:
		            	    case self::GEOMETRYFROMWKB:
		            	    case self::GEOMETRYN:
		            	    case self::GEOMETRYTYPE:
		            	    case self::GEOMFROMTEXT:
		            	    case self::GEOMFROMWKB:
		            	    case self::GET_FORMAT:
		            	    case self::GET_LOCK:
		            	    case self::GLENGTH:
		            	    case self::GREATEST:
		            	    case self::GTID_SUBSET:
		            	    case self::GTID_SUBTRACT:
		            	    case self::HEX:
		            	    case self::IFNULL:
		            	    case self::INET6_ATON:
		            	    case self::INET6_NTOA:
		            	    case self::INET_ATON:
		            	    case self::INET_NTOA:
		            	    case self::INSTR:
		            	    case self::INTERIORRINGN:
		            	    case self::INTERSECTS:
		            	    case self::ISCLOSED:
		            	    case self::ISEMPTY:
		            	    case self::ISNULL:
		            	    case self::ISSIMPLE:
		            	    case self::IS_FREE_LOCK:
		            	    case self::IS_IPV4:
		            	    case self::IS_IPV4_COMPAT:
		            	    case self::IS_IPV4_MAPPED:
		            	    case self::IS_IPV6:
		            	    case self::IS_USED_LOCK:
		            	    case self::LAST_INSERT_ID:
		            	    case self::LCASE:
		            	    case self::LEAST:
		            	    case self::LENGTH:
		            	    case self::LINEFROMTEXT:
		            	    case self::LINEFROMWKB:
		            	    case self::LINESTRINGFROMTEXT:
		            	    case self::LINESTRINGFROMWKB:
		            	    case self::LN:
		            	    case self::LOAD_FILE:
		            	    case self::LOCATE:
		            	    case self::LOG:
		            	    case self::LOG10:
		            	    case self::LOG2:
		            	    case self::LOWER:
		            	    case self::LPAD:
		            	    case self::LTRIM:
		            	    case self::MAKEDATE:
		            	    case self::MAKETIME:
		            	    case self::MAKE_SET:
		            	    case self::MASTER_POS_WAIT:
		            	    case self::MBRCONTAINS:
		            	    case self::MBRDISJOINT:
		            	    case self::MBREQUAL:
		            	    case self::MBRINTERSECTS:
		            	    case self::MBROVERLAPS:
		            	    case self::MBRTOUCHES:
		            	    case self::MBRWITHIN:
		            	    case self::MD5:
		            	    case self::MLINEFROMTEXT:
		            	    case self::MLINEFROMWKB:
		            	    case self::MONTHNAME:
		            	    case self::MPOINTFROMTEXT:
		            	    case self::MPOINTFROMWKB:
		            	    case self::MPOLYFROMTEXT:
		            	    case self::MPOLYFROMWKB:
		            	    case self::MULTILINESTRINGFROMTEXT:
		            	    case self::MULTILINESTRINGFROMWKB:
		            	    case self::MULTIPOINTFROMTEXT:
		            	    case self::MULTIPOINTFROMWKB:
		            	    case self::MULTIPOLYGONFROMTEXT:
		            	    case self::MULTIPOLYGONFROMWKB:
		            	    case self::NAME_CONST:
		            	    case self::NULLIF:
		            	    case self::NUMGEOMETRIES:
		            	    case self::NUMINTERIORRINGS:
		            	    case self::NUMPOINTS:
		            	    case self::OCT:
		            	    case self::OCTET_LENGTH:
		            	    case self::ORD:
		            	    case self::OVERLAPS:
		            	    case self::PERIOD_ADD:
		            	    case self::PERIOD_DIFF:
		            	    case self::PI:
		            	    case self::POINTFROMTEXT:
		            	    case self::POINTFROMWKB:
		            	    case self::POINTN:
		            	    case self::POLYFROMTEXT:
		            	    case self::POLYFROMWKB:
		            	    case self::POLYGONFROMTEXT:
		            	    case self::POLYGONFROMWKB:
		            	    case self::POW:
		            	    case self::POWER:
		            	    case self::QUOTE:
		            	    case self::RADIANS:
		            	    case self::RAND:
		            	    case self::RANDOM:
		            	    case self::RANDOM_BYTES:
		            	    case self::RELEASE_LOCK:
		            	    case self::REVERSE:
		            	    case self::ROUND:
		            	    case self::ROW_COUNT:
		            	    case self::RPAD:
		            	    case self::RTRIM:
		            	    case self::SEC_TO_TIME:
		            	    case self::SECONDARY_ENGINE_ATTRIBUTE:
		            	    case self::SESSION_USER:
		            	    case self::SHA:
		            	    case self::SHA1:
		            	    case self::SHA2:
		            	    case self::SCHEMA_NAME:
		            	    case self::SIGN:
		            	    case self::SIN:
		            	    case self::SLEEP:
		            	    case self::SOUNDEX:
		            	    case self::SQL_THREAD_WAIT_AFTER_GTIDS:
		            	    case self::SQRT:
		            	    case self::SRID:
		            	    case self::STARTPOINT:
		            	    case self::STRCMP:
		            	    case self::STR_TO_DATE:
		            	    case self::ST_AREA:
		            	    case self::ST_ASBINARY:
		            	    case self::ST_ASTEXT:
		            	    case self::ST_ASWKB:
		            	    case self::ST_ASWKT:
		            	    case self::ST_BUFFER:
		            	    case self::ST_CENTROID:
		            	    case self::ST_CONTAINS:
		            	    case self::ST_CROSSES:
		            	    case self::ST_DIFFERENCE:
		            	    case self::ST_DIMENSION:
		            	    case self::ST_DISJOINT:
		            	    case self::ST_DISTANCE:
		            	    case self::ST_ENDPOINT:
		            	    case self::ST_ENVELOPE:
		            	    case self::ST_EQUALS:
		            	    case self::ST_EXTERIORRING:
		            	    case self::ST_GEOMCOLLFROMTEXT:
		            	    case self::ST_GEOMCOLLFROMTXT:
		            	    case self::ST_GEOMCOLLFROMWKB:
		            	    case self::ST_GEOMETRYCOLLECTIONFROMTEXT:
		            	    case self::ST_GEOMETRYCOLLECTIONFROMWKB:
		            	    case self::ST_GEOMETRYFROMTEXT:
		            	    case self::ST_GEOMETRYFROMWKB:
		            	    case self::ST_GEOMETRYN:
		            	    case self::ST_GEOMETRYTYPE:
		            	    case self::ST_GEOMFROMTEXT:
		            	    case self::ST_GEOMFROMWKB:
		            	    case self::ST_INTERIORRINGN:
		            	    case self::ST_INTERSECTION:
		            	    case self::ST_INTERSECTS:
		            	    case self::ST_ISCLOSED:
		            	    case self::ST_ISEMPTY:
		            	    case self::ST_ISSIMPLE:
		            	    case self::ST_LINEFROMTEXT:
		            	    case self::ST_LINEFROMWKB:
		            	    case self::ST_LINESTRINGFROMTEXT:
		            	    case self::ST_LINESTRINGFROMWKB:
		            	    case self::ST_NUMGEOMETRIES:
		            	    case self::ST_NUMINTERIORRING:
		            	    case self::ST_NUMINTERIORRINGS:
		            	    case self::ST_NUMPOINTS:
		            	    case self::ST_OVERLAPS:
		            	    case self::ST_POINTFROMTEXT:
		            	    case self::ST_POINTFROMWKB:
		            	    case self::ST_POINTN:
		            	    case self::ST_POLYFROMTEXT:
		            	    case self::ST_POLYFROMWKB:
		            	    case self::ST_POLYGONFROMTEXT:
		            	    case self::ST_POLYGONFROMWKB:
		            	    case self::ST_SRID:
		            	    case self::ST_STARTPOINT:
		            	    case self::ST_SYMDIFFERENCE:
		            	    case self::ST_TOUCHES:
		            	    case self::ST_UNION:
		            	    case self::ST_WITHIN:
		            	    case self::ST_X:
		            	    case self::ST_Y:
		            	    case self::SUBDATE:
		            	    case self::SUBSTRING_INDEX:
		            	    case self::SUBTIME:
		            	    case self::SYSTEM_USER:
		            	    case self::TAN:
		            	    case self::TIMEDIFF:
		            	    case self::TIMESTAMPADD:
		            	    case self::TIMESTAMPDIFF:
		            	    case self::TIME_FORMAT:
		            	    case self::TIME_TO_SEC:
		            	    case self::TOUCHES:
		            	    case self::TO_BASE64:
		            	    case self::TO_DAYS:
		            	    case self::TO_SECONDS:
		            	    case self::TP_CONNECTION_ADMIN:
		            	    case self::UCASE:
		            	    case self::UNCOMPRESS:
		            	    case self::UNCOMPRESSED_LENGTH:
		            	    case self::UNHEX:
		            	    case self::UNIX_TIMESTAMP:
		            	    case self::UPDATEXML:
		            	    case self::UPPER:
		            	    case self::UUID:
		            	    case self::UUID_SHORT:
		            	    case self::VALIDATE_PASSWORD_STRENGTH:
		            	    case self::VERSION:
		            	    case self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
		            	    case self::WEEKDAY:
		            	    case self::WEEKOFYEAR:
		            	    case self::WEIGHT_STRING:
		            	    case self::WITHIN:
		            	    case self::YEARWEEK:
		            	    case self::Y_FUNCTION:
		            	    case self::X_FUNCTION:
		            	    case self::MOD:
		            	    case self::CHARSET_REVERSE_QOUTE_STRING:
		            	    case self::STRING_LITERAL:
		            	    case self::ID:
		            	    	$this->setState(2911);
		            	    	$this->uidList();
		            	    	break;

		            	    case self::ALL:
		            	    	$this->setState(2912);
		            	    	$this->match(self::ALL);
		            	    	break;

		            	default:
		            		throw new NoViableAltException($this);
		            	}
		            	break;

		            case self::COALESCE:
		            	$localContext = new Context\AlterByCoalescePartitionContext($localContext);
		            	$this->enterOuterAlt($localContext, 6);
		            	$this->setState(2915);
		            	$this->match(self::COALESCE);
		            	$this->setState(2916);
		            	$this->match(self::PARTITION);
		            	$this->setState(2917);
		            	$this->decimalLiteral();
		            	break;

		            case self::REORGANIZE:
		            	$localContext = new Context\AlterByReorganizePartitionContext($localContext);
		            	$this->enterOuterAlt($localContext, 7);
		            	$this->setState(2918);
		            	$this->match(self::REORGANIZE);
		            	$this->setState(2919);
		            	$this->match(self::PARTITION);
		            	$this->setState(2920);
		            	$this->uidList();
		            	$this->setState(2921);
		            	$this->match(self::INTO);
		            	$this->setState(2922);
		            	$this->match(self::LR_BRACKET);
		            	$this->setState(2923);
		            	$this->partitionDefinition();
		            	$this->setState(2928);
		            	$this->errorHandler->sync($this);

		            	$_la = $this->input->LA(1);
		            	while ($_la === self::COMMA) {
		            		$this->setState(2924);
		            		$this->match(self::COMMA);
		            		$this->setState(2925);
		            		$this->partitionDefinition();
		            		$this->setState(2930);
		            		$this->errorHandler->sync($this);
		            		$_la = $this->input->LA(1);
		            	}
		            	$this->setState(2931);
		            	$this->match(self::RR_BRACKET);
		            	break;

		            case self::EXCHANGE:
		            	$localContext = new Context\AlterByExchangePartitionContext($localContext);
		            	$this->enterOuterAlt($localContext, 8);
		            	$this->setState(2933);
		            	$this->match(self::EXCHANGE);
		            	$this->setState(2934);
		            	$this->match(self::PARTITION);
		            	$this->setState(2935);
		            	$this->uid();
		            	$this->setState(2936);
		            	$this->match(self::WITH);
		            	$this->setState(2937);
		            	$this->match(self::TABLE);
		            	$this->setState(2938);
		            	$this->tableName();
		            	$this->setState(2941);
		            	$this->errorHandler->sync($this);

		            	switch ($this->getInterpreter()->adaptivePredict($this->input, 375, $this->ctx)) {
		            	    case 1:
		            		    $this->setState(2939);

		            		    $localContext->validationFormat = $this->input->LT(1);
		            		    $_la = $this->input->LA(1);

		            		    if (!($_la === self::WITH || $_la === self::WITHOUT)) {
		            		    	    $localContext->validationFormat = $this->errorHandler->recoverInline($this);
		            		    } else {
		            		    	if ($this->input->LA(1) === Token::EOF) {
		            		    	    $this->matchedEOF = true;
		            		        }

		            		    	$this->errorHandler->reportMatch($this);
		            		    	$this->consume();
		            		    }
		            		    $this->setState(2940);
		            		    $this->match(self::VALIDATION);
		            		break;
		            	}
		            	break;

		            case self::ANALYZE:
		            	$localContext = new Context\AlterByAnalyzePartitionContext($localContext);
		            	$this->enterOuterAlt($localContext, 9);
		            	$this->setState(2943);
		            	$this->match(self::ANALYZE);
		            	$this->setState(2944);
		            	$this->match(self::PARTITION);
		            	$this->setState(2947);
		            	$this->errorHandler->sync($this);

		            	switch ($this->input->LA(1)) {
		            	    case self::ARRAY:
		            	    case self::ATTRIBUTE:
		            	    case self::BUCKETS:
		            	    case self::CONDITION:
		            	    case self::CURRENT:
		            	    case self::CURRENT_USER:
		            	    case self::DATABASE:
		            	    case self::DEFAULT:
		            	    case self::DIAGNOSTICS:
		            	    case self::EMPTY:
		            	    case self::ENFORCED:
		            	    case self::EXCEPT:
		            	    case self::GROUP:
		            	    case self::IF:
		            	    case self::IGNORED:
		            	    case self::INSERT:
		            	    case self::LATERAL:
		            	    case self::LEFT:
		            	    case self::NUMBER:
		            	    case self::OPTIONAL:
		            	    case self::ORDER:
		            	    case self::PRIMARY:
		            	    case self::REPEAT:
		            	    case self::REPLACE:
		            	    case self::RIGHT:
		            	    case self::SCHEMA:
		            	    case self::SKIP_QUERY_REWRITE:
		            	    case self::STACKED:
		            	    case self::DATE:
		            	    case self::TIME:
		            	    case self::TIMESTAMP:
		            	    case self::DATETIME:
		            	    case self::YEAR:
		            	    case self::BINARY:
		            	    case self::TEXT:
		            	    case self::ENUM:
		            	    case self::SERIAL:
		            	    case self::JSON_ARRAY:
		            	    case self::JSON_ARRAYAGG:
		            	    case self::JSON_ARRAY_APPEND:
		            	    case self::JSON_ARRAY_INSERT:
		            	    case self::JSON_CONTAINS:
		            	    case self::JSON_CONTAINS_PATH:
		            	    case self::JSON_DEPTH:
		            	    case self::JSON_EXTRACT:
		            	    case self::JSON_INSERT:
		            	    case self::JSON_KEYS:
		            	    case self::JSON_LENGTH:
		            	    case self::JSON_MERGE:
		            	    case self::JSON_MERGE_PATCH:
		            	    case self::JSON_MERGE_PRESERVE:
		            	    case self::JSON_OBJECT:
		            	    case self::JSON_OBJECTAGG:
		            	    case self::JSON_OVERLAPS:
		            	    case self::JSON_PRETTY:
		            	    case self::JSON_QUOTE:
		            	    case self::JSON_REMOVE:
		            	    case self::JSON_REPLACE:
		            	    case self::JSON_SCHEMA_VALID:
		            	    case self::JSON_SCHEMA_VALIDATION_REPORT:
		            	    case self::JSON_SEARCH:
		            	    case self::JSON_SET:
		            	    case self::JSON_STORAGE_FREE:
		            	    case self::JSON_STORAGE_SIZE:
		            	    case self::JSON_TABLE:
		            	    case self::JSON_TYPE:
		            	    case self::JSON_UNQUOTE:
		            	    case self::JSON_VALID:
		            	    case self::JSON_VALUE:
		            	    case self::NESTED:
		            	    case self::ORDINALITY:
		            	    case self::PATH:
		            	    case self::AVG:
		            	    case self::BIT_AND:
		            	    case self::BIT_OR:
		            	    case self::BIT_XOR:
		            	    case self::COUNT:
		            	    case self::CUME_DIST:
		            	    case self::DENSE_RANK:
		            	    case self::FIRST_VALUE:
		            	    case self::GROUP_CONCAT:
		            	    case self::LAG:
		            	    case self::LAST_VALUE:
		            	    case self::LEAD:
		            	    case self::MAX:
		            	    case self::MIN:
		            	    case self::NTILE:
		            	    case self::NTH_VALUE:
		            	    case self::PERCENT_RANK:
		            	    case self::RANK:
		            	    case self::ROW_NUMBER:
		            	    case self::STD:
		            	    case self::STDDEV:
		            	    case self::STDDEV_POP:
		            	    case self::STDDEV_SAMP:
		            	    case self::SUM:
		            	    case self::VAR_POP:
		            	    case self::VAR_SAMP:
		            	    case self::VARIANCE:
		            	    case self::CURRENT_DATE:
		            	    case self::CURRENT_TIME:
		            	    case self::CURRENT_TIMESTAMP:
		            	    case self::LOCALTIME:
		            	    case self::CURDATE:
		            	    case self::CURTIME:
		            	    case self::DATE_ADD:
		            	    case self::DATE_SUB:
		            	    case self::LOCALTIMESTAMP:
		            	    case self::NOW:
		            	    case self::POSITION:
		            	    case self::SUBSTR:
		            	    case self::SUBSTRING:
		            	    case self::SYSDATE:
		            	    case self::TRIM:
		            	    case self::UTC_DATE:
		            	    case self::UTC_TIME:
		            	    case self::UTC_TIMESTAMP:
		            	    case self::ACCOUNT:
		            	    case self::ACTION:
		            	    case self::AFTER:
		            	    case self::AGGREGATE:
		            	    case self::ALGORITHM:
		            	    case self::ANY:
		            	    case self::AT:
		            	    case self::AUTHORS:
		            	    case self::AUTOCOMMIT:
		            	    case self::AUTOEXTEND_SIZE:
		            	    case self::AUTO_INCREMENT:
		            	    case self::AVG_ROW_LENGTH:
		            	    case self::BEGIN:
		            	    case self::BINLOG:
		            	    case self::BIT:
		            	    case self::BLOCK:
		            	    case self::BOOL:
		            	    case self::BOOLEAN:
		            	    case self::BTREE:
		            	    case self::CACHE:
		            	    case self::CASCADED:
		            	    case self::CHAIN:
		            	    case self::CHANGED:
		            	    case self::CHANNEL:
		            	    case self::CHECKSUM:
		            	    case self::PAGE_CHECKSUM:
		            	    case self::CIPHER:
		            	    case self::CLASS_ORIGIN:
		            	    case self::CLIENT:
		            	    case self::CLOSE:
		            	    case self::CLUSTERING:
		            	    case self::COALESCE:
		            	    case self::CODE:
		            	    case self::COLUMNS:
		            	    case self::COLUMN_FORMAT:
		            	    case self::COLUMN_NAME:
		            	    case self::COMMENT:
		            	    case self::COMMIT:
		            	    case self::COMPACT:
		            	    case self::COMPLETION:
		            	    case self::COMPRESSED:
		            	    case self::COMPRESSION:
		            	    case self::CONCURRENT:
		            	    case self::CONNECT:
		            	    case self::CONNECTION:
		            	    case self::CONSISTENT:
		            	    case self::CONSTRAINT_CATALOG:
		            	    case self::CONSTRAINT_SCHEMA:
		            	    case self::CONSTRAINT_NAME:
		            	    case self::CONTAINS:
		            	    case self::CONTEXT:
		            	    case self::CONTRIBUTORS:
		            	    case self::COPY:
		            	    case self::CPU:
		            	    case self::CURSOR_NAME:
		            	    case self::DATA:
		            	    case self::DATAFILE:
		            	    case self::DEALLOCATE:
		            	    case self::DEFAULT_AUTH:
		            	    case self::DEFINER:
		            	    case self::DELAY_KEY_WRITE:
		            	    case self::DES_KEY_FILE:
		            	    case self::DIRECTORY:
		            	    case self::DISABLE:
		            	    case self::DISCARD:
		            	    case self::DISK:
		            	    case self::DO:
		            	    case self::DUMPFILE:
		            	    case self::DUPLICATE:
		            	    case self::DYNAMIC:
		            	    case self::ENABLE:
		            	    case self::ENCRYPTION:
		            	    case self::END:
		            	    case self::ENDS:
		            	    case self::ENGINE:
		            	    case self::ENGINES:
		            	    case self::ERROR:
		            	    case self::ERRORS:
		            	    case self::ESCAPE:
		            	    case self::EVEN:
		            	    case self::EVENT:
		            	    case self::EVENTS:
		            	    case self::EVERY:
		            	    case self::EXCHANGE:
		            	    case self::EXCLUSIVE:
		            	    case self::EXPIRE:
		            	    case self::EXPORT:
		            	    case self::EXTENDED:
		            	    case self::EXTENT_SIZE:
		            	    case self::FAILED_LOGIN_ATTEMPTS:
		            	    case self::FAST:
		            	    case self::FAULTS:
		            	    case self::FIELDS:
		            	    case self::FILE_BLOCK_SIZE:
		            	    case self::FILTER:
		            	    case self::FIRST:
		            	    case self::FIXED:
		            	    case self::FLUSH:
		            	    case self::FOLLOWS:
		            	    case self::FOUND:
		            	    case self::FULL:
		            	    case self::FUNCTION:
		            	    case self::GENERAL:
		            	    case self::GLOBAL:
		            	    case self::GRANTS:
		            	    case self::GROUP_REPLICATION:
		            	    case self::HANDLER:
		            	    case self::HASH:
		            	    case self::HELP:
		            	    case self::HISTORY:
		            	    case self::HOST:
		            	    case self::HOSTS:
		            	    case self::IDENTIFIED:
		            	    case self::IGNORE_SERVER_IDS:
		            	    case self::IMPORT:
		            	    case self::INDEXES:
		            	    case self::INITIAL_SIZE:
		            	    case self::INPLACE:
		            	    case self::INSERT_METHOD:
		            	    case self::INSTALL:
		            	    case self::INSTANCE:
		            	    case self::INSTANT:
		            	    case self::INVISIBLE:
		            	    case self::INVOKER:
		            	    case self::IO:
		            	    case self::IO_THREAD:
		            	    case self::IPC:
		            	    case self::ISOLATION:
		            	    case self::ISSUER:
		            	    case self::JSON:
		            	    case self::KEY_BLOCK_SIZE:
		            	    case self::LANGUAGE:
		            	    case self::LAST:
		            	    case self::LEAVES:
		            	    case self::LESS:
		            	    case self::LEVEL:
		            	    case self::LIST:
		            	    case self::LOCAL:
		            	    case self::LOGFILE:
		            	    case self::LOGS:
		            	    case self::MASTER:
		            	    case self::MASTER_AUTO_POSITION:
		            	    case self::MASTER_CONNECT_RETRY:
		            	    case self::MASTER_DELAY:
		            	    case self::MASTER_HEARTBEAT_PERIOD:
		            	    case self::MASTER_HOST:
		            	    case self::MASTER_LOG_FILE:
		            	    case self::MASTER_LOG_POS:
		            	    case self::MASTER_PASSWORD:
		            	    case self::MASTER_PORT:
		            	    case self::MASTER_RETRY_COUNT:
		            	    case self::MASTER_SSL:
		            	    case self::MASTER_SSL_CA:
		            	    case self::MASTER_SSL_CAPATH:
		            	    case self::MASTER_SSL_CERT:
		            	    case self::MASTER_SSL_CIPHER:
		            	    case self::MASTER_SSL_CRL:
		            	    case self::MASTER_SSL_CRLPATH:
		            	    case self::MASTER_SSL_KEY:
		            	    case self::MASTER_TLS_VERSION:
		            	    case self::MASTER_USER:
		            	    case self::MAX_CONNECTIONS_PER_HOUR:
		            	    case self::MAX_QUERIES_PER_HOUR:
		            	    case self::MAX_ROWS:
		            	    case self::MAX_SIZE:
		            	    case self::MAX_UPDATES_PER_HOUR:
		            	    case self::MAX_USER_CONNECTIONS:
		            	    case self::MEDIUM:
		            	    case self::MEMBER:
		            	    case self::MERGE:
		            	    case self::MESSAGE_TEXT:
		            	    case self::MID:
		            	    case self::MIGRATE:
		            	    case self::MIN_ROWS:
		            	    case self::MODE:
		            	    case self::MODIFY:
		            	    case self::MUTEX:
		            	    case self::MYSQL:
		            	    case self::MYSQL_ERRNO:
		            	    case self::NAME:
		            	    case self::NAMES:
		            	    case self::NCHAR:
		            	    case self::NEVER:
		            	    case self::NEXT:
		            	    case self::NO:
		            	    case self::NOCOPY:
		            	    case self::NOWAIT:
		            	    case self::NODEGROUP:
		            	    case self::NONE:
		            	    case self::ODBC:
		            	    case self::OFFLINE:
		            	    case self::OFFSET:
		            	    case self::OF:
		            	    case self::OJ:
		            	    case self::OLD_PASSWORD:
		            	    case self::ONE:
		            	    case self::ONLINE:
		            	    case self::ONLY:
		            	    case self::OPEN:
		            	    case self::OPTIMIZER_COSTS:
		            	    case self::OPTIONS:
		            	    case self::OWNER:
		            	    case self::PACK_KEYS:
		            	    case self::PAGE:
		            	    case self::PARSER:
		            	    case self::PARTIAL:
		            	    case self::PARTITIONING:
		            	    case self::PARTITIONS:
		            	    case self::PASSWORD:
		            	    case self::PASSWORD_LOCK_TIME:
		            	    case self::PHASE:
		            	    case self::PLUGIN:
		            	    case self::PLUGIN_DIR:
		            	    case self::PLUGINS:
		            	    case self::PORT:
		            	    case self::PRECEDES:
		            	    case self::PREPARE:
		            	    case self::PRESERVE:
		            	    case self::PREV:
		            	    case self::PROCESSLIST:
		            	    case self::PROFILE:
		            	    case self::PROFILES:
		            	    case self::PROXY:
		            	    case self::QUERY:
		            	    case self::QUICK:
		            	    case self::REBUILD:
		            	    case self::RECOVER:
		            	    case self::RECURSIVE:
		            	    case self::REDO_BUFFER_SIZE:
		            	    case self::REDUNDANT:
		            	    case self::RELAY:
		            	    case self::RELAY_LOG_FILE:
		            	    case self::RELAY_LOG_POS:
		            	    case self::RELAYLOG:
		            	    case self::REMOVE:
		            	    case self::REORGANIZE:
		            	    case self::REPAIR:
		            	    case self::REPLICATE_DO_DB:
		            	    case self::REPLICATE_DO_TABLE:
		            	    case self::REPLICATE_IGNORE_DB:
		            	    case self::REPLICATE_IGNORE_TABLE:
		            	    case self::REPLICATE_REWRITE_DB:
		            	    case self::REPLICATE_WILD_DO_TABLE:
		            	    case self::REPLICATE_WILD_IGNORE_TABLE:
		            	    case self::REPLICATION:
		            	    case self::RESET:
		            	    case self::RESUME:
		            	    case self::RETURNED_SQLSTATE:
		            	    case self::RETURNS:
		            	    case self::REUSE:
		            	    case self::ROLE:
		            	    case self::ROLLBACK:
		            	    case self::ROLLUP:
		            	    case self::ROTATE:
		            	    case self::ROW:
		            	    case self::ROWS:
		            	    case self::ROW_FORMAT:
		            	    case self::RTREE:
		            	    case self::SAVEPOINT:
		            	    case self::SCHEDULE:
		            	    case self::SECURITY:
		            	    case self::SERVER:
		            	    case self::SESSION:
		            	    case self::SHARE:
		            	    case self::SHARED:
		            	    case self::SIGNED:
		            	    case self::SIMPLE:
		            	    case self::SLAVE:
		            	    case self::SLOW:
		            	    case self::SNAPSHOT:
		            	    case self::SOCKET:
		            	    case self::SOME:
		            	    case self::SONAME:
		            	    case self::SOUNDS:
		            	    case self::SOURCE:
		            	    case self::SQL_AFTER_GTIDS:
		            	    case self::SQL_AFTER_MTS_GAPS:
		            	    case self::SQL_BEFORE_GTIDS:
		            	    case self::SQL_BUFFER_RESULT:
		            	    case self::SQL_CACHE:
		            	    case self::SQL_NO_CACHE:
		            	    case self::SQL_THREAD:
		            	    case self::START:
		            	    case self::STARTS:
		            	    case self::STATS_AUTO_RECALC:
		            	    case self::STATS_PERSISTENT:
		            	    case self::STATS_SAMPLE_PAGES:
		            	    case self::STATUS:
		            	    case self::STOP:
		            	    case self::STORAGE:
		            	    case self::STRING:
		            	    case self::SUBCLASS_ORIGIN:
		            	    case self::SUBJECT:
		            	    case self::SUBPARTITION:
		            	    case self::SUBPARTITIONS:
		            	    case self::SUSPEND:
		            	    case self::SWAPS:
		            	    case self::SWITCHES:
		            	    case self::TABLE_NAME:
		            	    case self::TABLESPACE:
		            	    case self::TABLE_TYPE:
		            	    case self::TEMPORARY:
		            	    case self::TEMPTABLE:
		            	    case self::THAN:
		            	    case self::TRADITIONAL:
		            	    case self::TRANSACTION:
		            	    case self::TRANSACTIONAL:
		            	    case self::TRIGGERS:
		            	    case self::TRUNCATE:
		            	    case self::UNBOUNDED:
		            	    case self::UNDEFINED:
		            	    case self::UNDOFILE:
		            	    case self::UNDO_BUFFER_SIZE:
		            	    case self::UNINSTALL:
		            	    case self::UNKNOWN:
		            	    case self::UNTIL:
		            	    case self::UPGRADE:
		            	    case self::USER:
		            	    case self::USE_FRM:
		            	    case self::USER_RESOURCES:
		            	    case self::VALIDATION:
		            	    case self::VALUE:
		            	    case self::VARIABLES:
		            	    case self::VIEW:
		            	    case self::VIRTUAL:
		            	    case self::VISIBLE:
		            	    case self::WAIT:
		            	    case self::WARNINGS:
		            	    case self::WITHOUT:
		            	    case self::WORK:
		            	    case self::WRAPPER:
		            	    case self::X509:
		            	    case self::XA:
		            	    case self::XML:
		            	    case self::EUR:
		            	    case self::USA:
		            	    case self::JIS:
		            	    case self::ISO:
		            	    case self::INTERNAL:
		            	    case self::QUARTER:
		            	    case self::MONTH:
		            	    case self::DAY:
		            	    case self::HOUR:
		            	    case self::MINUTE:
		            	    case self::WEEK:
		            	    case self::SECOND:
		            	    case self::MICROSECOND:
		            	    case self::ADMIN:
		            	    case self::AUDIT_ABORT_EXEMPT:
		            	    case self::AUDIT_ADMIN:
		            	    case self::AUTHENTICATION_POLICY_ADMIN:
		            	    case self::BACKUP_ADMIN:
		            	    case self::BINLOG_ADMIN:
		            	    case self::BINLOG_ENCRYPTION_ADMIN:
		            	    case self::CLONE_ADMIN:
		            	    case self::CONNECTION_ADMIN:
		            	    case self::ENCRYPTION_KEY_ADMIN:
		            	    case self::EXECUTE:
		            	    case self::FILE:
		            	    case self::FIREWALL_ADMIN:
		            	    case self::FIREWALL_EXEMPT:
		            	    case self::FIREWALL_USER:
		            	    case self::GROUP_REPLICATION_ADMIN:
		            	    case self::INNODB_REDO_LOG_ARCHIVE:
		            	    case self::INVOKE:
		            	    case self::LAMBDA:
		            	    case self::NDB_STORED_USER:
		            	    case self::PASSWORDLESS_USER_ADMIN:
		            	    case self::PERSIST_RO_VARIABLES_ADMIN:
		            	    case self::PRIVILEGES:
		            	    case self::PROCESS:
		            	    case self::RELOAD:
		            	    case self::REPLICATION_APPLIER:
		            	    case self::REPLICATION_SLAVE_ADMIN:
		            	    case self::RESOURCE_GROUP_ADMIN:
		            	    case self::RESOURCE_GROUP_USER:
		            	    case self::ROLE_ADMIN:
		            	    case self::ROUTINE:
		            	    case self::S3:
		            	    case self::SESSION_VARIABLES_ADMIN:
		            	    case self::SET_USER_ID:
		            	    case self::SHOW_ROUTINE:
		            	    case self::SHUTDOWN:
		            	    case self::SUPER:
		            	    case self::SYSTEM_VARIABLES_ADMIN:
		            	    case self::TABLES:
		            	    case self::TABLE_ENCRYPTION_ADMIN:
		            	    case self::VERSION_TOKEN_ADMIN:
		            	    case self::XA_RECOVER_ADMIN:
		            	    case self::ARMSCII8:
		            	    case self::ASCII:
		            	    case self::BIG5:
		            	    case self::CP1250:
		            	    case self::CP1251:
		            	    case self::CP1256:
		            	    case self::CP1257:
		            	    case self::CP850:
		            	    case self::CP852:
		            	    case self::CP866:
		            	    case self::CP932:
		            	    case self::DEC8:
		            	    case self::EUCJPMS:
		            	    case self::EUCKR:
		            	    case self::GB18030:
		            	    case self::GB2312:
		            	    case self::GBK:
		            	    case self::GEOSTD8:
		            	    case self::GREEK:
		            	    case self::HEBREW:
		            	    case self::HP8:
		            	    case self::KEYBCS2:
		            	    case self::KOI8R:
		            	    case self::KOI8U:
		            	    case self::LATIN1:
		            	    case self::LATIN2:
		            	    case self::LATIN5:
		            	    case self::LATIN7:
		            	    case self::MACCE:
		            	    case self::MACROMAN:
		            	    case self::SJIS:
		            	    case self::SWE7:
		            	    case self::TIS620:
		            	    case self::UCS2:
		            	    case self::UJIS:
		            	    case self::UTF16:
		            	    case self::UTF16LE:
		            	    case self::UTF32:
		            	    case self::UTF8:
		            	    case self::UTF8MB3:
		            	    case self::UTF8MB4:
		            	    case self::ARCHIVE:
		            	    case self::BLACKHOLE:
		            	    case self::CSV:
		            	    case self::FEDERATED:
		            	    case self::INNODB:
		            	    case self::MEMORY:
		            	    case self::MRG_MYISAM:
		            	    case self::MYISAM:
		            	    case self::NDB:
		            	    case self::NDBCLUSTER:
		            	    case self::PERFORMANCE_SCHEMA:
		            	    case self::TOKUDB:
		            	    case self::REPEATABLE:
		            	    case self::COMMITTED:
		            	    case self::UNCOMMITTED:
		            	    case self::SERIALIZABLE:
		            	    case self::GEOMETRYCOLLECTION:
		            	    case self::LINESTRING:
		            	    case self::MULTILINESTRING:
		            	    case self::MULTIPOINT:
		            	    case self::MULTIPOLYGON:
		            	    case self::POINT:
		            	    case self::POLYGON:
		            	    case self::ABS:
		            	    case self::ACOS:
		            	    case self::ADDDATE:
		            	    case self::ADDTIME:
		            	    case self::AES_DECRYPT:
		            	    case self::AES_ENCRYPT:
		            	    case self::AREA:
		            	    case self::ASBINARY:
		            	    case self::ASIN:
		            	    case self::ASTEXT:
		            	    case self::ASWKB:
		            	    case self::ASWKT:
		            	    case self::ASYMMETRIC_DECRYPT:
		            	    case self::ASYMMETRIC_DERIVE:
		            	    case self::ASYMMETRIC_ENCRYPT:
		            	    case self::ASYMMETRIC_SIGN:
		            	    case self::ASYMMETRIC_VERIFY:
		            	    case self::ATAN:
		            	    case self::ATAN2:
		            	    case self::BENCHMARK:
		            	    case self::BIN:
		            	    case self::BIT_COUNT:
		            	    case self::BIT_LENGTH:
		            	    case self::BUFFER:
		            	    case self::CATALOG_NAME:
		            	    case self::CEIL:
		            	    case self::CEILING:
		            	    case self::CENTROID:
		            	    case self::CHARACTER_LENGTH:
		            	    case self::CHARSET:
		            	    case self::CHAR_LENGTH:
		            	    case self::COERCIBILITY:
		            	    case self::COLLATION:
		            	    case self::COMPRESS:
		            	    case self::CONCAT:
		            	    case self::CONCAT_WS:
		            	    case self::CONNECTION_ID:
		            	    case self::CONV:
		            	    case self::CONVERT_TZ:
		            	    case self::COS:
		            	    case self::COT:
		            	    case self::CRC32:
		            	    case self::CREATE_ASYMMETRIC_PRIV_KEY:
		            	    case self::CREATE_ASYMMETRIC_PUB_KEY:
		            	    case self::CREATE_DH_PARAMETERS:
		            	    case self::CREATE_DIGEST:
		            	    case self::CROSSES:
		            	    case self::DATEDIFF:
		            	    case self::DATE_FORMAT:
		            	    case self::DAYNAME:
		            	    case self::DAYOFMONTH:
		            	    case self::DAYOFWEEK:
		            	    case self::DAYOFYEAR:
		            	    case self::DECODE:
		            	    case self::DEGREES:
		            	    case self::DES_DECRYPT:
		            	    case self::DES_ENCRYPT:
		            	    case self::DIMENSION:
		            	    case self::DISJOINT:
		            	    case self::ELT:
		            	    case self::ENCODE:
		            	    case self::ENCRYPT:
		            	    case self::ENDPOINT:
		            	    case self::ENGINE_ATTRIBUTE:
		            	    case self::ENVELOPE:
		            	    case self::EQUALS:
		            	    case self::EXP:
		            	    case self::EXPORT_SET:
		            	    case self::EXTERIORRING:
		            	    case self::EXTRACTVALUE:
		            	    case self::FIELD:
		            	    case self::FIND_IN_SET:
		            	    case self::FLOOR:
		            	    case self::FORMAT:
		            	    case self::FOUND_ROWS:
		            	    case self::FROM_BASE64:
		            	    case self::FROM_DAYS:
		            	    case self::FROM_UNIXTIME:
		            	    case self::GEOMCOLLFROMTEXT:
		            	    case self::GEOMCOLLFROMWKB:
		            	    case self::GEOMETRYCOLLECTIONFROMTEXT:
		            	    case self::GEOMETRYCOLLECTIONFROMWKB:
		            	    case self::GEOMETRYFROMTEXT:
		            	    case self::GEOMETRYFROMWKB:
		            	    case self::GEOMETRYN:
		            	    case self::GEOMETRYTYPE:
		            	    case self::GEOMFROMTEXT:
		            	    case self::GEOMFROMWKB:
		            	    case self::GET_FORMAT:
		            	    case self::GET_LOCK:
		            	    case self::GLENGTH:
		            	    case self::GREATEST:
		            	    case self::GTID_SUBSET:
		            	    case self::GTID_SUBTRACT:
		            	    case self::HEX:
		            	    case self::IFNULL:
		            	    case self::INET6_ATON:
		            	    case self::INET6_NTOA:
		            	    case self::INET_ATON:
		            	    case self::INET_NTOA:
		            	    case self::INSTR:
		            	    case self::INTERIORRINGN:
		            	    case self::INTERSECTS:
		            	    case self::ISCLOSED:
		            	    case self::ISEMPTY:
		            	    case self::ISNULL:
		            	    case self::ISSIMPLE:
		            	    case self::IS_FREE_LOCK:
		            	    case self::IS_IPV4:
		            	    case self::IS_IPV4_COMPAT:
		            	    case self::IS_IPV4_MAPPED:
		            	    case self::IS_IPV6:
		            	    case self::IS_USED_LOCK:
		            	    case self::LAST_INSERT_ID:
		            	    case self::LCASE:
		            	    case self::LEAST:
		            	    case self::LENGTH:
		            	    case self::LINEFROMTEXT:
		            	    case self::LINEFROMWKB:
		            	    case self::LINESTRINGFROMTEXT:
		            	    case self::LINESTRINGFROMWKB:
		            	    case self::LN:
		            	    case self::LOAD_FILE:
		            	    case self::LOCATE:
		            	    case self::LOG:
		            	    case self::LOG10:
		            	    case self::LOG2:
		            	    case self::LOWER:
		            	    case self::LPAD:
		            	    case self::LTRIM:
		            	    case self::MAKEDATE:
		            	    case self::MAKETIME:
		            	    case self::MAKE_SET:
		            	    case self::MASTER_POS_WAIT:
		            	    case self::MBRCONTAINS:
		            	    case self::MBRDISJOINT:
		            	    case self::MBREQUAL:
		            	    case self::MBRINTERSECTS:
		            	    case self::MBROVERLAPS:
		            	    case self::MBRTOUCHES:
		            	    case self::MBRWITHIN:
		            	    case self::MD5:
		            	    case self::MLINEFROMTEXT:
		            	    case self::MLINEFROMWKB:
		            	    case self::MONTHNAME:
		            	    case self::MPOINTFROMTEXT:
		            	    case self::MPOINTFROMWKB:
		            	    case self::MPOLYFROMTEXT:
		            	    case self::MPOLYFROMWKB:
		            	    case self::MULTILINESTRINGFROMTEXT:
		            	    case self::MULTILINESTRINGFROMWKB:
		            	    case self::MULTIPOINTFROMTEXT:
		            	    case self::MULTIPOINTFROMWKB:
		            	    case self::MULTIPOLYGONFROMTEXT:
		            	    case self::MULTIPOLYGONFROMWKB:
		            	    case self::NAME_CONST:
		            	    case self::NULLIF:
		            	    case self::NUMGEOMETRIES:
		            	    case self::NUMINTERIORRINGS:
		            	    case self::NUMPOINTS:
		            	    case self::OCT:
		            	    case self::OCTET_LENGTH:
		            	    case self::ORD:
		            	    case self::OVERLAPS:
		            	    case self::PERIOD_ADD:
		            	    case self::PERIOD_DIFF:
		            	    case self::PI:
		            	    case self::POINTFROMTEXT:
		            	    case self::POINTFROMWKB:
		            	    case self::POINTN:
		            	    case self::POLYFROMTEXT:
		            	    case self::POLYFROMWKB:
		            	    case self::POLYGONFROMTEXT:
		            	    case self::POLYGONFROMWKB:
		            	    case self::POW:
		            	    case self::POWER:
		            	    case self::QUOTE:
		            	    case self::RADIANS:
		            	    case self::RAND:
		            	    case self::RANDOM:
		            	    case self::RANDOM_BYTES:
		            	    case self::RELEASE_LOCK:
		            	    case self::REVERSE:
		            	    case self::ROUND:
		            	    case self::ROW_COUNT:
		            	    case self::RPAD:
		            	    case self::RTRIM:
		            	    case self::SEC_TO_TIME:
		            	    case self::SECONDARY_ENGINE_ATTRIBUTE:
		            	    case self::SESSION_USER:
		            	    case self::SHA:
		            	    case self::SHA1:
		            	    case self::SHA2:
		            	    case self::SCHEMA_NAME:
		            	    case self::SIGN:
		            	    case self::SIN:
		            	    case self::SLEEP:
		            	    case self::SOUNDEX:
		            	    case self::SQL_THREAD_WAIT_AFTER_GTIDS:
		            	    case self::SQRT:
		            	    case self::SRID:
		            	    case self::STARTPOINT:
		            	    case self::STRCMP:
		            	    case self::STR_TO_DATE:
		            	    case self::ST_AREA:
		            	    case self::ST_ASBINARY:
		            	    case self::ST_ASTEXT:
		            	    case self::ST_ASWKB:
		            	    case self::ST_ASWKT:
		            	    case self::ST_BUFFER:
		            	    case self::ST_CENTROID:
		            	    case self::ST_CONTAINS:
		            	    case self::ST_CROSSES:
		            	    case self::ST_DIFFERENCE:
		            	    case self::ST_DIMENSION:
		            	    case self::ST_DISJOINT:
		            	    case self::ST_DISTANCE:
		            	    case self::ST_ENDPOINT:
		            	    case self::ST_ENVELOPE:
		            	    case self::ST_EQUALS:
		            	    case self::ST_EXTERIORRING:
		            	    case self::ST_GEOMCOLLFROMTEXT:
		            	    case self::ST_GEOMCOLLFROMTXT:
		            	    case self::ST_GEOMCOLLFROMWKB:
		            	    case self::ST_GEOMETRYCOLLECTIONFROMTEXT:
		            	    case self::ST_GEOMETRYCOLLECTIONFROMWKB:
		            	    case self::ST_GEOMETRYFROMTEXT:
		            	    case self::ST_GEOMETRYFROMWKB:
		            	    case self::ST_GEOMETRYN:
		            	    case self::ST_GEOMETRYTYPE:
		            	    case self::ST_GEOMFROMTEXT:
		            	    case self::ST_GEOMFROMWKB:
		            	    case self::ST_INTERIORRINGN:
		            	    case self::ST_INTERSECTION:
		            	    case self::ST_INTERSECTS:
		            	    case self::ST_ISCLOSED:
		            	    case self::ST_ISEMPTY:
		            	    case self::ST_ISSIMPLE:
		            	    case self::ST_LINEFROMTEXT:
		            	    case self::ST_LINEFROMWKB:
		            	    case self::ST_LINESTRINGFROMTEXT:
		            	    case self::ST_LINESTRINGFROMWKB:
		            	    case self::ST_NUMGEOMETRIES:
		            	    case self::ST_NUMINTERIORRING:
		            	    case self::ST_NUMINTERIORRINGS:
		            	    case self::ST_NUMPOINTS:
		            	    case self::ST_OVERLAPS:
		            	    case self::ST_POINTFROMTEXT:
		            	    case self::ST_POINTFROMWKB:
		            	    case self::ST_POINTN:
		            	    case self::ST_POLYFROMTEXT:
		            	    case self::ST_POLYFROMWKB:
		            	    case self::ST_POLYGONFROMTEXT:
		            	    case self::ST_POLYGONFROMWKB:
		            	    case self::ST_SRID:
		            	    case self::ST_STARTPOINT:
		            	    case self::ST_SYMDIFFERENCE:
		            	    case self::ST_TOUCHES:
		            	    case self::ST_UNION:
		            	    case self::ST_WITHIN:
		            	    case self::ST_X:
		            	    case self::ST_Y:
		            	    case self::SUBDATE:
		            	    case self::SUBSTRING_INDEX:
		            	    case self::SUBTIME:
		            	    case self::SYSTEM_USER:
		            	    case self::TAN:
		            	    case self::TIMEDIFF:
		            	    case self::TIMESTAMPADD:
		            	    case self::TIMESTAMPDIFF:
		            	    case self::TIME_FORMAT:
		            	    case self::TIME_TO_SEC:
		            	    case self::TOUCHES:
		            	    case self::TO_BASE64:
		            	    case self::TO_DAYS:
		            	    case self::TO_SECONDS:
		            	    case self::TP_CONNECTION_ADMIN:
		            	    case self::UCASE:
		            	    case self::UNCOMPRESS:
		            	    case self::UNCOMPRESSED_LENGTH:
		            	    case self::UNHEX:
		            	    case self::UNIX_TIMESTAMP:
		            	    case self::UPDATEXML:
		            	    case self::UPPER:
		            	    case self::UUID:
		            	    case self::UUID_SHORT:
		            	    case self::VALIDATE_PASSWORD_STRENGTH:
		            	    case self::VERSION:
		            	    case self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
		            	    case self::WEEKDAY:
		            	    case self::WEEKOFYEAR:
		            	    case self::WEIGHT_STRING:
		            	    case self::WITHIN:
		            	    case self::YEARWEEK:
		            	    case self::Y_FUNCTION:
		            	    case self::X_FUNCTION:
		            	    case self::MOD:
		            	    case self::CHARSET_REVERSE_QOUTE_STRING:
		            	    case self::STRING_LITERAL:
		            	    case self::ID:
		            	    	$this->setState(2945);
		            	    	$this->uidList();
		            	    	break;

		            	    case self::ALL:
		            	    	$this->setState(2946);
		            	    	$this->match(self::ALL);
		            	    	break;

		            	default:
		            		throw new NoViableAltException($this);
		            	}
		            	break;

		            case self::CHECK:
		            	$localContext = new Context\AlterByCheckPartitionContext($localContext);
		            	$this->enterOuterAlt($localContext, 10);
		            	$this->setState(2949);
		            	$this->match(self::CHECK);
		            	$this->setState(2950);
		            	$this->match(self::PARTITION);
		            	$this->setState(2953);
		            	$this->errorHandler->sync($this);

		            	switch ($this->input->LA(1)) {
		            	    case self::ARRAY:
		            	    case self::ATTRIBUTE:
		            	    case self::BUCKETS:
		            	    case self::CONDITION:
		            	    case self::CURRENT:
		            	    case self::CURRENT_USER:
		            	    case self::DATABASE:
		            	    case self::DEFAULT:
		            	    case self::DIAGNOSTICS:
		            	    case self::EMPTY:
		            	    case self::ENFORCED:
		            	    case self::EXCEPT:
		            	    case self::GROUP:
		            	    case self::IF:
		            	    case self::IGNORED:
		            	    case self::INSERT:
		            	    case self::LATERAL:
		            	    case self::LEFT:
		            	    case self::NUMBER:
		            	    case self::OPTIONAL:
		            	    case self::ORDER:
		            	    case self::PRIMARY:
		            	    case self::REPEAT:
		            	    case self::REPLACE:
		            	    case self::RIGHT:
		            	    case self::SCHEMA:
		            	    case self::SKIP_QUERY_REWRITE:
		            	    case self::STACKED:
		            	    case self::DATE:
		            	    case self::TIME:
		            	    case self::TIMESTAMP:
		            	    case self::DATETIME:
		            	    case self::YEAR:
		            	    case self::BINARY:
		            	    case self::TEXT:
		            	    case self::ENUM:
		            	    case self::SERIAL:
		            	    case self::JSON_ARRAY:
		            	    case self::JSON_ARRAYAGG:
		            	    case self::JSON_ARRAY_APPEND:
		            	    case self::JSON_ARRAY_INSERT:
		            	    case self::JSON_CONTAINS:
		            	    case self::JSON_CONTAINS_PATH:
		            	    case self::JSON_DEPTH:
		            	    case self::JSON_EXTRACT:
		            	    case self::JSON_INSERT:
		            	    case self::JSON_KEYS:
		            	    case self::JSON_LENGTH:
		            	    case self::JSON_MERGE:
		            	    case self::JSON_MERGE_PATCH:
		            	    case self::JSON_MERGE_PRESERVE:
		            	    case self::JSON_OBJECT:
		            	    case self::JSON_OBJECTAGG:
		            	    case self::JSON_OVERLAPS:
		            	    case self::JSON_PRETTY:
		            	    case self::JSON_QUOTE:
		            	    case self::JSON_REMOVE:
		            	    case self::JSON_REPLACE:
		            	    case self::JSON_SCHEMA_VALID:
		            	    case self::JSON_SCHEMA_VALIDATION_REPORT:
		            	    case self::JSON_SEARCH:
		            	    case self::JSON_SET:
		            	    case self::JSON_STORAGE_FREE:
		            	    case self::JSON_STORAGE_SIZE:
		            	    case self::JSON_TABLE:
		            	    case self::JSON_TYPE:
		            	    case self::JSON_UNQUOTE:
		            	    case self::JSON_VALID:
		            	    case self::JSON_VALUE:
		            	    case self::NESTED:
		            	    case self::ORDINALITY:
		            	    case self::PATH:
		            	    case self::AVG:
		            	    case self::BIT_AND:
		            	    case self::BIT_OR:
		            	    case self::BIT_XOR:
		            	    case self::COUNT:
		            	    case self::CUME_DIST:
		            	    case self::DENSE_RANK:
		            	    case self::FIRST_VALUE:
		            	    case self::GROUP_CONCAT:
		            	    case self::LAG:
		            	    case self::LAST_VALUE:
		            	    case self::LEAD:
		            	    case self::MAX:
		            	    case self::MIN:
		            	    case self::NTILE:
		            	    case self::NTH_VALUE:
		            	    case self::PERCENT_RANK:
		            	    case self::RANK:
		            	    case self::ROW_NUMBER:
		            	    case self::STD:
		            	    case self::STDDEV:
		            	    case self::STDDEV_POP:
		            	    case self::STDDEV_SAMP:
		            	    case self::SUM:
		            	    case self::VAR_POP:
		            	    case self::VAR_SAMP:
		            	    case self::VARIANCE:
		            	    case self::CURRENT_DATE:
		            	    case self::CURRENT_TIME:
		            	    case self::CURRENT_TIMESTAMP:
		            	    case self::LOCALTIME:
		            	    case self::CURDATE:
		            	    case self::CURTIME:
		            	    case self::DATE_ADD:
		            	    case self::DATE_SUB:
		            	    case self::LOCALTIMESTAMP:
		            	    case self::NOW:
		            	    case self::POSITION:
		            	    case self::SUBSTR:
		            	    case self::SUBSTRING:
		            	    case self::SYSDATE:
		            	    case self::TRIM:
		            	    case self::UTC_DATE:
		            	    case self::UTC_TIME:
		            	    case self::UTC_TIMESTAMP:
		            	    case self::ACCOUNT:
		            	    case self::ACTION:
		            	    case self::AFTER:
		            	    case self::AGGREGATE:
		            	    case self::ALGORITHM:
		            	    case self::ANY:
		            	    case self::AT:
		            	    case self::AUTHORS:
		            	    case self::AUTOCOMMIT:
		            	    case self::AUTOEXTEND_SIZE:
		            	    case self::AUTO_INCREMENT:
		            	    case self::AVG_ROW_LENGTH:
		            	    case self::BEGIN:
		            	    case self::BINLOG:
		            	    case self::BIT:
		            	    case self::BLOCK:
		            	    case self::BOOL:
		            	    case self::BOOLEAN:
		            	    case self::BTREE:
		            	    case self::CACHE:
		            	    case self::CASCADED:
		            	    case self::CHAIN:
		            	    case self::CHANGED:
		            	    case self::CHANNEL:
		            	    case self::CHECKSUM:
		            	    case self::PAGE_CHECKSUM:
		            	    case self::CIPHER:
		            	    case self::CLASS_ORIGIN:
		            	    case self::CLIENT:
		            	    case self::CLOSE:
		            	    case self::CLUSTERING:
		            	    case self::COALESCE:
		            	    case self::CODE:
		            	    case self::COLUMNS:
		            	    case self::COLUMN_FORMAT:
		            	    case self::COLUMN_NAME:
		            	    case self::COMMENT:
		            	    case self::COMMIT:
		            	    case self::COMPACT:
		            	    case self::COMPLETION:
		            	    case self::COMPRESSED:
		            	    case self::COMPRESSION:
		            	    case self::CONCURRENT:
		            	    case self::CONNECT:
		            	    case self::CONNECTION:
		            	    case self::CONSISTENT:
		            	    case self::CONSTRAINT_CATALOG:
		            	    case self::CONSTRAINT_SCHEMA:
		            	    case self::CONSTRAINT_NAME:
		            	    case self::CONTAINS:
		            	    case self::CONTEXT:
		            	    case self::CONTRIBUTORS:
		            	    case self::COPY:
		            	    case self::CPU:
		            	    case self::CURSOR_NAME:
		            	    case self::DATA:
		            	    case self::DATAFILE:
		            	    case self::DEALLOCATE:
		            	    case self::DEFAULT_AUTH:
		            	    case self::DEFINER:
		            	    case self::DELAY_KEY_WRITE:
		            	    case self::DES_KEY_FILE:
		            	    case self::DIRECTORY:
		            	    case self::DISABLE:
		            	    case self::DISCARD:
		            	    case self::DISK:
		            	    case self::DO:
		            	    case self::DUMPFILE:
		            	    case self::DUPLICATE:
		            	    case self::DYNAMIC:
		            	    case self::ENABLE:
		            	    case self::ENCRYPTION:
		            	    case self::END:
		            	    case self::ENDS:
		            	    case self::ENGINE:
		            	    case self::ENGINES:
		            	    case self::ERROR:
		            	    case self::ERRORS:
		            	    case self::ESCAPE:
		            	    case self::EVEN:
		            	    case self::EVENT:
		            	    case self::EVENTS:
		            	    case self::EVERY:
		            	    case self::EXCHANGE:
		            	    case self::EXCLUSIVE:
		            	    case self::EXPIRE:
		            	    case self::EXPORT:
		            	    case self::EXTENDED:
		            	    case self::EXTENT_SIZE:
		            	    case self::FAILED_LOGIN_ATTEMPTS:
		            	    case self::FAST:
		            	    case self::FAULTS:
		            	    case self::FIELDS:
		            	    case self::FILE_BLOCK_SIZE:
		            	    case self::FILTER:
		            	    case self::FIRST:
		            	    case self::FIXED:
		            	    case self::FLUSH:
		            	    case self::FOLLOWS:
		            	    case self::FOUND:
		            	    case self::FULL:
		            	    case self::FUNCTION:
		            	    case self::GENERAL:
		            	    case self::GLOBAL:
		            	    case self::GRANTS:
		            	    case self::GROUP_REPLICATION:
		            	    case self::HANDLER:
		            	    case self::HASH:
		            	    case self::HELP:
		            	    case self::HISTORY:
		            	    case self::HOST:
		            	    case self::HOSTS:
		            	    case self::IDENTIFIED:
		            	    case self::IGNORE_SERVER_IDS:
		            	    case self::IMPORT:
		            	    case self::INDEXES:
		            	    case self::INITIAL_SIZE:
		            	    case self::INPLACE:
		            	    case self::INSERT_METHOD:
		            	    case self::INSTALL:
		            	    case self::INSTANCE:
		            	    case self::INSTANT:
		            	    case self::INVISIBLE:
		            	    case self::INVOKER:
		            	    case self::IO:
		            	    case self::IO_THREAD:
		            	    case self::IPC:
		            	    case self::ISOLATION:
		            	    case self::ISSUER:
		            	    case self::JSON:
		            	    case self::KEY_BLOCK_SIZE:
		            	    case self::LANGUAGE:
		            	    case self::LAST:
		            	    case self::LEAVES:
		            	    case self::LESS:
		            	    case self::LEVEL:
		            	    case self::LIST:
		            	    case self::LOCAL:
		            	    case self::LOGFILE:
		            	    case self::LOGS:
		            	    case self::MASTER:
		            	    case self::MASTER_AUTO_POSITION:
		            	    case self::MASTER_CONNECT_RETRY:
		            	    case self::MASTER_DELAY:
		            	    case self::MASTER_HEARTBEAT_PERIOD:
		            	    case self::MASTER_HOST:
		            	    case self::MASTER_LOG_FILE:
		            	    case self::MASTER_LOG_POS:
		            	    case self::MASTER_PASSWORD:
		            	    case self::MASTER_PORT:
		            	    case self::MASTER_RETRY_COUNT:
		            	    case self::MASTER_SSL:
		            	    case self::MASTER_SSL_CA:
		            	    case self::MASTER_SSL_CAPATH:
		            	    case self::MASTER_SSL_CERT:
		            	    case self::MASTER_SSL_CIPHER:
		            	    case self::MASTER_SSL_CRL:
		            	    case self::MASTER_SSL_CRLPATH:
		            	    case self::MASTER_SSL_KEY:
		            	    case self::MASTER_TLS_VERSION:
		            	    case self::MASTER_USER:
		            	    case self::MAX_CONNECTIONS_PER_HOUR:
		            	    case self::MAX_QUERIES_PER_HOUR:
		            	    case self::MAX_ROWS:
		            	    case self::MAX_SIZE:
		            	    case self::MAX_UPDATES_PER_HOUR:
		            	    case self::MAX_USER_CONNECTIONS:
		            	    case self::MEDIUM:
		            	    case self::MEMBER:
		            	    case self::MERGE:
		            	    case self::MESSAGE_TEXT:
		            	    case self::MID:
		            	    case self::MIGRATE:
		            	    case self::MIN_ROWS:
		            	    case self::MODE:
		            	    case self::MODIFY:
		            	    case self::MUTEX:
		            	    case self::MYSQL:
		            	    case self::MYSQL_ERRNO:
		            	    case self::NAME:
		            	    case self::NAMES:
		            	    case self::NCHAR:
		            	    case self::NEVER:
		            	    case self::NEXT:
		            	    case self::NO:
		            	    case self::NOCOPY:
		            	    case self::NOWAIT:
		            	    case self::NODEGROUP:
		            	    case self::NONE:
		            	    case self::ODBC:
		            	    case self::OFFLINE:
		            	    case self::OFFSET:
		            	    case self::OF:
		            	    case self::OJ:
		            	    case self::OLD_PASSWORD:
		            	    case self::ONE:
		            	    case self::ONLINE:
		            	    case self::ONLY:
		            	    case self::OPEN:
		            	    case self::OPTIMIZER_COSTS:
		            	    case self::OPTIONS:
		            	    case self::OWNER:
		            	    case self::PACK_KEYS:
		            	    case self::PAGE:
		            	    case self::PARSER:
		            	    case self::PARTIAL:
		            	    case self::PARTITIONING:
		            	    case self::PARTITIONS:
		            	    case self::PASSWORD:
		            	    case self::PASSWORD_LOCK_TIME:
		            	    case self::PHASE:
		            	    case self::PLUGIN:
		            	    case self::PLUGIN_DIR:
		            	    case self::PLUGINS:
		            	    case self::PORT:
		            	    case self::PRECEDES:
		            	    case self::PREPARE:
		            	    case self::PRESERVE:
		            	    case self::PREV:
		            	    case self::PROCESSLIST:
		            	    case self::PROFILE:
		            	    case self::PROFILES:
		            	    case self::PROXY:
		            	    case self::QUERY:
		            	    case self::QUICK:
		            	    case self::REBUILD:
		            	    case self::RECOVER:
		            	    case self::RECURSIVE:
		            	    case self::REDO_BUFFER_SIZE:
		            	    case self::REDUNDANT:
		            	    case self::RELAY:
		            	    case self::RELAY_LOG_FILE:
		            	    case self::RELAY_LOG_POS:
		            	    case self::RELAYLOG:
		            	    case self::REMOVE:
		            	    case self::REORGANIZE:
		            	    case self::REPAIR:
		            	    case self::REPLICATE_DO_DB:
		            	    case self::REPLICATE_DO_TABLE:
		            	    case self::REPLICATE_IGNORE_DB:
		            	    case self::REPLICATE_IGNORE_TABLE:
		            	    case self::REPLICATE_REWRITE_DB:
		            	    case self::REPLICATE_WILD_DO_TABLE:
		            	    case self::REPLICATE_WILD_IGNORE_TABLE:
		            	    case self::REPLICATION:
		            	    case self::RESET:
		            	    case self::RESUME:
		            	    case self::RETURNED_SQLSTATE:
		            	    case self::RETURNS:
		            	    case self::REUSE:
		            	    case self::ROLE:
		            	    case self::ROLLBACK:
		            	    case self::ROLLUP:
		            	    case self::ROTATE:
		            	    case self::ROW:
		            	    case self::ROWS:
		            	    case self::ROW_FORMAT:
		            	    case self::RTREE:
		            	    case self::SAVEPOINT:
		            	    case self::SCHEDULE:
		            	    case self::SECURITY:
		            	    case self::SERVER:
		            	    case self::SESSION:
		            	    case self::SHARE:
		            	    case self::SHARED:
		            	    case self::SIGNED:
		            	    case self::SIMPLE:
		            	    case self::SLAVE:
		            	    case self::SLOW:
		            	    case self::SNAPSHOT:
		            	    case self::SOCKET:
		            	    case self::SOME:
		            	    case self::SONAME:
		            	    case self::SOUNDS:
		            	    case self::SOURCE:
		            	    case self::SQL_AFTER_GTIDS:
		            	    case self::SQL_AFTER_MTS_GAPS:
		            	    case self::SQL_BEFORE_GTIDS:
		            	    case self::SQL_BUFFER_RESULT:
		            	    case self::SQL_CACHE:
		            	    case self::SQL_NO_CACHE:
		            	    case self::SQL_THREAD:
		            	    case self::START:
		            	    case self::STARTS:
		            	    case self::STATS_AUTO_RECALC:
		            	    case self::STATS_PERSISTENT:
		            	    case self::STATS_SAMPLE_PAGES:
		            	    case self::STATUS:
		            	    case self::STOP:
		            	    case self::STORAGE:
		            	    case self::STRING:
		            	    case self::SUBCLASS_ORIGIN:
		            	    case self::SUBJECT:
		            	    case self::SUBPARTITION:
		            	    case self::SUBPARTITIONS:
		            	    case self::SUSPEND:
		            	    case self::SWAPS:
		            	    case self::SWITCHES:
		            	    case self::TABLE_NAME:
		            	    case self::TABLESPACE:
		            	    case self::TABLE_TYPE:
		            	    case self::TEMPORARY:
		            	    case self::TEMPTABLE:
		            	    case self::THAN:
		            	    case self::TRADITIONAL:
		            	    case self::TRANSACTION:
		            	    case self::TRANSACTIONAL:
		            	    case self::TRIGGERS:
		            	    case self::TRUNCATE:
		            	    case self::UNBOUNDED:
		            	    case self::UNDEFINED:
		            	    case self::UNDOFILE:
		            	    case self::UNDO_BUFFER_SIZE:
		            	    case self::UNINSTALL:
		            	    case self::UNKNOWN:
		            	    case self::UNTIL:
		            	    case self::UPGRADE:
		            	    case self::USER:
		            	    case self::USE_FRM:
		            	    case self::USER_RESOURCES:
		            	    case self::VALIDATION:
		            	    case self::VALUE:
		            	    case self::VARIABLES:
		            	    case self::VIEW:
		            	    case self::VIRTUAL:
		            	    case self::VISIBLE:
		            	    case self::WAIT:
		            	    case self::WARNINGS:
		            	    case self::WITHOUT:
		            	    case self::WORK:
		            	    case self::WRAPPER:
		            	    case self::X509:
		            	    case self::XA:
		            	    case self::XML:
		            	    case self::EUR:
		            	    case self::USA:
		            	    case self::JIS:
		            	    case self::ISO:
		            	    case self::INTERNAL:
		            	    case self::QUARTER:
		            	    case self::MONTH:
		            	    case self::DAY:
		            	    case self::HOUR:
		            	    case self::MINUTE:
		            	    case self::WEEK:
		            	    case self::SECOND:
		            	    case self::MICROSECOND:
		            	    case self::ADMIN:
		            	    case self::AUDIT_ABORT_EXEMPT:
		            	    case self::AUDIT_ADMIN:
		            	    case self::AUTHENTICATION_POLICY_ADMIN:
		            	    case self::BACKUP_ADMIN:
		            	    case self::BINLOG_ADMIN:
		            	    case self::BINLOG_ENCRYPTION_ADMIN:
		            	    case self::CLONE_ADMIN:
		            	    case self::CONNECTION_ADMIN:
		            	    case self::ENCRYPTION_KEY_ADMIN:
		            	    case self::EXECUTE:
		            	    case self::FILE:
		            	    case self::FIREWALL_ADMIN:
		            	    case self::FIREWALL_EXEMPT:
		            	    case self::FIREWALL_USER:
		            	    case self::GROUP_REPLICATION_ADMIN:
		            	    case self::INNODB_REDO_LOG_ARCHIVE:
		            	    case self::INVOKE:
		            	    case self::LAMBDA:
		            	    case self::NDB_STORED_USER:
		            	    case self::PASSWORDLESS_USER_ADMIN:
		            	    case self::PERSIST_RO_VARIABLES_ADMIN:
		            	    case self::PRIVILEGES:
		            	    case self::PROCESS:
		            	    case self::RELOAD:
		            	    case self::REPLICATION_APPLIER:
		            	    case self::REPLICATION_SLAVE_ADMIN:
		            	    case self::RESOURCE_GROUP_ADMIN:
		            	    case self::RESOURCE_GROUP_USER:
		            	    case self::ROLE_ADMIN:
		            	    case self::ROUTINE:
		            	    case self::S3:
		            	    case self::SESSION_VARIABLES_ADMIN:
		            	    case self::SET_USER_ID:
		            	    case self::SHOW_ROUTINE:
		            	    case self::SHUTDOWN:
		            	    case self::SUPER:
		            	    case self::SYSTEM_VARIABLES_ADMIN:
		            	    case self::TABLES:
		            	    case self::TABLE_ENCRYPTION_ADMIN:
		            	    case self::VERSION_TOKEN_ADMIN:
		            	    case self::XA_RECOVER_ADMIN:
		            	    case self::ARMSCII8:
		            	    case self::ASCII:
		            	    case self::BIG5:
		            	    case self::CP1250:
		            	    case self::CP1251:
		            	    case self::CP1256:
		            	    case self::CP1257:
		            	    case self::CP850:
		            	    case self::CP852:
		            	    case self::CP866:
		            	    case self::CP932:
		            	    case self::DEC8:
		            	    case self::EUCJPMS:
		            	    case self::EUCKR:
		            	    case self::GB18030:
		            	    case self::GB2312:
		            	    case self::GBK:
		            	    case self::GEOSTD8:
		            	    case self::GREEK:
		            	    case self::HEBREW:
		            	    case self::HP8:
		            	    case self::KEYBCS2:
		            	    case self::KOI8R:
		            	    case self::KOI8U:
		            	    case self::LATIN1:
		            	    case self::LATIN2:
		            	    case self::LATIN5:
		            	    case self::LATIN7:
		            	    case self::MACCE:
		            	    case self::MACROMAN:
		            	    case self::SJIS:
		            	    case self::SWE7:
		            	    case self::TIS620:
		            	    case self::UCS2:
		            	    case self::UJIS:
		            	    case self::UTF16:
		            	    case self::UTF16LE:
		            	    case self::UTF32:
		            	    case self::UTF8:
		            	    case self::UTF8MB3:
		            	    case self::UTF8MB4:
		            	    case self::ARCHIVE:
		            	    case self::BLACKHOLE:
		            	    case self::CSV:
		            	    case self::FEDERATED:
		            	    case self::INNODB:
		            	    case self::MEMORY:
		            	    case self::MRG_MYISAM:
		            	    case self::MYISAM:
		            	    case self::NDB:
		            	    case self::NDBCLUSTER:
		            	    case self::PERFORMANCE_SCHEMA:
		            	    case self::TOKUDB:
		            	    case self::REPEATABLE:
		            	    case self::COMMITTED:
		            	    case self::UNCOMMITTED:
		            	    case self::SERIALIZABLE:
		            	    case self::GEOMETRYCOLLECTION:
		            	    case self::LINESTRING:
		            	    case self::MULTILINESTRING:
		            	    case self::MULTIPOINT:
		            	    case self::MULTIPOLYGON:
		            	    case self::POINT:
		            	    case self::POLYGON:
		            	    case self::ABS:
		            	    case self::ACOS:
		            	    case self::ADDDATE:
		            	    case self::ADDTIME:
		            	    case self::AES_DECRYPT:
		            	    case self::AES_ENCRYPT:
		            	    case self::AREA:
		            	    case self::ASBINARY:
		            	    case self::ASIN:
		            	    case self::ASTEXT:
		            	    case self::ASWKB:
		            	    case self::ASWKT:
		            	    case self::ASYMMETRIC_DECRYPT:
		            	    case self::ASYMMETRIC_DERIVE:
		            	    case self::ASYMMETRIC_ENCRYPT:
		            	    case self::ASYMMETRIC_SIGN:
		            	    case self::ASYMMETRIC_VERIFY:
		            	    case self::ATAN:
		            	    case self::ATAN2:
		            	    case self::BENCHMARK:
		            	    case self::BIN:
		            	    case self::BIT_COUNT:
		            	    case self::BIT_LENGTH:
		            	    case self::BUFFER:
		            	    case self::CATALOG_NAME:
		            	    case self::CEIL:
		            	    case self::CEILING:
		            	    case self::CENTROID:
		            	    case self::CHARACTER_LENGTH:
		            	    case self::CHARSET:
		            	    case self::CHAR_LENGTH:
		            	    case self::COERCIBILITY:
		            	    case self::COLLATION:
		            	    case self::COMPRESS:
		            	    case self::CONCAT:
		            	    case self::CONCAT_WS:
		            	    case self::CONNECTION_ID:
		            	    case self::CONV:
		            	    case self::CONVERT_TZ:
		            	    case self::COS:
		            	    case self::COT:
		            	    case self::CRC32:
		            	    case self::CREATE_ASYMMETRIC_PRIV_KEY:
		            	    case self::CREATE_ASYMMETRIC_PUB_KEY:
		            	    case self::CREATE_DH_PARAMETERS:
		            	    case self::CREATE_DIGEST:
		            	    case self::CROSSES:
		            	    case self::DATEDIFF:
		            	    case self::DATE_FORMAT:
		            	    case self::DAYNAME:
		            	    case self::DAYOFMONTH:
		            	    case self::DAYOFWEEK:
		            	    case self::DAYOFYEAR:
		            	    case self::DECODE:
		            	    case self::DEGREES:
		            	    case self::DES_DECRYPT:
		            	    case self::DES_ENCRYPT:
		            	    case self::DIMENSION:
		            	    case self::DISJOINT:
		            	    case self::ELT:
		            	    case self::ENCODE:
		            	    case self::ENCRYPT:
		            	    case self::ENDPOINT:
		            	    case self::ENGINE_ATTRIBUTE:
		            	    case self::ENVELOPE:
		            	    case self::EQUALS:
		            	    case self::EXP:
		            	    case self::EXPORT_SET:
		            	    case self::EXTERIORRING:
		            	    case self::EXTRACTVALUE:
		            	    case self::FIELD:
		            	    case self::FIND_IN_SET:
		            	    case self::FLOOR:
		            	    case self::FORMAT:
		            	    case self::FOUND_ROWS:
		            	    case self::FROM_BASE64:
		            	    case self::FROM_DAYS:
		            	    case self::FROM_UNIXTIME:
		            	    case self::GEOMCOLLFROMTEXT:
		            	    case self::GEOMCOLLFROMWKB:
		            	    case self::GEOMETRYCOLLECTIONFROMTEXT:
		            	    case self::GEOMETRYCOLLECTIONFROMWKB:
		            	    case self::GEOMETRYFROMTEXT:
		            	    case self::GEOMETRYFROMWKB:
		            	    case self::GEOMETRYN:
		            	    case self::GEOMETRYTYPE:
		            	    case self::GEOMFROMTEXT:
		            	    case self::GEOMFROMWKB:
		            	    case self::GET_FORMAT:
		            	    case self::GET_LOCK:
		            	    case self::GLENGTH:
		            	    case self::GREATEST:
		            	    case self::GTID_SUBSET:
		            	    case self::GTID_SUBTRACT:
		            	    case self::HEX:
		            	    case self::IFNULL:
		            	    case self::INET6_ATON:
		            	    case self::INET6_NTOA:
		            	    case self::INET_ATON:
		            	    case self::INET_NTOA:
		            	    case self::INSTR:
		            	    case self::INTERIORRINGN:
		            	    case self::INTERSECTS:
		            	    case self::ISCLOSED:
		            	    case self::ISEMPTY:
		            	    case self::ISNULL:
		            	    case self::ISSIMPLE:
		            	    case self::IS_FREE_LOCK:
		            	    case self::IS_IPV4:
		            	    case self::IS_IPV4_COMPAT:
		            	    case self::IS_IPV4_MAPPED:
		            	    case self::IS_IPV6:
		            	    case self::IS_USED_LOCK:
		            	    case self::LAST_INSERT_ID:
		            	    case self::LCASE:
		            	    case self::LEAST:
		            	    case self::LENGTH:
		            	    case self::LINEFROMTEXT:
		            	    case self::LINEFROMWKB:
		            	    case self::LINESTRINGFROMTEXT:
		            	    case self::LINESTRINGFROMWKB:
		            	    case self::LN:
		            	    case self::LOAD_FILE:
		            	    case self::LOCATE:
		            	    case self::LOG:
		            	    case self::LOG10:
		            	    case self::LOG2:
		            	    case self::LOWER:
		            	    case self::LPAD:
		            	    case self::LTRIM:
		            	    case self::MAKEDATE:
		            	    case self::MAKETIME:
		            	    case self::MAKE_SET:
		            	    case self::MASTER_POS_WAIT:
		            	    case self::MBRCONTAINS:
		            	    case self::MBRDISJOINT:
		            	    case self::MBREQUAL:
		            	    case self::MBRINTERSECTS:
		            	    case self::MBROVERLAPS:
		            	    case self::MBRTOUCHES:
		            	    case self::MBRWITHIN:
		            	    case self::MD5:
		            	    case self::MLINEFROMTEXT:
		            	    case self::MLINEFROMWKB:
		            	    case self::MONTHNAME:
		            	    case self::MPOINTFROMTEXT:
		            	    case self::MPOINTFROMWKB:
		            	    case self::MPOLYFROMTEXT:
		            	    case self::MPOLYFROMWKB:
		            	    case self::MULTILINESTRINGFROMTEXT:
		            	    case self::MULTILINESTRINGFROMWKB:
		            	    case self::MULTIPOINTFROMTEXT:
		            	    case self::MULTIPOINTFROMWKB:
		            	    case self::MULTIPOLYGONFROMTEXT:
		            	    case self::MULTIPOLYGONFROMWKB:
		            	    case self::NAME_CONST:
		            	    case self::NULLIF:
		            	    case self::NUMGEOMETRIES:
		            	    case self::NUMINTERIORRINGS:
		            	    case self::NUMPOINTS:
		            	    case self::OCT:
		            	    case self::OCTET_LENGTH:
		            	    case self::ORD:
		            	    case self::OVERLAPS:
		            	    case self::PERIOD_ADD:
		            	    case self::PERIOD_DIFF:
		            	    case self::PI:
		            	    case self::POINTFROMTEXT:
		            	    case self::POINTFROMWKB:
		            	    case self::POINTN:
		            	    case self::POLYFROMTEXT:
		            	    case self::POLYFROMWKB:
		            	    case self::POLYGONFROMTEXT:
		            	    case self::POLYGONFROMWKB:
		            	    case self::POW:
		            	    case self::POWER:
		            	    case self::QUOTE:
		            	    case self::RADIANS:
		            	    case self::RAND:
		            	    case self::RANDOM:
		            	    case self::RANDOM_BYTES:
		            	    case self::RELEASE_LOCK:
		            	    case self::REVERSE:
		            	    case self::ROUND:
		            	    case self::ROW_COUNT:
		            	    case self::RPAD:
		            	    case self::RTRIM:
		            	    case self::SEC_TO_TIME:
		            	    case self::SECONDARY_ENGINE_ATTRIBUTE:
		            	    case self::SESSION_USER:
		            	    case self::SHA:
		            	    case self::SHA1:
		            	    case self::SHA2:
		            	    case self::SCHEMA_NAME:
		            	    case self::SIGN:
		            	    case self::SIN:
		            	    case self::SLEEP:
		            	    case self::SOUNDEX:
		            	    case self::SQL_THREAD_WAIT_AFTER_GTIDS:
		            	    case self::SQRT:
		            	    case self::SRID:
		            	    case self::STARTPOINT:
		            	    case self::STRCMP:
		            	    case self::STR_TO_DATE:
		            	    case self::ST_AREA:
		            	    case self::ST_ASBINARY:
		            	    case self::ST_ASTEXT:
		            	    case self::ST_ASWKB:
		            	    case self::ST_ASWKT:
		            	    case self::ST_BUFFER:
		            	    case self::ST_CENTROID:
		            	    case self::ST_CONTAINS:
		            	    case self::ST_CROSSES:
		            	    case self::ST_DIFFERENCE:
		            	    case self::ST_DIMENSION:
		            	    case self::ST_DISJOINT:
		            	    case self::ST_DISTANCE:
		            	    case self::ST_ENDPOINT:
		            	    case self::ST_ENVELOPE:
		            	    case self::ST_EQUALS:
		            	    case self::ST_EXTERIORRING:
		            	    case self::ST_GEOMCOLLFROMTEXT:
		            	    case self::ST_GEOMCOLLFROMTXT:
		            	    case self::ST_GEOMCOLLFROMWKB:
		            	    case self::ST_GEOMETRYCOLLECTIONFROMTEXT:
		            	    case self::ST_GEOMETRYCOLLECTIONFROMWKB:
		            	    case self::ST_GEOMETRYFROMTEXT:
		            	    case self::ST_GEOMETRYFROMWKB:
		            	    case self::ST_GEOMETRYN:
		            	    case self::ST_GEOMETRYTYPE:
		            	    case self::ST_GEOMFROMTEXT:
		            	    case self::ST_GEOMFROMWKB:
		            	    case self::ST_INTERIORRINGN:
		            	    case self::ST_INTERSECTION:
		            	    case self::ST_INTERSECTS:
		            	    case self::ST_ISCLOSED:
		            	    case self::ST_ISEMPTY:
		            	    case self::ST_ISSIMPLE:
		            	    case self::ST_LINEFROMTEXT:
		            	    case self::ST_LINEFROMWKB:
		            	    case self::ST_LINESTRINGFROMTEXT:
		            	    case self::ST_LINESTRINGFROMWKB:
		            	    case self::ST_NUMGEOMETRIES:
		            	    case self::ST_NUMINTERIORRING:
		            	    case self::ST_NUMINTERIORRINGS:
		            	    case self::ST_NUMPOINTS:
		            	    case self::ST_OVERLAPS:
		            	    case self::ST_POINTFROMTEXT:
		            	    case self::ST_POINTFROMWKB:
		            	    case self::ST_POINTN:
		            	    case self::ST_POLYFROMTEXT:
		            	    case self::ST_POLYFROMWKB:
		            	    case self::ST_POLYGONFROMTEXT:
		            	    case self::ST_POLYGONFROMWKB:
		            	    case self::ST_SRID:
		            	    case self::ST_STARTPOINT:
		            	    case self::ST_SYMDIFFERENCE:
		            	    case self::ST_TOUCHES:
		            	    case self::ST_UNION:
		            	    case self::ST_WITHIN:
		            	    case self::ST_X:
		            	    case self::ST_Y:
		            	    case self::SUBDATE:
		            	    case self::SUBSTRING_INDEX:
		            	    case self::SUBTIME:
		            	    case self::SYSTEM_USER:
		            	    case self::TAN:
		            	    case self::TIMEDIFF:
		            	    case self::TIMESTAMPADD:
		            	    case self::TIMESTAMPDIFF:
		            	    case self::TIME_FORMAT:
		            	    case self::TIME_TO_SEC:
		            	    case self::TOUCHES:
		            	    case self::TO_BASE64:
		            	    case self::TO_DAYS:
		            	    case self::TO_SECONDS:
		            	    case self::TP_CONNECTION_ADMIN:
		            	    case self::UCASE:
		            	    case self::UNCOMPRESS:
		            	    case self::UNCOMPRESSED_LENGTH:
		            	    case self::UNHEX:
		            	    case self::UNIX_TIMESTAMP:
		            	    case self::UPDATEXML:
		            	    case self::UPPER:
		            	    case self::UUID:
		            	    case self::UUID_SHORT:
		            	    case self::VALIDATE_PASSWORD_STRENGTH:
		            	    case self::VERSION:
		            	    case self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
		            	    case self::WEEKDAY:
		            	    case self::WEEKOFYEAR:
		            	    case self::WEIGHT_STRING:
		            	    case self::WITHIN:
		            	    case self::YEARWEEK:
		            	    case self::Y_FUNCTION:
		            	    case self::X_FUNCTION:
		            	    case self::MOD:
		            	    case self::CHARSET_REVERSE_QOUTE_STRING:
		            	    case self::STRING_LITERAL:
		            	    case self::ID:
		            	    	$this->setState(2951);
		            	    	$this->uidList();
		            	    	break;

		            	    case self::ALL:
		            	    	$this->setState(2952);
		            	    	$this->match(self::ALL);
		            	    	break;

		            	default:
		            		throw new NoViableAltException($this);
		            	}
		            	break;

		            case self::OPTIMIZE:
		            	$localContext = new Context\AlterByOptimizePartitionContext($localContext);
		            	$this->enterOuterAlt($localContext, 11);
		            	$this->setState(2955);
		            	$this->match(self::OPTIMIZE);
		            	$this->setState(2956);
		            	$this->match(self::PARTITION);
		            	$this->setState(2959);
		            	$this->errorHandler->sync($this);

		            	switch ($this->input->LA(1)) {
		            	    case self::ARRAY:
		            	    case self::ATTRIBUTE:
		            	    case self::BUCKETS:
		            	    case self::CONDITION:
		            	    case self::CURRENT:
		            	    case self::CURRENT_USER:
		            	    case self::DATABASE:
		            	    case self::DEFAULT:
		            	    case self::DIAGNOSTICS:
		            	    case self::EMPTY:
		            	    case self::ENFORCED:
		            	    case self::EXCEPT:
		            	    case self::GROUP:
		            	    case self::IF:
		            	    case self::IGNORED:
		            	    case self::INSERT:
		            	    case self::LATERAL:
		            	    case self::LEFT:
		            	    case self::NUMBER:
		            	    case self::OPTIONAL:
		            	    case self::ORDER:
		            	    case self::PRIMARY:
		            	    case self::REPEAT:
		            	    case self::REPLACE:
		            	    case self::RIGHT:
		            	    case self::SCHEMA:
		            	    case self::SKIP_QUERY_REWRITE:
		            	    case self::STACKED:
		            	    case self::DATE:
		            	    case self::TIME:
		            	    case self::TIMESTAMP:
		            	    case self::DATETIME:
		            	    case self::YEAR:
		            	    case self::BINARY:
		            	    case self::TEXT:
		            	    case self::ENUM:
		            	    case self::SERIAL:
		            	    case self::JSON_ARRAY:
		            	    case self::JSON_ARRAYAGG:
		            	    case self::JSON_ARRAY_APPEND:
		            	    case self::JSON_ARRAY_INSERT:
		            	    case self::JSON_CONTAINS:
		            	    case self::JSON_CONTAINS_PATH:
		            	    case self::JSON_DEPTH:
		            	    case self::JSON_EXTRACT:
		            	    case self::JSON_INSERT:
		            	    case self::JSON_KEYS:
		            	    case self::JSON_LENGTH:
		            	    case self::JSON_MERGE:
		            	    case self::JSON_MERGE_PATCH:
		            	    case self::JSON_MERGE_PRESERVE:
		            	    case self::JSON_OBJECT:
		            	    case self::JSON_OBJECTAGG:
		            	    case self::JSON_OVERLAPS:
		            	    case self::JSON_PRETTY:
		            	    case self::JSON_QUOTE:
		            	    case self::JSON_REMOVE:
		            	    case self::JSON_REPLACE:
		            	    case self::JSON_SCHEMA_VALID:
		            	    case self::JSON_SCHEMA_VALIDATION_REPORT:
		            	    case self::JSON_SEARCH:
		            	    case self::JSON_SET:
		            	    case self::JSON_STORAGE_FREE:
		            	    case self::JSON_STORAGE_SIZE:
		            	    case self::JSON_TABLE:
		            	    case self::JSON_TYPE:
		            	    case self::JSON_UNQUOTE:
		            	    case self::JSON_VALID:
		            	    case self::JSON_VALUE:
		            	    case self::NESTED:
		            	    case self::ORDINALITY:
		            	    case self::PATH:
		            	    case self::AVG:
		            	    case self::BIT_AND:
		            	    case self::BIT_OR:
		            	    case self::BIT_XOR:
		            	    case self::COUNT:
		            	    case self::CUME_DIST:
		            	    case self::DENSE_RANK:
		            	    case self::FIRST_VALUE:
		            	    case self::GROUP_CONCAT:
		            	    case self::LAG:
		            	    case self::LAST_VALUE:
		            	    case self::LEAD:
		            	    case self::MAX:
		            	    case self::MIN:
		            	    case self::NTILE:
		            	    case self::NTH_VALUE:
		            	    case self::PERCENT_RANK:
		            	    case self::RANK:
		            	    case self::ROW_NUMBER:
		            	    case self::STD:
		            	    case self::STDDEV:
		            	    case self::STDDEV_POP:
		            	    case self::STDDEV_SAMP:
		            	    case self::SUM:
		            	    case self::VAR_POP:
		            	    case self::VAR_SAMP:
		            	    case self::VARIANCE:
		            	    case self::CURRENT_DATE:
		            	    case self::CURRENT_TIME:
		            	    case self::CURRENT_TIMESTAMP:
		            	    case self::LOCALTIME:
		            	    case self::CURDATE:
		            	    case self::CURTIME:
		            	    case self::DATE_ADD:
		            	    case self::DATE_SUB:
		            	    case self::LOCALTIMESTAMP:
		            	    case self::NOW:
		            	    case self::POSITION:
		            	    case self::SUBSTR:
		            	    case self::SUBSTRING:
		            	    case self::SYSDATE:
		            	    case self::TRIM:
		            	    case self::UTC_DATE:
		            	    case self::UTC_TIME:
		            	    case self::UTC_TIMESTAMP:
		            	    case self::ACCOUNT:
		            	    case self::ACTION:
		            	    case self::AFTER:
		            	    case self::AGGREGATE:
		            	    case self::ALGORITHM:
		            	    case self::ANY:
		            	    case self::AT:
		            	    case self::AUTHORS:
		            	    case self::AUTOCOMMIT:
		            	    case self::AUTOEXTEND_SIZE:
		            	    case self::AUTO_INCREMENT:
		            	    case self::AVG_ROW_LENGTH:
		            	    case self::BEGIN:
		            	    case self::BINLOG:
		            	    case self::BIT:
		            	    case self::BLOCK:
		            	    case self::BOOL:
		            	    case self::BOOLEAN:
		            	    case self::BTREE:
		            	    case self::CACHE:
		            	    case self::CASCADED:
		            	    case self::CHAIN:
		            	    case self::CHANGED:
		            	    case self::CHANNEL:
		            	    case self::CHECKSUM:
		            	    case self::PAGE_CHECKSUM:
		            	    case self::CIPHER:
		            	    case self::CLASS_ORIGIN:
		            	    case self::CLIENT:
		            	    case self::CLOSE:
		            	    case self::CLUSTERING:
		            	    case self::COALESCE:
		            	    case self::CODE:
		            	    case self::COLUMNS:
		            	    case self::COLUMN_FORMAT:
		            	    case self::COLUMN_NAME:
		            	    case self::COMMENT:
		            	    case self::COMMIT:
		            	    case self::COMPACT:
		            	    case self::COMPLETION:
		            	    case self::COMPRESSED:
		            	    case self::COMPRESSION:
		            	    case self::CONCURRENT:
		            	    case self::CONNECT:
		            	    case self::CONNECTION:
		            	    case self::CONSISTENT:
		            	    case self::CONSTRAINT_CATALOG:
		            	    case self::CONSTRAINT_SCHEMA:
		            	    case self::CONSTRAINT_NAME:
		            	    case self::CONTAINS:
		            	    case self::CONTEXT:
		            	    case self::CONTRIBUTORS:
		            	    case self::COPY:
		            	    case self::CPU:
		            	    case self::CURSOR_NAME:
		            	    case self::DATA:
		            	    case self::DATAFILE:
		            	    case self::DEALLOCATE:
		            	    case self::DEFAULT_AUTH:
		            	    case self::DEFINER:
		            	    case self::DELAY_KEY_WRITE:
		            	    case self::DES_KEY_FILE:
		            	    case self::DIRECTORY:
		            	    case self::DISABLE:
		            	    case self::DISCARD:
		            	    case self::DISK:
		            	    case self::DO:
		            	    case self::DUMPFILE:
		            	    case self::DUPLICATE:
		            	    case self::DYNAMIC:
		            	    case self::ENABLE:
		            	    case self::ENCRYPTION:
		            	    case self::END:
		            	    case self::ENDS:
		            	    case self::ENGINE:
		            	    case self::ENGINES:
		            	    case self::ERROR:
		            	    case self::ERRORS:
		            	    case self::ESCAPE:
		            	    case self::EVEN:
		            	    case self::EVENT:
		            	    case self::EVENTS:
		            	    case self::EVERY:
		            	    case self::EXCHANGE:
		            	    case self::EXCLUSIVE:
		            	    case self::EXPIRE:
		            	    case self::EXPORT:
		            	    case self::EXTENDED:
		            	    case self::EXTENT_SIZE:
		            	    case self::FAILED_LOGIN_ATTEMPTS:
		            	    case self::FAST:
		            	    case self::FAULTS:
		            	    case self::FIELDS:
		            	    case self::FILE_BLOCK_SIZE:
		            	    case self::FILTER:
		            	    case self::FIRST:
		            	    case self::FIXED:
		            	    case self::FLUSH:
		            	    case self::FOLLOWS:
		            	    case self::FOUND:
		            	    case self::FULL:
		            	    case self::FUNCTION:
		            	    case self::GENERAL:
		            	    case self::GLOBAL:
		            	    case self::GRANTS:
		            	    case self::GROUP_REPLICATION:
		            	    case self::HANDLER:
		            	    case self::HASH:
		            	    case self::HELP:
		            	    case self::HISTORY:
		            	    case self::HOST:
		            	    case self::HOSTS:
		            	    case self::IDENTIFIED:
		            	    case self::IGNORE_SERVER_IDS:
		            	    case self::IMPORT:
		            	    case self::INDEXES:
		            	    case self::INITIAL_SIZE:
		            	    case self::INPLACE:
		            	    case self::INSERT_METHOD:
		            	    case self::INSTALL:
		            	    case self::INSTANCE:
		            	    case self::INSTANT:
		            	    case self::INVISIBLE:
		            	    case self::INVOKER:
		            	    case self::IO:
		            	    case self::IO_THREAD:
		            	    case self::IPC:
		            	    case self::ISOLATION:
		            	    case self::ISSUER:
		            	    case self::JSON:
		            	    case self::KEY_BLOCK_SIZE:
		            	    case self::LANGUAGE:
		            	    case self::LAST:
		            	    case self::LEAVES:
		            	    case self::LESS:
		            	    case self::LEVEL:
		            	    case self::LIST:
		            	    case self::LOCAL:
		            	    case self::LOGFILE:
		            	    case self::LOGS:
		            	    case self::MASTER:
		            	    case self::MASTER_AUTO_POSITION:
		            	    case self::MASTER_CONNECT_RETRY:
		            	    case self::MASTER_DELAY:
		            	    case self::MASTER_HEARTBEAT_PERIOD:
		            	    case self::MASTER_HOST:
		            	    case self::MASTER_LOG_FILE:
		            	    case self::MASTER_LOG_POS:
		            	    case self::MASTER_PASSWORD:
		            	    case self::MASTER_PORT:
		            	    case self::MASTER_RETRY_COUNT:
		            	    case self::MASTER_SSL:
		            	    case self::MASTER_SSL_CA:
		            	    case self::MASTER_SSL_CAPATH:
		            	    case self::MASTER_SSL_CERT:
		            	    case self::MASTER_SSL_CIPHER:
		            	    case self::MASTER_SSL_CRL:
		            	    case self::MASTER_SSL_CRLPATH:
		            	    case self::MASTER_SSL_KEY:
		            	    case self::MASTER_TLS_VERSION:
		            	    case self::MASTER_USER:
		            	    case self::MAX_CONNECTIONS_PER_HOUR:
		            	    case self::MAX_QUERIES_PER_HOUR:
		            	    case self::MAX_ROWS:
		            	    case self::MAX_SIZE:
		            	    case self::MAX_UPDATES_PER_HOUR:
		            	    case self::MAX_USER_CONNECTIONS:
		            	    case self::MEDIUM:
		            	    case self::MEMBER:
		            	    case self::MERGE:
		            	    case self::MESSAGE_TEXT:
		            	    case self::MID:
		            	    case self::MIGRATE:
		            	    case self::MIN_ROWS:
		            	    case self::MODE:
		            	    case self::MODIFY:
		            	    case self::MUTEX:
		            	    case self::MYSQL:
		            	    case self::MYSQL_ERRNO:
		            	    case self::NAME:
		            	    case self::NAMES:
		            	    case self::NCHAR:
		            	    case self::NEVER:
		            	    case self::NEXT:
		            	    case self::NO:
		            	    case self::NOCOPY:
		            	    case self::NOWAIT:
		            	    case self::NODEGROUP:
		            	    case self::NONE:
		            	    case self::ODBC:
		            	    case self::OFFLINE:
		            	    case self::OFFSET:
		            	    case self::OF:
		            	    case self::OJ:
		            	    case self::OLD_PASSWORD:
		            	    case self::ONE:
		            	    case self::ONLINE:
		            	    case self::ONLY:
		            	    case self::OPEN:
		            	    case self::OPTIMIZER_COSTS:
		            	    case self::OPTIONS:
		            	    case self::OWNER:
		            	    case self::PACK_KEYS:
		            	    case self::PAGE:
		            	    case self::PARSER:
		            	    case self::PARTIAL:
		            	    case self::PARTITIONING:
		            	    case self::PARTITIONS:
		            	    case self::PASSWORD:
		            	    case self::PASSWORD_LOCK_TIME:
		            	    case self::PHASE:
		            	    case self::PLUGIN:
		            	    case self::PLUGIN_DIR:
		            	    case self::PLUGINS:
		            	    case self::PORT:
		            	    case self::PRECEDES:
		            	    case self::PREPARE:
		            	    case self::PRESERVE:
		            	    case self::PREV:
		            	    case self::PROCESSLIST:
		            	    case self::PROFILE:
		            	    case self::PROFILES:
		            	    case self::PROXY:
		            	    case self::QUERY:
		            	    case self::QUICK:
		            	    case self::REBUILD:
		            	    case self::RECOVER:
		            	    case self::RECURSIVE:
		            	    case self::REDO_BUFFER_SIZE:
		            	    case self::REDUNDANT:
		            	    case self::RELAY:
		            	    case self::RELAY_LOG_FILE:
		            	    case self::RELAY_LOG_POS:
		            	    case self::RELAYLOG:
		            	    case self::REMOVE:
		            	    case self::REORGANIZE:
		            	    case self::REPAIR:
		            	    case self::REPLICATE_DO_DB:
		            	    case self::REPLICATE_DO_TABLE:
		            	    case self::REPLICATE_IGNORE_DB:
		            	    case self::REPLICATE_IGNORE_TABLE:
		            	    case self::REPLICATE_REWRITE_DB:
		            	    case self::REPLICATE_WILD_DO_TABLE:
		            	    case self::REPLICATE_WILD_IGNORE_TABLE:
		            	    case self::REPLICATION:
		            	    case self::RESET:
		            	    case self::RESUME:
		            	    case self::RETURNED_SQLSTATE:
		            	    case self::RETURNS:
		            	    case self::REUSE:
		            	    case self::ROLE:
		            	    case self::ROLLBACK:
		            	    case self::ROLLUP:
		            	    case self::ROTATE:
		            	    case self::ROW:
		            	    case self::ROWS:
		            	    case self::ROW_FORMAT:
		            	    case self::RTREE:
		            	    case self::SAVEPOINT:
		            	    case self::SCHEDULE:
		            	    case self::SECURITY:
		            	    case self::SERVER:
		            	    case self::SESSION:
		            	    case self::SHARE:
		            	    case self::SHARED:
		            	    case self::SIGNED:
		            	    case self::SIMPLE:
		            	    case self::SLAVE:
		            	    case self::SLOW:
		            	    case self::SNAPSHOT:
		            	    case self::SOCKET:
		            	    case self::SOME:
		            	    case self::SONAME:
		            	    case self::SOUNDS:
		            	    case self::SOURCE:
		            	    case self::SQL_AFTER_GTIDS:
		            	    case self::SQL_AFTER_MTS_GAPS:
		            	    case self::SQL_BEFORE_GTIDS:
		            	    case self::SQL_BUFFER_RESULT:
		            	    case self::SQL_CACHE:
		            	    case self::SQL_NO_CACHE:
		            	    case self::SQL_THREAD:
		            	    case self::START:
		            	    case self::STARTS:
		            	    case self::STATS_AUTO_RECALC:
		            	    case self::STATS_PERSISTENT:
		            	    case self::STATS_SAMPLE_PAGES:
		            	    case self::STATUS:
		            	    case self::STOP:
		            	    case self::STORAGE:
		            	    case self::STRING:
		            	    case self::SUBCLASS_ORIGIN:
		            	    case self::SUBJECT:
		            	    case self::SUBPARTITION:
		            	    case self::SUBPARTITIONS:
		            	    case self::SUSPEND:
		            	    case self::SWAPS:
		            	    case self::SWITCHES:
		            	    case self::TABLE_NAME:
		            	    case self::TABLESPACE:
		            	    case self::TABLE_TYPE:
		            	    case self::TEMPORARY:
		            	    case self::TEMPTABLE:
		            	    case self::THAN:
		            	    case self::TRADITIONAL:
		            	    case self::TRANSACTION:
		            	    case self::TRANSACTIONAL:
		            	    case self::TRIGGERS:
		            	    case self::TRUNCATE:
		            	    case self::UNBOUNDED:
		            	    case self::UNDEFINED:
		            	    case self::UNDOFILE:
		            	    case self::UNDO_BUFFER_SIZE:
		            	    case self::UNINSTALL:
		            	    case self::UNKNOWN:
		            	    case self::UNTIL:
		            	    case self::UPGRADE:
		            	    case self::USER:
		            	    case self::USE_FRM:
		            	    case self::USER_RESOURCES:
		            	    case self::VALIDATION:
		            	    case self::VALUE:
		            	    case self::VARIABLES:
		            	    case self::VIEW:
		            	    case self::VIRTUAL:
		            	    case self::VISIBLE:
		            	    case self::WAIT:
		            	    case self::WARNINGS:
		            	    case self::WITHOUT:
		            	    case self::WORK:
		            	    case self::WRAPPER:
		            	    case self::X509:
		            	    case self::XA:
		            	    case self::XML:
		            	    case self::EUR:
		            	    case self::USA:
		            	    case self::JIS:
		            	    case self::ISO:
		            	    case self::INTERNAL:
		            	    case self::QUARTER:
		            	    case self::MONTH:
		            	    case self::DAY:
		            	    case self::HOUR:
		            	    case self::MINUTE:
		            	    case self::WEEK:
		            	    case self::SECOND:
		            	    case self::MICROSECOND:
		            	    case self::ADMIN:
		            	    case self::AUDIT_ABORT_EXEMPT:
		            	    case self::AUDIT_ADMIN:
		            	    case self::AUTHENTICATION_POLICY_ADMIN:
		            	    case self::BACKUP_ADMIN:
		            	    case self::BINLOG_ADMIN:
		            	    case self::BINLOG_ENCRYPTION_ADMIN:
		            	    case self::CLONE_ADMIN:
		            	    case self::CONNECTION_ADMIN:
		            	    case self::ENCRYPTION_KEY_ADMIN:
		            	    case self::EXECUTE:
		            	    case self::FILE:
		            	    case self::FIREWALL_ADMIN:
		            	    case self::FIREWALL_EXEMPT:
		            	    case self::FIREWALL_USER:
		            	    case self::GROUP_REPLICATION_ADMIN:
		            	    case self::INNODB_REDO_LOG_ARCHIVE:
		            	    case self::INVOKE:
		            	    case self::LAMBDA:
		            	    case self::NDB_STORED_USER:
		            	    case self::PASSWORDLESS_USER_ADMIN:
		            	    case self::PERSIST_RO_VARIABLES_ADMIN:
		            	    case self::PRIVILEGES:
		            	    case self::PROCESS:
		            	    case self::RELOAD:
		            	    case self::REPLICATION_APPLIER:
		            	    case self::REPLICATION_SLAVE_ADMIN:
		            	    case self::RESOURCE_GROUP_ADMIN:
		            	    case self::RESOURCE_GROUP_USER:
		            	    case self::ROLE_ADMIN:
		            	    case self::ROUTINE:
		            	    case self::S3:
		            	    case self::SESSION_VARIABLES_ADMIN:
		            	    case self::SET_USER_ID:
		            	    case self::SHOW_ROUTINE:
		            	    case self::SHUTDOWN:
		            	    case self::SUPER:
		            	    case self::SYSTEM_VARIABLES_ADMIN:
		            	    case self::TABLES:
		            	    case self::TABLE_ENCRYPTION_ADMIN:
		            	    case self::VERSION_TOKEN_ADMIN:
		            	    case self::XA_RECOVER_ADMIN:
		            	    case self::ARMSCII8:
		            	    case self::ASCII:
		            	    case self::BIG5:
		            	    case self::CP1250:
		            	    case self::CP1251:
		            	    case self::CP1256:
		            	    case self::CP1257:
		            	    case self::CP850:
		            	    case self::CP852:
		            	    case self::CP866:
		            	    case self::CP932:
		            	    case self::DEC8:
		            	    case self::EUCJPMS:
		            	    case self::EUCKR:
		            	    case self::GB18030:
		            	    case self::GB2312:
		            	    case self::GBK:
		            	    case self::GEOSTD8:
		            	    case self::GREEK:
		            	    case self::HEBREW:
		            	    case self::HP8:
		            	    case self::KEYBCS2:
		            	    case self::KOI8R:
		            	    case self::KOI8U:
		            	    case self::LATIN1:
		            	    case self::LATIN2:
		            	    case self::LATIN5:
		            	    case self::LATIN7:
		            	    case self::MACCE:
		            	    case self::MACROMAN:
		            	    case self::SJIS:
		            	    case self::SWE7:
		            	    case self::TIS620:
		            	    case self::UCS2:
		            	    case self::UJIS:
		            	    case self::UTF16:
		            	    case self::UTF16LE:
		            	    case self::UTF32:
		            	    case self::UTF8:
		            	    case self::UTF8MB3:
		            	    case self::UTF8MB4:
		            	    case self::ARCHIVE:
		            	    case self::BLACKHOLE:
		            	    case self::CSV:
		            	    case self::FEDERATED:
		            	    case self::INNODB:
		            	    case self::MEMORY:
		            	    case self::MRG_MYISAM:
		            	    case self::MYISAM:
		            	    case self::NDB:
		            	    case self::NDBCLUSTER:
		            	    case self::PERFORMANCE_SCHEMA:
		            	    case self::TOKUDB:
		            	    case self::REPEATABLE:
		            	    case self::COMMITTED:
		            	    case self::UNCOMMITTED:
		            	    case self::SERIALIZABLE:
		            	    case self::GEOMETRYCOLLECTION:
		            	    case self::LINESTRING:
		            	    case self::MULTILINESTRING:
		            	    case self::MULTIPOINT:
		            	    case self::MULTIPOLYGON:
		            	    case self::POINT:
		            	    case self::POLYGON:
		            	    case self::ABS:
		            	    case self::ACOS:
		            	    case self::ADDDATE:
		            	    case self::ADDTIME:
		            	    case self::AES_DECRYPT:
		            	    case self::AES_ENCRYPT:
		            	    case self::AREA:
		            	    case self::ASBINARY:
		            	    case self::ASIN:
		            	    case self::ASTEXT:
		            	    case self::ASWKB:
		            	    case self::ASWKT:
		            	    case self::ASYMMETRIC_DECRYPT:
		            	    case self::ASYMMETRIC_DERIVE:
		            	    case self::ASYMMETRIC_ENCRYPT:
		            	    case self::ASYMMETRIC_SIGN:
		            	    case self::ASYMMETRIC_VERIFY:
		            	    case self::ATAN:
		            	    case self::ATAN2:
		            	    case self::BENCHMARK:
		            	    case self::BIN:
		            	    case self::BIT_COUNT:
		            	    case self::BIT_LENGTH:
		            	    case self::BUFFER:
		            	    case self::CATALOG_NAME:
		            	    case self::CEIL:
		            	    case self::CEILING:
		            	    case self::CENTROID:
		            	    case self::CHARACTER_LENGTH:
		            	    case self::CHARSET:
		            	    case self::CHAR_LENGTH:
		            	    case self::COERCIBILITY:
		            	    case self::COLLATION:
		            	    case self::COMPRESS:
		            	    case self::CONCAT:
		            	    case self::CONCAT_WS:
		            	    case self::CONNECTION_ID:
		            	    case self::CONV:
		            	    case self::CONVERT_TZ:
		            	    case self::COS:
		            	    case self::COT:
		            	    case self::CRC32:
		            	    case self::CREATE_ASYMMETRIC_PRIV_KEY:
		            	    case self::CREATE_ASYMMETRIC_PUB_KEY:
		            	    case self::CREATE_DH_PARAMETERS:
		            	    case self::CREATE_DIGEST:
		            	    case self::CROSSES:
		            	    case self::DATEDIFF:
		            	    case self::DATE_FORMAT:
		            	    case self::DAYNAME:
		            	    case self::DAYOFMONTH:
		            	    case self::DAYOFWEEK:
		            	    case self::DAYOFYEAR:
		            	    case self::DECODE:
		            	    case self::DEGREES:
		            	    case self::DES_DECRYPT:
		            	    case self::DES_ENCRYPT:
		            	    case self::DIMENSION:
		            	    case self::DISJOINT:
		            	    case self::ELT:
		            	    case self::ENCODE:
		            	    case self::ENCRYPT:
		            	    case self::ENDPOINT:
		            	    case self::ENGINE_ATTRIBUTE:
		            	    case self::ENVELOPE:
		            	    case self::EQUALS:
		            	    case self::EXP:
		            	    case self::EXPORT_SET:
		            	    case self::EXTERIORRING:
		            	    case self::EXTRACTVALUE:
		            	    case self::FIELD:
		            	    case self::FIND_IN_SET:
		            	    case self::FLOOR:
		            	    case self::FORMAT:
		            	    case self::FOUND_ROWS:
		            	    case self::FROM_BASE64:
		            	    case self::FROM_DAYS:
		            	    case self::FROM_UNIXTIME:
		            	    case self::GEOMCOLLFROMTEXT:
		            	    case self::GEOMCOLLFROMWKB:
		            	    case self::GEOMETRYCOLLECTIONFROMTEXT:
		            	    case self::GEOMETRYCOLLECTIONFROMWKB:
		            	    case self::GEOMETRYFROMTEXT:
		            	    case self::GEOMETRYFROMWKB:
		            	    case self::GEOMETRYN:
		            	    case self::GEOMETRYTYPE:
		            	    case self::GEOMFROMTEXT:
		            	    case self::GEOMFROMWKB:
		            	    case self::GET_FORMAT:
		            	    case self::GET_LOCK:
		            	    case self::GLENGTH:
		            	    case self::GREATEST:
		            	    case self::GTID_SUBSET:
		            	    case self::GTID_SUBTRACT:
		            	    case self::HEX:
		            	    case self::IFNULL:
		            	    case self::INET6_ATON:
		            	    case self::INET6_NTOA:
		            	    case self::INET_ATON:
		            	    case self::INET_NTOA:
		            	    case self::INSTR:
		            	    case self::INTERIORRINGN:
		            	    case self::INTERSECTS:
		            	    case self::ISCLOSED:
		            	    case self::ISEMPTY:
		            	    case self::ISNULL:
		            	    case self::ISSIMPLE:
		            	    case self::IS_FREE_LOCK:
		            	    case self::IS_IPV4:
		            	    case self::IS_IPV4_COMPAT:
		            	    case self::IS_IPV4_MAPPED:
		            	    case self::IS_IPV6:
		            	    case self::IS_USED_LOCK:
		            	    case self::LAST_INSERT_ID:
		            	    case self::LCASE:
		            	    case self::LEAST:
		            	    case self::LENGTH:
		            	    case self::LINEFROMTEXT:
		            	    case self::LINEFROMWKB:
		            	    case self::LINESTRINGFROMTEXT:
		            	    case self::LINESTRINGFROMWKB:
		            	    case self::LN:
		            	    case self::LOAD_FILE:
		            	    case self::LOCATE:
		            	    case self::LOG:
		            	    case self::LOG10:
		            	    case self::LOG2:
		            	    case self::LOWER:
		            	    case self::LPAD:
		            	    case self::LTRIM:
		            	    case self::MAKEDATE:
		            	    case self::MAKETIME:
		            	    case self::MAKE_SET:
		            	    case self::MASTER_POS_WAIT:
		            	    case self::MBRCONTAINS:
		            	    case self::MBRDISJOINT:
		            	    case self::MBREQUAL:
		            	    case self::MBRINTERSECTS:
		            	    case self::MBROVERLAPS:
		            	    case self::MBRTOUCHES:
		            	    case self::MBRWITHIN:
		            	    case self::MD5:
		            	    case self::MLINEFROMTEXT:
		            	    case self::MLINEFROMWKB:
		            	    case self::MONTHNAME:
		            	    case self::MPOINTFROMTEXT:
		            	    case self::MPOINTFROMWKB:
		            	    case self::MPOLYFROMTEXT:
		            	    case self::MPOLYFROMWKB:
		            	    case self::MULTILINESTRINGFROMTEXT:
		            	    case self::MULTILINESTRINGFROMWKB:
		            	    case self::MULTIPOINTFROMTEXT:
		            	    case self::MULTIPOINTFROMWKB:
		            	    case self::MULTIPOLYGONFROMTEXT:
		            	    case self::MULTIPOLYGONFROMWKB:
		            	    case self::NAME_CONST:
		            	    case self::NULLIF:
		            	    case self::NUMGEOMETRIES:
		            	    case self::NUMINTERIORRINGS:
		            	    case self::NUMPOINTS:
		            	    case self::OCT:
		            	    case self::OCTET_LENGTH:
		            	    case self::ORD:
		            	    case self::OVERLAPS:
		            	    case self::PERIOD_ADD:
		            	    case self::PERIOD_DIFF:
		            	    case self::PI:
		            	    case self::POINTFROMTEXT:
		            	    case self::POINTFROMWKB:
		            	    case self::POINTN:
		            	    case self::POLYFROMTEXT:
		            	    case self::POLYFROMWKB:
		            	    case self::POLYGONFROMTEXT:
		            	    case self::POLYGONFROMWKB:
		            	    case self::POW:
		            	    case self::POWER:
		            	    case self::QUOTE:
		            	    case self::RADIANS:
		            	    case self::RAND:
		            	    case self::RANDOM:
		            	    case self::RANDOM_BYTES:
		            	    case self::RELEASE_LOCK:
		            	    case self::REVERSE:
		            	    case self::ROUND:
		            	    case self::ROW_COUNT:
		            	    case self::RPAD:
		            	    case self::RTRIM:
		            	    case self::SEC_TO_TIME:
		            	    case self::SECONDARY_ENGINE_ATTRIBUTE:
		            	    case self::SESSION_USER:
		            	    case self::SHA:
		            	    case self::SHA1:
		            	    case self::SHA2:
		            	    case self::SCHEMA_NAME:
		            	    case self::SIGN:
		            	    case self::SIN:
		            	    case self::SLEEP:
		            	    case self::SOUNDEX:
		            	    case self::SQL_THREAD_WAIT_AFTER_GTIDS:
		            	    case self::SQRT:
		            	    case self::SRID:
		            	    case self::STARTPOINT:
		            	    case self::STRCMP:
		            	    case self::STR_TO_DATE:
		            	    case self::ST_AREA:
		            	    case self::ST_ASBINARY:
		            	    case self::ST_ASTEXT:
		            	    case self::ST_ASWKB:
		            	    case self::ST_ASWKT:
		            	    case self::ST_BUFFER:
		            	    case self::ST_CENTROID:
		            	    case self::ST_CONTAINS:
		            	    case self::ST_CROSSES:
		            	    case self::ST_DIFFERENCE:
		            	    case self::ST_DIMENSION:
		            	    case self::ST_DISJOINT:
		            	    case self::ST_DISTANCE:
		            	    case self::ST_ENDPOINT:
		            	    case self::ST_ENVELOPE:
		            	    case self::ST_EQUALS:
		            	    case self::ST_EXTERIORRING:
		            	    case self::ST_GEOMCOLLFROMTEXT:
		            	    case self::ST_GEOMCOLLFROMTXT:
		            	    case self::ST_GEOMCOLLFROMWKB:
		            	    case self::ST_GEOMETRYCOLLECTIONFROMTEXT:
		            	    case self::ST_GEOMETRYCOLLECTIONFROMWKB:
		            	    case self::ST_GEOMETRYFROMTEXT:
		            	    case self::ST_GEOMETRYFROMWKB:
		            	    case self::ST_GEOMETRYN:
		            	    case self::ST_GEOMETRYTYPE:
		            	    case self::ST_GEOMFROMTEXT:
		            	    case self::ST_GEOMFROMWKB:
		            	    case self::ST_INTERIORRINGN:
		            	    case self::ST_INTERSECTION:
		            	    case self::ST_INTERSECTS:
		            	    case self::ST_ISCLOSED:
		            	    case self::ST_ISEMPTY:
		            	    case self::ST_ISSIMPLE:
		            	    case self::ST_LINEFROMTEXT:
		            	    case self::ST_LINEFROMWKB:
		            	    case self::ST_LINESTRINGFROMTEXT:
		            	    case self::ST_LINESTRINGFROMWKB:
		            	    case self::ST_NUMGEOMETRIES:
		            	    case self::ST_NUMINTERIORRING:
		            	    case self::ST_NUMINTERIORRINGS:
		            	    case self::ST_NUMPOINTS:
		            	    case self::ST_OVERLAPS:
		            	    case self::ST_POINTFROMTEXT:
		            	    case self::ST_POINTFROMWKB:
		            	    case self::ST_POINTN:
		            	    case self::ST_POLYFROMTEXT:
		            	    case self::ST_POLYFROMWKB:
		            	    case self::ST_POLYGONFROMTEXT:
		            	    case self::ST_POLYGONFROMWKB:
		            	    case self::ST_SRID:
		            	    case self::ST_STARTPOINT:
		            	    case self::ST_SYMDIFFERENCE:
		            	    case self::ST_TOUCHES:
		            	    case self::ST_UNION:
		            	    case self::ST_WITHIN:
		            	    case self::ST_X:
		            	    case self::ST_Y:
		            	    case self::SUBDATE:
		            	    case self::SUBSTRING_INDEX:
		            	    case self::SUBTIME:
		            	    case self::SYSTEM_USER:
		            	    case self::TAN:
		            	    case self::TIMEDIFF:
		            	    case self::TIMESTAMPADD:
		            	    case self::TIMESTAMPDIFF:
		            	    case self::TIME_FORMAT:
		            	    case self::TIME_TO_SEC:
		            	    case self::TOUCHES:
		            	    case self::TO_BASE64:
		            	    case self::TO_DAYS:
		            	    case self::TO_SECONDS:
		            	    case self::TP_CONNECTION_ADMIN:
		            	    case self::UCASE:
		            	    case self::UNCOMPRESS:
		            	    case self::UNCOMPRESSED_LENGTH:
		            	    case self::UNHEX:
		            	    case self::UNIX_TIMESTAMP:
		            	    case self::UPDATEXML:
		            	    case self::UPPER:
		            	    case self::UUID:
		            	    case self::UUID_SHORT:
		            	    case self::VALIDATE_PASSWORD_STRENGTH:
		            	    case self::VERSION:
		            	    case self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
		            	    case self::WEEKDAY:
		            	    case self::WEEKOFYEAR:
		            	    case self::WEIGHT_STRING:
		            	    case self::WITHIN:
		            	    case self::YEARWEEK:
		            	    case self::Y_FUNCTION:
		            	    case self::X_FUNCTION:
		            	    case self::MOD:
		            	    case self::CHARSET_REVERSE_QOUTE_STRING:
		            	    case self::STRING_LITERAL:
		            	    case self::ID:
		            	    	$this->setState(2957);
		            	    	$this->uidList();
		            	    	break;

		            	    case self::ALL:
		            	    	$this->setState(2958);
		            	    	$this->match(self::ALL);
		            	    	break;

		            	default:
		            		throw new NoViableAltException($this);
		            	}
		            	break;

		            case self::REBUILD:
		            	$localContext = new Context\AlterByRebuildPartitionContext($localContext);
		            	$this->enterOuterAlt($localContext, 12);
		            	$this->setState(2961);
		            	$this->match(self::REBUILD);
		            	$this->setState(2962);
		            	$this->match(self::PARTITION);
		            	$this->setState(2965);
		            	$this->errorHandler->sync($this);

		            	switch ($this->input->LA(1)) {
		            	    case self::ARRAY:
		            	    case self::ATTRIBUTE:
		            	    case self::BUCKETS:
		            	    case self::CONDITION:
		            	    case self::CURRENT:
		            	    case self::CURRENT_USER:
		            	    case self::DATABASE:
		            	    case self::DEFAULT:
		            	    case self::DIAGNOSTICS:
		            	    case self::EMPTY:
		            	    case self::ENFORCED:
		            	    case self::EXCEPT:
		            	    case self::GROUP:
		            	    case self::IF:
		            	    case self::IGNORED:
		            	    case self::INSERT:
		            	    case self::LATERAL:
		            	    case self::LEFT:
		            	    case self::NUMBER:
		            	    case self::OPTIONAL:
		            	    case self::ORDER:
		            	    case self::PRIMARY:
		            	    case self::REPEAT:
		            	    case self::REPLACE:
		            	    case self::RIGHT:
		            	    case self::SCHEMA:
		            	    case self::SKIP_QUERY_REWRITE:
		            	    case self::STACKED:
		            	    case self::DATE:
		            	    case self::TIME:
		            	    case self::TIMESTAMP:
		            	    case self::DATETIME:
		            	    case self::YEAR:
		            	    case self::BINARY:
		            	    case self::TEXT:
		            	    case self::ENUM:
		            	    case self::SERIAL:
		            	    case self::JSON_ARRAY:
		            	    case self::JSON_ARRAYAGG:
		            	    case self::JSON_ARRAY_APPEND:
		            	    case self::JSON_ARRAY_INSERT:
		            	    case self::JSON_CONTAINS:
		            	    case self::JSON_CONTAINS_PATH:
		            	    case self::JSON_DEPTH:
		            	    case self::JSON_EXTRACT:
		            	    case self::JSON_INSERT:
		            	    case self::JSON_KEYS:
		            	    case self::JSON_LENGTH:
		            	    case self::JSON_MERGE:
		            	    case self::JSON_MERGE_PATCH:
		            	    case self::JSON_MERGE_PRESERVE:
		            	    case self::JSON_OBJECT:
		            	    case self::JSON_OBJECTAGG:
		            	    case self::JSON_OVERLAPS:
		            	    case self::JSON_PRETTY:
		            	    case self::JSON_QUOTE:
		            	    case self::JSON_REMOVE:
		            	    case self::JSON_REPLACE:
		            	    case self::JSON_SCHEMA_VALID:
		            	    case self::JSON_SCHEMA_VALIDATION_REPORT:
		            	    case self::JSON_SEARCH:
		            	    case self::JSON_SET:
		            	    case self::JSON_STORAGE_FREE:
		            	    case self::JSON_STORAGE_SIZE:
		            	    case self::JSON_TABLE:
		            	    case self::JSON_TYPE:
		            	    case self::JSON_UNQUOTE:
		            	    case self::JSON_VALID:
		            	    case self::JSON_VALUE:
		            	    case self::NESTED:
		            	    case self::ORDINALITY:
		            	    case self::PATH:
		            	    case self::AVG:
		            	    case self::BIT_AND:
		            	    case self::BIT_OR:
		            	    case self::BIT_XOR:
		            	    case self::COUNT:
		            	    case self::CUME_DIST:
		            	    case self::DENSE_RANK:
		            	    case self::FIRST_VALUE:
		            	    case self::GROUP_CONCAT:
		            	    case self::LAG:
		            	    case self::LAST_VALUE:
		            	    case self::LEAD:
		            	    case self::MAX:
		            	    case self::MIN:
		            	    case self::NTILE:
		            	    case self::NTH_VALUE:
		            	    case self::PERCENT_RANK:
		            	    case self::RANK:
		            	    case self::ROW_NUMBER:
		            	    case self::STD:
		            	    case self::STDDEV:
		            	    case self::STDDEV_POP:
		            	    case self::STDDEV_SAMP:
		            	    case self::SUM:
		            	    case self::VAR_POP:
		            	    case self::VAR_SAMP:
		            	    case self::VARIANCE:
		            	    case self::CURRENT_DATE:
		            	    case self::CURRENT_TIME:
		            	    case self::CURRENT_TIMESTAMP:
		            	    case self::LOCALTIME:
		            	    case self::CURDATE:
		            	    case self::CURTIME:
		            	    case self::DATE_ADD:
		            	    case self::DATE_SUB:
		            	    case self::LOCALTIMESTAMP:
		            	    case self::NOW:
		            	    case self::POSITION:
		            	    case self::SUBSTR:
		            	    case self::SUBSTRING:
		            	    case self::SYSDATE:
		            	    case self::TRIM:
		            	    case self::UTC_DATE:
		            	    case self::UTC_TIME:
		            	    case self::UTC_TIMESTAMP:
		            	    case self::ACCOUNT:
		            	    case self::ACTION:
		            	    case self::AFTER:
		            	    case self::AGGREGATE:
		            	    case self::ALGORITHM:
		            	    case self::ANY:
		            	    case self::AT:
		            	    case self::AUTHORS:
		            	    case self::AUTOCOMMIT:
		            	    case self::AUTOEXTEND_SIZE:
		            	    case self::AUTO_INCREMENT:
		            	    case self::AVG_ROW_LENGTH:
		            	    case self::BEGIN:
		            	    case self::BINLOG:
		            	    case self::BIT:
		            	    case self::BLOCK:
		            	    case self::BOOL:
		            	    case self::BOOLEAN:
		            	    case self::BTREE:
		            	    case self::CACHE:
		            	    case self::CASCADED:
		            	    case self::CHAIN:
		            	    case self::CHANGED:
		            	    case self::CHANNEL:
		            	    case self::CHECKSUM:
		            	    case self::PAGE_CHECKSUM:
		            	    case self::CIPHER:
		            	    case self::CLASS_ORIGIN:
		            	    case self::CLIENT:
		            	    case self::CLOSE:
		            	    case self::CLUSTERING:
		            	    case self::COALESCE:
		            	    case self::CODE:
		            	    case self::COLUMNS:
		            	    case self::COLUMN_FORMAT:
		            	    case self::COLUMN_NAME:
		            	    case self::COMMENT:
		            	    case self::COMMIT:
		            	    case self::COMPACT:
		            	    case self::COMPLETION:
		            	    case self::COMPRESSED:
		            	    case self::COMPRESSION:
		            	    case self::CONCURRENT:
		            	    case self::CONNECT:
		            	    case self::CONNECTION:
		            	    case self::CONSISTENT:
		            	    case self::CONSTRAINT_CATALOG:
		            	    case self::CONSTRAINT_SCHEMA:
		            	    case self::CONSTRAINT_NAME:
		            	    case self::CONTAINS:
		            	    case self::CONTEXT:
		            	    case self::CONTRIBUTORS:
		            	    case self::COPY:
		            	    case self::CPU:
		            	    case self::CURSOR_NAME:
		            	    case self::DATA:
		            	    case self::DATAFILE:
		            	    case self::DEALLOCATE:
		            	    case self::DEFAULT_AUTH:
		            	    case self::DEFINER:
		            	    case self::DELAY_KEY_WRITE:
		            	    case self::DES_KEY_FILE:
		            	    case self::DIRECTORY:
		            	    case self::DISABLE:
		            	    case self::DISCARD:
		            	    case self::DISK:
		            	    case self::DO:
		            	    case self::DUMPFILE:
		            	    case self::DUPLICATE:
		            	    case self::DYNAMIC:
		            	    case self::ENABLE:
		            	    case self::ENCRYPTION:
		            	    case self::END:
		            	    case self::ENDS:
		            	    case self::ENGINE:
		            	    case self::ENGINES:
		            	    case self::ERROR:
		            	    case self::ERRORS:
		            	    case self::ESCAPE:
		            	    case self::EVEN:
		            	    case self::EVENT:
		            	    case self::EVENTS:
		            	    case self::EVERY:
		            	    case self::EXCHANGE:
		            	    case self::EXCLUSIVE:
		            	    case self::EXPIRE:
		            	    case self::EXPORT:
		            	    case self::EXTENDED:
		            	    case self::EXTENT_SIZE:
		            	    case self::FAILED_LOGIN_ATTEMPTS:
		            	    case self::FAST:
		            	    case self::FAULTS:
		            	    case self::FIELDS:
		            	    case self::FILE_BLOCK_SIZE:
		            	    case self::FILTER:
		            	    case self::FIRST:
		            	    case self::FIXED:
		            	    case self::FLUSH:
		            	    case self::FOLLOWS:
		            	    case self::FOUND:
		            	    case self::FULL:
		            	    case self::FUNCTION:
		            	    case self::GENERAL:
		            	    case self::GLOBAL:
		            	    case self::GRANTS:
		            	    case self::GROUP_REPLICATION:
		            	    case self::HANDLER:
		            	    case self::HASH:
		            	    case self::HELP:
		            	    case self::HISTORY:
		            	    case self::HOST:
		            	    case self::HOSTS:
		            	    case self::IDENTIFIED:
		            	    case self::IGNORE_SERVER_IDS:
		            	    case self::IMPORT:
		            	    case self::INDEXES:
		            	    case self::INITIAL_SIZE:
		            	    case self::INPLACE:
		            	    case self::INSERT_METHOD:
		            	    case self::INSTALL:
		            	    case self::INSTANCE:
		            	    case self::INSTANT:
		            	    case self::INVISIBLE:
		            	    case self::INVOKER:
		            	    case self::IO:
		            	    case self::IO_THREAD:
		            	    case self::IPC:
		            	    case self::ISOLATION:
		            	    case self::ISSUER:
		            	    case self::JSON:
		            	    case self::KEY_BLOCK_SIZE:
		            	    case self::LANGUAGE:
		            	    case self::LAST:
		            	    case self::LEAVES:
		            	    case self::LESS:
		            	    case self::LEVEL:
		            	    case self::LIST:
		            	    case self::LOCAL:
		            	    case self::LOGFILE:
		            	    case self::LOGS:
		            	    case self::MASTER:
		            	    case self::MASTER_AUTO_POSITION:
		            	    case self::MASTER_CONNECT_RETRY:
		            	    case self::MASTER_DELAY:
		            	    case self::MASTER_HEARTBEAT_PERIOD:
		            	    case self::MASTER_HOST:
		            	    case self::MASTER_LOG_FILE:
		            	    case self::MASTER_LOG_POS:
		            	    case self::MASTER_PASSWORD:
		            	    case self::MASTER_PORT:
		            	    case self::MASTER_RETRY_COUNT:
		            	    case self::MASTER_SSL:
		            	    case self::MASTER_SSL_CA:
		            	    case self::MASTER_SSL_CAPATH:
		            	    case self::MASTER_SSL_CERT:
		            	    case self::MASTER_SSL_CIPHER:
		            	    case self::MASTER_SSL_CRL:
		            	    case self::MASTER_SSL_CRLPATH:
		            	    case self::MASTER_SSL_KEY:
		            	    case self::MASTER_TLS_VERSION:
		            	    case self::MASTER_USER:
		            	    case self::MAX_CONNECTIONS_PER_HOUR:
		            	    case self::MAX_QUERIES_PER_HOUR:
		            	    case self::MAX_ROWS:
		            	    case self::MAX_SIZE:
		            	    case self::MAX_UPDATES_PER_HOUR:
		            	    case self::MAX_USER_CONNECTIONS:
		            	    case self::MEDIUM:
		            	    case self::MEMBER:
		            	    case self::MERGE:
		            	    case self::MESSAGE_TEXT:
		            	    case self::MID:
		            	    case self::MIGRATE:
		            	    case self::MIN_ROWS:
		            	    case self::MODE:
		            	    case self::MODIFY:
		            	    case self::MUTEX:
		            	    case self::MYSQL:
		            	    case self::MYSQL_ERRNO:
		            	    case self::NAME:
		            	    case self::NAMES:
		            	    case self::NCHAR:
		            	    case self::NEVER:
		            	    case self::NEXT:
		            	    case self::NO:
		            	    case self::NOCOPY:
		            	    case self::NOWAIT:
		            	    case self::NODEGROUP:
		            	    case self::NONE:
		            	    case self::ODBC:
		            	    case self::OFFLINE:
		            	    case self::OFFSET:
		            	    case self::OF:
		            	    case self::OJ:
		            	    case self::OLD_PASSWORD:
		            	    case self::ONE:
		            	    case self::ONLINE:
		            	    case self::ONLY:
		            	    case self::OPEN:
		            	    case self::OPTIMIZER_COSTS:
		            	    case self::OPTIONS:
		            	    case self::OWNER:
		            	    case self::PACK_KEYS:
		            	    case self::PAGE:
		            	    case self::PARSER:
		            	    case self::PARTIAL:
		            	    case self::PARTITIONING:
		            	    case self::PARTITIONS:
		            	    case self::PASSWORD:
		            	    case self::PASSWORD_LOCK_TIME:
		            	    case self::PHASE:
		            	    case self::PLUGIN:
		            	    case self::PLUGIN_DIR:
		            	    case self::PLUGINS:
		            	    case self::PORT:
		            	    case self::PRECEDES:
		            	    case self::PREPARE:
		            	    case self::PRESERVE:
		            	    case self::PREV:
		            	    case self::PROCESSLIST:
		            	    case self::PROFILE:
		            	    case self::PROFILES:
		            	    case self::PROXY:
		            	    case self::QUERY:
		            	    case self::QUICK:
		            	    case self::REBUILD:
		            	    case self::RECOVER:
		            	    case self::RECURSIVE:
		            	    case self::REDO_BUFFER_SIZE:
		            	    case self::REDUNDANT:
		            	    case self::RELAY:
		            	    case self::RELAY_LOG_FILE:
		            	    case self::RELAY_LOG_POS:
		            	    case self::RELAYLOG:
		            	    case self::REMOVE:
		            	    case self::REORGANIZE:
		            	    case self::REPAIR:
		            	    case self::REPLICATE_DO_DB:
		            	    case self::REPLICATE_DO_TABLE:
		            	    case self::REPLICATE_IGNORE_DB:
		            	    case self::REPLICATE_IGNORE_TABLE:
		            	    case self::REPLICATE_REWRITE_DB:
		            	    case self::REPLICATE_WILD_DO_TABLE:
		            	    case self::REPLICATE_WILD_IGNORE_TABLE:
		            	    case self::REPLICATION:
		            	    case self::RESET:
		            	    case self::RESUME:
		            	    case self::RETURNED_SQLSTATE:
		            	    case self::RETURNS:
		            	    case self::REUSE:
		            	    case self::ROLE:
		            	    case self::ROLLBACK:
		            	    case self::ROLLUP:
		            	    case self::ROTATE:
		            	    case self::ROW:
		            	    case self::ROWS:
		            	    case self::ROW_FORMAT:
		            	    case self::RTREE:
		            	    case self::SAVEPOINT:
		            	    case self::SCHEDULE:
		            	    case self::SECURITY:
		            	    case self::SERVER:
		            	    case self::SESSION:
		            	    case self::SHARE:
		            	    case self::SHARED:
		            	    case self::SIGNED:
		            	    case self::SIMPLE:
		            	    case self::SLAVE:
		            	    case self::SLOW:
		            	    case self::SNAPSHOT:
		            	    case self::SOCKET:
		            	    case self::SOME:
		            	    case self::SONAME:
		            	    case self::SOUNDS:
		            	    case self::SOURCE:
		            	    case self::SQL_AFTER_GTIDS:
		            	    case self::SQL_AFTER_MTS_GAPS:
		            	    case self::SQL_BEFORE_GTIDS:
		            	    case self::SQL_BUFFER_RESULT:
		            	    case self::SQL_CACHE:
		            	    case self::SQL_NO_CACHE:
		            	    case self::SQL_THREAD:
		            	    case self::START:
		            	    case self::STARTS:
		            	    case self::STATS_AUTO_RECALC:
		            	    case self::STATS_PERSISTENT:
		            	    case self::STATS_SAMPLE_PAGES:
		            	    case self::STATUS:
		            	    case self::STOP:
		            	    case self::STORAGE:
		            	    case self::STRING:
		            	    case self::SUBCLASS_ORIGIN:
		            	    case self::SUBJECT:
		            	    case self::SUBPARTITION:
		            	    case self::SUBPARTITIONS:
		            	    case self::SUSPEND:
		            	    case self::SWAPS:
		            	    case self::SWITCHES:
		            	    case self::TABLE_NAME:
		            	    case self::TABLESPACE:
		            	    case self::TABLE_TYPE:
		            	    case self::TEMPORARY:
		            	    case self::TEMPTABLE:
		            	    case self::THAN:
		            	    case self::TRADITIONAL:
		            	    case self::TRANSACTION:
		            	    case self::TRANSACTIONAL:
		            	    case self::TRIGGERS:
		            	    case self::TRUNCATE:
		            	    case self::UNBOUNDED:
		            	    case self::UNDEFINED:
		            	    case self::UNDOFILE:
		            	    case self::UNDO_BUFFER_SIZE:
		            	    case self::UNINSTALL:
		            	    case self::UNKNOWN:
		            	    case self::UNTIL:
		            	    case self::UPGRADE:
		            	    case self::USER:
		            	    case self::USE_FRM:
		            	    case self::USER_RESOURCES:
		            	    case self::VALIDATION:
		            	    case self::VALUE:
		            	    case self::VARIABLES:
		            	    case self::VIEW:
		            	    case self::VIRTUAL:
		            	    case self::VISIBLE:
		            	    case self::WAIT:
		            	    case self::WARNINGS:
		            	    case self::WITHOUT:
		            	    case self::WORK:
		            	    case self::WRAPPER:
		            	    case self::X509:
		            	    case self::XA:
		            	    case self::XML:
		            	    case self::EUR:
		            	    case self::USA:
		            	    case self::JIS:
		            	    case self::ISO:
		            	    case self::INTERNAL:
		            	    case self::QUARTER:
		            	    case self::MONTH:
		            	    case self::DAY:
		            	    case self::HOUR:
		            	    case self::MINUTE:
		            	    case self::WEEK:
		            	    case self::SECOND:
		            	    case self::MICROSECOND:
		            	    case self::ADMIN:
		            	    case self::AUDIT_ABORT_EXEMPT:
		            	    case self::AUDIT_ADMIN:
		            	    case self::AUTHENTICATION_POLICY_ADMIN:
		            	    case self::BACKUP_ADMIN:
		            	    case self::BINLOG_ADMIN:
		            	    case self::BINLOG_ENCRYPTION_ADMIN:
		            	    case self::CLONE_ADMIN:
		            	    case self::CONNECTION_ADMIN:
		            	    case self::ENCRYPTION_KEY_ADMIN:
		            	    case self::EXECUTE:
		            	    case self::FILE:
		            	    case self::FIREWALL_ADMIN:
		            	    case self::FIREWALL_EXEMPT:
		            	    case self::FIREWALL_USER:
		            	    case self::GROUP_REPLICATION_ADMIN:
		            	    case self::INNODB_REDO_LOG_ARCHIVE:
		            	    case self::INVOKE:
		            	    case self::LAMBDA:
		            	    case self::NDB_STORED_USER:
		            	    case self::PASSWORDLESS_USER_ADMIN:
		            	    case self::PERSIST_RO_VARIABLES_ADMIN:
		            	    case self::PRIVILEGES:
		            	    case self::PROCESS:
		            	    case self::RELOAD:
		            	    case self::REPLICATION_APPLIER:
		            	    case self::REPLICATION_SLAVE_ADMIN:
		            	    case self::RESOURCE_GROUP_ADMIN:
		            	    case self::RESOURCE_GROUP_USER:
		            	    case self::ROLE_ADMIN:
		            	    case self::ROUTINE:
		            	    case self::S3:
		            	    case self::SESSION_VARIABLES_ADMIN:
		            	    case self::SET_USER_ID:
		            	    case self::SHOW_ROUTINE:
		            	    case self::SHUTDOWN:
		            	    case self::SUPER:
		            	    case self::SYSTEM_VARIABLES_ADMIN:
		            	    case self::TABLES:
		            	    case self::TABLE_ENCRYPTION_ADMIN:
		            	    case self::VERSION_TOKEN_ADMIN:
		            	    case self::XA_RECOVER_ADMIN:
		            	    case self::ARMSCII8:
		            	    case self::ASCII:
		            	    case self::BIG5:
		            	    case self::CP1250:
		            	    case self::CP1251:
		            	    case self::CP1256:
		            	    case self::CP1257:
		            	    case self::CP850:
		            	    case self::CP852:
		            	    case self::CP866:
		            	    case self::CP932:
		            	    case self::DEC8:
		            	    case self::EUCJPMS:
		            	    case self::EUCKR:
		            	    case self::GB18030:
		            	    case self::GB2312:
		            	    case self::GBK:
		            	    case self::GEOSTD8:
		            	    case self::GREEK:
		            	    case self::HEBREW:
		            	    case self::HP8:
		            	    case self::KEYBCS2:
		            	    case self::KOI8R:
		            	    case self::KOI8U:
		            	    case self::LATIN1:
		            	    case self::LATIN2:
		            	    case self::LATIN5:
		            	    case self::LATIN7:
		            	    case self::MACCE:
		            	    case self::MACROMAN:
		            	    case self::SJIS:
		            	    case self::SWE7:
		            	    case self::TIS620:
		            	    case self::UCS2:
		            	    case self::UJIS:
		            	    case self::UTF16:
		            	    case self::UTF16LE:
		            	    case self::UTF32:
		            	    case self::UTF8:
		            	    case self::UTF8MB3:
		            	    case self::UTF8MB4:
		            	    case self::ARCHIVE:
		            	    case self::BLACKHOLE:
		            	    case self::CSV:
		            	    case self::FEDERATED:
		            	    case self::INNODB:
		            	    case self::MEMORY:
		            	    case self::MRG_MYISAM:
		            	    case self::MYISAM:
		            	    case self::NDB:
		            	    case self::NDBCLUSTER:
		            	    case self::PERFORMANCE_SCHEMA:
		            	    case self::TOKUDB:
		            	    case self::REPEATABLE:
		            	    case self::COMMITTED:
		            	    case self::UNCOMMITTED:
		            	    case self::SERIALIZABLE:
		            	    case self::GEOMETRYCOLLECTION:
		            	    case self::LINESTRING:
		            	    case self::MULTILINESTRING:
		            	    case self::MULTIPOINT:
		            	    case self::MULTIPOLYGON:
		            	    case self::POINT:
		            	    case self::POLYGON:
		            	    case self::ABS:
		            	    case self::ACOS:
		            	    case self::ADDDATE:
		            	    case self::ADDTIME:
		            	    case self::AES_DECRYPT:
		            	    case self::AES_ENCRYPT:
		            	    case self::AREA:
		            	    case self::ASBINARY:
		            	    case self::ASIN:
		            	    case self::ASTEXT:
		            	    case self::ASWKB:
		            	    case self::ASWKT:
		            	    case self::ASYMMETRIC_DECRYPT:
		            	    case self::ASYMMETRIC_DERIVE:
		            	    case self::ASYMMETRIC_ENCRYPT:
		            	    case self::ASYMMETRIC_SIGN:
		            	    case self::ASYMMETRIC_VERIFY:
		            	    case self::ATAN:
		            	    case self::ATAN2:
		            	    case self::BENCHMARK:
		            	    case self::BIN:
		            	    case self::BIT_COUNT:
		            	    case self::BIT_LENGTH:
		            	    case self::BUFFER:
		            	    case self::CATALOG_NAME:
		            	    case self::CEIL:
		            	    case self::CEILING:
		            	    case self::CENTROID:
		            	    case self::CHARACTER_LENGTH:
		            	    case self::CHARSET:
		            	    case self::CHAR_LENGTH:
		            	    case self::COERCIBILITY:
		            	    case self::COLLATION:
		            	    case self::COMPRESS:
		            	    case self::CONCAT:
		            	    case self::CONCAT_WS:
		            	    case self::CONNECTION_ID:
		            	    case self::CONV:
		            	    case self::CONVERT_TZ:
		            	    case self::COS:
		            	    case self::COT:
		            	    case self::CRC32:
		            	    case self::CREATE_ASYMMETRIC_PRIV_KEY:
		            	    case self::CREATE_ASYMMETRIC_PUB_KEY:
		            	    case self::CREATE_DH_PARAMETERS:
		            	    case self::CREATE_DIGEST:
		            	    case self::CROSSES:
		            	    case self::DATEDIFF:
		            	    case self::DATE_FORMAT:
		            	    case self::DAYNAME:
		            	    case self::DAYOFMONTH:
		            	    case self::DAYOFWEEK:
		            	    case self::DAYOFYEAR:
		            	    case self::DECODE:
		            	    case self::DEGREES:
		            	    case self::DES_DECRYPT:
		            	    case self::DES_ENCRYPT:
		            	    case self::DIMENSION:
		            	    case self::DISJOINT:
		            	    case self::ELT:
		            	    case self::ENCODE:
		            	    case self::ENCRYPT:
		            	    case self::ENDPOINT:
		            	    case self::ENGINE_ATTRIBUTE:
		            	    case self::ENVELOPE:
		            	    case self::EQUALS:
		            	    case self::EXP:
		            	    case self::EXPORT_SET:
		            	    case self::EXTERIORRING:
		            	    case self::EXTRACTVALUE:
		            	    case self::FIELD:
		            	    case self::FIND_IN_SET:
		            	    case self::FLOOR:
		            	    case self::FORMAT:
		            	    case self::FOUND_ROWS:
		            	    case self::FROM_BASE64:
		            	    case self::FROM_DAYS:
		            	    case self::FROM_UNIXTIME:
		            	    case self::GEOMCOLLFROMTEXT:
		            	    case self::GEOMCOLLFROMWKB:
		            	    case self::GEOMETRYCOLLECTIONFROMTEXT:
		            	    case self::GEOMETRYCOLLECTIONFROMWKB:
		            	    case self::GEOMETRYFROMTEXT:
		            	    case self::GEOMETRYFROMWKB:
		            	    case self::GEOMETRYN:
		            	    case self::GEOMETRYTYPE:
		            	    case self::GEOMFROMTEXT:
		            	    case self::GEOMFROMWKB:
		            	    case self::GET_FORMAT:
		            	    case self::GET_LOCK:
		            	    case self::GLENGTH:
		            	    case self::GREATEST:
		            	    case self::GTID_SUBSET:
		            	    case self::GTID_SUBTRACT:
		            	    case self::HEX:
		            	    case self::IFNULL:
		            	    case self::INET6_ATON:
		            	    case self::INET6_NTOA:
		            	    case self::INET_ATON:
		            	    case self::INET_NTOA:
		            	    case self::INSTR:
		            	    case self::INTERIORRINGN:
		            	    case self::INTERSECTS:
		            	    case self::ISCLOSED:
		            	    case self::ISEMPTY:
		            	    case self::ISNULL:
		            	    case self::ISSIMPLE:
		            	    case self::IS_FREE_LOCK:
		            	    case self::IS_IPV4:
		            	    case self::IS_IPV4_COMPAT:
		            	    case self::IS_IPV4_MAPPED:
		            	    case self::IS_IPV6:
		            	    case self::IS_USED_LOCK:
		            	    case self::LAST_INSERT_ID:
		            	    case self::LCASE:
		            	    case self::LEAST:
		            	    case self::LENGTH:
		            	    case self::LINEFROMTEXT:
		            	    case self::LINEFROMWKB:
		            	    case self::LINESTRINGFROMTEXT:
		            	    case self::LINESTRINGFROMWKB:
		            	    case self::LN:
		            	    case self::LOAD_FILE:
		            	    case self::LOCATE:
		            	    case self::LOG:
		            	    case self::LOG10:
		            	    case self::LOG2:
		            	    case self::LOWER:
		            	    case self::LPAD:
		            	    case self::LTRIM:
		            	    case self::MAKEDATE:
		            	    case self::MAKETIME:
		            	    case self::MAKE_SET:
		            	    case self::MASTER_POS_WAIT:
		            	    case self::MBRCONTAINS:
		            	    case self::MBRDISJOINT:
		            	    case self::MBREQUAL:
		            	    case self::MBRINTERSECTS:
		            	    case self::MBROVERLAPS:
		            	    case self::MBRTOUCHES:
		            	    case self::MBRWITHIN:
		            	    case self::MD5:
		            	    case self::MLINEFROMTEXT:
		            	    case self::MLINEFROMWKB:
		            	    case self::MONTHNAME:
		            	    case self::MPOINTFROMTEXT:
		            	    case self::MPOINTFROMWKB:
		            	    case self::MPOLYFROMTEXT:
		            	    case self::MPOLYFROMWKB:
		            	    case self::MULTILINESTRINGFROMTEXT:
		            	    case self::MULTILINESTRINGFROMWKB:
		            	    case self::MULTIPOINTFROMTEXT:
		            	    case self::MULTIPOINTFROMWKB:
		            	    case self::MULTIPOLYGONFROMTEXT:
		            	    case self::MULTIPOLYGONFROMWKB:
		            	    case self::NAME_CONST:
		            	    case self::NULLIF:
		            	    case self::NUMGEOMETRIES:
		            	    case self::NUMINTERIORRINGS:
		            	    case self::NUMPOINTS:
		            	    case self::OCT:
		            	    case self::OCTET_LENGTH:
		            	    case self::ORD:
		            	    case self::OVERLAPS:
		            	    case self::PERIOD_ADD:
		            	    case self::PERIOD_DIFF:
		            	    case self::PI:
		            	    case self::POINTFROMTEXT:
		            	    case self::POINTFROMWKB:
		            	    case self::POINTN:
		            	    case self::POLYFROMTEXT:
		            	    case self::POLYFROMWKB:
		            	    case self::POLYGONFROMTEXT:
		            	    case self::POLYGONFROMWKB:
		            	    case self::POW:
		            	    case self::POWER:
		            	    case self::QUOTE:
		            	    case self::RADIANS:
		            	    case self::RAND:
		            	    case self::RANDOM:
		            	    case self::RANDOM_BYTES:
		            	    case self::RELEASE_LOCK:
		            	    case self::REVERSE:
		            	    case self::ROUND:
		            	    case self::ROW_COUNT:
		            	    case self::RPAD:
		            	    case self::RTRIM:
		            	    case self::SEC_TO_TIME:
		            	    case self::SECONDARY_ENGINE_ATTRIBUTE:
		            	    case self::SESSION_USER:
		            	    case self::SHA:
		            	    case self::SHA1:
		            	    case self::SHA2:
		            	    case self::SCHEMA_NAME:
		            	    case self::SIGN:
		            	    case self::SIN:
		            	    case self::SLEEP:
		            	    case self::SOUNDEX:
		            	    case self::SQL_THREAD_WAIT_AFTER_GTIDS:
		            	    case self::SQRT:
		            	    case self::SRID:
		            	    case self::STARTPOINT:
		            	    case self::STRCMP:
		            	    case self::STR_TO_DATE:
		            	    case self::ST_AREA:
		            	    case self::ST_ASBINARY:
		            	    case self::ST_ASTEXT:
		            	    case self::ST_ASWKB:
		            	    case self::ST_ASWKT:
		            	    case self::ST_BUFFER:
		            	    case self::ST_CENTROID:
		            	    case self::ST_CONTAINS:
		            	    case self::ST_CROSSES:
		            	    case self::ST_DIFFERENCE:
		            	    case self::ST_DIMENSION:
		            	    case self::ST_DISJOINT:
		            	    case self::ST_DISTANCE:
		            	    case self::ST_ENDPOINT:
		            	    case self::ST_ENVELOPE:
		            	    case self::ST_EQUALS:
		            	    case self::ST_EXTERIORRING:
		            	    case self::ST_GEOMCOLLFROMTEXT:
		            	    case self::ST_GEOMCOLLFROMTXT:
		            	    case self::ST_GEOMCOLLFROMWKB:
		            	    case self::ST_GEOMETRYCOLLECTIONFROMTEXT:
		            	    case self::ST_GEOMETRYCOLLECTIONFROMWKB:
		            	    case self::ST_GEOMETRYFROMTEXT:
		            	    case self::ST_GEOMETRYFROMWKB:
		            	    case self::ST_GEOMETRYN:
		            	    case self::ST_GEOMETRYTYPE:
		            	    case self::ST_GEOMFROMTEXT:
		            	    case self::ST_GEOMFROMWKB:
		            	    case self::ST_INTERIORRINGN:
		            	    case self::ST_INTERSECTION:
		            	    case self::ST_INTERSECTS:
		            	    case self::ST_ISCLOSED:
		            	    case self::ST_ISEMPTY:
		            	    case self::ST_ISSIMPLE:
		            	    case self::ST_LINEFROMTEXT:
		            	    case self::ST_LINEFROMWKB:
		            	    case self::ST_LINESTRINGFROMTEXT:
		            	    case self::ST_LINESTRINGFROMWKB:
		            	    case self::ST_NUMGEOMETRIES:
		            	    case self::ST_NUMINTERIORRING:
		            	    case self::ST_NUMINTERIORRINGS:
		            	    case self::ST_NUMPOINTS:
		            	    case self::ST_OVERLAPS:
		            	    case self::ST_POINTFROMTEXT:
		            	    case self::ST_POINTFROMWKB:
		            	    case self::ST_POINTN:
		            	    case self::ST_POLYFROMTEXT:
		            	    case self::ST_POLYFROMWKB:
		            	    case self::ST_POLYGONFROMTEXT:
		            	    case self::ST_POLYGONFROMWKB:
		            	    case self::ST_SRID:
		            	    case self::ST_STARTPOINT:
		            	    case self::ST_SYMDIFFERENCE:
		            	    case self::ST_TOUCHES:
		            	    case self::ST_UNION:
		            	    case self::ST_WITHIN:
		            	    case self::ST_X:
		            	    case self::ST_Y:
		            	    case self::SUBDATE:
		            	    case self::SUBSTRING_INDEX:
		            	    case self::SUBTIME:
		            	    case self::SYSTEM_USER:
		            	    case self::TAN:
		            	    case self::TIMEDIFF:
		            	    case self::TIMESTAMPADD:
		            	    case self::TIMESTAMPDIFF:
		            	    case self::TIME_FORMAT:
		            	    case self::TIME_TO_SEC:
		            	    case self::TOUCHES:
		            	    case self::TO_BASE64:
		            	    case self::TO_DAYS:
		            	    case self::TO_SECONDS:
		            	    case self::TP_CONNECTION_ADMIN:
		            	    case self::UCASE:
		            	    case self::UNCOMPRESS:
		            	    case self::UNCOMPRESSED_LENGTH:
		            	    case self::UNHEX:
		            	    case self::UNIX_TIMESTAMP:
		            	    case self::UPDATEXML:
		            	    case self::UPPER:
		            	    case self::UUID:
		            	    case self::UUID_SHORT:
		            	    case self::VALIDATE_PASSWORD_STRENGTH:
		            	    case self::VERSION:
		            	    case self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
		            	    case self::WEEKDAY:
		            	    case self::WEEKOFYEAR:
		            	    case self::WEIGHT_STRING:
		            	    case self::WITHIN:
		            	    case self::YEARWEEK:
		            	    case self::Y_FUNCTION:
		            	    case self::X_FUNCTION:
		            	    case self::MOD:
		            	    case self::CHARSET_REVERSE_QOUTE_STRING:
		            	    case self::STRING_LITERAL:
		            	    case self::ID:
		            	    	$this->setState(2963);
		            	    	$this->uidList();
		            	    	break;

		            	    case self::ALL:
		            	    	$this->setState(2964);
		            	    	$this->match(self::ALL);
		            	    	break;

		            	default:
		            		throw new NoViableAltException($this);
		            	}
		            	break;

		            case self::REPAIR:
		            	$localContext = new Context\AlterByRepairPartitionContext($localContext);
		            	$this->enterOuterAlt($localContext, 13);
		            	$this->setState(2967);
		            	$this->match(self::REPAIR);
		            	$this->setState(2968);
		            	$this->match(self::PARTITION);
		            	$this->setState(2971);
		            	$this->errorHandler->sync($this);

		            	switch ($this->input->LA(1)) {
		            	    case self::ARRAY:
		            	    case self::ATTRIBUTE:
		            	    case self::BUCKETS:
		            	    case self::CONDITION:
		            	    case self::CURRENT:
		            	    case self::CURRENT_USER:
		            	    case self::DATABASE:
		            	    case self::DEFAULT:
		            	    case self::DIAGNOSTICS:
		            	    case self::EMPTY:
		            	    case self::ENFORCED:
		            	    case self::EXCEPT:
		            	    case self::GROUP:
		            	    case self::IF:
		            	    case self::IGNORED:
		            	    case self::INSERT:
		            	    case self::LATERAL:
		            	    case self::LEFT:
		            	    case self::NUMBER:
		            	    case self::OPTIONAL:
		            	    case self::ORDER:
		            	    case self::PRIMARY:
		            	    case self::REPEAT:
		            	    case self::REPLACE:
		            	    case self::RIGHT:
		            	    case self::SCHEMA:
		            	    case self::SKIP_QUERY_REWRITE:
		            	    case self::STACKED:
		            	    case self::DATE:
		            	    case self::TIME:
		            	    case self::TIMESTAMP:
		            	    case self::DATETIME:
		            	    case self::YEAR:
		            	    case self::BINARY:
		            	    case self::TEXT:
		            	    case self::ENUM:
		            	    case self::SERIAL:
		            	    case self::JSON_ARRAY:
		            	    case self::JSON_ARRAYAGG:
		            	    case self::JSON_ARRAY_APPEND:
		            	    case self::JSON_ARRAY_INSERT:
		            	    case self::JSON_CONTAINS:
		            	    case self::JSON_CONTAINS_PATH:
		            	    case self::JSON_DEPTH:
		            	    case self::JSON_EXTRACT:
		            	    case self::JSON_INSERT:
		            	    case self::JSON_KEYS:
		            	    case self::JSON_LENGTH:
		            	    case self::JSON_MERGE:
		            	    case self::JSON_MERGE_PATCH:
		            	    case self::JSON_MERGE_PRESERVE:
		            	    case self::JSON_OBJECT:
		            	    case self::JSON_OBJECTAGG:
		            	    case self::JSON_OVERLAPS:
		            	    case self::JSON_PRETTY:
		            	    case self::JSON_QUOTE:
		            	    case self::JSON_REMOVE:
		            	    case self::JSON_REPLACE:
		            	    case self::JSON_SCHEMA_VALID:
		            	    case self::JSON_SCHEMA_VALIDATION_REPORT:
		            	    case self::JSON_SEARCH:
		            	    case self::JSON_SET:
		            	    case self::JSON_STORAGE_FREE:
		            	    case self::JSON_STORAGE_SIZE:
		            	    case self::JSON_TABLE:
		            	    case self::JSON_TYPE:
		            	    case self::JSON_UNQUOTE:
		            	    case self::JSON_VALID:
		            	    case self::JSON_VALUE:
		            	    case self::NESTED:
		            	    case self::ORDINALITY:
		            	    case self::PATH:
		            	    case self::AVG:
		            	    case self::BIT_AND:
		            	    case self::BIT_OR:
		            	    case self::BIT_XOR:
		            	    case self::COUNT:
		            	    case self::CUME_DIST:
		            	    case self::DENSE_RANK:
		            	    case self::FIRST_VALUE:
		            	    case self::GROUP_CONCAT:
		            	    case self::LAG:
		            	    case self::LAST_VALUE:
		            	    case self::LEAD:
		            	    case self::MAX:
		            	    case self::MIN:
		            	    case self::NTILE:
		            	    case self::NTH_VALUE:
		            	    case self::PERCENT_RANK:
		            	    case self::RANK:
		            	    case self::ROW_NUMBER:
		            	    case self::STD:
		            	    case self::STDDEV:
		            	    case self::STDDEV_POP:
		            	    case self::STDDEV_SAMP:
		            	    case self::SUM:
		            	    case self::VAR_POP:
		            	    case self::VAR_SAMP:
		            	    case self::VARIANCE:
		            	    case self::CURRENT_DATE:
		            	    case self::CURRENT_TIME:
		            	    case self::CURRENT_TIMESTAMP:
		            	    case self::LOCALTIME:
		            	    case self::CURDATE:
		            	    case self::CURTIME:
		            	    case self::DATE_ADD:
		            	    case self::DATE_SUB:
		            	    case self::LOCALTIMESTAMP:
		            	    case self::NOW:
		            	    case self::POSITION:
		            	    case self::SUBSTR:
		            	    case self::SUBSTRING:
		            	    case self::SYSDATE:
		            	    case self::TRIM:
		            	    case self::UTC_DATE:
		            	    case self::UTC_TIME:
		            	    case self::UTC_TIMESTAMP:
		            	    case self::ACCOUNT:
		            	    case self::ACTION:
		            	    case self::AFTER:
		            	    case self::AGGREGATE:
		            	    case self::ALGORITHM:
		            	    case self::ANY:
		            	    case self::AT:
		            	    case self::AUTHORS:
		            	    case self::AUTOCOMMIT:
		            	    case self::AUTOEXTEND_SIZE:
		            	    case self::AUTO_INCREMENT:
		            	    case self::AVG_ROW_LENGTH:
		            	    case self::BEGIN:
		            	    case self::BINLOG:
		            	    case self::BIT:
		            	    case self::BLOCK:
		            	    case self::BOOL:
		            	    case self::BOOLEAN:
		            	    case self::BTREE:
		            	    case self::CACHE:
		            	    case self::CASCADED:
		            	    case self::CHAIN:
		            	    case self::CHANGED:
		            	    case self::CHANNEL:
		            	    case self::CHECKSUM:
		            	    case self::PAGE_CHECKSUM:
		            	    case self::CIPHER:
		            	    case self::CLASS_ORIGIN:
		            	    case self::CLIENT:
		            	    case self::CLOSE:
		            	    case self::CLUSTERING:
		            	    case self::COALESCE:
		            	    case self::CODE:
		            	    case self::COLUMNS:
		            	    case self::COLUMN_FORMAT:
		            	    case self::COLUMN_NAME:
		            	    case self::COMMENT:
		            	    case self::COMMIT:
		            	    case self::COMPACT:
		            	    case self::COMPLETION:
		            	    case self::COMPRESSED:
		            	    case self::COMPRESSION:
		            	    case self::CONCURRENT:
		            	    case self::CONNECT:
		            	    case self::CONNECTION:
		            	    case self::CONSISTENT:
		            	    case self::CONSTRAINT_CATALOG:
		            	    case self::CONSTRAINT_SCHEMA:
		            	    case self::CONSTRAINT_NAME:
		            	    case self::CONTAINS:
		            	    case self::CONTEXT:
		            	    case self::CONTRIBUTORS:
		            	    case self::COPY:
		            	    case self::CPU:
		            	    case self::CURSOR_NAME:
		            	    case self::DATA:
		            	    case self::DATAFILE:
		            	    case self::DEALLOCATE:
		            	    case self::DEFAULT_AUTH:
		            	    case self::DEFINER:
		            	    case self::DELAY_KEY_WRITE:
		            	    case self::DES_KEY_FILE:
		            	    case self::DIRECTORY:
		            	    case self::DISABLE:
		            	    case self::DISCARD:
		            	    case self::DISK:
		            	    case self::DO:
		            	    case self::DUMPFILE:
		            	    case self::DUPLICATE:
		            	    case self::DYNAMIC:
		            	    case self::ENABLE:
		            	    case self::ENCRYPTION:
		            	    case self::END:
		            	    case self::ENDS:
		            	    case self::ENGINE:
		            	    case self::ENGINES:
		            	    case self::ERROR:
		            	    case self::ERRORS:
		            	    case self::ESCAPE:
		            	    case self::EVEN:
		            	    case self::EVENT:
		            	    case self::EVENTS:
		            	    case self::EVERY:
		            	    case self::EXCHANGE:
		            	    case self::EXCLUSIVE:
		            	    case self::EXPIRE:
		            	    case self::EXPORT:
		            	    case self::EXTENDED:
		            	    case self::EXTENT_SIZE:
		            	    case self::FAILED_LOGIN_ATTEMPTS:
		            	    case self::FAST:
		            	    case self::FAULTS:
		            	    case self::FIELDS:
		            	    case self::FILE_BLOCK_SIZE:
		            	    case self::FILTER:
		            	    case self::FIRST:
		            	    case self::FIXED:
		            	    case self::FLUSH:
		            	    case self::FOLLOWS:
		            	    case self::FOUND:
		            	    case self::FULL:
		            	    case self::FUNCTION:
		            	    case self::GENERAL:
		            	    case self::GLOBAL:
		            	    case self::GRANTS:
		            	    case self::GROUP_REPLICATION:
		            	    case self::HANDLER:
		            	    case self::HASH:
		            	    case self::HELP:
		            	    case self::HISTORY:
		            	    case self::HOST:
		            	    case self::HOSTS:
		            	    case self::IDENTIFIED:
		            	    case self::IGNORE_SERVER_IDS:
		            	    case self::IMPORT:
		            	    case self::INDEXES:
		            	    case self::INITIAL_SIZE:
		            	    case self::INPLACE:
		            	    case self::INSERT_METHOD:
		            	    case self::INSTALL:
		            	    case self::INSTANCE:
		            	    case self::INSTANT:
		            	    case self::INVISIBLE:
		            	    case self::INVOKER:
		            	    case self::IO:
		            	    case self::IO_THREAD:
		            	    case self::IPC:
		            	    case self::ISOLATION:
		            	    case self::ISSUER:
		            	    case self::JSON:
		            	    case self::KEY_BLOCK_SIZE:
		            	    case self::LANGUAGE:
		            	    case self::LAST:
		            	    case self::LEAVES:
		            	    case self::LESS:
		            	    case self::LEVEL:
		            	    case self::LIST:
		            	    case self::LOCAL:
		            	    case self::LOGFILE:
		            	    case self::LOGS:
		            	    case self::MASTER:
		            	    case self::MASTER_AUTO_POSITION:
		            	    case self::MASTER_CONNECT_RETRY:
		            	    case self::MASTER_DELAY:
		            	    case self::MASTER_HEARTBEAT_PERIOD:
		            	    case self::MASTER_HOST:
		            	    case self::MASTER_LOG_FILE:
		            	    case self::MASTER_LOG_POS:
		            	    case self::MASTER_PASSWORD:
		            	    case self::MASTER_PORT:
		            	    case self::MASTER_RETRY_COUNT:
		            	    case self::MASTER_SSL:
		            	    case self::MASTER_SSL_CA:
		            	    case self::MASTER_SSL_CAPATH:
		            	    case self::MASTER_SSL_CERT:
		            	    case self::MASTER_SSL_CIPHER:
		            	    case self::MASTER_SSL_CRL:
		            	    case self::MASTER_SSL_CRLPATH:
		            	    case self::MASTER_SSL_KEY:
		            	    case self::MASTER_TLS_VERSION:
		            	    case self::MASTER_USER:
		            	    case self::MAX_CONNECTIONS_PER_HOUR:
		            	    case self::MAX_QUERIES_PER_HOUR:
		            	    case self::MAX_ROWS:
		            	    case self::MAX_SIZE:
		            	    case self::MAX_UPDATES_PER_HOUR:
		            	    case self::MAX_USER_CONNECTIONS:
		            	    case self::MEDIUM:
		            	    case self::MEMBER:
		            	    case self::MERGE:
		            	    case self::MESSAGE_TEXT:
		            	    case self::MID:
		            	    case self::MIGRATE:
		            	    case self::MIN_ROWS:
		            	    case self::MODE:
		            	    case self::MODIFY:
		            	    case self::MUTEX:
		            	    case self::MYSQL:
		            	    case self::MYSQL_ERRNO:
		            	    case self::NAME:
		            	    case self::NAMES:
		            	    case self::NCHAR:
		            	    case self::NEVER:
		            	    case self::NEXT:
		            	    case self::NO:
		            	    case self::NOCOPY:
		            	    case self::NOWAIT:
		            	    case self::NODEGROUP:
		            	    case self::NONE:
		            	    case self::ODBC:
		            	    case self::OFFLINE:
		            	    case self::OFFSET:
		            	    case self::OF:
		            	    case self::OJ:
		            	    case self::OLD_PASSWORD:
		            	    case self::ONE:
		            	    case self::ONLINE:
		            	    case self::ONLY:
		            	    case self::OPEN:
		            	    case self::OPTIMIZER_COSTS:
		            	    case self::OPTIONS:
		            	    case self::OWNER:
		            	    case self::PACK_KEYS:
		            	    case self::PAGE:
		            	    case self::PARSER:
		            	    case self::PARTIAL:
		            	    case self::PARTITIONING:
		            	    case self::PARTITIONS:
		            	    case self::PASSWORD:
		            	    case self::PASSWORD_LOCK_TIME:
		            	    case self::PHASE:
		            	    case self::PLUGIN:
		            	    case self::PLUGIN_DIR:
		            	    case self::PLUGINS:
		            	    case self::PORT:
		            	    case self::PRECEDES:
		            	    case self::PREPARE:
		            	    case self::PRESERVE:
		            	    case self::PREV:
		            	    case self::PROCESSLIST:
		            	    case self::PROFILE:
		            	    case self::PROFILES:
		            	    case self::PROXY:
		            	    case self::QUERY:
		            	    case self::QUICK:
		            	    case self::REBUILD:
		            	    case self::RECOVER:
		            	    case self::RECURSIVE:
		            	    case self::REDO_BUFFER_SIZE:
		            	    case self::REDUNDANT:
		            	    case self::RELAY:
		            	    case self::RELAY_LOG_FILE:
		            	    case self::RELAY_LOG_POS:
		            	    case self::RELAYLOG:
		            	    case self::REMOVE:
		            	    case self::REORGANIZE:
		            	    case self::REPAIR:
		            	    case self::REPLICATE_DO_DB:
		            	    case self::REPLICATE_DO_TABLE:
		            	    case self::REPLICATE_IGNORE_DB:
		            	    case self::REPLICATE_IGNORE_TABLE:
		            	    case self::REPLICATE_REWRITE_DB:
		            	    case self::REPLICATE_WILD_DO_TABLE:
		            	    case self::REPLICATE_WILD_IGNORE_TABLE:
		            	    case self::REPLICATION:
		            	    case self::RESET:
		            	    case self::RESUME:
		            	    case self::RETURNED_SQLSTATE:
		            	    case self::RETURNS:
		            	    case self::REUSE:
		            	    case self::ROLE:
		            	    case self::ROLLBACK:
		            	    case self::ROLLUP:
		            	    case self::ROTATE:
		            	    case self::ROW:
		            	    case self::ROWS:
		            	    case self::ROW_FORMAT:
		            	    case self::RTREE:
		            	    case self::SAVEPOINT:
		            	    case self::SCHEDULE:
		            	    case self::SECURITY:
		            	    case self::SERVER:
		            	    case self::SESSION:
		            	    case self::SHARE:
		            	    case self::SHARED:
		            	    case self::SIGNED:
		            	    case self::SIMPLE:
		            	    case self::SLAVE:
		            	    case self::SLOW:
		            	    case self::SNAPSHOT:
		            	    case self::SOCKET:
		            	    case self::SOME:
		            	    case self::SONAME:
		            	    case self::SOUNDS:
		            	    case self::SOURCE:
		            	    case self::SQL_AFTER_GTIDS:
		            	    case self::SQL_AFTER_MTS_GAPS:
		            	    case self::SQL_BEFORE_GTIDS:
		            	    case self::SQL_BUFFER_RESULT:
		            	    case self::SQL_CACHE:
		            	    case self::SQL_NO_CACHE:
		            	    case self::SQL_THREAD:
		            	    case self::START:
		            	    case self::STARTS:
		            	    case self::STATS_AUTO_RECALC:
		            	    case self::STATS_PERSISTENT:
		            	    case self::STATS_SAMPLE_PAGES:
		            	    case self::STATUS:
		            	    case self::STOP:
		            	    case self::STORAGE:
		            	    case self::STRING:
		            	    case self::SUBCLASS_ORIGIN:
		            	    case self::SUBJECT:
		            	    case self::SUBPARTITION:
		            	    case self::SUBPARTITIONS:
		            	    case self::SUSPEND:
		            	    case self::SWAPS:
		            	    case self::SWITCHES:
		            	    case self::TABLE_NAME:
		            	    case self::TABLESPACE:
		            	    case self::TABLE_TYPE:
		            	    case self::TEMPORARY:
		            	    case self::TEMPTABLE:
		            	    case self::THAN:
		            	    case self::TRADITIONAL:
		            	    case self::TRANSACTION:
		            	    case self::TRANSACTIONAL:
		            	    case self::TRIGGERS:
		            	    case self::TRUNCATE:
		            	    case self::UNBOUNDED:
		            	    case self::UNDEFINED:
		            	    case self::UNDOFILE:
		            	    case self::UNDO_BUFFER_SIZE:
		            	    case self::UNINSTALL:
		            	    case self::UNKNOWN:
		            	    case self::UNTIL:
		            	    case self::UPGRADE:
		            	    case self::USER:
		            	    case self::USE_FRM:
		            	    case self::USER_RESOURCES:
		            	    case self::VALIDATION:
		            	    case self::VALUE:
		            	    case self::VARIABLES:
		            	    case self::VIEW:
		            	    case self::VIRTUAL:
		            	    case self::VISIBLE:
		            	    case self::WAIT:
		            	    case self::WARNINGS:
		            	    case self::WITHOUT:
		            	    case self::WORK:
		            	    case self::WRAPPER:
		            	    case self::X509:
		            	    case self::XA:
		            	    case self::XML:
		            	    case self::EUR:
		            	    case self::USA:
		            	    case self::JIS:
		            	    case self::ISO:
		            	    case self::INTERNAL:
		            	    case self::QUARTER:
		            	    case self::MONTH:
		            	    case self::DAY:
		            	    case self::HOUR:
		            	    case self::MINUTE:
		            	    case self::WEEK:
		            	    case self::SECOND:
		            	    case self::MICROSECOND:
		            	    case self::ADMIN:
		            	    case self::AUDIT_ABORT_EXEMPT:
		            	    case self::AUDIT_ADMIN:
		            	    case self::AUTHENTICATION_POLICY_ADMIN:
		            	    case self::BACKUP_ADMIN:
		            	    case self::BINLOG_ADMIN:
		            	    case self::BINLOG_ENCRYPTION_ADMIN:
		            	    case self::CLONE_ADMIN:
		            	    case self::CONNECTION_ADMIN:
		            	    case self::ENCRYPTION_KEY_ADMIN:
		            	    case self::EXECUTE:
		            	    case self::FILE:
		            	    case self::FIREWALL_ADMIN:
		            	    case self::FIREWALL_EXEMPT:
		            	    case self::FIREWALL_USER:
		            	    case self::GROUP_REPLICATION_ADMIN:
		            	    case self::INNODB_REDO_LOG_ARCHIVE:
		            	    case self::INVOKE:
		            	    case self::LAMBDA:
		            	    case self::NDB_STORED_USER:
		            	    case self::PASSWORDLESS_USER_ADMIN:
		            	    case self::PERSIST_RO_VARIABLES_ADMIN:
		            	    case self::PRIVILEGES:
		            	    case self::PROCESS:
		            	    case self::RELOAD:
		            	    case self::REPLICATION_APPLIER:
		            	    case self::REPLICATION_SLAVE_ADMIN:
		            	    case self::RESOURCE_GROUP_ADMIN:
		            	    case self::RESOURCE_GROUP_USER:
		            	    case self::ROLE_ADMIN:
		            	    case self::ROUTINE:
		            	    case self::S3:
		            	    case self::SESSION_VARIABLES_ADMIN:
		            	    case self::SET_USER_ID:
		            	    case self::SHOW_ROUTINE:
		            	    case self::SHUTDOWN:
		            	    case self::SUPER:
		            	    case self::SYSTEM_VARIABLES_ADMIN:
		            	    case self::TABLES:
		            	    case self::TABLE_ENCRYPTION_ADMIN:
		            	    case self::VERSION_TOKEN_ADMIN:
		            	    case self::XA_RECOVER_ADMIN:
		            	    case self::ARMSCII8:
		            	    case self::ASCII:
		            	    case self::BIG5:
		            	    case self::CP1250:
		            	    case self::CP1251:
		            	    case self::CP1256:
		            	    case self::CP1257:
		            	    case self::CP850:
		            	    case self::CP852:
		            	    case self::CP866:
		            	    case self::CP932:
		            	    case self::DEC8:
		            	    case self::EUCJPMS:
		            	    case self::EUCKR:
		            	    case self::GB18030:
		            	    case self::GB2312:
		            	    case self::GBK:
		            	    case self::GEOSTD8:
		            	    case self::GREEK:
		            	    case self::HEBREW:
		            	    case self::HP8:
		            	    case self::KEYBCS2:
		            	    case self::KOI8R:
		            	    case self::KOI8U:
		            	    case self::LATIN1:
		            	    case self::LATIN2:
		            	    case self::LATIN5:
		            	    case self::LATIN7:
		            	    case self::MACCE:
		            	    case self::MACROMAN:
		            	    case self::SJIS:
		            	    case self::SWE7:
		            	    case self::TIS620:
		            	    case self::UCS2:
		            	    case self::UJIS:
		            	    case self::UTF16:
		            	    case self::UTF16LE:
		            	    case self::UTF32:
		            	    case self::UTF8:
		            	    case self::UTF8MB3:
		            	    case self::UTF8MB4:
		            	    case self::ARCHIVE:
		            	    case self::BLACKHOLE:
		            	    case self::CSV:
		            	    case self::FEDERATED:
		            	    case self::INNODB:
		            	    case self::MEMORY:
		            	    case self::MRG_MYISAM:
		            	    case self::MYISAM:
		            	    case self::NDB:
		            	    case self::NDBCLUSTER:
		            	    case self::PERFORMANCE_SCHEMA:
		            	    case self::TOKUDB:
		            	    case self::REPEATABLE:
		            	    case self::COMMITTED:
		            	    case self::UNCOMMITTED:
		            	    case self::SERIALIZABLE:
		            	    case self::GEOMETRYCOLLECTION:
		            	    case self::LINESTRING:
		            	    case self::MULTILINESTRING:
		            	    case self::MULTIPOINT:
		            	    case self::MULTIPOLYGON:
		            	    case self::POINT:
		            	    case self::POLYGON:
		            	    case self::ABS:
		            	    case self::ACOS:
		            	    case self::ADDDATE:
		            	    case self::ADDTIME:
		            	    case self::AES_DECRYPT:
		            	    case self::AES_ENCRYPT:
		            	    case self::AREA:
		            	    case self::ASBINARY:
		            	    case self::ASIN:
		            	    case self::ASTEXT:
		            	    case self::ASWKB:
		            	    case self::ASWKT:
		            	    case self::ASYMMETRIC_DECRYPT:
		            	    case self::ASYMMETRIC_DERIVE:
		            	    case self::ASYMMETRIC_ENCRYPT:
		            	    case self::ASYMMETRIC_SIGN:
		            	    case self::ASYMMETRIC_VERIFY:
		            	    case self::ATAN:
		            	    case self::ATAN2:
		            	    case self::BENCHMARK:
		            	    case self::BIN:
		            	    case self::BIT_COUNT:
		            	    case self::BIT_LENGTH:
		            	    case self::BUFFER:
		            	    case self::CATALOG_NAME:
		            	    case self::CEIL:
		            	    case self::CEILING:
		            	    case self::CENTROID:
		            	    case self::CHARACTER_LENGTH:
		            	    case self::CHARSET:
		            	    case self::CHAR_LENGTH:
		            	    case self::COERCIBILITY:
		            	    case self::COLLATION:
		            	    case self::COMPRESS:
		            	    case self::CONCAT:
		            	    case self::CONCAT_WS:
		            	    case self::CONNECTION_ID:
		            	    case self::CONV:
		            	    case self::CONVERT_TZ:
		            	    case self::COS:
		            	    case self::COT:
		            	    case self::CRC32:
		            	    case self::CREATE_ASYMMETRIC_PRIV_KEY:
		            	    case self::CREATE_ASYMMETRIC_PUB_KEY:
		            	    case self::CREATE_DH_PARAMETERS:
		            	    case self::CREATE_DIGEST:
		            	    case self::CROSSES:
		            	    case self::DATEDIFF:
		            	    case self::DATE_FORMAT:
		            	    case self::DAYNAME:
		            	    case self::DAYOFMONTH:
		            	    case self::DAYOFWEEK:
		            	    case self::DAYOFYEAR:
		            	    case self::DECODE:
		            	    case self::DEGREES:
		            	    case self::DES_DECRYPT:
		            	    case self::DES_ENCRYPT:
		            	    case self::DIMENSION:
		            	    case self::DISJOINT:
		            	    case self::ELT:
		            	    case self::ENCODE:
		            	    case self::ENCRYPT:
		            	    case self::ENDPOINT:
		            	    case self::ENGINE_ATTRIBUTE:
		            	    case self::ENVELOPE:
		            	    case self::EQUALS:
		            	    case self::EXP:
		            	    case self::EXPORT_SET:
		            	    case self::EXTERIORRING:
		            	    case self::EXTRACTVALUE:
		            	    case self::FIELD:
		            	    case self::FIND_IN_SET:
		            	    case self::FLOOR:
		            	    case self::FORMAT:
		            	    case self::FOUND_ROWS:
		            	    case self::FROM_BASE64:
		            	    case self::FROM_DAYS:
		            	    case self::FROM_UNIXTIME:
		            	    case self::GEOMCOLLFROMTEXT:
		            	    case self::GEOMCOLLFROMWKB:
		            	    case self::GEOMETRYCOLLECTIONFROMTEXT:
		            	    case self::GEOMETRYCOLLECTIONFROMWKB:
		            	    case self::GEOMETRYFROMTEXT:
		            	    case self::GEOMETRYFROMWKB:
		            	    case self::GEOMETRYN:
		            	    case self::GEOMETRYTYPE:
		            	    case self::GEOMFROMTEXT:
		            	    case self::GEOMFROMWKB:
		            	    case self::GET_FORMAT:
		            	    case self::GET_LOCK:
		            	    case self::GLENGTH:
		            	    case self::GREATEST:
		            	    case self::GTID_SUBSET:
		            	    case self::GTID_SUBTRACT:
		            	    case self::HEX:
		            	    case self::IFNULL:
		            	    case self::INET6_ATON:
		            	    case self::INET6_NTOA:
		            	    case self::INET_ATON:
		            	    case self::INET_NTOA:
		            	    case self::INSTR:
		            	    case self::INTERIORRINGN:
		            	    case self::INTERSECTS:
		            	    case self::ISCLOSED:
		            	    case self::ISEMPTY:
		            	    case self::ISNULL:
		            	    case self::ISSIMPLE:
		            	    case self::IS_FREE_LOCK:
		            	    case self::IS_IPV4:
		            	    case self::IS_IPV4_COMPAT:
		            	    case self::IS_IPV4_MAPPED:
		            	    case self::IS_IPV6:
		            	    case self::IS_USED_LOCK:
		            	    case self::LAST_INSERT_ID:
		            	    case self::LCASE:
		            	    case self::LEAST:
		            	    case self::LENGTH:
		            	    case self::LINEFROMTEXT:
		            	    case self::LINEFROMWKB:
		            	    case self::LINESTRINGFROMTEXT:
		            	    case self::LINESTRINGFROMWKB:
		            	    case self::LN:
		            	    case self::LOAD_FILE:
		            	    case self::LOCATE:
		            	    case self::LOG:
		            	    case self::LOG10:
		            	    case self::LOG2:
		            	    case self::LOWER:
		            	    case self::LPAD:
		            	    case self::LTRIM:
		            	    case self::MAKEDATE:
		            	    case self::MAKETIME:
		            	    case self::MAKE_SET:
		            	    case self::MASTER_POS_WAIT:
		            	    case self::MBRCONTAINS:
		            	    case self::MBRDISJOINT:
		            	    case self::MBREQUAL:
		            	    case self::MBRINTERSECTS:
		            	    case self::MBROVERLAPS:
		            	    case self::MBRTOUCHES:
		            	    case self::MBRWITHIN:
		            	    case self::MD5:
		            	    case self::MLINEFROMTEXT:
		            	    case self::MLINEFROMWKB:
		            	    case self::MONTHNAME:
		            	    case self::MPOINTFROMTEXT:
		            	    case self::MPOINTFROMWKB:
		            	    case self::MPOLYFROMTEXT:
		            	    case self::MPOLYFROMWKB:
		            	    case self::MULTILINESTRINGFROMTEXT:
		            	    case self::MULTILINESTRINGFROMWKB:
		            	    case self::MULTIPOINTFROMTEXT:
		            	    case self::MULTIPOINTFROMWKB:
		            	    case self::MULTIPOLYGONFROMTEXT:
		            	    case self::MULTIPOLYGONFROMWKB:
		            	    case self::NAME_CONST:
		            	    case self::NULLIF:
		            	    case self::NUMGEOMETRIES:
		            	    case self::NUMINTERIORRINGS:
		            	    case self::NUMPOINTS:
		            	    case self::OCT:
		            	    case self::OCTET_LENGTH:
		            	    case self::ORD:
		            	    case self::OVERLAPS:
		            	    case self::PERIOD_ADD:
		            	    case self::PERIOD_DIFF:
		            	    case self::PI:
		            	    case self::POINTFROMTEXT:
		            	    case self::POINTFROMWKB:
		            	    case self::POINTN:
		            	    case self::POLYFROMTEXT:
		            	    case self::POLYFROMWKB:
		            	    case self::POLYGONFROMTEXT:
		            	    case self::POLYGONFROMWKB:
		            	    case self::POW:
		            	    case self::POWER:
		            	    case self::QUOTE:
		            	    case self::RADIANS:
		            	    case self::RAND:
		            	    case self::RANDOM:
		            	    case self::RANDOM_BYTES:
		            	    case self::RELEASE_LOCK:
		            	    case self::REVERSE:
		            	    case self::ROUND:
		            	    case self::ROW_COUNT:
		            	    case self::RPAD:
		            	    case self::RTRIM:
		            	    case self::SEC_TO_TIME:
		            	    case self::SECONDARY_ENGINE_ATTRIBUTE:
		            	    case self::SESSION_USER:
		            	    case self::SHA:
		            	    case self::SHA1:
		            	    case self::SHA2:
		            	    case self::SCHEMA_NAME:
		            	    case self::SIGN:
		            	    case self::SIN:
		            	    case self::SLEEP:
		            	    case self::SOUNDEX:
		            	    case self::SQL_THREAD_WAIT_AFTER_GTIDS:
		            	    case self::SQRT:
		            	    case self::SRID:
		            	    case self::STARTPOINT:
		            	    case self::STRCMP:
		            	    case self::STR_TO_DATE:
		            	    case self::ST_AREA:
		            	    case self::ST_ASBINARY:
		            	    case self::ST_ASTEXT:
		            	    case self::ST_ASWKB:
		            	    case self::ST_ASWKT:
		            	    case self::ST_BUFFER:
		            	    case self::ST_CENTROID:
		            	    case self::ST_CONTAINS:
		            	    case self::ST_CROSSES:
		            	    case self::ST_DIFFERENCE:
		            	    case self::ST_DIMENSION:
		            	    case self::ST_DISJOINT:
		            	    case self::ST_DISTANCE:
		            	    case self::ST_ENDPOINT:
		            	    case self::ST_ENVELOPE:
		            	    case self::ST_EQUALS:
		            	    case self::ST_EXTERIORRING:
		            	    case self::ST_GEOMCOLLFROMTEXT:
		            	    case self::ST_GEOMCOLLFROMTXT:
		            	    case self::ST_GEOMCOLLFROMWKB:
		            	    case self::ST_GEOMETRYCOLLECTIONFROMTEXT:
		            	    case self::ST_GEOMETRYCOLLECTIONFROMWKB:
		            	    case self::ST_GEOMETRYFROMTEXT:
		            	    case self::ST_GEOMETRYFROMWKB:
		            	    case self::ST_GEOMETRYN:
		            	    case self::ST_GEOMETRYTYPE:
		            	    case self::ST_GEOMFROMTEXT:
		            	    case self::ST_GEOMFROMWKB:
		            	    case self::ST_INTERIORRINGN:
		            	    case self::ST_INTERSECTION:
		            	    case self::ST_INTERSECTS:
		            	    case self::ST_ISCLOSED:
		            	    case self::ST_ISEMPTY:
		            	    case self::ST_ISSIMPLE:
		            	    case self::ST_LINEFROMTEXT:
		            	    case self::ST_LINEFROMWKB:
		            	    case self::ST_LINESTRINGFROMTEXT:
		            	    case self::ST_LINESTRINGFROMWKB:
		            	    case self::ST_NUMGEOMETRIES:
		            	    case self::ST_NUMINTERIORRING:
		            	    case self::ST_NUMINTERIORRINGS:
		            	    case self::ST_NUMPOINTS:
		            	    case self::ST_OVERLAPS:
		            	    case self::ST_POINTFROMTEXT:
		            	    case self::ST_POINTFROMWKB:
		            	    case self::ST_POINTN:
		            	    case self::ST_POLYFROMTEXT:
		            	    case self::ST_POLYFROMWKB:
		            	    case self::ST_POLYGONFROMTEXT:
		            	    case self::ST_POLYGONFROMWKB:
		            	    case self::ST_SRID:
		            	    case self::ST_STARTPOINT:
		            	    case self::ST_SYMDIFFERENCE:
		            	    case self::ST_TOUCHES:
		            	    case self::ST_UNION:
		            	    case self::ST_WITHIN:
		            	    case self::ST_X:
		            	    case self::ST_Y:
		            	    case self::SUBDATE:
		            	    case self::SUBSTRING_INDEX:
		            	    case self::SUBTIME:
		            	    case self::SYSTEM_USER:
		            	    case self::TAN:
		            	    case self::TIMEDIFF:
		            	    case self::TIMESTAMPADD:
		            	    case self::TIMESTAMPDIFF:
		            	    case self::TIME_FORMAT:
		            	    case self::TIME_TO_SEC:
		            	    case self::TOUCHES:
		            	    case self::TO_BASE64:
		            	    case self::TO_DAYS:
		            	    case self::TO_SECONDS:
		            	    case self::TP_CONNECTION_ADMIN:
		            	    case self::UCASE:
		            	    case self::UNCOMPRESS:
		            	    case self::UNCOMPRESSED_LENGTH:
		            	    case self::UNHEX:
		            	    case self::UNIX_TIMESTAMP:
		            	    case self::UPDATEXML:
		            	    case self::UPPER:
		            	    case self::UUID:
		            	    case self::UUID_SHORT:
		            	    case self::VALIDATE_PASSWORD_STRENGTH:
		            	    case self::VERSION:
		            	    case self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
		            	    case self::WEEKDAY:
		            	    case self::WEEKOFYEAR:
		            	    case self::WEIGHT_STRING:
		            	    case self::WITHIN:
		            	    case self::YEARWEEK:
		            	    case self::Y_FUNCTION:
		            	    case self::X_FUNCTION:
		            	    case self::MOD:
		            	    case self::CHARSET_REVERSE_QOUTE_STRING:
		            	    case self::STRING_LITERAL:
		            	    case self::ID:
		            	    	$this->setState(2969);
		            	    	$this->uidList();
		            	    	break;

		            	    case self::ALL:
		            	    	$this->setState(2970);
		            	    	$this->match(self::ALL);
		            	    	break;

		            	default:
		            		throw new NoViableAltException($this);
		            	}
		            	break;

		            case self::REMOVE:
		            	$localContext = new Context\AlterByRemovePartitioningContext($localContext);
		            	$this->enterOuterAlt($localContext, 14);
		            	$this->setState(2973);
		            	$this->match(self::REMOVE);
		            	$this->setState(2974);
		            	$this->match(self::PARTITIONING);
		            	break;

		            case self::UPGRADE:
		            	$localContext = new Context\AlterByUpgradePartitioningContext($localContext);
		            	$this->enterOuterAlt($localContext, 15);
		            	$this->setState(2975);
		            	$this->match(self::UPGRADE);
		            	$this->setState(2976);
		            	$this->match(self::PARTITIONING);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function dropDatabase(): Context\DropDatabaseContext
		{
		    $localContext = new Context\DropDatabaseContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 152, self::RULE_dropDatabase);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(2979);
		        $this->match(self::DROP);
		        $this->setState(2980);

		        $localContext->dbFormat = $this->input->LT(1);
		        $_la = $this->input->LA(1);

		        if (!($_la === self::DATABASE || $_la === self::SCHEMA)) {
		        	    $localContext->dbFormat = $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		        $this->setState(2982);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 382, $this->ctx)) {
		            case 1:
		        	    $this->setState(2981);
		        	    $this->ifExists();
		        	break;
		        }
		        $this->setState(2984);
		        $this->uid();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function dropEvent(): Context\DropEventContext
		{
		    $localContext = new Context\DropEventContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 154, self::RULE_dropEvent);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(2986);
		        $this->match(self::DROP);
		        $this->setState(2987);
		        $this->match(self::EVENT);
		        $this->setState(2989);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 383, $this->ctx)) {
		            case 1:
		        	    $this->setState(2988);
		        	    $this->ifExists();
		        	break;
		        }
		        $this->setState(2991);
		        $this->fullId();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function dropIndex(): Context\DropIndexContext
		{
		    $localContext = new Context\DropIndexContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 156, self::RULE_dropIndex);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(2993);
		        $this->match(self::DROP);
		        $this->setState(2994);
		        $this->match(self::INDEX);
		        $this->setState(2996);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 384, $this->ctx)) {
		            case 1:
		        	    $this->setState(2995);

		        	    $localContext->intimeAction = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::OFFLINE || $_la === self::ONLINE)) {
		        	    	    $localContext->intimeAction = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	break;
		        }
		        $this->setState(2998);
		        $this->uid();
		        $this->setState(2999);
		        $this->match(self::ON);
		        $this->setState(3000);
		        $this->tableName();
		        $this->setState(3013);
		        $this->errorHandler->sync($this);

		        $alt = $this->getInterpreter()->adaptivePredict($this->input, 388, $this->ctx);

		        while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
		        	if ($alt === 1) {
		        		$this->setState(3011);
		        		$this->errorHandler->sync($this);

		        		switch ($this->input->LA(1)) {
		        		    case self::ALGORITHM:
		        		    	$this->setState(3001);
		        		    	$this->match(self::ALGORITHM);
		        		    	$this->setState(3003);
		        		    	$this->errorHandler->sync($this);
		        		    	$_la = $this->input->LA(1);

		        		    	if ($_la === self::EQUAL_SYMBOL) {
		        		    		$this->setState(3002);
		        		    		$this->match(self::EQUAL_SYMBOL);
		        		    	}
		        		    	$this->setState(3005);

		        		    	$localContext->algType = $this->input->LT(1);
		        		    	$_la = $this->input->LA(1);

		        		    	if (!($_la === self::DEFAULT || $_la === self::COPY || $_la === self::INPLACE)) {
		        		    		    $localContext->algType = $this->errorHandler->recoverInline($this);
		        		    	} else {
		        		    		if ($this->input->LA(1) === Token::EOF) {
		        		    		    $this->matchedEOF = true;
		        		    	    }

		        		    		$this->errorHandler->reportMatch($this);
		        		    		$this->consume();
		        		    	}
		        		    	break;

		        		    case self::LOCK:
		        		    	$this->setState(3006);
		        		    	$this->match(self::LOCK);
		        		    	$this->setState(3008);
		        		    	$this->errorHandler->sync($this);
		        		    	$_la = $this->input->LA(1);

		        		    	if ($_la === self::EQUAL_SYMBOL) {
		        		    		$this->setState(3007);
		        		    		$this->match(self::EQUAL_SYMBOL);
		        		    	}
		        		    	$this->setState(3010);

		        		    	$localContext->lockType = $this->input->LT(1);
		        		    	$_la = $this->input->LA(1);

		        		    	if (!($_la === self::DEFAULT || $_la === self::EXCLUSIVE || $_la === self::NONE || $_la === self::SHARED)) {
		        		    		    $localContext->lockType = $this->errorHandler->recoverInline($this);
		        		    	} else {
		        		    		if ($this->input->LA(1) === Token::EOF) {
		        		    		    $this->matchedEOF = true;
		        		    	    }

		        		    		$this->errorHandler->reportMatch($this);
		        		    		$this->consume();
		        		    	}
		        		    	break;

		        		default:
		        			throw new NoViableAltException($this);
		        		} 
		        	}

		        	$this->setState(3015);
		        	$this->errorHandler->sync($this);

		        	$alt = $this->getInterpreter()->adaptivePredict($this->input, 388, $this->ctx);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function dropLogfileGroup(): Context\DropLogfileGroupContext
		{
		    $localContext = new Context\DropLogfileGroupContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 158, self::RULE_dropLogfileGroup);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3016);
		        $this->match(self::DROP);
		        $this->setState(3017);
		        $this->match(self::LOGFILE);
		        $this->setState(3018);
		        $this->match(self::GROUP);
		        $this->setState(3019);
		        $this->uid();
		        $this->setState(3020);
		        $this->match(self::ENGINE);
		        $this->setState(3021);
		        $this->match(self::EQUAL_SYMBOL);
		        $this->setState(3022);
		        $this->engineName();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function dropProcedure(): Context\DropProcedureContext
		{
		    $localContext = new Context\DropProcedureContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 160, self::RULE_dropProcedure);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3024);
		        $this->match(self::DROP);
		        $this->setState(3025);
		        $this->match(self::PROCEDURE);
		        $this->setState(3027);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 389, $this->ctx)) {
		            case 1:
		        	    $this->setState(3026);
		        	    $this->ifExists();
		        	break;
		        }
		        $this->setState(3029);
		        $this->fullId();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function dropFunction(): Context\DropFunctionContext
		{
		    $localContext = new Context\DropFunctionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 162, self::RULE_dropFunction);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3031);
		        $this->match(self::DROP);
		        $this->setState(3032);
		        $this->match(self::FUNCTION);
		        $this->setState(3034);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 390, $this->ctx)) {
		            case 1:
		        	    $this->setState(3033);
		        	    $this->ifExists();
		        	break;
		        }
		        $this->setState(3036);
		        $this->fullId();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function dropServer(): Context\DropServerContext
		{
		    $localContext = new Context\DropServerContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 164, self::RULE_dropServer);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3038);
		        $this->match(self::DROP);
		        $this->setState(3039);
		        $this->match(self::SERVER);
		        $this->setState(3041);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 391, $this->ctx)) {
		            case 1:
		        	    $this->setState(3040);
		        	    $this->ifExists();
		        	break;
		        }
		        $this->setState(3043);
		        $this->uid();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function dropTable(): Context\DropTableContext
		{
		    $localContext = new Context\DropTableContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 166, self::RULE_dropTable);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3045);
		        $this->match(self::DROP);
		        $this->setState(3047);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::TEMPORARY) {
		        	$this->setState(3046);
		        	$this->match(self::TEMPORARY);
		        }
		        $this->setState(3049);
		        $this->match(self::TABLE);
		        $this->setState(3051);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 393, $this->ctx)) {
		            case 1:
		        	    $this->setState(3050);
		        	    $this->ifExists();
		        	break;
		        }
		        $this->setState(3053);
		        $this->tables();
		        $this->setState(3055);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::CASCADE || $_la === self::RESTRICT) {
		        	$this->setState(3054);

		        	$localContext->dropType = $this->input->LT(1);
		        	$_la = $this->input->LA(1);

		        	if (!($_la === self::CASCADE || $_la === self::RESTRICT)) {
		        		    $localContext->dropType = $this->errorHandler->recoverInline($this);
		        	} else {
		        		if ($this->input->LA(1) === Token::EOF) {
		        		    $this->matchedEOF = true;
		        	    }

		        		$this->errorHandler->reportMatch($this);
		        		$this->consume();
		        	}
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function dropTablespace(): Context\DropTablespaceContext
		{
		    $localContext = new Context\DropTablespaceContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 168, self::RULE_dropTablespace);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3057);
		        $this->match(self::DROP);
		        $this->setState(3058);
		        $this->match(self::TABLESPACE);
		        $this->setState(3059);
		        $this->uid();
		        $this->setState(3065);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::ENGINE) {
		        	$this->setState(3060);
		        	$this->match(self::ENGINE);
		        	$this->setState(3062);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);

		        	if ($_la === self::EQUAL_SYMBOL) {
		        		$this->setState(3061);
		        		$this->match(self::EQUAL_SYMBOL);
		        	}
		        	$this->setState(3064);
		        	$this->engineName();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function dropTrigger(): Context\DropTriggerContext
		{
		    $localContext = new Context\DropTriggerContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 170, self::RULE_dropTrigger);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3067);
		        $this->match(self::DROP);
		        $this->setState(3068);
		        $this->match(self::TRIGGER);
		        $this->setState(3070);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 397, $this->ctx)) {
		            case 1:
		        	    $this->setState(3069);
		        	    $this->ifExists();
		        	break;
		        }
		        $this->setState(3072);
		        $this->fullId();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function dropView(): Context\DropViewContext
		{
		    $localContext = new Context\DropViewContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 172, self::RULE_dropView);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3074);
		        $this->match(self::DROP);
		        $this->setState(3075);
		        $this->match(self::VIEW);
		        $this->setState(3077);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 398, $this->ctx)) {
		            case 1:
		        	    $this->setState(3076);
		        	    $this->ifExists();
		        	break;
		        }
		        $this->setState(3079);
		        $this->fullId();
		        $this->setState(3084);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::COMMA) {
		        	$this->setState(3080);
		        	$this->match(self::COMMA);
		        	$this->setState(3081);
		        	$this->fullId();
		        	$this->setState(3086);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		        $this->setState(3088);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::CASCADE || $_la === self::RESTRICT) {
		        	$this->setState(3087);

		        	$localContext->dropType = $this->input->LT(1);
		        	$_la = $this->input->LA(1);

		        	if (!($_la === self::CASCADE || $_la === self::RESTRICT)) {
		        		    $localContext->dropType = $this->errorHandler->recoverInline($this);
		        	} else {
		        		if ($this->input->LA(1) === Token::EOF) {
		        		    $this->matchedEOF = true;
		        	    }

		        		$this->errorHandler->reportMatch($this);
		        		$this->consume();
		        	}
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function dropRole(): Context\DropRoleContext
		{
		    $localContext = new Context\DropRoleContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 174, self::RULE_dropRole);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3090);
		        $this->match(self::DROP);
		        $this->setState(3091);
		        $this->match(self::ROLE);
		        $this->setState(3093);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 401, $this->ctx)) {
		            case 1:
		        	    $this->setState(3092);
		        	    $this->ifExists();
		        	break;
		        }
		        $this->setState(3095);
		        $this->roleName();
		        $this->setState(3100);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::COMMA) {
		        	$this->setState(3096);
		        	$this->match(self::COMMA);
		        	$this->setState(3097);
		        	$this->roleName();
		        	$this->setState(3102);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function setRole(): Context\SetRoleContext
		{
		    $localContext = new Context\SetRoleContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 176, self::RULE_setRole);

		    try {
		        $this->setState(3136);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 408, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(3103);
		        	    $this->match(self::SET);
		        	    $this->setState(3104);
		        	    $this->match(self::DEFAULT);
		        	    $this->setState(3105);
		        	    $this->match(self::ROLE);
		        	    $this->setState(3116);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 404, $this->ctx)) {
		        	    	case 1:
		        	    	    $this->setState(3106);
		        	    	    $this->match(self::NONE);
		        	    	break;

		        	    	case 2:
		        	    	    $this->setState(3107);
		        	    	    $this->match(self::ALL);
		        	    	break;

		        	    	case 3:
		        	    	    $this->setState(3108);
		        	    	    $this->roleName();
		        	    	    $this->setState(3113);
		        	    	    $this->errorHandler->sync($this);

		        	    	    $_la = $this->input->LA(1);
		        	    	    while ($_la === self::COMMA) {
		        	    	    	$this->setState(3109);
		        	    	    	$this->match(self::COMMA);
		        	    	    	$this->setState(3110);
		        	    	    	$this->roleName();
		        	    	    	$this->setState(3115);
		        	    	    	$this->errorHandler->sync($this);
		        	    	    	$_la = $this->input->LA(1);
		        	    	    }
		        	    	break;
		        	    }
		        	    $this->setState(3118);
		        	    $this->match(self::TO);
		        	    $this->setState(3121);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 405, $this->ctx)) {
		        	    	case 1:
		        	    	    $this->setState(3119);
		        	    	    $this->userName();
		        	    	break;

		        	    	case 2:
		        	    	    $this->setState(3120);
		        	    	    $this->uid();
		        	    	break;
		        	    }
		        	    $this->setState(3130);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::COMMA) {
		        	    	$this->setState(3123);
		        	    	$this->match(self::COMMA);
		        	    	$this->setState(3126);
		        	    	$this->errorHandler->sync($this);

		        	    	switch ($this->getInterpreter()->adaptivePredict($this->input, 406, $this->ctx)) {
		        	    		case 1:
		        	    		    $this->setState(3124);
		        	    		    $this->userName();
		        	    		break;

		        	    		case 2:
		        	    		    $this->setState(3125);
		        	    		    $this->uid();
		        	    		break;
		        	    	}
		        	    	$this->setState(3132);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(3133);
		        	    $this->match(self::SET);
		        	    $this->setState(3134);
		        	    $this->match(self::ROLE);
		        	    $this->setState(3135);
		        	    $this->roleOption();
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function renameTable(): Context\RenameTableContext
		{
		    $localContext = new Context\RenameTableContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 178, self::RULE_renameTable);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3138);
		        $this->match(self::RENAME);
		        $this->setState(3139);
		        $this->match(self::TABLE);
		        $this->setState(3140);
		        $this->renameTableClause();
		        $this->setState(3145);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::COMMA) {
		        	$this->setState(3141);
		        	$this->match(self::COMMA);
		        	$this->setState(3142);
		        	$this->renameTableClause();
		        	$this->setState(3147);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function renameTableClause(): Context\RenameTableClauseContext
		{
		    $localContext = new Context\RenameTableClauseContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 180, self::RULE_renameTableClause);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3148);
		        $this->tableName();
		        $this->setState(3149);
		        $this->match(self::TO);
		        $this->setState(3150);
		        $this->tableName();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function truncateTable(): Context\TruncateTableContext
		{
		    $localContext = new Context\TruncateTableContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 182, self::RULE_truncateTable);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3152);
		        $this->match(self::TRUNCATE);
		        $this->setState(3154);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::TABLE) {
		        	$this->setState(3153);
		        	$this->match(self::TABLE);
		        }
		        $this->setState(3156);
		        $this->tableName();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function callStatement(): Context\CallStatementContext
		{
		    $localContext = new Context\CallStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 184, self::RULE_callStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3158);
		        $this->match(self::CALL);
		        $this->setState(3159);
		        $this->fullId();
		        $this->setState(3166);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 412, $this->ctx)) {
		            case 1:
		        	    $this->setState(3160);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(3163);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 411, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(3161);
		        	    	    $this->constants();
		        	    	break;

		        	        case 2:
		        	    	    $this->setState(3162);
		        	    	    $this->expressions();
		        	    	break;
		        	    }
		        	    $this->setState(3165);
		        	    $this->match(self::RR_BRACKET);
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function deleteStatement(): Context\DeleteStatementContext
		{
		    $localContext = new Context\DeleteStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 186, self::RULE_deleteStatement);

		    try {
		        $this->setState(3170);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 413, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(3168);
		        	    $this->singleDeleteStatement();
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(3169);
		        	    $this->multipleDeleteStatement();
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function doStatement(): Context\DoStatementContext
		{
		    $localContext = new Context\DoStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 188, self::RULE_doStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3172);
		        $this->match(self::DO);
		        $this->setState(3173);
		        $this->expressions();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function handlerStatement(): Context\HandlerStatementContext
		{
		    $localContext = new Context\HandlerStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 190, self::RULE_handlerStatement);

		    try {
		        $this->setState(3179);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 414, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(3175);
		        	    $this->handlerOpenStatement();
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(3176);
		        	    $this->handlerReadIndexStatement();
		        	break;

		        	case 3:
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(3177);
		        	    $this->handlerReadStatement();
		        	break;

		        	case 4:
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(3178);
		        	    $this->handlerCloseStatement();
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function insertStatement(): Context\InsertStatementContext
		{
		    $localContext = new Context\InsertStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 192, self::RULE_insertStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3181);
		        $this->match(self::INSERT);
		        $this->setState(3183);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ((((($_la - 43)) & ~0x3f) === 0 && ((1 << ($_la - 43)) & -9223372032559808511) !== 0)) {
		        	$this->setState(3182);

		        	$localContext->priority = $this->input->LT(1);
		        	$_la = $this->input->LA(1);

		        	if (!((((($_la - 43)) & ~0x3f) === 0 && ((1 << ($_la - 43)) & -9223372032559808511) !== 0))) {
		        		    $localContext->priority = $this->errorHandler->recoverInline($this);
		        	} else {
		        		if ($this->input->LA(1) === Token::EOF) {
		        		    $this->matchedEOF = true;
		        	    }

		        		$this->errorHandler->reportMatch($this);
		        		$this->consume();
		        	}
		        }
		        $this->setState(3186);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::IGNORE) {
		        	$this->setState(3185);
		        	$this->match(self::IGNORE);
		        }
		        $this->setState(3189);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::INTO) {
		        	$this->setState(3188);
		        	$this->match(self::INTO);
		        }
		        $this->setState(3191);
		        $this->tableName();
		        $this->setState(3198);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::PARTITION) {
		        	$this->setState(3192);
		        	$this->match(self::PARTITION);
		        	$this->setState(3193);
		        	$this->match(self::LR_BRACKET);
		        	$this->setState(3195);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);

		        	if (((($_la) & ~0x3f) === 0 && ((1 << $_la) & 756891332513122304) !== 0) || (((($_la - 73)) & ~0x3f) === 0 && ((1 << ($_la - 73)) & 146666055071174737) !== 0) || (((($_la - 140)) & ~0x3f) === 0 && ((1 << ($_la - 140)) & 268698883) !== 0) || (((($_la - 217)) & ~0x3f) === 0 && ((1 << ($_la - 217)) & -17174494689) !== 0) || (((($_la - 281)) & ~0x3f) === 0 && ((1 << ($_la - 281)) & -1099511627777) !== 0) || (((($_la - 345)) & ~0x3f) === 0 && ((1 << ($_la - 345)) & -2882305960540372993) !== 0) || (((($_la - 409)) & ~0x3f) === 0 && ((1 << ($_la - 409)) & -4398063288321) !== 0) || (((($_la - 473)) & ~0x3f) === 0 && ((1 << ($_la - 473)) & -16325548649218049) !== 0) || (((($_la - 537)) & ~0x3f) === 0 && ((1 << ($_la - 537)) & -81064793296864001) !== 0) || (((($_la - 601)) & ~0x3f) === 0 && ((1 << ($_la - 601)) & -68719476801) !== 0) || (((($_la - 665)) & ~0x3f) === 0 && ((1 << ($_la - 665)) & -22236531750340609) !== 0) || (((($_la - 729)) & ~0x3f) === 0 && ((1 << ($_la - 729)) & -65) !== 0) || (((($_la - 793)) & ~0x3f) === 0 && ((1 << ($_la - 793)) & -6145) !== 0) || (((($_la - 857)) & ~0x3f) === 0 && ((1 << ($_la - 857)) & -1) !== 0) || (((($_la - 921)) & ~0x3f) === 0 && ((1 << ($_la - 921)) & -1) !== 0) || (((($_la - 985)) & ~0x3f) === 0 && ((1 << ($_la - 985)) & -1) !== 0) || (((($_la - 1049)) & ~0x3f) === 0 && ((1 << ($_la - 1049)) & 576460752303423487) !== 0) || (((($_la - 1123)) & ~0x3f) === 0 && ((1 << ($_la - 1123)) & 8627683329) !== 0)) {
		        		$this->setState(3194);
		        		$localContext->partitions = $this->uidList();
		        	}
		        	$this->setState(3197);
		        	$this->match(self::RR_BRACKET);
		        }
		        $this->setState(3223);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::SELECT:
		            case self::VALUES:
		            case self::VALUE:
		            case self::LR_BRACKET:
		            	$this->setState(3205);
		            	$this->errorHandler->sync($this);

		            	switch ($this->getInterpreter()->adaptivePredict($this->input, 421, $this->ctx)) {
		            	    case 1:
		            		    $this->setState(3200);
		            		    $this->match(self::LR_BRACKET);
		            		    $this->setState(3202);
		            		    $this->errorHandler->sync($this);

		            		    switch ($this->getInterpreter()->adaptivePredict($this->input, 420, $this->ctx)) {
		            		        case 1:
		            		    	    $this->setState(3201);
		            		    	    $localContext->columns = $this->fullColumnNameList();
		            		    	break;
		            		    }
		            		    $this->setState(3204);
		            		    $this->match(self::RR_BRACKET);
		            		break;
		            	}
		            	$this->setState(3207);
		            	$this->insertStatementValue();
		            	$this->setState(3212);
		            	$this->errorHandler->sync($this);

		            	switch ($this->getInterpreter()->adaptivePredict($this->input, 423, $this->ctx)) {
		            	    case 1:
		            		    $this->setState(3209);
		            		    $this->errorHandler->sync($this);
		            		    $_la = $this->input->LA(1);

		            		    if ($_la === self::AS) {
		            		    	$this->setState(3208);
		            		    	$this->match(self::AS);
		            		    }
		            		    $this->setState(3211);
		            		    $this->uid();
		            		break;
		            	}
		            	break;

		            case self::SET:
		            	$this->setState(3214);
		            	$this->match(self::SET);
		            	$this->setState(3215);
		            	$localContext->setFirst = $this->updatedElement();
		            	$this->setState(3220);
		            	$this->errorHandler->sync($this);

		            	$_la = $this->input->LA(1);
		            	while ($_la === self::COMMA) {
		            		$this->setState(3216);
		            		$this->match(self::COMMA);
		            		$this->setState(3217);
		            		$localContext->updatedElement = $this->updatedElement();
		            		$localContext->setElements[] = $localContext->updatedElement;
		            		$this->setState(3222);
		            		$this->errorHandler->sync($this);
		            		$_la = $this->input->LA(1);
		            	}
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		        $this->setState(3237);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::ON) {
		        	$this->setState(3225);
		        	$this->match(self::ON);
		        	$this->setState(3226);
		        	$this->match(self::DUPLICATE);
		        	$this->setState(3227);
		        	$this->match(self::KEY);
		        	$this->setState(3228);
		        	$this->match(self::UPDATE);
		        	$this->setState(3229);
		        	$localContext->duplicatedFirst = $this->updatedElement();
		        	$this->setState(3234);
		        	$this->errorHandler->sync($this);

		        	$_la = $this->input->LA(1);
		        	while ($_la === self::COMMA) {
		        		$this->setState(3230);
		        		$this->match(self::COMMA);
		        		$this->setState(3231);
		        		$localContext->updatedElement = $this->updatedElement();
		        		$localContext->duplicatedElements[] = $localContext->updatedElement;
		        		$this->setState(3236);
		        		$this->errorHandler->sync($this);
		        		$_la = $this->input->LA(1);
		        	}
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function loadDataStatement(): Context\LoadDataStatementContext
		{
		    $localContext = new Context\LoadDataStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 194, self::RULE_loadDataStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3239);
		        $this->match(self::LOAD);
		        $this->setState(3240);
		        $this->match(self::DATA);
		        $this->setState(3242);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::LOW_PRIORITY || $_la === self::CONCURRENT) {
		        	$this->setState(3241);

		        	$localContext->priority = $this->input->LT(1);
		        	$_la = $this->input->LA(1);

		        	if (!($_la === self::LOW_PRIORITY || $_la === self::CONCURRENT)) {
		        		    $localContext->priority = $this->errorHandler->recoverInline($this);
		        	} else {
		        		if ($this->input->LA(1) === Token::EOF) {
		        		    $this->matchedEOF = true;
		        	    }

		        		$this->errorHandler->reportMatch($this);
		        		$this->consume();
		        	}
		        }
		        $this->setState(3245);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::LOCAL) {
		        	$this->setState(3244);
		        	$this->match(self::LOCAL);
		        }
		        $this->setState(3247);
		        $this->match(self::INFILE);
		        $this->setState(3248);
		        $localContext->filename = $this->match(self::STRING_LITERAL);
		        $this->setState(3250);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::IGNORE || $_la === self::REPLACE) {
		        	$this->setState(3249);

		        	$localContext->violation = $this->input->LT(1);
		        	$_la = $this->input->LA(1);

		        	if (!($_la === self::IGNORE || $_la === self::REPLACE)) {
		        		    $localContext->violation = $this->errorHandler->recoverInline($this);
		        	} else {
		        		if ($this->input->LA(1) === Token::EOF) {
		        		    $this->matchedEOF = true;
		        	    }

		        		$this->errorHandler->reportMatch($this);
		        		$this->consume();
		        	}
		        }
		        $this->setState(3252);
		        $this->match(self::INTO);
		        $this->setState(3253);
		        $this->match(self::TABLE);
		        $this->setState(3254);
		        $this->tableName();
		        $this->setState(3260);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::PARTITION) {
		        	$this->setState(3255);
		        	$this->match(self::PARTITION);
		        	$this->setState(3256);
		        	$this->match(self::LR_BRACKET);
		        	$this->setState(3257);
		        	$this->uidList();
		        	$this->setState(3258);
		        	$this->match(self::RR_BRACKET);
		        }
		        $this->setState(3265);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::CHARACTER) {
		        	$this->setState(3262);
		        	$this->match(self::CHARACTER);
		        	$this->setState(3263);
		        	$this->match(self::SET);
		        	$this->setState(3264);
		        	$localContext->charset = $this->charsetName();
		        }
		        $this->setState(3273);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::COLUMNS || $_la === self::FIELDS) {
		        	$this->setState(3267);

		        	$localContext->fieldsFormat = $this->input->LT(1);
		        	$_la = $this->input->LA(1);

		        	if (!($_la === self::COLUMNS || $_la === self::FIELDS)) {
		        		    $localContext->fieldsFormat = $this->errorHandler->recoverInline($this);
		        	} else {
		        		if ($this->input->LA(1) === Token::EOF) {
		        		    $this->matchedEOF = true;
		        	    }

		        		$this->errorHandler->reportMatch($this);
		        		$this->consume();
		        	}
		        	$this->setState(3269); 
		        	$this->errorHandler->sync($this);

		        	$_la = $this->input->LA(1);
		        	do {
		        		$this->setState(3268);
		        		$this->selectFieldsInto();
		        		$this->setState(3271); 
		        		$this->errorHandler->sync($this);
		        		$_la = $this->input->LA(1);
		        	} while ($_la === self::ENCLOSED || $_la === self::ESCAPED || $_la === self::OPTIONALLY || $_la === self::TERMINATED);
		        }
		        $this->setState(3281);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::LINES) {
		        	$this->setState(3275);
		        	$this->match(self::LINES);
		        	$this->setState(3277); 
		        	$this->errorHandler->sync($this);

		        	$_la = $this->input->LA(1);
		        	do {
		        		$this->setState(3276);
		        		$this->selectLinesInto();
		        		$this->setState(3279); 
		        		$this->errorHandler->sync($this);
		        		$_la = $this->input->LA(1);
		        	} while ($_la === self::STARTING || $_la === self::TERMINATED);
		        }
		        $this->setState(3287);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::IGNORE) {
		        	$this->setState(3283);
		        	$this->match(self::IGNORE);
		        	$this->setState(3284);
		        	$this->decimalLiteral();
		        	$this->setState(3285);

		        	$localContext->linesFormat = $this->input->LT(1);
		        	$_la = $this->input->LA(1);

		        	if (!($_la === self::LINES || $_la === self::ROWS)) {
		        		    $localContext->linesFormat = $this->errorHandler->recoverInline($this);
		        	} else {
		        		if ($this->input->LA(1) === Token::EOF) {
		        		    $this->matchedEOF = true;
		        	    }

		        		$this->errorHandler->reportMatch($this);
		        		$this->consume();
		        	}
		        }
		        $this->setState(3300);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 439, $this->ctx)) {
		            case 1:
		        	    $this->setState(3289);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(3290);
		        	    $this->assignmentField();
		        	    $this->setState(3295);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::COMMA) {
		        	    	$this->setState(3291);
		        	    	$this->match(self::COMMA);
		        	    	$this->setState(3292);
		        	    	$this->assignmentField();
		        	    	$this->setState(3297);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	    $this->setState(3298);
		        	    $this->match(self::RR_BRACKET);
		        	break;
		        }
		        $this->setState(3311);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 441, $this->ctx)) {
		            case 1:
		        	    $this->setState(3302);
		        	    $this->match(self::SET);
		        	    $this->setState(3303);
		        	    $this->updatedElement();
		        	    $this->setState(3308);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::COMMA) {
		        	    	$this->setState(3304);
		        	    	$this->match(self::COMMA);
		        	    	$this->setState(3305);
		        	    	$this->updatedElement();
		        	    	$this->setState(3310);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function loadXmlStatement(): Context\LoadXmlStatementContext
		{
		    $localContext = new Context\LoadXmlStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 196, self::RULE_loadXmlStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3313);
		        $this->match(self::LOAD);
		        $this->setState(3314);
		        $this->match(self::XML);
		        $this->setState(3316);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::LOW_PRIORITY || $_la === self::CONCURRENT) {
		        	$this->setState(3315);

		        	$localContext->priority = $this->input->LT(1);
		        	$_la = $this->input->LA(1);

		        	if (!($_la === self::LOW_PRIORITY || $_la === self::CONCURRENT)) {
		        		    $localContext->priority = $this->errorHandler->recoverInline($this);
		        	} else {
		        		if ($this->input->LA(1) === Token::EOF) {
		        		    $this->matchedEOF = true;
		        	    }

		        		$this->errorHandler->reportMatch($this);
		        		$this->consume();
		        	}
		        }
		        $this->setState(3319);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::LOCAL) {
		        	$this->setState(3318);
		        	$this->match(self::LOCAL);
		        }
		        $this->setState(3321);
		        $this->match(self::INFILE);
		        $this->setState(3322);
		        $localContext->filename = $this->match(self::STRING_LITERAL);
		        $this->setState(3324);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::IGNORE || $_la === self::REPLACE) {
		        	$this->setState(3323);

		        	$localContext->violation = $this->input->LT(1);
		        	$_la = $this->input->LA(1);

		        	if (!($_la === self::IGNORE || $_la === self::REPLACE)) {
		        		    $localContext->violation = $this->errorHandler->recoverInline($this);
		        	} else {
		        		if ($this->input->LA(1) === Token::EOF) {
		        		    $this->matchedEOF = true;
		        	    }

		        		$this->errorHandler->reportMatch($this);
		        		$this->consume();
		        	}
		        }
		        $this->setState(3326);
		        $this->match(self::INTO);
		        $this->setState(3327);
		        $this->match(self::TABLE);
		        $this->setState(3328);
		        $this->tableName();
		        $this->setState(3332);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::CHARACTER) {
		        	$this->setState(3329);
		        	$this->match(self::CHARACTER);
		        	$this->setState(3330);
		        	$this->match(self::SET);
		        	$this->setState(3331);
		        	$localContext->charset = $this->charsetName();
		        }
		        $this->setState(3340);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::ROWS) {
		        	$this->setState(3334);
		        	$this->match(self::ROWS);
		        	$this->setState(3335);
		        	$this->match(self::IDENTIFIED);
		        	$this->setState(3336);
		        	$this->match(self::BY);
		        	$this->setState(3337);
		        	$this->match(self::LESS_SYMBOL);
		        	$this->setState(3338);
		        	$localContext->tag = $this->match(self::STRING_LITERAL);
		        	$this->setState(3339);
		        	$this->match(self::GREATER_SYMBOL);
		        }
		        $this->setState(3346);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::IGNORE) {
		        	$this->setState(3342);
		        	$this->match(self::IGNORE);
		        	$this->setState(3343);
		        	$this->decimalLiteral();
		        	$this->setState(3344);

		        	$localContext->linesFormat = $this->input->LT(1);
		        	$_la = $this->input->LA(1);

		        	if (!($_la === self::LINES || $_la === self::ROWS)) {
		        		    $localContext->linesFormat = $this->errorHandler->recoverInline($this);
		        	} else {
		        		if ($this->input->LA(1) === Token::EOF) {
		        		    $this->matchedEOF = true;
		        	    }

		        		$this->errorHandler->reportMatch($this);
		        		$this->consume();
		        	}
		        }
		        $this->setState(3359);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 449, $this->ctx)) {
		            case 1:
		        	    $this->setState(3348);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(3349);
		        	    $this->assignmentField();
		        	    $this->setState(3354);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::COMMA) {
		        	    	$this->setState(3350);
		        	    	$this->match(self::COMMA);
		        	    	$this->setState(3351);
		        	    	$this->assignmentField();
		        	    	$this->setState(3356);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	    $this->setState(3357);
		        	    $this->match(self::RR_BRACKET);
		        	break;
		        }
		        $this->setState(3370);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 451, $this->ctx)) {
		            case 1:
		        	    $this->setState(3361);
		        	    $this->match(self::SET);
		        	    $this->setState(3362);
		        	    $this->updatedElement();
		        	    $this->setState(3367);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::COMMA) {
		        	    	$this->setState(3363);
		        	    	$this->match(self::COMMA);
		        	    	$this->setState(3364);
		        	    	$this->updatedElement();
		        	    	$this->setState(3369);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function replaceStatement(): Context\ReplaceStatementContext
		{
		    $localContext = new Context\ReplaceStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 198, self::RULE_replaceStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3372);
		        $this->match(self::REPLACE);
		        $this->setState(3374);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::DELAYED || $_la === self::LOW_PRIORITY) {
		        	$this->setState(3373);

		        	$localContext->priority = $this->input->LT(1);
		        	$_la = $this->input->LA(1);

		        	if (!($_la === self::DELAYED || $_la === self::LOW_PRIORITY)) {
		        		    $localContext->priority = $this->errorHandler->recoverInline($this);
		        	} else {
		        		if ($this->input->LA(1) === Token::EOF) {
		        		    $this->matchedEOF = true;
		        	    }

		        		$this->errorHandler->reportMatch($this);
		        		$this->consume();
		        	}
		        }
		        $this->setState(3377);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::INTO) {
		        	$this->setState(3376);
		        	$this->match(self::INTO);
		        }
		        $this->setState(3379);
		        $this->tableName();
		        $this->setState(3385);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::PARTITION) {
		        	$this->setState(3380);
		        	$this->match(self::PARTITION);
		        	$this->setState(3381);
		        	$this->match(self::LR_BRACKET);
		        	$this->setState(3382);
		        	$localContext->partitions = $this->uidList();
		        	$this->setState(3383);
		        	$this->match(self::RR_BRACKET);
		        }
		        $this->setState(3403);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::SELECT:
		            case self::VALUES:
		            case self::VALUE:
		            case self::LR_BRACKET:
		            	$this->setState(3391);
		            	$this->errorHandler->sync($this);

		            	switch ($this->getInterpreter()->adaptivePredict($this->input, 455, $this->ctx)) {
		            	    case 1:
		            		    $this->setState(3387);
		            		    $this->match(self::LR_BRACKET);
		            		    $this->setState(3388);
		            		    $localContext->columns = $this->uidList();
		            		    $this->setState(3389);
		            		    $this->match(self::RR_BRACKET);
		            		break;
		            	}
		            	$this->setState(3393);
		            	$this->insertStatementValue();
		            	break;

		            case self::SET:
		            	$this->setState(3394);
		            	$this->match(self::SET);
		            	$this->setState(3395);
		            	$localContext->setFirst = $this->updatedElement();
		            	$this->setState(3400);
		            	$this->errorHandler->sync($this);

		            	$_la = $this->input->LA(1);
		            	while ($_la === self::COMMA) {
		            		$this->setState(3396);
		            		$this->match(self::COMMA);
		            		$this->setState(3397);
		            		$localContext->updatedElement = $this->updatedElement();
		            		$localContext->setElements[] = $localContext->updatedElement;
		            		$this->setState(3402);
		            		$this->errorHandler->sync($this);
		            		$_la = $this->input->LA(1);
		            	}
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function selectStatement(): Context\SelectStatementContext
		{
		    $localContext = new Context\SelectStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 200, self::RULE_selectStatement);

		    try {
		        $this->setState(3470);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 475, $this->ctx)) {
		        	case 1:
		        	    $localContext = new Context\SimpleSelectContext($localContext);
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(3405);
		        	    $this->querySpecification();
		        	    $this->setState(3407);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 458, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(3406);
		        	    	    $this->lockClause();
		        	    	break;
		        	    }
		        	break;

		        	case 2:
		        	    $localContext = new Context\ParenthesisSelectContext($localContext);
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(3409);
		        	    $this->queryExpression();
		        	    $this->setState(3411);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 459, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(3410);
		        	    	    $this->lockClause();
		        	    	break;
		        	    }
		        	break;

		        	case 3:
		        	    $localContext = new Context\UnionSelectContext($localContext);
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(3415);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->input->LA(1)) {
		        	        case self::SELECT:
		        	        	$this->setState(3413);
		        	        	$this->querySpecificationNointo();
		        	        	break;

		        	        case self::LR_BRACKET:
		        	        	$this->setState(3414);
		        	        	$this->queryExpressionNointo();
		        	        	break;

		        	    default:
		        	    	throw new NoViableAltException($this);
		        	    }
		        	    $this->setState(3418); 
		        	    $this->errorHandler->sync($this);

		        	    $alt = 1;

		        	    do {
		        	    	switch ($alt) {
		        	    	case 1:
		        	    		$this->setState(3417);
		        	    		$this->unionStatement();
		        	    		break;
		        	    	default:
		        	    		throw new NoViableAltException($this);
		        	    	}

		        	    	$this->setState(3420); 
		        	    	$this->errorHandler->sync($this);

		        	    	$alt = $this->getInterpreter()->adaptivePredict($this->input, 461, $this->ctx);
		        	    } while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER);
		        	    $this->setState(3430);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::UNION) {
		        	    	$this->setState(3422);
		        	    	$this->match(self::UNION);
		        	    	$this->setState(3424);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);

		        	    	if ($_la === self::ALL || $_la === self::DISTINCT) {
		        	    		$this->setState(3423);

		        	    		$localContext->unionType = $this->input->LT(1);
		        	    		$_la = $this->input->LA(1);

		        	    		if (!($_la === self::ALL || $_la === self::DISTINCT)) {
		        	    			    $localContext->unionType = $this->errorHandler->recoverInline($this);
		        	    		} else {
		        	    			if ($this->input->LA(1) === Token::EOF) {
		        	    			    $this->matchedEOF = true;
		        	    		    }

		        	    			$this->errorHandler->reportMatch($this);
		        	    			$this->consume();
		        	    		}
		        	    	}
		        	    	$this->setState(3428);
		        	    	$this->errorHandler->sync($this);

		        	    	switch ($this->input->LA(1)) {
		        	    	    case self::SELECT:
		        	    	    	$this->setState(3426);
		        	    	    	$this->querySpecification();
		        	    	    	break;

		        	    	    case self::LR_BRACKET:
		        	    	    	$this->setState(3427);
		        	    	    	$this->queryExpression();
		        	    	    	break;

		        	    	default:
		        	    		throw new NoViableAltException($this);
		        	    	}
		        	    }
		        	    $this->setState(3433);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 465, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(3432);
		        	    	    $this->orderByClause();
		        	    	break;
		        	    }
		        	    $this->setState(3436);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::LIMIT) {
		        	    	$this->setState(3435);
		        	    	$this->limitClause();
		        	    }
		        	    $this->setState(3439);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 467, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(3438);
		        	    	    $this->lockClause();
		        	    	break;
		        	    }
		        	break;

		        	case 4:
		        	    $localContext = new Context\UnionParenthesisSelectContext($localContext);
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(3441);
		        	    $this->queryExpressionNointo();
		        	    $this->setState(3443); 
		        	    $this->errorHandler->sync($this);

		        	    $alt = 1;

		        	    do {
		        	    	switch ($alt) {
		        	    	case 1:
		        	    		$this->setState(3442);
		        	    		$this->unionParenthesis();
		        	    		break;
		        	    	default:
		        	    		throw new NoViableAltException($this);
		        	    	}

		        	    	$this->setState(3445); 
		        	    	$this->errorHandler->sync($this);

		        	    	$alt = $this->getInterpreter()->adaptivePredict($this->input, 468, $this->ctx);
		        	    } while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER);
		        	    $this->setState(3452);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::UNION) {
		        	    	$this->setState(3447);
		        	    	$this->match(self::UNION);
		        	    	$this->setState(3449);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);

		        	    	if ($_la === self::ALL || $_la === self::DISTINCT) {
		        	    		$this->setState(3448);

		        	    		$localContext->unionType = $this->input->LT(1);
		        	    		$_la = $this->input->LA(1);

		        	    		if (!($_la === self::ALL || $_la === self::DISTINCT)) {
		        	    			    $localContext->unionType = $this->errorHandler->recoverInline($this);
		        	    		} else {
		        	    			if ($this->input->LA(1) === Token::EOF) {
		        	    			    $this->matchedEOF = true;
		        	    		    }

		        	    			$this->errorHandler->reportMatch($this);
		        	    			$this->consume();
		        	    		}
		        	    	}
		        	    	$this->setState(3451);
		        	    	$this->queryExpression();
		        	    }
		        	    $this->setState(3455);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 471, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(3454);
		        	    	    $this->orderByClause();
		        	    	break;
		        	    }
		        	    $this->setState(3458);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::LIMIT) {
		        	    	$this->setState(3457);
		        	    	$this->limitClause();
		        	    }
		        	    $this->setState(3461);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 473, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(3460);
		        	    	    $this->lockClause();
		        	    	break;
		        	    }
		        	break;

		        	case 5:
		        	    $localContext = new Context\WithLateralStatementContext($localContext);
		        	    $this->enterOuterAlt($localContext, 5);
		        	    $this->setState(3463);
		        	    $this->querySpecificationNointo();
		        	    $this->setState(3466); 
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    do {
		        	    	$this->setState(3464);
		        	    	$this->match(self::COMMA);
		        	    	$this->setState(3465);
		        	    	$this->lateralStatement();
		        	    	$this->setState(3468); 
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    } while ($_la === self::COMMA);
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function updateStatement(): Context\UpdateStatementContext
		{
		    $localContext = new Context\UpdateStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 202, self::RULE_updateStatement);

		    try {
		        $this->setState(3474);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 476, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(3472);
		        	    $this->singleUpdateStatement();
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(3473);
		        	    $this->multipleUpdateStatement();
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function valuesStatement(): Context\ValuesStatementContext
		{
		    $localContext = new Context\ValuesStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 204, self::RULE_valuesStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3476);
		        $this->match(self::VALUES);
		        $this->setState(3477);
		        $this->match(self::LR_BRACKET);
		        $this->setState(3479);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 477, $this->ctx)) {
		            case 1:
		        	    $this->setState(3478);
		        	    $this->expressionsWithDefaults();
		        	break;
		        }
		        $this->setState(3481);
		        $this->match(self::RR_BRACKET);
		        $this->setState(3490);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::COMMA) {
		        	$this->setState(3482);
		        	$this->match(self::COMMA);
		        	$this->setState(3483);
		        	$this->match(self::LR_BRACKET);
		        	$this->setState(3485);
		        	$this->errorHandler->sync($this);

		        	switch ($this->getInterpreter()->adaptivePredict($this->input, 478, $this->ctx)) {
		        	    case 1:
		        		    $this->setState(3484);
		        		    $this->expressionsWithDefaults();
		        		break;
		        	}
		        	$this->setState(3487);
		        	$this->match(self::RR_BRACKET);
		        	$this->setState(3492);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function insertStatementValue(): Context\InsertStatementValueContext
		{
		    $localContext = new Context\InsertStatementValueContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 206, self::RULE_insertStatementValue);

		    try {
		        $this->setState(3511);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::SELECT:
		            case self::LR_BRACKET:
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(3493);
		            	$this->selectStatement();
		            	break;

		            case self::VALUES:
		            case self::VALUE:
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(3494);

		            	$localContext->insertFormat = $this->input->LT(1);
		            	$_la = $this->input->LA(1);

		            	if (!($_la === self::VALUES || $_la === self::VALUE)) {
		            		    $localContext->insertFormat = $this->errorHandler->recoverInline($this);
		            	} else {
		            		if ($this->input->LA(1) === Token::EOF) {
		            		    $this->matchedEOF = true;
		            	    }

		            		$this->errorHandler->reportMatch($this);
		            		$this->consume();
		            	}
		            	$this->setState(3495);
		            	$this->match(self::LR_BRACKET);
		            	$this->setState(3497);
		            	$this->errorHandler->sync($this);

		            	switch ($this->getInterpreter()->adaptivePredict($this->input, 480, $this->ctx)) {
		            	    case 1:
		            		    $this->setState(3496);
		            		    $this->expressionsWithDefaults();
		            		break;
		            	}
		            	$this->setState(3499);
		            	$this->match(self::RR_BRACKET);
		            	$this->setState(3508);
		            	$this->errorHandler->sync($this);

		            	$_la = $this->input->LA(1);
		            	while ($_la === self::COMMA) {
		            		$this->setState(3500);
		            		$this->match(self::COMMA);
		            		$this->setState(3501);
		            		$this->match(self::LR_BRACKET);
		            		$this->setState(3503);
		            		$this->errorHandler->sync($this);

		            		switch ($this->getInterpreter()->adaptivePredict($this->input, 481, $this->ctx)) {
		            		    case 1:
		            			    $this->setState(3502);
		            			    $this->expressionsWithDefaults();
		            			break;
		            		}
		            		$this->setState(3505);
		            		$this->match(self::RR_BRACKET);
		            		$this->setState(3510);
		            		$this->errorHandler->sync($this);
		            		$_la = $this->input->LA(1);
		            	}
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function updatedElement(): Context\UpdatedElementContext
		{
		    $localContext = new Context\UpdatedElementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 208, self::RULE_updatedElement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3513);
		        $this->fullColumnName();
		        $this->setState(3514);
		        $this->match(self::EQUAL_SYMBOL);
		        $this->setState(3517);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 484, $this->ctx)) {
		        	case 1:
		        	    $this->setState(3515);
		        	    $this->recursiveExpression(0);
		        	break;

		        	case 2:
		        	    $this->setState(3516);
		        	    $this->match(self::DEFAULT);
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function assignmentField(): Context\AssignmentFieldContext
		{
		    $localContext = new Context\AssignmentFieldContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 210, self::RULE_assignmentField);

		    try {
		        $this->setState(3521);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::ARRAY:
		            case self::ATTRIBUTE:
		            case self::BUCKETS:
		            case self::CONDITION:
		            case self::CURRENT:
		            case self::CURRENT_USER:
		            case self::DATABASE:
		            case self::DEFAULT:
		            case self::DIAGNOSTICS:
		            case self::EMPTY:
		            case self::ENFORCED:
		            case self::EXCEPT:
		            case self::GROUP:
		            case self::IF:
		            case self::IGNORED:
		            case self::INSERT:
		            case self::LATERAL:
		            case self::LEFT:
		            case self::NUMBER:
		            case self::OPTIONAL:
		            case self::ORDER:
		            case self::PRIMARY:
		            case self::REPEAT:
		            case self::REPLACE:
		            case self::RIGHT:
		            case self::SCHEMA:
		            case self::SKIP_QUERY_REWRITE:
		            case self::STACKED:
		            case self::DATE:
		            case self::TIME:
		            case self::TIMESTAMP:
		            case self::DATETIME:
		            case self::YEAR:
		            case self::BINARY:
		            case self::TEXT:
		            case self::ENUM:
		            case self::SERIAL:
		            case self::JSON_ARRAY:
		            case self::JSON_ARRAYAGG:
		            case self::JSON_ARRAY_APPEND:
		            case self::JSON_ARRAY_INSERT:
		            case self::JSON_CONTAINS:
		            case self::JSON_CONTAINS_PATH:
		            case self::JSON_DEPTH:
		            case self::JSON_EXTRACT:
		            case self::JSON_INSERT:
		            case self::JSON_KEYS:
		            case self::JSON_LENGTH:
		            case self::JSON_MERGE:
		            case self::JSON_MERGE_PATCH:
		            case self::JSON_MERGE_PRESERVE:
		            case self::JSON_OBJECT:
		            case self::JSON_OBJECTAGG:
		            case self::JSON_OVERLAPS:
		            case self::JSON_PRETTY:
		            case self::JSON_QUOTE:
		            case self::JSON_REMOVE:
		            case self::JSON_REPLACE:
		            case self::JSON_SCHEMA_VALID:
		            case self::JSON_SCHEMA_VALIDATION_REPORT:
		            case self::JSON_SEARCH:
		            case self::JSON_SET:
		            case self::JSON_STORAGE_FREE:
		            case self::JSON_STORAGE_SIZE:
		            case self::JSON_TABLE:
		            case self::JSON_TYPE:
		            case self::JSON_UNQUOTE:
		            case self::JSON_VALID:
		            case self::JSON_VALUE:
		            case self::NESTED:
		            case self::ORDINALITY:
		            case self::PATH:
		            case self::AVG:
		            case self::BIT_AND:
		            case self::BIT_OR:
		            case self::BIT_XOR:
		            case self::COUNT:
		            case self::CUME_DIST:
		            case self::DENSE_RANK:
		            case self::FIRST_VALUE:
		            case self::GROUP_CONCAT:
		            case self::LAG:
		            case self::LAST_VALUE:
		            case self::LEAD:
		            case self::MAX:
		            case self::MIN:
		            case self::NTILE:
		            case self::NTH_VALUE:
		            case self::PERCENT_RANK:
		            case self::RANK:
		            case self::ROW_NUMBER:
		            case self::STD:
		            case self::STDDEV:
		            case self::STDDEV_POP:
		            case self::STDDEV_SAMP:
		            case self::SUM:
		            case self::VAR_POP:
		            case self::VAR_SAMP:
		            case self::VARIANCE:
		            case self::CURRENT_DATE:
		            case self::CURRENT_TIME:
		            case self::CURRENT_TIMESTAMP:
		            case self::LOCALTIME:
		            case self::CURDATE:
		            case self::CURTIME:
		            case self::DATE_ADD:
		            case self::DATE_SUB:
		            case self::LOCALTIMESTAMP:
		            case self::NOW:
		            case self::POSITION:
		            case self::SUBSTR:
		            case self::SUBSTRING:
		            case self::SYSDATE:
		            case self::TRIM:
		            case self::UTC_DATE:
		            case self::UTC_TIME:
		            case self::UTC_TIMESTAMP:
		            case self::ACCOUNT:
		            case self::ACTION:
		            case self::AFTER:
		            case self::AGGREGATE:
		            case self::ALGORITHM:
		            case self::ANY:
		            case self::AT:
		            case self::AUTHORS:
		            case self::AUTOCOMMIT:
		            case self::AUTOEXTEND_SIZE:
		            case self::AUTO_INCREMENT:
		            case self::AVG_ROW_LENGTH:
		            case self::BEGIN:
		            case self::BINLOG:
		            case self::BIT:
		            case self::BLOCK:
		            case self::BOOL:
		            case self::BOOLEAN:
		            case self::BTREE:
		            case self::CACHE:
		            case self::CASCADED:
		            case self::CHAIN:
		            case self::CHANGED:
		            case self::CHANNEL:
		            case self::CHECKSUM:
		            case self::PAGE_CHECKSUM:
		            case self::CIPHER:
		            case self::CLASS_ORIGIN:
		            case self::CLIENT:
		            case self::CLOSE:
		            case self::CLUSTERING:
		            case self::COALESCE:
		            case self::CODE:
		            case self::COLUMNS:
		            case self::COLUMN_FORMAT:
		            case self::COLUMN_NAME:
		            case self::COMMENT:
		            case self::COMMIT:
		            case self::COMPACT:
		            case self::COMPLETION:
		            case self::COMPRESSED:
		            case self::COMPRESSION:
		            case self::CONCURRENT:
		            case self::CONNECT:
		            case self::CONNECTION:
		            case self::CONSISTENT:
		            case self::CONSTRAINT_CATALOG:
		            case self::CONSTRAINT_SCHEMA:
		            case self::CONSTRAINT_NAME:
		            case self::CONTAINS:
		            case self::CONTEXT:
		            case self::CONTRIBUTORS:
		            case self::COPY:
		            case self::CPU:
		            case self::CURSOR_NAME:
		            case self::DATA:
		            case self::DATAFILE:
		            case self::DEALLOCATE:
		            case self::DEFAULT_AUTH:
		            case self::DEFINER:
		            case self::DELAY_KEY_WRITE:
		            case self::DES_KEY_FILE:
		            case self::DIRECTORY:
		            case self::DISABLE:
		            case self::DISCARD:
		            case self::DISK:
		            case self::DO:
		            case self::DUMPFILE:
		            case self::DUPLICATE:
		            case self::DYNAMIC:
		            case self::ENABLE:
		            case self::ENCRYPTION:
		            case self::END:
		            case self::ENDS:
		            case self::ENGINE:
		            case self::ENGINES:
		            case self::ERROR:
		            case self::ERRORS:
		            case self::ESCAPE:
		            case self::EVEN:
		            case self::EVENT:
		            case self::EVENTS:
		            case self::EVERY:
		            case self::EXCHANGE:
		            case self::EXCLUSIVE:
		            case self::EXPIRE:
		            case self::EXPORT:
		            case self::EXTENDED:
		            case self::EXTENT_SIZE:
		            case self::FAILED_LOGIN_ATTEMPTS:
		            case self::FAST:
		            case self::FAULTS:
		            case self::FIELDS:
		            case self::FILE_BLOCK_SIZE:
		            case self::FILTER:
		            case self::FIRST:
		            case self::FIXED:
		            case self::FLUSH:
		            case self::FOLLOWS:
		            case self::FOUND:
		            case self::FULL:
		            case self::FUNCTION:
		            case self::GENERAL:
		            case self::GLOBAL:
		            case self::GRANTS:
		            case self::GROUP_REPLICATION:
		            case self::HANDLER:
		            case self::HASH:
		            case self::HELP:
		            case self::HISTORY:
		            case self::HOST:
		            case self::HOSTS:
		            case self::IDENTIFIED:
		            case self::IGNORE_SERVER_IDS:
		            case self::IMPORT:
		            case self::INDEXES:
		            case self::INITIAL_SIZE:
		            case self::INPLACE:
		            case self::INSERT_METHOD:
		            case self::INSTALL:
		            case self::INSTANCE:
		            case self::INSTANT:
		            case self::INVISIBLE:
		            case self::INVOKER:
		            case self::IO:
		            case self::IO_THREAD:
		            case self::IPC:
		            case self::ISOLATION:
		            case self::ISSUER:
		            case self::JSON:
		            case self::KEY_BLOCK_SIZE:
		            case self::LANGUAGE:
		            case self::LAST:
		            case self::LEAVES:
		            case self::LESS:
		            case self::LEVEL:
		            case self::LIST:
		            case self::LOCAL:
		            case self::LOGFILE:
		            case self::LOGS:
		            case self::MASTER:
		            case self::MASTER_AUTO_POSITION:
		            case self::MASTER_CONNECT_RETRY:
		            case self::MASTER_DELAY:
		            case self::MASTER_HEARTBEAT_PERIOD:
		            case self::MASTER_HOST:
		            case self::MASTER_LOG_FILE:
		            case self::MASTER_LOG_POS:
		            case self::MASTER_PASSWORD:
		            case self::MASTER_PORT:
		            case self::MASTER_RETRY_COUNT:
		            case self::MASTER_SSL:
		            case self::MASTER_SSL_CA:
		            case self::MASTER_SSL_CAPATH:
		            case self::MASTER_SSL_CERT:
		            case self::MASTER_SSL_CIPHER:
		            case self::MASTER_SSL_CRL:
		            case self::MASTER_SSL_CRLPATH:
		            case self::MASTER_SSL_KEY:
		            case self::MASTER_TLS_VERSION:
		            case self::MASTER_USER:
		            case self::MAX_CONNECTIONS_PER_HOUR:
		            case self::MAX_QUERIES_PER_HOUR:
		            case self::MAX_ROWS:
		            case self::MAX_SIZE:
		            case self::MAX_UPDATES_PER_HOUR:
		            case self::MAX_USER_CONNECTIONS:
		            case self::MEDIUM:
		            case self::MEMBER:
		            case self::MERGE:
		            case self::MESSAGE_TEXT:
		            case self::MID:
		            case self::MIGRATE:
		            case self::MIN_ROWS:
		            case self::MODE:
		            case self::MODIFY:
		            case self::MUTEX:
		            case self::MYSQL:
		            case self::MYSQL_ERRNO:
		            case self::NAME:
		            case self::NAMES:
		            case self::NCHAR:
		            case self::NEVER:
		            case self::NEXT:
		            case self::NO:
		            case self::NOCOPY:
		            case self::NOWAIT:
		            case self::NODEGROUP:
		            case self::NONE:
		            case self::ODBC:
		            case self::OFFLINE:
		            case self::OFFSET:
		            case self::OF:
		            case self::OJ:
		            case self::OLD_PASSWORD:
		            case self::ONE:
		            case self::ONLINE:
		            case self::ONLY:
		            case self::OPEN:
		            case self::OPTIMIZER_COSTS:
		            case self::OPTIONS:
		            case self::OWNER:
		            case self::PACK_KEYS:
		            case self::PAGE:
		            case self::PARSER:
		            case self::PARTIAL:
		            case self::PARTITIONING:
		            case self::PARTITIONS:
		            case self::PASSWORD:
		            case self::PASSWORD_LOCK_TIME:
		            case self::PHASE:
		            case self::PLUGIN:
		            case self::PLUGIN_DIR:
		            case self::PLUGINS:
		            case self::PORT:
		            case self::PRECEDES:
		            case self::PREPARE:
		            case self::PRESERVE:
		            case self::PREV:
		            case self::PROCESSLIST:
		            case self::PROFILE:
		            case self::PROFILES:
		            case self::PROXY:
		            case self::QUERY:
		            case self::QUICK:
		            case self::REBUILD:
		            case self::RECOVER:
		            case self::RECURSIVE:
		            case self::REDO_BUFFER_SIZE:
		            case self::REDUNDANT:
		            case self::RELAY:
		            case self::RELAY_LOG_FILE:
		            case self::RELAY_LOG_POS:
		            case self::RELAYLOG:
		            case self::REMOVE:
		            case self::REORGANIZE:
		            case self::REPAIR:
		            case self::REPLICATE_DO_DB:
		            case self::REPLICATE_DO_TABLE:
		            case self::REPLICATE_IGNORE_DB:
		            case self::REPLICATE_IGNORE_TABLE:
		            case self::REPLICATE_REWRITE_DB:
		            case self::REPLICATE_WILD_DO_TABLE:
		            case self::REPLICATE_WILD_IGNORE_TABLE:
		            case self::REPLICATION:
		            case self::RESET:
		            case self::RESUME:
		            case self::RETURNED_SQLSTATE:
		            case self::RETURNS:
		            case self::REUSE:
		            case self::ROLE:
		            case self::ROLLBACK:
		            case self::ROLLUP:
		            case self::ROTATE:
		            case self::ROW:
		            case self::ROWS:
		            case self::ROW_FORMAT:
		            case self::RTREE:
		            case self::SAVEPOINT:
		            case self::SCHEDULE:
		            case self::SECURITY:
		            case self::SERVER:
		            case self::SESSION:
		            case self::SHARE:
		            case self::SHARED:
		            case self::SIGNED:
		            case self::SIMPLE:
		            case self::SLAVE:
		            case self::SLOW:
		            case self::SNAPSHOT:
		            case self::SOCKET:
		            case self::SOME:
		            case self::SONAME:
		            case self::SOUNDS:
		            case self::SOURCE:
		            case self::SQL_AFTER_GTIDS:
		            case self::SQL_AFTER_MTS_GAPS:
		            case self::SQL_BEFORE_GTIDS:
		            case self::SQL_BUFFER_RESULT:
		            case self::SQL_CACHE:
		            case self::SQL_NO_CACHE:
		            case self::SQL_THREAD:
		            case self::START:
		            case self::STARTS:
		            case self::STATS_AUTO_RECALC:
		            case self::STATS_PERSISTENT:
		            case self::STATS_SAMPLE_PAGES:
		            case self::STATUS:
		            case self::STOP:
		            case self::STORAGE:
		            case self::STRING:
		            case self::SUBCLASS_ORIGIN:
		            case self::SUBJECT:
		            case self::SUBPARTITION:
		            case self::SUBPARTITIONS:
		            case self::SUSPEND:
		            case self::SWAPS:
		            case self::SWITCHES:
		            case self::TABLE_NAME:
		            case self::TABLESPACE:
		            case self::TABLE_TYPE:
		            case self::TEMPORARY:
		            case self::TEMPTABLE:
		            case self::THAN:
		            case self::TRADITIONAL:
		            case self::TRANSACTION:
		            case self::TRANSACTIONAL:
		            case self::TRIGGERS:
		            case self::TRUNCATE:
		            case self::UNBOUNDED:
		            case self::UNDEFINED:
		            case self::UNDOFILE:
		            case self::UNDO_BUFFER_SIZE:
		            case self::UNINSTALL:
		            case self::UNKNOWN:
		            case self::UNTIL:
		            case self::UPGRADE:
		            case self::USER:
		            case self::USE_FRM:
		            case self::USER_RESOURCES:
		            case self::VALIDATION:
		            case self::VALUE:
		            case self::VARIABLES:
		            case self::VIEW:
		            case self::VIRTUAL:
		            case self::VISIBLE:
		            case self::WAIT:
		            case self::WARNINGS:
		            case self::WITHOUT:
		            case self::WORK:
		            case self::WRAPPER:
		            case self::X509:
		            case self::XA:
		            case self::XML:
		            case self::EUR:
		            case self::USA:
		            case self::JIS:
		            case self::ISO:
		            case self::INTERNAL:
		            case self::QUARTER:
		            case self::MONTH:
		            case self::DAY:
		            case self::HOUR:
		            case self::MINUTE:
		            case self::WEEK:
		            case self::SECOND:
		            case self::MICROSECOND:
		            case self::ADMIN:
		            case self::AUDIT_ABORT_EXEMPT:
		            case self::AUDIT_ADMIN:
		            case self::AUTHENTICATION_POLICY_ADMIN:
		            case self::BACKUP_ADMIN:
		            case self::BINLOG_ADMIN:
		            case self::BINLOG_ENCRYPTION_ADMIN:
		            case self::CLONE_ADMIN:
		            case self::CONNECTION_ADMIN:
		            case self::ENCRYPTION_KEY_ADMIN:
		            case self::EXECUTE:
		            case self::FILE:
		            case self::FIREWALL_ADMIN:
		            case self::FIREWALL_EXEMPT:
		            case self::FIREWALL_USER:
		            case self::GROUP_REPLICATION_ADMIN:
		            case self::INNODB_REDO_LOG_ARCHIVE:
		            case self::INVOKE:
		            case self::LAMBDA:
		            case self::NDB_STORED_USER:
		            case self::PASSWORDLESS_USER_ADMIN:
		            case self::PERSIST_RO_VARIABLES_ADMIN:
		            case self::PRIVILEGES:
		            case self::PROCESS:
		            case self::RELOAD:
		            case self::REPLICATION_APPLIER:
		            case self::REPLICATION_SLAVE_ADMIN:
		            case self::RESOURCE_GROUP_ADMIN:
		            case self::RESOURCE_GROUP_USER:
		            case self::ROLE_ADMIN:
		            case self::ROUTINE:
		            case self::S3:
		            case self::SESSION_VARIABLES_ADMIN:
		            case self::SET_USER_ID:
		            case self::SHOW_ROUTINE:
		            case self::SHUTDOWN:
		            case self::SUPER:
		            case self::SYSTEM_VARIABLES_ADMIN:
		            case self::TABLES:
		            case self::TABLE_ENCRYPTION_ADMIN:
		            case self::VERSION_TOKEN_ADMIN:
		            case self::XA_RECOVER_ADMIN:
		            case self::ARMSCII8:
		            case self::ASCII:
		            case self::BIG5:
		            case self::CP1250:
		            case self::CP1251:
		            case self::CP1256:
		            case self::CP1257:
		            case self::CP850:
		            case self::CP852:
		            case self::CP866:
		            case self::CP932:
		            case self::DEC8:
		            case self::EUCJPMS:
		            case self::EUCKR:
		            case self::GB18030:
		            case self::GB2312:
		            case self::GBK:
		            case self::GEOSTD8:
		            case self::GREEK:
		            case self::HEBREW:
		            case self::HP8:
		            case self::KEYBCS2:
		            case self::KOI8R:
		            case self::KOI8U:
		            case self::LATIN1:
		            case self::LATIN2:
		            case self::LATIN5:
		            case self::LATIN7:
		            case self::MACCE:
		            case self::MACROMAN:
		            case self::SJIS:
		            case self::SWE7:
		            case self::TIS620:
		            case self::UCS2:
		            case self::UJIS:
		            case self::UTF16:
		            case self::UTF16LE:
		            case self::UTF32:
		            case self::UTF8:
		            case self::UTF8MB3:
		            case self::UTF8MB4:
		            case self::ARCHIVE:
		            case self::BLACKHOLE:
		            case self::CSV:
		            case self::FEDERATED:
		            case self::INNODB:
		            case self::MEMORY:
		            case self::MRG_MYISAM:
		            case self::MYISAM:
		            case self::NDB:
		            case self::NDBCLUSTER:
		            case self::PERFORMANCE_SCHEMA:
		            case self::TOKUDB:
		            case self::REPEATABLE:
		            case self::COMMITTED:
		            case self::UNCOMMITTED:
		            case self::SERIALIZABLE:
		            case self::GEOMETRYCOLLECTION:
		            case self::LINESTRING:
		            case self::MULTILINESTRING:
		            case self::MULTIPOINT:
		            case self::MULTIPOLYGON:
		            case self::POINT:
		            case self::POLYGON:
		            case self::ABS:
		            case self::ACOS:
		            case self::ADDDATE:
		            case self::ADDTIME:
		            case self::AES_DECRYPT:
		            case self::AES_ENCRYPT:
		            case self::AREA:
		            case self::ASBINARY:
		            case self::ASIN:
		            case self::ASTEXT:
		            case self::ASWKB:
		            case self::ASWKT:
		            case self::ASYMMETRIC_DECRYPT:
		            case self::ASYMMETRIC_DERIVE:
		            case self::ASYMMETRIC_ENCRYPT:
		            case self::ASYMMETRIC_SIGN:
		            case self::ASYMMETRIC_VERIFY:
		            case self::ATAN:
		            case self::ATAN2:
		            case self::BENCHMARK:
		            case self::BIN:
		            case self::BIT_COUNT:
		            case self::BIT_LENGTH:
		            case self::BUFFER:
		            case self::CATALOG_NAME:
		            case self::CEIL:
		            case self::CEILING:
		            case self::CENTROID:
		            case self::CHARACTER_LENGTH:
		            case self::CHARSET:
		            case self::CHAR_LENGTH:
		            case self::COERCIBILITY:
		            case self::COLLATION:
		            case self::COMPRESS:
		            case self::CONCAT:
		            case self::CONCAT_WS:
		            case self::CONNECTION_ID:
		            case self::CONV:
		            case self::CONVERT_TZ:
		            case self::COS:
		            case self::COT:
		            case self::CRC32:
		            case self::CREATE_ASYMMETRIC_PRIV_KEY:
		            case self::CREATE_ASYMMETRIC_PUB_KEY:
		            case self::CREATE_DH_PARAMETERS:
		            case self::CREATE_DIGEST:
		            case self::CROSSES:
		            case self::DATEDIFF:
		            case self::DATE_FORMAT:
		            case self::DAYNAME:
		            case self::DAYOFMONTH:
		            case self::DAYOFWEEK:
		            case self::DAYOFYEAR:
		            case self::DECODE:
		            case self::DEGREES:
		            case self::DES_DECRYPT:
		            case self::DES_ENCRYPT:
		            case self::DIMENSION:
		            case self::DISJOINT:
		            case self::ELT:
		            case self::ENCODE:
		            case self::ENCRYPT:
		            case self::ENDPOINT:
		            case self::ENGINE_ATTRIBUTE:
		            case self::ENVELOPE:
		            case self::EQUALS:
		            case self::EXP:
		            case self::EXPORT_SET:
		            case self::EXTERIORRING:
		            case self::EXTRACTVALUE:
		            case self::FIELD:
		            case self::FIND_IN_SET:
		            case self::FLOOR:
		            case self::FORMAT:
		            case self::FOUND_ROWS:
		            case self::FROM_BASE64:
		            case self::FROM_DAYS:
		            case self::FROM_UNIXTIME:
		            case self::GEOMCOLLFROMTEXT:
		            case self::GEOMCOLLFROMWKB:
		            case self::GEOMETRYCOLLECTIONFROMTEXT:
		            case self::GEOMETRYCOLLECTIONFROMWKB:
		            case self::GEOMETRYFROMTEXT:
		            case self::GEOMETRYFROMWKB:
		            case self::GEOMETRYN:
		            case self::GEOMETRYTYPE:
		            case self::GEOMFROMTEXT:
		            case self::GEOMFROMWKB:
		            case self::GET_FORMAT:
		            case self::GET_LOCK:
		            case self::GLENGTH:
		            case self::GREATEST:
		            case self::GTID_SUBSET:
		            case self::GTID_SUBTRACT:
		            case self::HEX:
		            case self::IFNULL:
		            case self::INET6_ATON:
		            case self::INET6_NTOA:
		            case self::INET_ATON:
		            case self::INET_NTOA:
		            case self::INSTR:
		            case self::INTERIORRINGN:
		            case self::INTERSECTS:
		            case self::ISCLOSED:
		            case self::ISEMPTY:
		            case self::ISNULL:
		            case self::ISSIMPLE:
		            case self::IS_FREE_LOCK:
		            case self::IS_IPV4:
		            case self::IS_IPV4_COMPAT:
		            case self::IS_IPV4_MAPPED:
		            case self::IS_IPV6:
		            case self::IS_USED_LOCK:
		            case self::LAST_INSERT_ID:
		            case self::LCASE:
		            case self::LEAST:
		            case self::LENGTH:
		            case self::LINEFROMTEXT:
		            case self::LINEFROMWKB:
		            case self::LINESTRINGFROMTEXT:
		            case self::LINESTRINGFROMWKB:
		            case self::LN:
		            case self::LOAD_FILE:
		            case self::LOCATE:
		            case self::LOG:
		            case self::LOG10:
		            case self::LOG2:
		            case self::LOWER:
		            case self::LPAD:
		            case self::LTRIM:
		            case self::MAKEDATE:
		            case self::MAKETIME:
		            case self::MAKE_SET:
		            case self::MASTER_POS_WAIT:
		            case self::MBRCONTAINS:
		            case self::MBRDISJOINT:
		            case self::MBREQUAL:
		            case self::MBRINTERSECTS:
		            case self::MBROVERLAPS:
		            case self::MBRTOUCHES:
		            case self::MBRWITHIN:
		            case self::MD5:
		            case self::MLINEFROMTEXT:
		            case self::MLINEFROMWKB:
		            case self::MONTHNAME:
		            case self::MPOINTFROMTEXT:
		            case self::MPOINTFROMWKB:
		            case self::MPOLYFROMTEXT:
		            case self::MPOLYFROMWKB:
		            case self::MULTILINESTRINGFROMTEXT:
		            case self::MULTILINESTRINGFROMWKB:
		            case self::MULTIPOINTFROMTEXT:
		            case self::MULTIPOINTFROMWKB:
		            case self::MULTIPOLYGONFROMTEXT:
		            case self::MULTIPOLYGONFROMWKB:
		            case self::NAME_CONST:
		            case self::NULLIF:
		            case self::NUMGEOMETRIES:
		            case self::NUMINTERIORRINGS:
		            case self::NUMPOINTS:
		            case self::OCT:
		            case self::OCTET_LENGTH:
		            case self::ORD:
		            case self::OVERLAPS:
		            case self::PERIOD_ADD:
		            case self::PERIOD_DIFF:
		            case self::PI:
		            case self::POINTFROMTEXT:
		            case self::POINTFROMWKB:
		            case self::POINTN:
		            case self::POLYFROMTEXT:
		            case self::POLYFROMWKB:
		            case self::POLYGONFROMTEXT:
		            case self::POLYGONFROMWKB:
		            case self::POW:
		            case self::POWER:
		            case self::QUOTE:
		            case self::RADIANS:
		            case self::RAND:
		            case self::RANDOM:
		            case self::RANDOM_BYTES:
		            case self::RELEASE_LOCK:
		            case self::REVERSE:
		            case self::ROUND:
		            case self::ROW_COUNT:
		            case self::RPAD:
		            case self::RTRIM:
		            case self::SEC_TO_TIME:
		            case self::SECONDARY_ENGINE_ATTRIBUTE:
		            case self::SESSION_USER:
		            case self::SHA:
		            case self::SHA1:
		            case self::SHA2:
		            case self::SCHEMA_NAME:
		            case self::SIGN:
		            case self::SIN:
		            case self::SLEEP:
		            case self::SOUNDEX:
		            case self::SQL_THREAD_WAIT_AFTER_GTIDS:
		            case self::SQRT:
		            case self::SRID:
		            case self::STARTPOINT:
		            case self::STRCMP:
		            case self::STR_TO_DATE:
		            case self::ST_AREA:
		            case self::ST_ASBINARY:
		            case self::ST_ASTEXT:
		            case self::ST_ASWKB:
		            case self::ST_ASWKT:
		            case self::ST_BUFFER:
		            case self::ST_CENTROID:
		            case self::ST_CONTAINS:
		            case self::ST_CROSSES:
		            case self::ST_DIFFERENCE:
		            case self::ST_DIMENSION:
		            case self::ST_DISJOINT:
		            case self::ST_DISTANCE:
		            case self::ST_ENDPOINT:
		            case self::ST_ENVELOPE:
		            case self::ST_EQUALS:
		            case self::ST_EXTERIORRING:
		            case self::ST_GEOMCOLLFROMTEXT:
		            case self::ST_GEOMCOLLFROMTXT:
		            case self::ST_GEOMCOLLFROMWKB:
		            case self::ST_GEOMETRYCOLLECTIONFROMTEXT:
		            case self::ST_GEOMETRYCOLLECTIONFROMWKB:
		            case self::ST_GEOMETRYFROMTEXT:
		            case self::ST_GEOMETRYFROMWKB:
		            case self::ST_GEOMETRYN:
		            case self::ST_GEOMETRYTYPE:
		            case self::ST_GEOMFROMTEXT:
		            case self::ST_GEOMFROMWKB:
		            case self::ST_INTERIORRINGN:
		            case self::ST_INTERSECTION:
		            case self::ST_INTERSECTS:
		            case self::ST_ISCLOSED:
		            case self::ST_ISEMPTY:
		            case self::ST_ISSIMPLE:
		            case self::ST_LINEFROMTEXT:
		            case self::ST_LINEFROMWKB:
		            case self::ST_LINESTRINGFROMTEXT:
		            case self::ST_LINESTRINGFROMWKB:
		            case self::ST_NUMGEOMETRIES:
		            case self::ST_NUMINTERIORRING:
		            case self::ST_NUMINTERIORRINGS:
		            case self::ST_NUMPOINTS:
		            case self::ST_OVERLAPS:
		            case self::ST_POINTFROMTEXT:
		            case self::ST_POINTFROMWKB:
		            case self::ST_POINTN:
		            case self::ST_POLYFROMTEXT:
		            case self::ST_POLYFROMWKB:
		            case self::ST_POLYGONFROMTEXT:
		            case self::ST_POLYGONFROMWKB:
		            case self::ST_SRID:
		            case self::ST_STARTPOINT:
		            case self::ST_SYMDIFFERENCE:
		            case self::ST_TOUCHES:
		            case self::ST_UNION:
		            case self::ST_WITHIN:
		            case self::ST_X:
		            case self::ST_Y:
		            case self::SUBDATE:
		            case self::SUBSTRING_INDEX:
		            case self::SUBTIME:
		            case self::SYSTEM_USER:
		            case self::TAN:
		            case self::TIMEDIFF:
		            case self::TIMESTAMPADD:
		            case self::TIMESTAMPDIFF:
		            case self::TIME_FORMAT:
		            case self::TIME_TO_SEC:
		            case self::TOUCHES:
		            case self::TO_BASE64:
		            case self::TO_DAYS:
		            case self::TO_SECONDS:
		            case self::TP_CONNECTION_ADMIN:
		            case self::UCASE:
		            case self::UNCOMPRESS:
		            case self::UNCOMPRESSED_LENGTH:
		            case self::UNHEX:
		            case self::UNIX_TIMESTAMP:
		            case self::UPDATEXML:
		            case self::UPPER:
		            case self::UUID:
		            case self::UUID_SHORT:
		            case self::VALIDATE_PASSWORD_STRENGTH:
		            case self::VERSION:
		            case self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
		            case self::WEEKDAY:
		            case self::WEEKOFYEAR:
		            case self::WEIGHT_STRING:
		            case self::WITHIN:
		            case self::YEARWEEK:
		            case self::Y_FUNCTION:
		            case self::X_FUNCTION:
		            case self::MOD:
		            case self::CHARSET_REVERSE_QOUTE_STRING:
		            case self::STRING_LITERAL:
		            case self::ID:
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(3519);
		            	$this->uid();
		            	break;

		            case self::LOCAL_ID:
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(3520);
		            	$this->match(self::LOCAL_ID);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function lockClause(): Context\LockClauseContext
		{
		    $localContext = new Context\LockClauseContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 212, self::RULE_lockClause);

		    try {
		        $this->setState(3529);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::FOR:
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(3523);
		            	$this->match(self::FOR);
		            	$this->setState(3524);
		            	$this->match(self::UPDATE);
		            	break;

		            case self::LOCK:
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(3525);
		            	$this->match(self::LOCK);
		            	$this->setState(3526);
		            	$this->match(self::IN);
		            	$this->setState(3527);
		            	$this->match(self::SHARE);
		            	$this->setState(3528);
		            	$this->match(self::MODE);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function singleDeleteStatement(): Context\SingleDeleteStatementContext
		{
		    $localContext = new Context\SingleDeleteStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 214, self::RULE_singleDeleteStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3531);
		        $this->match(self::DELETE);
		        $this->setState(3533);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::LOW_PRIORITY) {
		        	$this->setState(3532);
		        	$localContext->priority = $this->match(self::LOW_PRIORITY);
		        }
		        $this->setState(3536);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::QUICK) {
		        	$this->setState(3535);
		        	$this->match(self::QUICK);
		        }
		        $this->setState(3539);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::IGNORE) {
		        	$this->setState(3538);
		        	$this->match(self::IGNORE);
		        }
		        $this->setState(3541);
		        $this->match(self::FROM);
		        $this->setState(3542);
		        $this->tableName();
		        $this->setState(3547);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 491, $this->ctx)) {
		            case 1:
		        	    $this->setState(3544);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::AS) {
		        	    	$this->setState(3543);
		        	    	$this->match(self::AS);
		        	    }
		        	    $this->setState(3546);
		        	    $this->uid();
		        	break;
		        }
		        $this->setState(3554);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::PARTITION) {
		        	$this->setState(3549);
		        	$this->match(self::PARTITION);
		        	$this->setState(3550);
		        	$this->match(self::LR_BRACKET);
		        	$this->setState(3551);
		        	$this->uidList();
		        	$this->setState(3552);
		        	$this->match(self::RR_BRACKET);
		        }
		        $this->setState(3558);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::WHERE) {
		        	$this->setState(3556);
		        	$this->match(self::WHERE);
		        	$this->setState(3557);
		        	$this->recursiveExpression(0);
		        }
		        $this->setState(3561);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::ORDER) {
		        	$this->setState(3560);
		        	$this->orderByClause();
		        }
		        $this->setState(3565);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::LIMIT) {
		        	$this->setState(3563);
		        	$this->match(self::LIMIT);
		        	$this->setState(3564);
		        	$this->limitClauseAtom();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function multipleDeleteStatement(): Context\MultipleDeleteStatementContext
		{
		    $localContext = new Context\MultipleDeleteStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 216, self::RULE_multipleDeleteStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3567);
		        $this->match(self::DELETE);
		        $this->setState(3569);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::LOW_PRIORITY) {
		        	$this->setState(3568);
		        	$localContext->priority = $this->match(self::LOW_PRIORITY);
		        }
		        $this->setState(3572);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 497, $this->ctx)) {
		            case 1:
		        	    $this->setState(3571);
		        	    $this->match(self::QUICK);
		        	break;
		        }
		        $this->setState(3575);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::IGNORE) {
		        	$this->setState(3574);
		        	$this->match(self::IGNORE);
		        }
		        $this->setState(3616);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::ARRAY:
		            case self::ATTRIBUTE:
		            case self::BUCKETS:
		            case self::CONDITION:
		            case self::CURRENT:
		            case self::CURRENT_USER:
		            case self::DATABASE:
		            case self::DEFAULT:
		            case self::DIAGNOSTICS:
		            case self::EMPTY:
		            case self::ENFORCED:
		            case self::EXCEPT:
		            case self::GROUP:
		            case self::IF:
		            case self::IGNORED:
		            case self::INSERT:
		            case self::LATERAL:
		            case self::LEFT:
		            case self::NUMBER:
		            case self::OPTIONAL:
		            case self::ORDER:
		            case self::PRIMARY:
		            case self::REPEAT:
		            case self::REPLACE:
		            case self::RIGHT:
		            case self::SCHEMA:
		            case self::SKIP_QUERY_REWRITE:
		            case self::STACKED:
		            case self::DATE:
		            case self::TIME:
		            case self::TIMESTAMP:
		            case self::DATETIME:
		            case self::YEAR:
		            case self::BINARY:
		            case self::TEXT:
		            case self::ENUM:
		            case self::SERIAL:
		            case self::JSON_ARRAY:
		            case self::JSON_ARRAYAGG:
		            case self::JSON_ARRAY_APPEND:
		            case self::JSON_ARRAY_INSERT:
		            case self::JSON_CONTAINS:
		            case self::JSON_CONTAINS_PATH:
		            case self::JSON_DEPTH:
		            case self::JSON_EXTRACT:
		            case self::JSON_INSERT:
		            case self::JSON_KEYS:
		            case self::JSON_LENGTH:
		            case self::JSON_MERGE:
		            case self::JSON_MERGE_PATCH:
		            case self::JSON_MERGE_PRESERVE:
		            case self::JSON_OBJECT:
		            case self::JSON_OBJECTAGG:
		            case self::JSON_OVERLAPS:
		            case self::JSON_PRETTY:
		            case self::JSON_QUOTE:
		            case self::JSON_REMOVE:
		            case self::JSON_REPLACE:
		            case self::JSON_SCHEMA_VALID:
		            case self::JSON_SCHEMA_VALIDATION_REPORT:
		            case self::JSON_SEARCH:
		            case self::JSON_SET:
		            case self::JSON_STORAGE_FREE:
		            case self::JSON_STORAGE_SIZE:
		            case self::JSON_TABLE:
		            case self::JSON_TYPE:
		            case self::JSON_UNQUOTE:
		            case self::JSON_VALID:
		            case self::JSON_VALUE:
		            case self::NESTED:
		            case self::ORDINALITY:
		            case self::PATH:
		            case self::AVG:
		            case self::BIT_AND:
		            case self::BIT_OR:
		            case self::BIT_XOR:
		            case self::COUNT:
		            case self::CUME_DIST:
		            case self::DENSE_RANK:
		            case self::FIRST_VALUE:
		            case self::GROUP_CONCAT:
		            case self::LAG:
		            case self::LAST_VALUE:
		            case self::LEAD:
		            case self::MAX:
		            case self::MIN:
		            case self::NTILE:
		            case self::NTH_VALUE:
		            case self::PERCENT_RANK:
		            case self::RANK:
		            case self::ROW_NUMBER:
		            case self::STD:
		            case self::STDDEV:
		            case self::STDDEV_POP:
		            case self::STDDEV_SAMP:
		            case self::SUM:
		            case self::VAR_POP:
		            case self::VAR_SAMP:
		            case self::VARIANCE:
		            case self::CURRENT_DATE:
		            case self::CURRENT_TIME:
		            case self::CURRENT_TIMESTAMP:
		            case self::LOCALTIME:
		            case self::CURDATE:
		            case self::CURTIME:
		            case self::DATE_ADD:
		            case self::DATE_SUB:
		            case self::LOCALTIMESTAMP:
		            case self::NOW:
		            case self::POSITION:
		            case self::SUBSTR:
		            case self::SUBSTRING:
		            case self::SYSDATE:
		            case self::TRIM:
		            case self::UTC_DATE:
		            case self::UTC_TIME:
		            case self::UTC_TIMESTAMP:
		            case self::ACCOUNT:
		            case self::ACTION:
		            case self::AFTER:
		            case self::AGGREGATE:
		            case self::ALGORITHM:
		            case self::ANY:
		            case self::AT:
		            case self::AUTHORS:
		            case self::AUTOCOMMIT:
		            case self::AUTOEXTEND_SIZE:
		            case self::AUTO_INCREMENT:
		            case self::AVG_ROW_LENGTH:
		            case self::BEGIN:
		            case self::BINLOG:
		            case self::BIT:
		            case self::BLOCK:
		            case self::BOOL:
		            case self::BOOLEAN:
		            case self::BTREE:
		            case self::CACHE:
		            case self::CASCADED:
		            case self::CHAIN:
		            case self::CHANGED:
		            case self::CHANNEL:
		            case self::CHECKSUM:
		            case self::PAGE_CHECKSUM:
		            case self::CIPHER:
		            case self::CLASS_ORIGIN:
		            case self::CLIENT:
		            case self::CLOSE:
		            case self::CLUSTERING:
		            case self::COALESCE:
		            case self::CODE:
		            case self::COLUMNS:
		            case self::COLUMN_FORMAT:
		            case self::COLUMN_NAME:
		            case self::COMMENT:
		            case self::COMMIT:
		            case self::COMPACT:
		            case self::COMPLETION:
		            case self::COMPRESSED:
		            case self::COMPRESSION:
		            case self::CONCURRENT:
		            case self::CONNECT:
		            case self::CONNECTION:
		            case self::CONSISTENT:
		            case self::CONSTRAINT_CATALOG:
		            case self::CONSTRAINT_SCHEMA:
		            case self::CONSTRAINT_NAME:
		            case self::CONTAINS:
		            case self::CONTEXT:
		            case self::CONTRIBUTORS:
		            case self::COPY:
		            case self::CPU:
		            case self::CURSOR_NAME:
		            case self::DATA:
		            case self::DATAFILE:
		            case self::DEALLOCATE:
		            case self::DEFAULT_AUTH:
		            case self::DEFINER:
		            case self::DELAY_KEY_WRITE:
		            case self::DES_KEY_FILE:
		            case self::DIRECTORY:
		            case self::DISABLE:
		            case self::DISCARD:
		            case self::DISK:
		            case self::DO:
		            case self::DUMPFILE:
		            case self::DUPLICATE:
		            case self::DYNAMIC:
		            case self::ENABLE:
		            case self::ENCRYPTION:
		            case self::END:
		            case self::ENDS:
		            case self::ENGINE:
		            case self::ENGINES:
		            case self::ERROR:
		            case self::ERRORS:
		            case self::ESCAPE:
		            case self::EVEN:
		            case self::EVENT:
		            case self::EVENTS:
		            case self::EVERY:
		            case self::EXCHANGE:
		            case self::EXCLUSIVE:
		            case self::EXPIRE:
		            case self::EXPORT:
		            case self::EXTENDED:
		            case self::EXTENT_SIZE:
		            case self::FAILED_LOGIN_ATTEMPTS:
		            case self::FAST:
		            case self::FAULTS:
		            case self::FIELDS:
		            case self::FILE_BLOCK_SIZE:
		            case self::FILTER:
		            case self::FIRST:
		            case self::FIXED:
		            case self::FLUSH:
		            case self::FOLLOWS:
		            case self::FOUND:
		            case self::FULL:
		            case self::FUNCTION:
		            case self::GENERAL:
		            case self::GLOBAL:
		            case self::GRANTS:
		            case self::GROUP_REPLICATION:
		            case self::HANDLER:
		            case self::HASH:
		            case self::HELP:
		            case self::HISTORY:
		            case self::HOST:
		            case self::HOSTS:
		            case self::IDENTIFIED:
		            case self::IGNORE_SERVER_IDS:
		            case self::IMPORT:
		            case self::INDEXES:
		            case self::INITIAL_SIZE:
		            case self::INPLACE:
		            case self::INSERT_METHOD:
		            case self::INSTALL:
		            case self::INSTANCE:
		            case self::INSTANT:
		            case self::INVISIBLE:
		            case self::INVOKER:
		            case self::IO:
		            case self::IO_THREAD:
		            case self::IPC:
		            case self::ISOLATION:
		            case self::ISSUER:
		            case self::JSON:
		            case self::KEY_BLOCK_SIZE:
		            case self::LANGUAGE:
		            case self::LAST:
		            case self::LEAVES:
		            case self::LESS:
		            case self::LEVEL:
		            case self::LIST:
		            case self::LOCAL:
		            case self::LOGFILE:
		            case self::LOGS:
		            case self::MASTER:
		            case self::MASTER_AUTO_POSITION:
		            case self::MASTER_CONNECT_RETRY:
		            case self::MASTER_DELAY:
		            case self::MASTER_HEARTBEAT_PERIOD:
		            case self::MASTER_HOST:
		            case self::MASTER_LOG_FILE:
		            case self::MASTER_LOG_POS:
		            case self::MASTER_PASSWORD:
		            case self::MASTER_PORT:
		            case self::MASTER_RETRY_COUNT:
		            case self::MASTER_SSL:
		            case self::MASTER_SSL_CA:
		            case self::MASTER_SSL_CAPATH:
		            case self::MASTER_SSL_CERT:
		            case self::MASTER_SSL_CIPHER:
		            case self::MASTER_SSL_CRL:
		            case self::MASTER_SSL_CRLPATH:
		            case self::MASTER_SSL_KEY:
		            case self::MASTER_TLS_VERSION:
		            case self::MASTER_USER:
		            case self::MAX_CONNECTIONS_PER_HOUR:
		            case self::MAX_QUERIES_PER_HOUR:
		            case self::MAX_ROWS:
		            case self::MAX_SIZE:
		            case self::MAX_UPDATES_PER_HOUR:
		            case self::MAX_USER_CONNECTIONS:
		            case self::MEDIUM:
		            case self::MEMBER:
		            case self::MERGE:
		            case self::MESSAGE_TEXT:
		            case self::MID:
		            case self::MIGRATE:
		            case self::MIN_ROWS:
		            case self::MODE:
		            case self::MODIFY:
		            case self::MUTEX:
		            case self::MYSQL:
		            case self::MYSQL_ERRNO:
		            case self::NAME:
		            case self::NAMES:
		            case self::NCHAR:
		            case self::NEVER:
		            case self::NEXT:
		            case self::NO:
		            case self::NOCOPY:
		            case self::NOWAIT:
		            case self::NODEGROUP:
		            case self::NONE:
		            case self::ODBC:
		            case self::OFFLINE:
		            case self::OFFSET:
		            case self::OF:
		            case self::OJ:
		            case self::OLD_PASSWORD:
		            case self::ONE:
		            case self::ONLINE:
		            case self::ONLY:
		            case self::OPEN:
		            case self::OPTIMIZER_COSTS:
		            case self::OPTIONS:
		            case self::OWNER:
		            case self::PACK_KEYS:
		            case self::PAGE:
		            case self::PARSER:
		            case self::PARTIAL:
		            case self::PARTITIONING:
		            case self::PARTITIONS:
		            case self::PASSWORD:
		            case self::PASSWORD_LOCK_TIME:
		            case self::PHASE:
		            case self::PLUGIN:
		            case self::PLUGIN_DIR:
		            case self::PLUGINS:
		            case self::PORT:
		            case self::PRECEDES:
		            case self::PREPARE:
		            case self::PRESERVE:
		            case self::PREV:
		            case self::PROCESSLIST:
		            case self::PROFILE:
		            case self::PROFILES:
		            case self::PROXY:
		            case self::QUERY:
		            case self::QUICK:
		            case self::REBUILD:
		            case self::RECOVER:
		            case self::RECURSIVE:
		            case self::REDO_BUFFER_SIZE:
		            case self::REDUNDANT:
		            case self::RELAY:
		            case self::RELAY_LOG_FILE:
		            case self::RELAY_LOG_POS:
		            case self::RELAYLOG:
		            case self::REMOVE:
		            case self::REORGANIZE:
		            case self::REPAIR:
		            case self::REPLICATE_DO_DB:
		            case self::REPLICATE_DO_TABLE:
		            case self::REPLICATE_IGNORE_DB:
		            case self::REPLICATE_IGNORE_TABLE:
		            case self::REPLICATE_REWRITE_DB:
		            case self::REPLICATE_WILD_DO_TABLE:
		            case self::REPLICATE_WILD_IGNORE_TABLE:
		            case self::REPLICATION:
		            case self::RESET:
		            case self::RESUME:
		            case self::RETURNED_SQLSTATE:
		            case self::RETURNS:
		            case self::REUSE:
		            case self::ROLE:
		            case self::ROLLBACK:
		            case self::ROLLUP:
		            case self::ROTATE:
		            case self::ROW:
		            case self::ROWS:
		            case self::ROW_FORMAT:
		            case self::RTREE:
		            case self::SAVEPOINT:
		            case self::SCHEDULE:
		            case self::SECURITY:
		            case self::SERVER:
		            case self::SESSION:
		            case self::SHARE:
		            case self::SHARED:
		            case self::SIGNED:
		            case self::SIMPLE:
		            case self::SLAVE:
		            case self::SLOW:
		            case self::SNAPSHOT:
		            case self::SOCKET:
		            case self::SOME:
		            case self::SONAME:
		            case self::SOUNDS:
		            case self::SOURCE:
		            case self::SQL_AFTER_GTIDS:
		            case self::SQL_AFTER_MTS_GAPS:
		            case self::SQL_BEFORE_GTIDS:
		            case self::SQL_BUFFER_RESULT:
		            case self::SQL_CACHE:
		            case self::SQL_NO_CACHE:
		            case self::SQL_THREAD:
		            case self::START:
		            case self::STARTS:
		            case self::STATS_AUTO_RECALC:
		            case self::STATS_PERSISTENT:
		            case self::STATS_SAMPLE_PAGES:
		            case self::STATUS:
		            case self::STOP:
		            case self::STORAGE:
		            case self::STRING:
		            case self::SUBCLASS_ORIGIN:
		            case self::SUBJECT:
		            case self::SUBPARTITION:
		            case self::SUBPARTITIONS:
		            case self::SUSPEND:
		            case self::SWAPS:
		            case self::SWITCHES:
		            case self::TABLE_NAME:
		            case self::TABLESPACE:
		            case self::TABLE_TYPE:
		            case self::TEMPORARY:
		            case self::TEMPTABLE:
		            case self::THAN:
		            case self::TRADITIONAL:
		            case self::TRANSACTION:
		            case self::TRANSACTIONAL:
		            case self::TRIGGERS:
		            case self::TRUNCATE:
		            case self::UNBOUNDED:
		            case self::UNDEFINED:
		            case self::UNDOFILE:
		            case self::UNDO_BUFFER_SIZE:
		            case self::UNINSTALL:
		            case self::UNKNOWN:
		            case self::UNTIL:
		            case self::UPGRADE:
		            case self::USER:
		            case self::USE_FRM:
		            case self::USER_RESOURCES:
		            case self::VALIDATION:
		            case self::VALUE:
		            case self::VARIABLES:
		            case self::VIEW:
		            case self::VIRTUAL:
		            case self::VISIBLE:
		            case self::WAIT:
		            case self::WARNINGS:
		            case self::WITHOUT:
		            case self::WORK:
		            case self::WRAPPER:
		            case self::X509:
		            case self::XA:
		            case self::XML:
		            case self::EUR:
		            case self::USA:
		            case self::JIS:
		            case self::ISO:
		            case self::INTERNAL:
		            case self::QUARTER:
		            case self::MONTH:
		            case self::DAY:
		            case self::HOUR:
		            case self::MINUTE:
		            case self::WEEK:
		            case self::SECOND:
		            case self::MICROSECOND:
		            case self::ADMIN:
		            case self::AUDIT_ABORT_EXEMPT:
		            case self::AUDIT_ADMIN:
		            case self::AUTHENTICATION_POLICY_ADMIN:
		            case self::BACKUP_ADMIN:
		            case self::BINLOG_ADMIN:
		            case self::BINLOG_ENCRYPTION_ADMIN:
		            case self::CLONE_ADMIN:
		            case self::CONNECTION_ADMIN:
		            case self::ENCRYPTION_KEY_ADMIN:
		            case self::EXECUTE:
		            case self::FILE:
		            case self::FIREWALL_ADMIN:
		            case self::FIREWALL_EXEMPT:
		            case self::FIREWALL_USER:
		            case self::GROUP_REPLICATION_ADMIN:
		            case self::INNODB_REDO_LOG_ARCHIVE:
		            case self::INVOKE:
		            case self::LAMBDA:
		            case self::NDB_STORED_USER:
		            case self::PASSWORDLESS_USER_ADMIN:
		            case self::PERSIST_RO_VARIABLES_ADMIN:
		            case self::PRIVILEGES:
		            case self::PROCESS:
		            case self::RELOAD:
		            case self::REPLICATION_APPLIER:
		            case self::REPLICATION_SLAVE_ADMIN:
		            case self::RESOURCE_GROUP_ADMIN:
		            case self::RESOURCE_GROUP_USER:
		            case self::ROLE_ADMIN:
		            case self::ROUTINE:
		            case self::S3:
		            case self::SESSION_VARIABLES_ADMIN:
		            case self::SET_USER_ID:
		            case self::SHOW_ROUTINE:
		            case self::SHUTDOWN:
		            case self::SUPER:
		            case self::SYSTEM_VARIABLES_ADMIN:
		            case self::TABLES:
		            case self::TABLE_ENCRYPTION_ADMIN:
		            case self::VERSION_TOKEN_ADMIN:
		            case self::XA_RECOVER_ADMIN:
		            case self::ARMSCII8:
		            case self::ASCII:
		            case self::BIG5:
		            case self::CP1250:
		            case self::CP1251:
		            case self::CP1256:
		            case self::CP1257:
		            case self::CP850:
		            case self::CP852:
		            case self::CP866:
		            case self::CP932:
		            case self::DEC8:
		            case self::EUCJPMS:
		            case self::EUCKR:
		            case self::GB18030:
		            case self::GB2312:
		            case self::GBK:
		            case self::GEOSTD8:
		            case self::GREEK:
		            case self::HEBREW:
		            case self::HP8:
		            case self::KEYBCS2:
		            case self::KOI8R:
		            case self::KOI8U:
		            case self::LATIN1:
		            case self::LATIN2:
		            case self::LATIN5:
		            case self::LATIN7:
		            case self::MACCE:
		            case self::MACROMAN:
		            case self::SJIS:
		            case self::SWE7:
		            case self::TIS620:
		            case self::UCS2:
		            case self::UJIS:
		            case self::UTF16:
		            case self::UTF16LE:
		            case self::UTF32:
		            case self::UTF8:
		            case self::UTF8MB3:
		            case self::UTF8MB4:
		            case self::ARCHIVE:
		            case self::BLACKHOLE:
		            case self::CSV:
		            case self::FEDERATED:
		            case self::INNODB:
		            case self::MEMORY:
		            case self::MRG_MYISAM:
		            case self::MYISAM:
		            case self::NDB:
		            case self::NDBCLUSTER:
		            case self::PERFORMANCE_SCHEMA:
		            case self::TOKUDB:
		            case self::REPEATABLE:
		            case self::COMMITTED:
		            case self::UNCOMMITTED:
		            case self::SERIALIZABLE:
		            case self::GEOMETRYCOLLECTION:
		            case self::LINESTRING:
		            case self::MULTILINESTRING:
		            case self::MULTIPOINT:
		            case self::MULTIPOLYGON:
		            case self::POINT:
		            case self::POLYGON:
		            case self::ABS:
		            case self::ACOS:
		            case self::ADDDATE:
		            case self::ADDTIME:
		            case self::AES_DECRYPT:
		            case self::AES_ENCRYPT:
		            case self::AREA:
		            case self::ASBINARY:
		            case self::ASIN:
		            case self::ASTEXT:
		            case self::ASWKB:
		            case self::ASWKT:
		            case self::ASYMMETRIC_DECRYPT:
		            case self::ASYMMETRIC_DERIVE:
		            case self::ASYMMETRIC_ENCRYPT:
		            case self::ASYMMETRIC_SIGN:
		            case self::ASYMMETRIC_VERIFY:
		            case self::ATAN:
		            case self::ATAN2:
		            case self::BENCHMARK:
		            case self::BIN:
		            case self::BIT_COUNT:
		            case self::BIT_LENGTH:
		            case self::BUFFER:
		            case self::CATALOG_NAME:
		            case self::CEIL:
		            case self::CEILING:
		            case self::CENTROID:
		            case self::CHARACTER_LENGTH:
		            case self::CHARSET:
		            case self::CHAR_LENGTH:
		            case self::COERCIBILITY:
		            case self::COLLATION:
		            case self::COMPRESS:
		            case self::CONCAT:
		            case self::CONCAT_WS:
		            case self::CONNECTION_ID:
		            case self::CONV:
		            case self::CONVERT_TZ:
		            case self::COS:
		            case self::COT:
		            case self::CRC32:
		            case self::CREATE_ASYMMETRIC_PRIV_KEY:
		            case self::CREATE_ASYMMETRIC_PUB_KEY:
		            case self::CREATE_DH_PARAMETERS:
		            case self::CREATE_DIGEST:
		            case self::CROSSES:
		            case self::DATEDIFF:
		            case self::DATE_FORMAT:
		            case self::DAYNAME:
		            case self::DAYOFMONTH:
		            case self::DAYOFWEEK:
		            case self::DAYOFYEAR:
		            case self::DECODE:
		            case self::DEGREES:
		            case self::DES_DECRYPT:
		            case self::DES_ENCRYPT:
		            case self::DIMENSION:
		            case self::DISJOINT:
		            case self::ELT:
		            case self::ENCODE:
		            case self::ENCRYPT:
		            case self::ENDPOINT:
		            case self::ENGINE_ATTRIBUTE:
		            case self::ENVELOPE:
		            case self::EQUALS:
		            case self::EXP:
		            case self::EXPORT_SET:
		            case self::EXTERIORRING:
		            case self::EXTRACTVALUE:
		            case self::FIELD:
		            case self::FIND_IN_SET:
		            case self::FLOOR:
		            case self::FORMAT:
		            case self::FOUND_ROWS:
		            case self::FROM_BASE64:
		            case self::FROM_DAYS:
		            case self::FROM_UNIXTIME:
		            case self::GEOMCOLLFROMTEXT:
		            case self::GEOMCOLLFROMWKB:
		            case self::GEOMETRYCOLLECTIONFROMTEXT:
		            case self::GEOMETRYCOLLECTIONFROMWKB:
		            case self::GEOMETRYFROMTEXT:
		            case self::GEOMETRYFROMWKB:
		            case self::GEOMETRYN:
		            case self::GEOMETRYTYPE:
		            case self::GEOMFROMTEXT:
		            case self::GEOMFROMWKB:
		            case self::GET_FORMAT:
		            case self::GET_LOCK:
		            case self::GLENGTH:
		            case self::GREATEST:
		            case self::GTID_SUBSET:
		            case self::GTID_SUBTRACT:
		            case self::HEX:
		            case self::IFNULL:
		            case self::INET6_ATON:
		            case self::INET6_NTOA:
		            case self::INET_ATON:
		            case self::INET_NTOA:
		            case self::INSTR:
		            case self::INTERIORRINGN:
		            case self::INTERSECTS:
		            case self::ISCLOSED:
		            case self::ISEMPTY:
		            case self::ISNULL:
		            case self::ISSIMPLE:
		            case self::IS_FREE_LOCK:
		            case self::IS_IPV4:
		            case self::IS_IPV4_COMPAT:
		            case self::IS_IPV4_MAPPED:
		            case self::IS_IPV6:
		            case self::IS_USED_LOCK:
		            case self::LAST_INSERT_ID:
		            case self::LCASE:
		            case self::LEAST:
		            case self::LENGTH:
		            case self::LINEFROMTEXT:
		            case self::LINEFROMWKB:
		            case self::LINESTRINGFROMTEXT:
		            case self::LINESTRINGFROMWKB:
		            case self::LN:
		            case self::LOAD_FILE:
		            case self::LOCATE:
		            case self::LOG:
		            case self::LOG10:
		            case self::LOG2:
		            case self::LOWER:
		            case self::LPAD:
		            case self::LTRIM:
		            case self::MAKEDATE:
		            case self::MAKETIME:
		            case self::MAKE_SET:
		            case self::MASTER_POS_WAIT:
		            case self::MBRCONTAINS:
		            case self::MBRDISJOINT:
		            case self::MBREQUAL:
		            case self::MBRINTERSECTS:
		            case self::MBROVERLAPS:
		            case self::MBRTOUCHES:
		            case self::MBRWITHIN:
		            case self::MD5:
		            case self::MLINEFROMTEXT:
		            case self::MLINEFROMWKB:
		            case self::MONTHNAME:
		            case self::MPOINTFROMTEXT:
		            case self::MPOINTFROMWKB:
		            case self::MPOLYFROMTEXT:
		            case self::MPOLYFROMWKB:
		            case self::MULTILINESTRINGFROMTEXT:
		            case self::MULTILINESTRINGFROMWKB:
		            case self::MULTIPOINTFROMTEXT:
		            case self::MULTIPOINTFROMWKB:
		            case self::MULTIPOLYGONFROMTEXT:
		            case self::MULTIPOLYGONFROMWKB:
		            case self::NAME_CONST:
		            case self::NULLIF:
		            case self::NUMGEOMETRIES:
		            case self::NUMINTERIORRINGS:
		            case self::NUMPOINTS:
		            case self::OCT:
		            case self::OCTET_LENGTH:
		            case self::ORD:
		            case self::OVERLAPS:
		            case self::PERIOD_ADD:
		            case self::PERIOD_DIFF:
		            case self::PI:
		            case self::POINTFROMTEXT:
		            case self::POINTFROMWKB:
		            case self::POINTN:
		            case self::POLYFROMTEXT:
		            case self::POLYFROMWKB:
		            case self::POLYGONFROMTEXT:
		            case self::POLYGONFROMWKB:
		            case self::POW:
		            case self::POWER:
		            case self::QUOTE:
		            case self::RADIANS:
		            case self::RAND:
		            case self::RANDOM:
		            case self::RANDOM_BYTES:
		            case self::RELEASE_LOCK:
		            case self::REVERSE:
		            case self::ROUND:
		            case self::ROW_COUNT:
		            case self::RPAD:
		            case self::RTRIM:
		            case self::SEC_TO_TIME:
		            case self::SECONDARY_ENGINE_ATTRIBUTE:
		            case self::SESSION_USER:
		            case self::SHA:
		            case self::SHA1:
		            case self::SHA2:
		            case self::SCHEMA_NAME:
		            case self::SIGN:
		            case self::SIN:
		            case self::SLEEP:
		            case self::SOUNDEX:
		            case self::SQL_THREAD_WAIT_AFTER_GTIDS:
		            case self::SQRT:
		            case self::SRID:
		            case self::STARTPOINT:
		            case self::STRCMP:
		            case self::STR_TO_DATE:
		            case self::ST_AREA:
		            case self::ST_ASBINARY:
		            case self::ST_ASTEXT:
		            case self::ST_ASWKB:
		            case self::ST_ASWKT:
		            case self::ST_BUFFER:
		            case self::ST_CENTROID:
		            case self::ST_CONTAINS:
		            case self::ST_CROSSES:
		            case self::ST_DIFFERENCE:
		            case self::ST_DIMENSION:
		            case self::ST_DISJOINT:
		            case self::ST_DISTANCE:
		            case self::ST_ENDPOINT:
		            case self::ST_ENVELOPE:
		            case self::ST_EQUALS:
		            case self::ST_EXTERIORRING:
		            case self::ST_GEOMCOLLFROMTEXT:
		            case self::ST_GEOMCOLLFROMTXT:
		            case self::ST_GEOMCOLLFROMWKB:
		            case self::ST_GEOMETRYCOLLECTIONFROMTEXT:
		            case self::ST_GEOMETRYCOLLECTIONFROMWKB:
		            case self::ST_GEOMETRYFROMTEXT:
		            case self::ST_GEOMETRYFROMWKB:
		            case self::ST_GEOMETRYN:
		            case self::ST_GEOMETRYTYPE:
		            case self::ST_GEOMFROMTEXT:
		            case self::ST_GEOMFROMWKB:
		            case self::ST_INTERIORRINGN:
		            case self::ST_INTERSECTION:
		            case self::ST_INTERSECTS:
		            case self::ST_ISCLOSED:
		            case self::ST_ISEMPTY:
		            case self::ST_ISSIMPLE:
		            case self::ST_LINEFROMTEXT:
		            case self::ST_LINEFROMWKB:
		            case self::ST_LINESTRINGFROMTEXT:
		            case self::ST_LINESTRINGFROMWKB:
		            case self::ST_NUMGEOMETRIES:
		            case self::ST_NUMINTERIORRING:
		            case self::ST_NUMINTERIORRINGS:
		            case self::ST_NUMPOINTS:
		            case self::ST_OVERLAPS:
		            case self::ST_POINTFROMTEXT:
		            case self::ST_POINTFROMWKB:
		            case self::ST_POINTN:
		            case self::ST_POLYFROMTEXT:
		            case self::ST_POLYFROMWKB:
		            case self::ST_POLYGONFROMTEXT:
		            case self::ST_POLYGONFROMWKB:
		            case self::ST_SRID:
		            case self::ST_STARTPOINT:
		            case self::ST_SYMDIFFERENCE:
		            case self::ST_TOUCHES:
		            case self::ST_UNION:
		            case self::ST_WITHIN:
		            case self::ST_X:
		            case self::ST_Y:
		            case self::SUBDATE:
		            case self::SUBSTRING_INDEX:
		            case self::SUBTIME:
		            case self::SYSTEM_USER:
		            case self::TAN:
		            case self::TIMEDIFF:
		            case self::TIMESTAMPADD:
		            case self::TIMESTAMPDIFF:
		            case self::TIME_FORMAT:
		            case self::TIME_TO_SEC:
		            case self::TOUCHES:
		            case self::TO_BASE64:
		            case self::TO_DAYS:
		            case self::TO_SECONDS:
		            case self::TP_CONNECTION_ADMIN:
		            case self::UCASE:
		            case self::UNCOMPRESS:
		            case self::UNCOMPRESSED_LENGTH:
		            case self::UNHEX:
		            case self::UNIX_TIMESTAMP:
		            case self::UPDATEXML:
		            case self::UPPER:
		            case self::UUID:
		            case self::UUID_SHORT:
		            case self::VALIDATE_PASSWORD_STRENGTH:
		            case self::VERSION:
		            case self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
		            case self::WEEKDAY:
		            case self::WEEKOFYEAR:
		            case self::WEIGHT_STRING:
		            case self::WITHIN:
		            case self::YEARWEEK:
		            case self::Y_FUNCTION:
		            case self::X_FUNCTION:
		            case self::MOD:
		            case self::CHARSET_REVERSE_QOUTE_STRING:
		            case self::STRING_LITERAL:
		            case self::ID:
		            	$this->setState(3577);
		            	$this->tableName();
		            	$this->setState(3580);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::DOT) {
		            		$this->setState(3578);
		            		$this->match(self::DOT);
		            		$this->setState(3579);
		            		$this->match(self::STAR);
		            	}
		            	$this->setState(3590);
		            	$this->errorHandler->sync($this);

		            	$_la = $this->input->LA(1);
		            	while ($_la === self::COMMA) {
		            		$this->setState(3582);
		            		$this->match(self::COMMA);
		            		$this->setState(3583);
		            		$this->tableName();
		            		$this->setState(3586);
		            		$this->errorHandler->sync($this);
		            		$_la = $this->input->LA(1);

		            		if ($_la === self::DOT) {
		            			$this->setState(3584);
		            			$this->match(self::DOT);
		            			$this->setState(3585);
		            			$this->match(self::STAR);
		            		}
		            		$this->setState(3592);
		            		$this->errorHandler->sync($this);
		            		$_la = $this->input->LA(1);
		            	}
		            	$this->setState(3593);
		            	$this->match(self::FROM);
		            	$this->setState(3594);
		            	$this->tableSources();
		            	break;

		            case self::FROM:
		            	$this->setState(3596);
		            	$this->match(self::FROM);
		            	$this->setState(3597);
		            	$this->tableName();
		            	$this->setState(3600);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::DOT) {
		            		$this->setState(3598);
		            		$this->match(self::DOT);
		            		$this->setState(3599);
		            		$this->match(self::STAR);
		            	}
		            	$this->setState(3610);
		            	$this->errorHandler->sync($this);

		            	$_la = $this->input->LA(1);
		            	while ($_la === self::COMMA) {
		            		$this->setState(3602);
		            		$this->match(self::COMMA);
		            		$this->setState(3603);
		            		$this->tableName();
		            		$this->setState(3606);
		            		$this->errorHandler->sync($this);
		            		$_la = $this->input->LA(1);

		            		if ($_la === self::DOT) {
		            			$this->setState(3604);
		            			$this->match(self::DOT);
		            			$this->setState(3605);
		            			$this->match(self::STAR);
		            		}
		            		$this->setState(3612);
		            		$this->errorHandler->sync($this);
		            		$_la = $this->input->LA(1);
		            	}
		            	$this->setState(3613);
		            	$this->match(self::USING);
		            	$this->setState(3614);
		            	$this->tableSources();
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		        $this->setState(3620);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::WHERE) {
		        	$this->setState(3618);
		        	$this->match(self::WHERE);
		        	$this->setState(3619);
		        	$this->recursiveExpression(0);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function handlerOpenStatement(): Context\HandlerOpenStatementContext
		{
		    $localContext = new Context\HandlerOpenStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 218, self::RULE_handlerOpenStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3622);
		        $this->match(self::HANDLER);
		        $this->setState(3623);
		        $this->tableName();
		        $this->setState(3624);
		        $this->match(self::OPEN);
		        $this->setState(3629);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 508, $this->ctx)) {
		            case 1:
		        	    $this->setState(3626);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::AS) {
		        	    	$this->setState(3625);
		        	    	$this->match(self::AS);
		        	    }
		        	    $this->setState(3628);
		        	    $this->uid();
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function handlerReadIndexStatement(): Context\HandlerReadIndexStatementContext
		{
		    $localContext = new Context\HandlerReadIndexStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 220, self::RULE_handlerReadIndexStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3631);
		        $this->match(self::HANDLER);
		        $this->setState(3632);
		        $this->tableName();
		        $this->setState(3633);
		        $this->match(self::READ);
		        $this->setState(3634);
		        $localContext->index = $this->uid();
		        $this->setState(3641);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::EQUAL_SYMBOL:
		            case self::GREATER_SYMBOL:
		            case self::LESS_SYMBOL:
		            case self::EXCLAMATION_SYMBOL:
		            	$this->setState(3635);
		            	$this->comparisonOperator();
		            	$this->setState(3636);
		            	$this->match(self::LR_BRACKET);
		            	$this->setState(3637);
		            	$this->constants();
		            	$this->setState(3638);
		            	$this->match(self::RR_BRACKET);
		            	break;

		            case self::FIRST:
		            case self::LAST:
		            case self::NEXT:
		            case self::PREV:
		            	$this->setState(3640);

		            	$localContext->moveOrder = $this->input->LT(1);
		            	$_la = $this->input->LA(1);

		            	if (!($_la === self::FIRST || $_la === self::LAST || $_la === self::NEXT || $_la === self::PREV)) {
		            		    $localContext->moveOrder = $this->errorHandler->recoverInline($this);
		            	} else {
		            		if ($this->input->LA(1) === Token::EOF) {
		            		    $this->matchedEOF = true;
		            	    }

		            		$this->errorHandler->reportMatch($this);
		            		$this->consume();
		            	}
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		        $this->setState(3645);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::WHERE) {
		        	$this->setState(3643);
		        	$this->match(self::WHERE);
		        	$this->setState(3644);
		        	$this->recursiveExpression(0);
		        }
		        $this->setState(3649);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::LIMIT) {
		        	$this->setState(3647);
		        	$this->match(self::LIMIT);
		        	$this->setState(3648);
		        	$this->limitClauseAtom();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function handlerReadStatement(): Context\HandlerReadStatementContext
		{
		    $localContext = new Context\HandlerReadStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 222, self::RULE_handlerReadStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3651);
		        $this->match(self::HANDLER);
		        $this->setState(3652);
		        $this->tableName();
		        $this->setState(3653);
		        $this->match(self::READ);
		        $this->setState(3654);

		        $localContext->moveOrder = $this->input->LT(1);
		        $_la = $this->input->LA(1);

		        if (!($_la === self::FIRST || $_la === self::NEXT)) {
		        	    $localContext->moveOrder = $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		        $this->setState(3657);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::WHERE) {
		        	$this->setState(3655);
		        	$this->match(self::WHERE);
		        	$this->setState(3656);
		        	$this->recursiveExpression(0);
		        }
		        $this->setState(3661);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::LIMIT) {
		        	$this->setState(3659);
		        	$this->match(self::LIMIT);
		        	$this->setState(3660);
		        	$this->limitClauseAtom();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function handlerCloseStatement(): Context\HandlerCloseStatementContext
		{
		    $localContext = new Context\HandlerCloseStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 224, self::RULE_handlerCloseStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3663);
		        $this->match(self::HANDLER);
		        $this->setState(3664);
		        $this->tableName();
		        $this->setState(3665);
		        $this->match(self::CLOSE);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function singleUpdateStatement(): Context\SingleUpdateStatementContext
		{
		    $localContext = new Context\SingleUpdateStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 226, self::RULE_singleUpdateStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3667);
		        $this->match(self::UPDATE);
		        $this->setState(3669);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::LOW_PRIORITY) {
		        	$this->setState(3668);
		        	$localContext->priority = $this->match(self::LOW_PRIORITY);
		        }
		        $this->setState(3672);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::IGNORE) {
		        	$this->setState(3671);
		        	$this->match(self::IGNORE);
		        }
		        $this->setState(3674);
		        $this->tableName();
		        $this->setState(3679);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if (((($_la) & ~0x3f) === 0 && ((1 << $_la) & 756891332513126400) !== 0) || (((($_la - 73)) & ~0x3f) === 0 && ((1 << ($_la - 73)) & 146666055071174737) !== 0) || (((($_la - 140)) & ~0x3f) === 0 && ((1 << ($_la - 140)) & 268698883) !== 0) || (((($_la - 217)) & ~0x3f) === 0 && ((1 << ($_la - 217)) & -17174494689) !== 0) || (((($_la - 281)) & ~0x3f) === 0 && ((1 << ($_la - 281)) & -1099511627777) !== 0) || (((($_la - 345)) & ~0x3f) === 0 && ((1 << ($_la - 345)) & -2882305960540372993) !== 0) || (((($_la - 409)) & ~0x3f) === 0 && ((1 << ($_la - 409)) & -4398063288321) !== 0) || (((($_la - 473)) & ~0x3f) === 0 && ((1 << ($_la - 473)) & -16325548649218049) !== 0) || (((($_la - 537)) & ~0x3f) === 0 && ((1 << ($_la - 537)) & -81064793296864001) !== 0) || (((($_la - 601)) & ~0x3f) === 0 && ((1 << ($_la - 601)) & -68719476801) !== 0) || (((($_la - 665)) & ~0x3f) === 0 && ((1 << ($_la - 665)) & -22236531750340609) !== 0) || (((($_la - 729)) & ~0x3f) === 0 && ((1 << ($_la - 729)) & -65) !== 0) || (((($_la - 793)) & ~0x3f) === 0 && ((1 << ($_la - 793)) & -6145) !== 0) || (((($_la - 857)) & ~0x3f) === 0 && ((1 << ($_la - 857)) & -1) !== 0) || (((($_la - 921)) & ~0x3f) === 0 && ((1 << ($_la - 921)) & -1) !== 0) || (((($_la - 985)) & ~0x3f) === 0 && ((1 << ($_la - 985)) & -1) !== 0) || (((($_la - 1049)) & ~0x3f) === 0 && ((1 << ($_la - 1049)) & 576460752303423487) !== 0) || (((($_la - 1123)) & ~0x3f) === 0 && ((1 << ($_la - 1123)) & 8627683329) !== 0)) {
		        	$this->setState(3676);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);

		        	if ($_la === self::AS) {
		        		$this->setState(3675);
		        		$this->match(self::AS);
		        	}
		        	$this->setState(3678);
		        	$this->uid();
		        }
		        $this->setState(3681);
		        $this->match(self::SET);
		        $this->setState(3682);
		        $this->updatedElement();
		        $this->setState(3687);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::COMMA) {
		        	$this->setState(3683);
		        	$this->match(self::COMMA);
		        	$this->setState(3684);
		        	$this->updatedElement();
		        	$this->setState(3689);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		        $this->setState(3692);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::WHERE) {
		        	$this->setState(3690);
		        	$this->match(self::WHERE);
		        	$this->setState(3691);
		        	$this->recursiveExpression(0);
		        }
		        $this->setState(3695);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::ORDER) {
		        	$this->setState(3694);
		        	$this->orderByClause();
		        }
		        $this->setState(3698);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::LIMIT) {
		        	$this->setState(3697);
		        	$this->limitClause();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function multipleUpdateStatement(): Context\MultipleUpdateStatementContext
		{
		    $localContext = new Context\MultipleUpdateStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 228, self::RULE_multipleUpdateStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3700);
		        $this->match(self::UPDATE);
		        $this->setState(3702);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::LOW_PRIORITY) {
		        	$this->setState(3701);
		        	$localContext->priority = $this->match(self::LOW_PRIORITY);
		        }
		        $this->setState(3705);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::IGNORE) {
		        	$this->setState(3704);
		        	$this->match(self::IGNORE);
		        }
		        $this->setState(3707);
		        $this->tableSources();
		        $this->setState(3708);
		        $this->match(self::SET);
		        $this->setState(3709);
		        $this->updatedElement();
		        $this->setState(3714);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::COMMA) {
		        	$this->setState(3710);
		        	$this->match(self::COMMA);
		        	$this->setState(3711);
		        	$this->updatedElement();
		        	$this->setState(3716);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		        $this->setState(3719);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::WHERE) {
		        	$this->setState(3717);
		        	$this->match(self::WHERE);
		        	$this->setState(3718);
		        	$this->recursiveExpression(0);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function orderByClause(): Context\OrderByClauseContext
		{
		    $localContext = new Context\OrderByClauseContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 230, self::RULE_orderByClause);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3721);
		        $this->match(self::ORDER);
		        $this->setState(3722);
		        $this->match(self::BY);
		        $this->setState(3723);
		        $this->orderByExpression();
		        $this->setState(3728);
		        $this->errorHandler->sync($this);

		        $alt = $this->getInterpreter()->adaptivePredict($this->input, 526, $this->ctx);

		        while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
		        	if ($alt === 1) {
		        		$this->setState(3724);
		        		$this->match(self::COMMA);
		        		$this->setState(3725);
		        		$this->orderByExpression(); 
		        	}

		        	$this->setState(3730);
		        	$this->errorHandler->sync($this);

		        	$alt = $this->getInterpreter()->adaptivePredict($this->input, 526, $this->ctx);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function orderByExpression(): Context\OrderByExpressionContext
		{
		    $localContext = new Context\OrderByExpressionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 232, self::RULE_orderByExpression);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3731);
		        $this->recursiveExpression(0);
		        $this->setState(3733);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 527, $this->ctx)) {
		            case 1:
		        	    $this->setState(3732);

		        	    $localContext->order = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::ASC || $_la === self::DESC)) {
		        	    	    $localContext->order = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function tableSources(): Context\TableSourcesContext
		{
		    $localContext = new Context\TableSourcesContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 234, self::RULE_tableSources);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3735);
		        $this->tableSource();
		        $this->setState(3740);
		        $this->errorHandler->sync($this);

		        $alt = $this->getInterpreter()->adaptivePredict($this->input, 528, $this->ctx);

		        while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
		        	if ($alt === 1) {
		        		$this->setState(3736);
		        		$this->match(self::COMMA);
		        		$this->setState(3737);
		        		$this->tableSource(); 
		        	}

		        	$this->setState(3742);
		        	$this->errorHandler->sync($this);

		        	$alt = $this->getInterpreter()->adaptivePredict($this->input, 528, $this->ctx);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function tableSource(): Context\TableSourceContext
		{
		    $localContext = new Context\TableSourceContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 236, self::RULE_tableSource);

		    try {
		        $this->setState(3761);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 531, $this->ctx)) {
		        	case 1:
		        	    $localContext = new Context\TableSourceBaseContext($localContext);
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(3743);
		        	    $this->tableSourceItem();
		        	    $this->setState(3747);
		        	    $this->errorHandler->sync($this);

		        	    $alt = $this->getInterpreter()->adaptivePredict($this->input, 529, $this->ctx);

		        	    while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
		        	    	if ($alt === 1) {
		        	    		$this->setState(3744);
		        	    		$this->joinPart(); 
		        	    	}

		        	    	$this->setState(3749);
		        	    	$this->errorHandler->sync($this);

		        	    	$alt = $this->getInterpreter()->adaptivePredict($this->input, 529, $this->ctx);
		        	    }
		        	break;

		        	case 2:
		        	    $localContext = new Context\TableSourceNestedContext($localContext);
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(3750);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(3751);
		        	    $this->tableSourceItem();
		        	    $this->setState(3755);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ((((($_la - 34)) & ~0x3f) === 0 && ((1 << ($_la - 34)) & -9150751492863426559) !== 0) || (((($_la - 113)) & ~0x3f) === 0 && ((1 << ($_la - 113)) & 288230410511450113) !== 0)) {
		        	    	$this->setState(3752);
		        	    	$this->joinPart();
		        	    	$this->setState(3757);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	    $this->setState(3758);
		        	    $this->match(self::RR_BRACKET);
		        	break;

		        	case 3:
		        	    $localContext = new Context\TableJsonContext($localContext);
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(3760);
		        	    $this->jsonTable();
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function tableSourceItem(): Context\TableSourceItemContext
		{
		    $localContext = new Context\TableSourceItemContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 238, self::RULE_tableSourceItem);

		    try {
		        $this->setState(3803);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 539, $this->ctx)) {
		        	case 1:
		        	    $localContext = new Context\AtomTableItemContext($localContext);
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(3763);
		        	    $this->tableName();
		        	    $this->setState(3769);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::PARTITION) {
		        	    	$this->setState(3764);
		        	    	$this->match(self::PARTITION);
		        	    	$this->setState(3765);
		        	    	$this->match(self::LR_BRACKET);
		        	    	$this->setState(3766);
		        	    	$this->uidList();
		        	    	$this->setState(3767);
		        	    	$this->match(self::RR_BRACKET);
		        	    }
		        	    $this->setState(3775);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 534, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(3772);
		        	    	    $this->errorHandler->sync($this);
		        	    	    $_la = $this->input->LA(1);

		        	    	    if ($_la === self::AS) {
		        	    	    	$this->setState(3771);
		        	    	    	$this->match(self::AS);
		        	    	    }
		        	    	    $this->setState(3774);
		        	    	    $localContext->alias = $this->uid();
		        	    	break;
		        	    }
		        	    $this->setState(3785);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 536, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(3777);
		        	    	    $this->indexHint();
		        	    	    $this->setState(3782);
		        	    	    $this->errorHandler->sync($this);

		        	    	    $alt = $this->getInterpreter()->adaptivePredict($this->input, 535, $this->ctx);

		        	    	    while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
		        	    	    	if ($alt === 1) {
		        	    	    		$this->setState(3778);
		        	    	    		$this->match(self::COMMA);
		        	    	    		$this->setState(3779);
		        	    	    		$this->indexHint(); 
		        	    	    	}

		        	    	    	$this->setState(3784);
		        	    	    	$this->errorHandler->sync($this);

		        	    	    	$alt = $this->getInterpreter()->adaptivePredict($this->input, 535, $this->ctx);
		        	    	    }
		        	    	break;
		        	    }
		        	break;

		        	case 2:
		        	    $localContext = new Context\SubqueryTableItemContext($localContext);
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(3792);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 537, $this->ctx)) {
		        	    	case 1:
		        	    	    $this->setState(3787);
		        	    	    $this->selectStatement();
		        	    	break;

		        	    	case 2:
		        	    	    $this->setState(3788);
		        	    	    $this->match(self::LR_BRACKET);
		        	    	    $this->setState(3789);
		        	    	    $localContext->parenthesisSubquery = $this->selectStatement();
		        	    	    $this->setState(3790);
		        	    	    $this->match(self::RR_BRACKET);
		        	    	break;
		        	    }
		        	    $this->setState(3795);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::AS) {
		        	    	$this->setState(3794);
		        	    	$this->match(self::AS);
		        	    }
		        	    $this->setState(3797);
		        	    $localContext->alias = $this->uid();
		        	break;

		        	case 3:
		        	    $localContext = new Context\TableSourcesItemContext($localContext);
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(3799);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(3800);
		        	    $this->tableSources();
		        	    $this->setState(3801);
		        	    $this->match(self::RR_BRACKET);
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function indexHint(): Context\IndexHintContext
		{
		    $localContext = new Context\IndexHintContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 240, self::RULE_indexHint);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3805);

		        $localContext->indexHintAction = $this->input->LT(1);
		        $_la = $this->input->LA(1);

		        if (!($_la === self::FORCE || $_la === self::IGNORE || $_la === self::USE)) {
		        	    $localContext->indexHintAction = $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		        $this->setState(3806);

		        $localContext->keyFormat = $this->input->LT(1);
		        $_la = $this->input->LA(1);

		        if (!($_la === self::INDEX || $_la === self::KEY)) {
		        	    $localContext->keyFormat = $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		        $this->setState(3809);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::FOR) {
		        	$this->setState(3807);
		        	$this->match(self::FOR);
		        	$this->setState(3808);
		        	$this->indexHintType();
		        }
		        $this->setState(3811);
		        $this->match(self::LR_BRACKET);
		        $this->setState(3812);
		        $this->uidList();
		        $this->setState(3813);
		        $this->match(self::RR_BRACKET);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function indexHintType(): Context\IndexHintTypeContext
		{
		    $localContext = new Context\IndexHintTypeContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 242, self::RULE_indexHintType);

		    try {
		        $this->setState(3820);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::JOIN:
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(3815);
		            	$this->match(self::JOIN);
		            	break;

		            case self::ORDER:
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(3816);
		            	$this->match(self::ORDER);
		            	$this->setState(3817);
		            	$this->match(self::BY);
		            	break;

		            case self::GROUP:
		            	$this->enterOuterAlt($localContext, 3);
		            	$this->setState(3818);
		            	$this->match(self::GROUP);
		            	$this->setState(3819);
		            	$this->match(self::BY);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function joinPart(): Context\JoinPartContext
		{
		    $localContext = new Context\JoinPartContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 244, self::RULE_joinPart);

		    try {
		        $this->setState(3869);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::CROSS:
		            case self::INNER:
		            case self::JOIN:
		            	$localContext = new Context\InnerJoinContext($localContext);
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(3823);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::CROSS || $_la === self::INNER) {
		            		$this->setState(3822);

		            		$_la = $this->input->LA(1);

		            		if (!($_la === self::CROSS || $_la === self::INNER)) {
		            		$this->errorHandler->recoverInline($this);
		            		} else {
		            			if ($this->input->LA(1) === Token::EOF) {
		            			    $this->matchedEOF = true;
		            		    }

		            			$this->errorHandler->reportMatch($this);
		            			$this->consume();
		            		}
		            	}
		            	$this->setState(3825);
		            	$this->match(self::JOIN);
		            	$this->setState(3827);
		            	$this->errorHandler->sync($this);

		            	switch ($this->getInterpreter()->adaptivePredict($this->input, 543, $this->ctx)) {
		            	    case 1:
		            		    $this->setState(3826);
		            		    $this->match(self::LATERAL);
		            		break;
		            	}
		            	$this->setState(3829);
		            	$this->tableSourceItem();
		            	$this->setState(3833);
		            	$this->errorHandler->sync($this);

		            	$alt = $this->getInterpreter()->adaptivePredict($this->input, 544, $this->ctx);

		            	while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
		            		if ($alt === 1) {
		            			$this->setState(3830);
		            			$this->joinSpec(); 
		            		}

		            		$this->setState(3835);
		            		$this->errorHandler->sync($this);

		            		$alt = $this->getInterpreter()->adaptivePredict($this->input, 544, $this->ctx);
		            	}
		            	break;

		            case self::STRAIGHT_JOIN:
		            	$localContext = new Context\StraightJoinContext($localContext);
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(3836);
		            	$this->match(self::STRAIGHT_JOIN);
		            	$this->setState(3837);
		            	$this->tableSourceItem();
		            	$this->setState(3842);
		            	$this->errorHandler->sync($this);

		            	$alt = $this->getInterpreter()->adaptivePredict($this->input, 545, $this->ctx);

		            	while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
		            		if ($alt === 1) {
		            			$this->setState(3838);
		            			$this->match(self::ON);
		            			$this->setState(3839);
		            			$this->recursiveExpression(0); 
		            		}

		            		$this->setState(3844);
		            		$this->errorHandler->sync($this);

		            		$alt = $this->getInterpreter()->adaptivePredict($this->input, 545, $this->ctx);
		            	}
		            	break;

		            case self::LEFT:
		            case self::RIGHT:
		            	$localContext = new Context\OuterJoinContext($localContext);
		            	$this->enterOuterAlt($localContext, 3);
		            	$this->setState(3845);

		            	$_la = $this->input->LA(1);

		            	if (!($_la === self::LEFT || $_la === self::RIGHT)) {
		            	$this->errorHandler->recoverInline($this);
		            	} else {
		            		if ($this->input->LA(1) === Token::EOF) {
		            		    $this->matchedEOF = true;
		            	    }

		            		$this->errorHandler->reportMatch($this);
		            		$this->consume();
		            	}
		            	$this->setState(3847);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::OUTER) {
		            		$this->setState(3846);
		            		$this->match(self::OUTER);
		            	}
		            	$this->setState(3849);
		            	$this->match(self::JOIN);
		            	$this->setState(3851);
		            	$this->errorHandler->sync($this);

		            	switch ($this->getInterpreter()->adaptivePredict($this->input, 547, $this->ctx)) {
		            	    case 1:
		            		    $this->setState(3850);
		            		    $this->match(self::LATERAL);
		            		break;
		            	}
		            	$this->setState(3853);
		            	$this->tableSourceItem();
		            	$this->setState(3857);
		            	$this->errorHandler->sync($this);

		            	$alt = $this->getInterpreter()->adaptivePredict($this->input, 548, $this->ctx);

		            	while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
		            		if ($alt === 1) {
		            			$this->setState(3854);
		            			$this->joinSpec(); 
		            		}

		            		$this->setState(3859);
		            		$this->errorHandler->sync($this);

		            		$alt = $this->getInterpreter()->adaptivePredict($this->input, 548, $this->ctx);
		            	}
		            	break;

		            case self::NATURAL:
		            	$localContext = new Context\NaturalJoinContext($localContext);
		            	$this->enterOuterAlt($localContext, 4);
		            	$this->setState(3860);
		            	$this->match(self::NATURAL);
		            	$this->setState(3865);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::LEFT || $_la === self::RIGHT) {
		            		$this->setState(3861);

		            		$_la = $this->input->LA(1);

		            		if (!($_la === self::LEFT || $_la === self::RIGHT)) {
		            		$this->errorHandler->recoverInline($this);
		            		} else {
		            			if ($this->input->LA(1) === Token::EOF) {
		            			    $this->matchedEOF = true;
		            		    }

		            			$this->errorHandler->reportMatch($this);
		            			$this->consume();
		            		}
		            		$this->setState(3863);
		            		$this->errorHandler->sync($this);
		            		$_la = $this->input->LA(1);

		            		if ($_la === self::OUTER) {
		            			$this->setState(3862);
		            			$this->match(self::OUTER);
		            		}
		            	}
		            	$this->setState(3867);
		            	$this->match(self::JOIN);
		            	$this->setState(3868);
		            	$this->tableSourceItem();
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function joinSpec(): Context\JoinSpecContext
		{
		    $localContext = new Context\JoinSpecContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 246, self::RULE_joinSpec);

		    try {
		        $this->setState(3878);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::ON:
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(3871);
		            	$this->match(self::ON);
		            	$this->setState(3872);
		            	$this->recursiveExpression(0);
		            	break;

		            case self::USING:
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(3873);
		            	$this->match(self::USING);
		            	$this->setState(3874);
		            	$this->match(self::LR_BRACKET);
		            	$this->setState(3875);
		            	$this->uidList();
		            	$this->setState(3876);
		            	$this->match(self::RR_BRACKET);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function queryExpression(): Context\QueryExpressionContext
		{
		    $localContext = new Context\QueryExpressionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 248, self::RULE_queryExpression);

		    try {
		        $this->setState(3888);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 553, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(3880);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(3881);
		        	    $this->querySpecification();
		        	    $this->setState(3882);
		        	    $this->match(self::RR_BRACKET);
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(3884);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(3885);
		        	    $this->queryExpression();
		        	    $this->setState(3886);
		        	    $this->match(self::RR_BRACKET);
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function queryExpressionNointo(): Context\QueryExpressionNointoContext
		{
		    $localContext = new Context\QueryExpressionNointoContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 250, self::RULE_queryExpressionNointo);

		    try {
		        $this->setState(3898);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 554, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(3890);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(3891);
		        	    $this->querySpecificationNointo();
		        	    $this->setState(3892);
		        	    $this->match(self::RR_BRACKET);
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(3894);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(3895);
		        	    $this->queryExpressionNointo();
		        	    $this->setState(3896);
		        	    $this->match(self::RR_BRACKET);
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function querySpecification(): Context\QuerySpecificationContext
		{
		    $localContext = new Context\QuerySpecificationContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 252, self::RULE_querySpecification);

		    try {
		        $this->setState(3954);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 569, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(3900);
		        	    $this->match(self::SELECT);
		        	    $this->setState(3904);
		        	    $this->errorHandler->sync($this);

		        	    $alt = $this->getInterpreter()->adaptivePredict($this->input, 555, $this->ctx);

		        	    while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
		        	    	if ($alt === 1) {
		        	    		$this->setState(3901);
		        	    		$this->selectSpec(); 
		        	    	}

		        	    	$this->setState(3906);
		        	    	$this->errorHandler->sync($this);

		        	    	$alt = $this->getInterpreter()->adaptivePredict($this->input, 555, $this->ctx);
		        	    }
		        	    $this->setState(3907);
		        	    $this->selectElements();
		        	    $this->setState(3909);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::INTO) {
		        	    	$this->setState(3908);
		        	    	$this->selectIntoExpression();
		        	    }
		        	    $this->setState(3911);
		        	    $this->fromClause();
		        	    $this->setState(3913);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 557, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(3912);
		        	    	    $this->groupByClause();
		        	    	break;
		        	    }
		        	    $this->setState(3916);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::HAVING) {
		        	    	$this->setState(3915);
		        	    	$this->havingClause();
		        	    }
		        	    $this->setState(3919);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::WINDOW) {
		        	    	$this->setState(3918);
		        	    	$this->windowClause();
		        	    }
		        	    $this->setState(3922);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 560, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(3921);
		        	    	    $this->orderByClause();
		        	    	break;
		        	    }
		        	    $this->setState(3925);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 561, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(3924);
		        	    	    $this->limitClause();
		        	    	break;
		        	    }
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(3927);
		        	    $this->match(self::SELECT);
		        	    $this->setState(3931);
		        	    $this->errorHandler->sync($this);

		        	    $alt = $this->getInterpreter()->adaptivePredict($this->input, 562, $this->ctx);

		        	    while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
		        	    	if ($alt === 1) {
		        	    		$this->setState(3928);
		        	    		$this->selectSpec(); 
		        	    	}

		        	    	$this->setState(3933);
		        	    	$this->errorHandler->sync($this);

		        	    	$alt = $this->getInterpreter()->adaptivePredict($this->input, 562, $this->ctx);
		        	    }
		        	    $this->setState(3934);
		        	    $this->selectElements();
		        	    $this->setState(3935);
		        	    $this->fromClause();
		        	    $this->setState(3937);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 563, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(3936);
		        	    	    $this->groupByClause();
		        	    	break;
		        	    }
		        	    $this->setState(3940);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::HAVING) {
		        	    	$this->setState(3939);
		        	    	$this->havingClause();
		        	    }
		        	    $this->setState(3943);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::WINDOW) {
		        	    	$this->setState(3942);
		        	    	$this->windowClause();
		        	    }
		        	    $this->setState(3946);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 566, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(3945);
		        	    	    $this->orderByClause();
		        	    	break;
		        	    }
		        	    $this->setState(3949);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 567, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(3948);
		        	    	    $this->limitClause();
		        	    	break;
		        	    }
		        	    $this->setState(3952);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::INTO) {
		        	    	$this->setState(3951);
		        	    	$this->selectIntoExpression();
		        	    }
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function querySpecificationNointo(): Context\QuerySpecificationNointoContext
		{
		    $localContext = new Context\QuerySpecificationNointoContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 254, self::RULE_querySpecificationNointo);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3956);
		        $this->match(self::SELECT);
		        $this->setState(3960);
		        $this->errorHandler->sync($this);

		        $alt = $this->getInterpreter()->adaptivePredict($this->input, 570, $this->ctx);

		        while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
		        	if ($alt === 1) {
		        		$this->setState(3957);
		        		$this->selectSpec(); 
		        	}

		        	$this->setState(3962);
		        	$this->errorHandler->sync($this);

		        	$alt = $this->getInterpreter()->adaptivePredict($this->input, 570, $this->ctx);
		        }
		        $this->setState(3963);
		        $this->selectElements();
		        $this->setState(3964);
		        $this->fromClause();
		        $this->setState(3966);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 571, $this->ctx)) {
		            case 1:
		        	    $this->setState(3965);
		        	    $this->groupByClause();
		        	break;
		        }
		        $this->setState(3969);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::HAVING) {
		        	$this->setState(3968);
		        	$this->havingClause();
		        }
		        $this->setState(3972);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::WINDOW) {
		        	$this->setState(3971);
		        	$this->windowClause();
		        }
		        $this->setState(3975);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 574, $this->ctx)) {
		            case 1:
		        	    $this->setState(3974);
		        	    $this->orderByClause();
		        	break;
		        }
		        $this->setState(3978);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 575, $this->ctx)) {
		            case 1:
		        	    $this->setState(3977);
		        	    $this->limitClause();
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function unionParenthesis(): Context\UnionParenthesisContext
		{
		    $localContext = new Context\UnionParenthesisContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 256, self::RULE_unionParenthesis);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3980);
		        $this->match(self::UNION);
		        $this->setState(3982);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::ALL || $_la === self::DISTINCT) {
		        	$this->setState(3981);

		        	$localContext->unionType = $this->input->LT(1);
		        	$_la = $this->input->LA(1);

		        	if (!($_la === self::ALL || $_la === self::DISTINCT)) {
		        		    $localContext->unionType = $this->errorHandler->recoverInline($this);
		        	} else {
		        		if ($this->input->LA(1) === Token::EOF) {
		        		    $this->matchedEOF = true;
		        	    }

		        		$this->errorHandler->reportMatch($this);
		        		$this->consume();
		        	}
		        }
		        $this->setState(3984);
		        $this->queryExpressionNointo();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function unionStatement(): Context\UnionStatementContext
		{
		    $localContext = new Context\UnionStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 258, self::RULE_unionStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3986);
		        $this->match(self::UNION);
		        $this->setState(3988);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::ALL || $_la === self::DISTINCT) {
		        	$this->setState(3987);

		        	$localContext->unionType = $this->input->LT(1);
		        	$_la = $this->input->LA(1);

		        	if (!($_la === self::ALL || $_la === self::DISTINCT)) {
		        		    $localContext->unionType = $this->errorHandler->recoverInline($this);
		        	} else {
		        		if ($this->input->LA(1) === Token::EOF) {
		        		    $this->matchedEOF = true;
		        	    }

		        		$this->errorHandler->reportMatch($this);
		        		$this->consume();
		        	}
		        }
		        $this->setState(3992);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::SELECT:
		            	$this->setState(3990);
		            	$this->querySpecificationNointo();
		            	break;

		            case self::LR_BRACKET:
		            	$this->setState(3991);
		            	$this->queryExpressionNointo();
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function lateralStatement(): Context\LateralStatementContext
		{
		    $localContext = new Context\LateralStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 260, self::RULE_lateralStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3994);
		        $this->match(self::LATERAL);
		        $this->setState(4009);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 582, $this->ctx)) {
		        	case 1:
		        	    $this->setState(3995);
		        	    $this->querySpecificationNointo();
		        	break;

		        	case 2:
		        	    $this->setState(3996);
		        	    $this->queryExpressionNointo();
		        	break;

		        	case 3:
		        	    $this->setState(3997);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(4000);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->input->LA(1)) {
		        	        case self::SELECT:
		        	        	$this->setState(3998);
		        	        	$this->querySpecificationNointo();
		        	        	break;

		        	        case self::LR_BRACKET:
		        	        	$this->setState(3999);
		        	        	$this->queryExpressionNointo();
		        	        	break;

		        	    default:
		        	    	throw new NoViableAltException($this);
		        	    }
		        	    $this->setState(4002);
		        	    $this->match(self::RR_BRACKET);
		        	    $this->setState(4007);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 581, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(4004);
		        	    	    $this->errorHandler->sync($this);
		        	    	    $_la = $this->input->LA(1);

		        	    	    if ($_la === self::AS) {
		        	    	    	$this->setState(4003);
		        	    	    	$this->match(self::AS);
		        	    	    }
		        	    	    $this->setState(4006);
		        	    	    $this->uid();
		        	    	break;
		        	    }
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function jsonTable(): Context\JsonTableContext
		{
		    $localContext = new Context\JsonTableContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 262, self::RULE_jsonTable);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4011);
		        $this->match(self::JSON_TABLE);
		        $this->setState(4012);
		        $this->match(self::LR_BRACKET);
		        $this->setState(4013);
		        $this->match(self::STRING_LITERAL);
		        $this->setState(4014);
		        $this->match(self::COMMA);
		        $this->setState(4015);
		        $this->match(self::STRING_LITERAL);
		        $this->setState(4016);
		        $this->match(self::COLUMNS);
		        $this->setState(4017);
		        $this->match(self::LR_BRACKET);
		        $this->setState(4018);
		        $this->jsonColumnList();
		        $this->setState(4019);
		        $this->match(self::RR_BRACKET);
		        $this->setState(4020);
		        $this->match(self::RR_BRACKET);
		        $this->setState(4025);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 584, $this->ctx)) {
		            case 1:
		        	    $this->setState(4022);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::AS) {
		        	    	$this->setState(4021);
		        	    	$this->match(self::AS);
		        	    }
		        	    $this->setState(4024);
		        	    $this->uid();
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function jsonColumnList(): Context\JsonColumnListContext
		{
		    $localContext = new Context\JsonColumnListContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 264, self::RULE_jsonColumnList);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4027);
		        $this->jsonColumn();
		        $this->setState(4032);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::COMMA) {
		        	$this->setState(4028);
		        	$this->match(self::COMMA);
		        	$this->setState(4029);
		        	$this->jsonColumn();
		        	$this->setState(4034);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function jsonColumn(): Context\JsonColumnContext
		{
		    $localContext = new Context\JsonColumnContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 266, self::RULE_jsonColumn);

		    try {
		        $this->setState(4064);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 591, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(4035);
		        	    $this->fullColumnName();
		        	    $this->setState(4052);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->input->LA(1)) {
		        	        case self::FOR:
		        	        	$this->setState(4036);
		        	        	$this->match(self::FOR);
		        	        	$this->setState(4037);
		        	        	$this->match(self::ORDINALITY);
		        	        	break;

		        	        case self::CHARACTER:
		        	        case self::SET:
		        	        case self::TINYINT:
		        	        case self::SMALLINT:
		        	        case self::MEDIUMINT:
		        	        case self::MIDDLEINT:
		        	        case self::INT:
		        	        case self::INT1:
		        	        case self::INT2:
		        	        case self::INT3:
		        	        case self::INT4:
		        	        case self::INT8:
		        	        case self::INTEGER:
		        	        case self::BIGINT:
		        	        case self::REAL:
		        	        case self::DOUBLE:
		        	        case self::FLOAT:
		        	        case self::FLOAT4:
		        	        case self::FLOAT8:
		        	        case self::DECIMAL:
		        	        case self::DEC:
		        	        case self::NUMERIC:
		        	        case self::DATE:
		        	        case self::TIME:
		        	        case self::TIMESTAMP:
		        	        case self::DATETIME:
		        	        case self::YEAR:
		        	        case self::CHAR:
		        	        case self::VARCHAR:
		        	        case self::NVARCHAR:
		        	        case self::NATIONAL:
		        	        case self::BINARY:
		        	        case self::VARBINARY:
		        	        case self::TINYBLOB:
		        	        case self::BLOB:
		        	        case self::MEDIUMBLOB:
		        	        case self::LONG:
		        	        case self::LONGBLOB:
		        	        case self::TINYTEXT:
		        	        case self::TEXT:
		        	        case self::MEDIUMTEXT:
		        	        case self::LONGTEXT:
		        	        case self::ENUM:
		        	        case self::SERIAL:
		        	        case self::BIT:
		        	        case self::BOOL:
		        	        case self::BOOLEAN:
		        	        case self::FIXED:
		        	        case self::JSON:
		        	        case self::NCHAR:
		        	        case self::GEOMETRYCOLLECTION:
		        	        case self::GEOMCOLLECTION:
		        	        case self::GEOMETRY:
		        	        case self::LINESTRING:
		        	        case self::MULTILINESTRING:
		        	        case self::MULTIPOINT:
		        	        case self::MULTIPOLYGON:
		        	        case self::POINT:
		        	        case self::POLYGON:
		        	        	$this->setState(4038);
		        	        	$this->dataType();
		        	        	$this->setState(4050);
		        	        	$this->errorHandler->sync($this);

		        	        	switch ($this->input->LA(1)) {
		        	        	    case self::PATH:
		        	        	    	$this->setState(4039);
		        	        	    	$this->match(self::PATH);
		        	        	    	$this->setState(4040);
		        	        	    	$this->match(self::STRING_LITERAL);
		        	        	    	$this->setState(4042);
		        	        	    	$this->errorHandler->sync($this);

		        	        	    	switch ($this->getInterpreter()->adaptivePredict($this->input, 586, $this->ctx)) {
		        	        	    	    case 1:
		        	        	    		    $this->setState(4041);
		        	        	    		    $this->jsonOnEmpty();
		        	        	    		break;
		        	        	    	}
		        	        	    	$this->setState(4045);
		        	        	    	$this->errorHandler->sync($this);
		        	        	    	$_la = $this->input->LA(1);

		        	        	    	if ($_la === self::DEFAULT || $_la === self::NULL_LITERAL || $_la === self::ERROR) {
		        	        	    		$this->setState(4044);
		        	        	    		$this->jsonOnError();
		        	        	    	}
		        	        	    	break;

		        	        	    case self::EXISTS:
		        	        	    	$this->setState(4047);
		        	        	    	$this->match(self::EXISTS);
		        	        	    	$this->setState(4048);
		        	        	    	$this->match(self::PATH);
		        	        	    	$this->setState(4049);
		        	        	    	$this->match(self::STRING_LITERAL);
		        	        	    	break;

		        	        	default:
		        	        		throw new NoViableAltException($this);
		        	        	}
		        	        	break;

		        	    default:
		        	    	throw new NoViableAltException($this);
		        	    }
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(4054);
		        	    $this->match(self::NESTED);
		        	    $this->setState(4056);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::PATH) {
		        	    	$this->setState(4055);
		        	    	$this->match(self::PATH);
		        	    }
		        	    $this->setState(4058);
		        	    $this->match(self::STRING_LITERAL);
		        	    $this->setState(4059);
		        	    $this->match(self::COLUMNS);
		        	    $this->setState(4060);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(4061);
		        	    $this->jsonColumnList();
		        	    $this->setState(4062);
		        	    $this->match(self::RR_BRACKET);
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function jsonOnEmpty(): Context\JsonOnEmptyContext
		{
		    $localContext = new Context\JsonOnEmptyContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 268, self::RULE_jsonOnEmpty);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4070);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::NULL_LITERAL:
		            	$this->setState(4066);
		            	$this->match(self::NULL_LITERAL);
		            	break;

		            case self::ERROR:
		            	$this->setState(4067);
		            	$this->match(self::ERROR);
		            	break;

		            case self::DEFAULT:
		            	$this->setState(4068);
		            	$this->match(self::DEFAULT);
		            	$this->setState(4069);
		            	$this->defaultValue();
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		        $this->setState(4072);
		        $this->match(self::ON);
		        $this->setState(4073);
		        $this->match(self::EMPTY);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function jsonOnError(): Context\JsonOnErrorContext
		{
		    $localContext = new Context\JsonOnErrorContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 270, self::RULE_jsonOnError);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4079);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::NULL_LITERAL:
		            	$this->setState(4075);
		            	$this->match(self::NULL_LITERAL);
		            	break;

		            case self::ERROR:
		            	$this->setState(4076);
		            	$this->match(self::ERROR);
		            	break;

		            case self::DEFAULT:
		            	$this->setState(4077);
		            	$this->match(self::DEFAULT);
		            	$this->setState(4078);
		            	$this->defaultValue();
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		        $this->setState(4081);
		        $this->match(self::ON);
		        $this->setState(4082);
		        $this->match(self::ERROR);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function selectSpec(): Context\SelectSpecContext
		{
		    $localContext = new Context\SelectSpecContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 272, self::RULE_selectSpec);

		    try {
		        $this->setState(4092);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::ALL:
		            case self::DISTINCT:
		            case self::DISTINCTROW:
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(4084);

		            	$_la = $this->input->LA(1);

		            	if (!(((($_la) & ~0x3f) === 0 && ((1 << $_la) & 1688849860264000) !== 0))) {
		            	$this->errorHandler->recoverInline($this);
		            	} else {
		            		if ($this->input->LA(1) === Token::EOF) {
		            		    $this->matchedEOF = true;
		            	    }

		            		$this->errorHandler->reportMatch($this);
		            		$this->consume();
		            	}
		            	break;

		            case self::HIGH_PRIORITY:
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(4085);
		            	$this->match(self::HIGH_PRIORITY);
		            	break;

		            case self::STRAIGHT_JOIN:
		            	$this->enterOuterAlt($localContext, 3);
		            	$this->setState(4086);
		            	$this->match(self::STRAIGHT_JOIN);
		            	break;

		            case self::SQL_SMALL_RESULT:
		            	$this->enterOuterAlt($localContext, 4);
		            	$this->setState(4087);
		            	$this->match(self::SQL_SMALL_RESULT);
		            	break;

		            case self::SQL_BIG_RESULT:
		            	$this->enterOuterAlt($localContext, 5);
		            	$this->setState(4088);
		            	$this->match(self::SQL_BIG_RESULT);
		            	break;

		            case self::SQL_BUFFER_RESULT:
		            	$this->enterOuterAlt($localContext, 6);
		            	$this->setState(4089);
		            	$this->match(self::SQL_BUFFER_RESULT);
		            	break;

		            case self::SQL_CACHE:
		            case self::SQL_NO_CACHE:
		            	$this->enterOuterAlt($localContext, 7);
		            	$this->setState(4090);

		            	$_la = $this->input->LA(1);

		            	if (!($_la === self::SQL_CACHE || $_la === self::SQL_NO_CACHE)) {
		            	$this->errorHandler->recoverInline($this);
		            	} else {
		            		if ($this->input->LA(1) === Token::EOF) {
		            		    $this->matchedEOF = true;
		            	    }

		            		$this->errorHandler->reportMatch($this);
		            		$this->consume();
		            	}
		            	break;

		            case self::SQL_CALC_FOUND_ROWS:
		            	$this->enterOuterAlt($localContext, 8);
		            	$this->setState(4091);
		            	$this->match(self::SQL_CALC_FOUND_ROWS);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function selectElements(): Context\SelectElementsContext
		{
		    $localContext = new Context\SelectElementsContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 274, self::RULE_selectElements);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4096);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 595, $this->ctx)) {
		        	case 1:
		        	    $this->setState(4094);
		        	    $localContext->star = $this->match(self::STAR);
		        	break;

		        	case 2:
		        	    $this->setState(4095);
		        	    $this->selectElement();
		        	break;
		        }
		        $this->setState(4102);
		        $this->errorHandler->sync($this);

		        $alt = $this->getInterpreter()->adaptivePredict($this->input, 596, $this->ctx);

		        while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
		        	if ($alt === 1) {
		        		$this->setState(4098);
		        		$this->match(self::COMMA);
		        		$this->setState(4099);
		        		$this->selectElement(); 
		        	}

		        	$this->setState(4104);
		        	$this->errorHandler->sync($this);

		        	$alt = $this->getInterpreter()->adaptivePredict($this->input, 596, $this->ctx);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function selectElement(): Context\SelectElementContext
		{
		    $localContext = new Context\SelectElementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 276, self::RULE_selectElement);

		    try {
		        $this->setState(4134);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 604, $this->ctx)) {
		        	case 1:
		        	    $localContext = new Context\SelectStarElementContext($localContext);
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(4105);
		        	    $this->fullId();
		        	    $this->setState(4106);
		        	    $this->match(self::DOT);
		        	    $this->setState(4107);
		        	    $this->match(self::STAR);
		        	break;

		        	case 2:
		        	    $localContext = new Context\SelectColumnElementContext($localContext);
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(4109);
		        	    $this->fullColumnName();
		        	    $this->setState(4114);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 598, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(4111);
		        	    	    $this->errorHandler->sync($this);
		        	    	    $_la = $this->input->LA(1);

		        	    	    if ($_la === self::AS) {
		        	    	    	$this->setState(4110);
		        	    	    	$this->match(self::AS);
		        	    	    }
		        	    	    $this->setState(4113);
		        	    	    $this->uid();
		        	    	break;
		        	    }
		        	break;

		        	case 3:
		        	    $localContext = new Context\SelectFunctionElementContext($localContext);
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(4116);
		        	    $this->functionCall();
		        	    $this->setState(4121);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 600, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(4118);
		        	    	    $this->errorHandler->sync($this);
		        	    	    $_la = $this->input->LA(1);

		        	    	    if ($_la === self::AS) {
		        	    	    	$this->setState(4117);
		        	    	    	$this->match(self::AS);
		        	    	    }
		        	    	    $this->setState(4120);
		        	    	    $this->uid();
		        	    	break;
		        	    }
		        	break;

		        	case 4:
		        	    $localContext = new Context\SelectExpressionElementContext($localContext);
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(4125);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 601, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(4123);
		        	    	    $this->match(self::LOCAL_ID);
		        	    	    $this->setState(4124);
		        	    	    $this->match(self::VAR_ASSIGN);
		        	    	break;
		        	    }
		        	    $this->setState(4127);
		        	    $this->recursiveExpression(0);
		        	    $this->setState(4132);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 603, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(4129);
		        	    	    $this->errorHandler->sync($this);
		        	    	    $_la = $this->input->LA(1);

		        	    	    if ($_la === self::AS) {
		        	    	    	$this->setState(4128);
		        	    	    	$this->match(self::AS);
		        	    	    }
		        	    	    $this->setState(4131);
		        	    	    $this->uid();
		        	    	break;
		        	    }
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function selectIntoExpression(): Context\SelectIntoExpressionContext
		{
		    $localContext = new Context\SelectIntoExpressionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 278, self::RULE_selectIntoExpression);

		    try {
		        $this->setState(4172);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 611, $this->ctx)) {
		        	case 1:
		        	    $localContext = new Context\SelectIntoVariablesContext($localContext);
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(4136);
		        	    $this->match(self::INTO);
		        	    $this->setState(4137);
		        	    $this->assignmentField();
		        	    $this->setState(4142);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::COMMA) {
		        	    	$this->setState(4138);
		        	    	$this->match(self::COMMA);
		        	    	$this->setState(4139);
		        	    	$this->assignmentField();
		        	    	$this->setState(4144);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	break;

		        	case 2:
		        	    $localContext = new Context\SelectIntoDumpFileContext($localContext);
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(4145);
		        	    $this->match(self::INTO);
		        	    $this->setState(4146);
		        	    $this->match(self::DUMPFILE);
		        	    $this->setState(4147);
		        	    $this->match(self::STRING_LITERAL);
		        	break;

		        	case 3:
		        	    $localContext = new Context\SelectIntoTextFileContext($localContext);
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(4148);
		        	    $this->match(self::INTO);
		        	    $this->setState(4149);
		        	    $this->match(self::OUTFILE);
		        	    $this->setState(4150);
		        	    $localContext->filename = $this->match(self::STRING_LITERAL);
		        	    $this->setState(4154);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::CHARACTER) {
		        	    	$this->setState(4151);
		        	    	$this->match(self::CHARACTER);
		        	    	$this->setState(4152);
		        	    	$this->match(self::SET);
		        	    	$this->setState(4153);
		        	    	$localContext->charset = $this->charsetName();
		        	    }
		        	    $this->setState(4162);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 608, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(4156);

		        	    	    $localContext->fieldsFormat = $this->input->LT(1);
		        	    	    $_la = $this->input->LA(1);

		        	    	    if (!($_la === self::COLUMNS || $_la === self::FIELDS)) {
		        	    	    	    $localContext->fieldsFormat = $this->errorHandler->recoverInline($this);
		        	    	    } else {
		        	    	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    	    $this->matchedEOF = true;
		        	    	        }

		        	    	    	$this->errorHandler->reportMatch($this);
		        	    	    	$this->consume();
		        	    	    }
		        	    	    $this->setState(4158); 
		        	    	    $this->errorHandler->sync($this);

		        	    	    $_la = $this->input->LA(1);
		        	    	    do {
		        	    	    	$this->setState(4157);
		        	    	    	$this->selectFieldsInto();
		        	    	    	$this->setState(4160); 
		        	    	    	$this->errorHandler->sync($this);
		        	    	    	$_la = $this->input->LA(1);
		        	    	    } while ($_la === self::ENCLOSED || $_la === self::ESCAPED || $_la === self::OPTIONALLY || $_la === self::TERMINATED);
		        	    	break;
		        	    }
		        	    $this->setState(4170);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::LINES) {
		        	    	$this->setState(4164);
		        	    	$this->match(self::LINES);
		        	    	$this->setState(4166); 
		        	    	$this->errorHandler->sync($this);

		        	    	$_la = $this->input->LA(1);
		        	    	do {
		        	    		$this->setState(4165);
		        	    		$this->selectLinesInto();
		        	    		$this->setState(4168); 
		        	    		$this->errorHandler->sync($this);
		        	    		$_la = $this->input->LA(1);
		        	    	} while ($_la === self::STARTING || $_la === self::TERMINATED);
		        	    }
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function selectFieldsInto(): Context\SelectFieldsIntoContext
		{
		    $localContext = new Context\SelectFieldsIntoContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 280, self::RULE_selectFieldsInto);

		    try {
		        $this->setState(4186);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::TERMINATED:
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(4174);
		            	$this->match(self::TERMINATED);
		            	$this->setState(4175);
		            	$this->match(self::BY);
		            	$this->setState(4176);
		            	$localContext->terminationField = $this->match(self::STRING_LITERAL);
		            	break;

		            case self::ENCLOSED:
		            case self::OPTIONALLY:
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(4178);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::OPTIONALLY) {
		            		$this->setState(4177);
		            		$this->match(self::OPTIONALLY);
		            	}
		            	$this->setState(4180);
		            	$this->match(self::ENCLOSED);
		            	$this->setState(4181);
		            	$this->match(self::BY);
		            	$this->setState(4182);
		            	$localContext->enclosion = $this->match(self::STRING_LITERAL);
		            	break;

		            case self::ESCAPED:
		            	$this->enterOuterAlt($localContext, 3);
		            	$this->setState(4183);
		            	$this->match(self::ESCAPED);
		            	$this->setState(4184);
		            	$this->match(self::BY);
		            	$this->setState(4185);
		            	$localContext->escaping = $this->match(self::STRING_LITERAL);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function selectLinesInto(): Context\SelectLinesIntoContext
		{
		    $localContext = new Context\SelectLinesIntoContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 282, self::RULE_selectLinesInto);

		    try {
		        $this->setState(4194);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::STARTING:
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(4188);
		            	$this->match(self::STARTING);
		            	$this->setState(4189);
		            	$this->match(self::BY);
		            	$this->setState(4190);
		            	$localContext->starting = $this->match(self::STRING_LITERAL);
		            	break;

		            case self::TERMINATED:
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(4191);
		            	$this->match(self::TERMINATED);
		            	$this->setState(4192);
		            	$this->match(self::BY);
		            	$this->setState(4193);
		            	$localContext->terminationLine = $this->match(self::STRING_LITERAL);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function fromClause(): Context\FromClauseContext
		{
		    $localContext = new Context\FromClauseContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 284, self::RULE_fromClause);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4198);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::FROM) {
		        	$this->setState(4196);
		        	$this->match(self::FROM);
		        	$this->setState(4197);
		        	$this->tableSources();
		        }
		        $this->setState(4202);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::WHERE) {
		        	$this->setState(4200);
		        	$this->match(self::WHERE);
		        	$this->setState(4201);
		        	$localContext->whereExpr = $this->recursiveExpression(0);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function groupByClause(): Context\GroupByClauseContext
		{
		    $localContext = new Context\GroupByClauseContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 286, self::RULE_groupByClause);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4204);
		        $this->match(self::GROUP);
		        $this->setState(4205);
		        $this->match(self::BY);
		        $this->setState(4206);
		        $this->groupByItem();
		        $this->setState(4211);
		        $this->errorHandler->sync($this);

		        $alt = $this->getInterpreter()->adaptivePredict($this->input, 617, $this->ctx);

		        while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
		        	if ($alt === 1) {
		        		$this->setState(4207);
		        		$this->match(self::COMMA);
		        		$this->setState(4208);
		        		$this->groupByItem(); 
		        	}

		        	$this->setState(4213);
		        	$this->errorHandler->sync($this);

		        	$alt = $this->getInterpreter()->adaptivePredict($this->input, 617, $this->ctx);
		        }
		        $this->setState(4216);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 618, $this->ctx)) {
		            case 1:
		        	    $this->setState(4214);
		        	    $this->match(self::WITH);
		        	    $this->setState(4215);
		        	    $this->match(self::ROLLUP);
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function havingClause(): Context\HavingClauseContext
		{
		    $localContext = new Context\HavingClauseContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 288, self::RULE_havingClause);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4218);
		        $this->match(self::HAVING);
		        $this->setState(4219);
		        $localContext->havingExpr = $this->recursiveExpression(0);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function windowClause(): Context\WindowClauseContext
		{
		    $localContext = new Context\WindowClauseContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 290, self::RULE_windowClause);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4221);
		        $this->match(self::WINDOW);
		        $this->setState(4222);
		        $this->windowName();
		        $this->setState(4223);
		        $this->match(self::AS);
		        $this->setState(4224);
		        $this->match(self::LR_BRACKET);
		        $this->setState(4225);
		        $this->windowSpec();
		        $this->setState(4226);
		        $this->match(self::RR_BRACKET);
		        $this->setState(4236);
		        $this->errorHandler->sync($this);

		        $alt = $this->getInterpreter()->adaptivePredict($this->input, 619, $this->ctx);

		        while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
		        	if ($alt === 1) {
		        		$this->setState(4227);
		        		$this->match(self::COMMA);
		        		$this->setState(4228);
		        		$this->windowName();
		        		$this->setState(4229);
		        		$this->match(self::AS);
		        		$this->setState(4230);
		        		$this->match(self::LR_BRACKET);
		        		$this->setState(4231);
		        		$this->windowSpec();
		        		$this->setState(4232);
		        		$this->match(self::RR_BRACKET); 
		        	}

		        	$this->setState(4238);
		        	$this->errorHandler->sync($this);

		        	$alt = $this->getInterpreter()->adaptivePredict($this->input, 619, $this->ctx);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function groupByItem(): Context\GroupByItemContext
		{
		    $localContext = new Context\GroupByItemContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 292, self::RULE_groupByItem);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4239);
		        $this->recursiveExpression(0);
		        $this->setState(4241);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 620, $this->ctx)) {
		            case 1:
		        	    $this->setState(4240);

		        	    $localContext->order = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::ASC || $_la === self::DESC)) {
		        	    	    $localContext->order = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function limitClause(): Context\LimitClauseContext
		{
		    $localContext = new Context\LimitClauseContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 294, self::RULE_limitClause);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4243);
		        $this->match(self::LIMIT);
		        $this->setState(4254);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 622, $this->ctx)) {
		        	case 1:
		        	    $this->setState(4247);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 621, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(4244);
		        	    	    $localContext->offset = $this->limitClauseAtom();
		        	    	    $this->setState(4245);
		        	    	    $this->match(self::COMMA);
		        	    	break;
		        	    }
		        	    $this->setState(4249);
		        	    $localContext->limit = $this->limitClauseAtom();
		        	break;

		        	case 2:
		        	    $this->setState(4250);
		        	    $localContext->limit = $this->limitClauseAtom();
		        	    $this->setState(4251);
		        	    $this->match(self::OFFSET);
		        	    $this->setState(4252);
		        	    $localContext->offset = $this->limitClauseAtom();
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function limitClauseAtom(): Context\LimitClauseAtomContext
		{
		    $localContext = new Context\LimitClauseAtomContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 296, self::RULE_limitClauseAtom);

		    try {
		        $this->setState(4259);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::ZERO_DECIMAL:
		            case self::ONE_DECIMAL:
		            case self::TWO_DECIMAL:
		            case self::DECIMAL_LITERAL:
		            case self::REAL_LITERAL:
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(4256);
		            	$this->decimalLiteral();
		            	break;

		            case self::LOCAL_ID:
		            case self::GLOBAL_ID:
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(4257);
		            	$this->mysqlVariable();
		            	break;

		            case self::ARRAY:
		            case self::ATTRIBUTE:
		            case self::BUCKETS:
		            case self::CONDITION:
		            case self::CURRENT:
		            case self::CURRENT_USER:
		            case self::DATABASE:
		            case self::DEFAULT:
		            case self::DIAGNOSTICS:
		            case self::EMPTY:
		            case self::ENFORCED:
		            case self::EXCEPT:
		            case self::GROUP:
		            case self::IF:
		            case self::IGNORED:
		            case self::INSERT:
		            case self::LATERAL:
		            case self::LEFT:
		            case self::NUMBER:
		            case self::OPTIONAL:
		            case self::ORDER:
		            case self::PRIMARY:
		            case self::REPEAT:
		            case self::REPLACE:
		            case self::RIGHT:
		            case self::SCHEMA:
		            case self::SKIP_QUERY_REWRITE:
		            case self::STACKED:
		            case self::DATE:
		            case self::TIME:
		            case self::TIMESTAMP:
		            case self::DATETIME:
		            case self::YEAR:
		            case self::BINARY:
		            case self::TEXT:
		            case self::ENUM:
		            case self::SERIAL:
		            case self::JSON_ARRAY:
		            case self::JSON_ARRAYAGG:
		            case self::JSON_ARRAY_APPEND:
		            case self::JSON_ARRAY_INSERT:
		            case self::JSON_CONTAINS:
		            case self::JSON_CONTAINS_PATH:
		            case self::JSON_DEPTH:
		            case self::JSON_EXTRACT:
		            case self::JSON_INSERT:
		            case self::JSON_KEYS:
		            case self::JSON_LENGTH:
		            case self::JSON_MERGE:
		            case self::JSON_MERGE_PATCH:
		            case self::JSON_MERGE_PRESERVE:
		            case self::JSON_OBJECT:
		            case self::JSON_OBJECTAGG:
		            case self::JSON_OVERLAPS:
		            case self::JSON_PRETTY:
		            case self::JSON_QUOTE:
		            case self::JSON_REMOVE:
		            case self::JSON_REPLACE:
		            case self::JSON_SCHEMA_VALID:
		            case self::JSON_SCHEMA_VALIDATION_REPORT:
		            case self::JSON_SEARCH:
		            case self::JSON_SET:
		            case self::JSON_STORAGE_FREE:
		            case self::JSON_STORAGE_SIZE:
		            case self::JSON_TABLE:
		            case self::JSON_TYPE:
		            case self::JSON_UNQUOTE:
		            case self::JSON_VALID:
		            case self::JSON_VALUE:
		            case self::NESTED:
		            case self::ORDINALITY:
		            case self::PATH:
		            case self::AVG:
		            case self::BIT_AND:
		            case self::BIT_OR:
		            case self::BIT_XOR:
		            case self::COUNT:
		            case self::CUME_DIST:
		            case self::DENSE_RANK:
		            case self::FIRST_VALUE:
		            case self::GROUP_CONCAT:
		            case self::LAG:
		            case self::LAST_VALUE:
		            case self::LEAD:
		            case self::MAX:
		            case self::MIN:
		            case self::NTILE:
		            case self::NTH_VALUE:
		            case self::PERCENT_RANK:
		            case self::RANK:
		            case self::ROW_NUMBER:
		            case self::STD:
		            case self::STDDEV:
		            case self::STDDEV_POP:
		            case self::STDDEV_SAMP:
		            case self::SUM:
		            case self::VAR_POP:
		            case self::VAR_SAMP:
		            case self::VARIANCE:
		            case self::CURRENT_DATE:
		            case self::CURRENT_TIME:
		            case self::CURRENT_TIMESTAMP:
		            case self::LOCALTIME:
		            case self::CURDATE:
		            case self::CURTIME:
		            case self::DATE_ADD:
		            case self::DATE_SUB:
		            case self::LOCALTIMESTAMP:
		            case self::NOW:
		            case self::POSITION:
		            case self::SUBSTR:
		            case self::SUBSTRING:
		            case self::SYSDATE:
		            case self::TRIM:
		            case self::UTC_DATE:
		            case self::UTC_TIME:
		            case self::UTC_TIMESTAMP:
		            case self::ACCOUNT:
		            case self::ACTION:
		            case self::AFTER:
		            case self::AGGREGATE:
		            case self::ALGORITHM:
		            case self::ANY:
		            case self::AT:
		            case self::AUTHORS:
		            case self::AUTOCOMMIT:
		            case self::AUTOEXTEND_SIZE:
		            case self::AUTO_INCREMENT:
		            case self::AVG_ROW_LENGTH:
		            case self::BEGIN:
		            case self::BINLOG:
		            case self::BIT:
		            case self::BLOCK:
		            case self::BOOL:
		            case self::BOOLEAN:
		            case self::BTREE:
		            case self::CACHE:
		            case self::CASCADED:
		            case self::CHAIN:
		            case self::CHANGED:
		            case self::CHANNEL:
		            case self::CHECKSUM:
		            case self::PAGE_CHECKSUM:
		            case self::CIPHER:
		            case self::CLASS_ORIGIN:
		            case self::CLIENT:
		            case self::CLOSE:
		            case self::CLUSTERING:
		            case self::COALESCE:
		            case self::CODE:
		            case self::COLUMNS:
		            case self::COLUMN_FORMAT:
		            case self::COLUMN_NAME:
		            case self::COMMENT:
		            case self::COMMIT:
		            case self::COMPACT:
		            case self::COMPLETION:
		            case self::COMPRESSED:
		            case self::COMPRESSION:
		            case self::CONCURRENT:
		            case self::CONNECT:
		            case self::CONNECTION:
		            case self::CONSISTENT:
		            case self::CONSTRAINT_CATALOG:
		            case self::CONSTRAINT_SCHEMA:
		            case self::CONSTRAINT_NAME:
		            case self::CONTAINS:
		            case self::CONTEXT:
		            case self::CONTRIBUTORS:
		            case self::COPY:
		            case self::CPU:
		            case self::CURSOR_NAME:
		            case self::DATA:
		            case self::DATAFILE:
		            case self::DEALLOCATE:
		            case self::DEFAULT_AUTH:
		            case self::DEFINER:
		            case self::DELAY_KEY_WRITE:
		            case self::DES_KEY_FILE:
		            case self::DIRECTORY:
		            case self::DISABLE:
		            case self::DISCARD:
		            case self::DISK:
		            case self::DO:
		            case self::DUMPFILE:
		            case self::DUPLICATE:
		            case self::DYNAMIC:
		            case self::ENABLE:
		            case self::ENCRYPTION:
		            case self::END:
		            case self::ENDS:
		            case self::ENGINE:
		            case self::ENGINES:
		            case self::ERROR:
		            case self::ERRORS:
		            case self::ESCAPE:
		            case self::EVEN:
		            case self::EVENT:
		            case self::EVENTS:
		            case self::EVERY:
		            case self::EXCHANGE:
		            case self::EXCLUSIVE:
		            case self::EXPIRE:
		            case self::EXPORT:
		            case self::EXTENDED:
		            case self::EXTENT_SIZE:
		            case self::FAILED_LOGIN_ATTEMPTS:
		            case self::FAST:
		            case self::FAULTS:
		            case self::FIELDS:
		            case self::FILE_BLOCK_SIZE:
		            case self::FILTER:
		            case self::FIRST:
		            case self::FIXED:
		            case self::FLUSH:
		            case self::FOLLOWS:
		            case self::FOUND:
		            case self::FULL:
		            case self::FUNCTION:
		            case self::GENERAL:
		            case self::GLOBAL:
		            case self::GRANTS:
		            case self::GROUP_REPLICATION:
		            case self::HANDLER:
		            case self::HASH:
		            case self::HELP:
		            case self::HISTORY:
		            case self::HOST:
		            case self::HOSTS:
		            case self::IDENTIFIED:
		            case self::IGNORE_SERVER_IDS:
		            case self::IMPORT:
		            case self::INDEXES:
		            case self::INITIAL_SIZE:
		            case self::INPLACE:
		            case self::INSERT_METHOD:
		            case self::INSTALL:
		            case self::INSTANCE:
		            case self::INSTANT:
		            case self::INVISIBLE:
		            case self::INVOKER:
		            case self::IO:
		            case self::IO_THREAD:
		            case self::IPC:
		            case self::ISOLATION:
		            case self::ISSUER:
		            case self::JSON:
		            case self::KEY_BLOCK_SIZE:
		            case self::LANGUAGE:
		            case self::LAST:
		            case self::LEAVES:
		            case self::LESS:
		            case self::LEVEL:
		            case self::LIST:
		            case self::LOCAL:
		            case self::LOGFILE:
		            case self::LOGS:
		            case self::MASTER:
		            case self::MASTER_AUTO_POSITION:
		            case self::MASTER_CONNECT_RETRY:
		            case self::MASTER_DELAY:
		            case self::MASTER_HEARTBEAT_PERIOD:
		            case self::MASTER_HOST:
		            case self::MASTER_LOG_FILE:
		            case self::MASTER_LOG_POS:
		            case self::MASTER_PASSWORD:
		            case self::MASTER_PORT:
		            case self::MASTER_RETRY_COUNT:
		            case self::MASTER_SSL:
		            case self::MASTER_SSL_CA:
		            case self::MASTER_SSL_CAPATH:
		            case self::MASTER_SSL_CERT:
		            case self::MASTER_SSL_CIPHER:
		            case self::MASTER_SSL_CRL:
		            case self::MASTER_SSL_CRLPATH:
		            case self::MASTER_SSL_KEY:
		            case self::MASTER_TLS_VERSION:
		            case self::MASTER_USER:
		            case self::MAX_CONNECTIONS_PER_HOUR:
		            case self::MAX_QUERIES_PER_HOUR:
		            case self::MAX_ROWS:
		            case self::MAX_SIZE:
		            case self::MAX_UPDATES_PER_HOUR:
		            case self::MAX_USER_CONNECTIONS:
		            case self::MEDIUM:
		            case self::MEMBER:
		            case self::MERGE:
		            case self::MESSAGE_TEXT:
		            case self::MID:
		            case self::MIGRATE:
		            case self::MIN_ROWS:
		            case self::MODE:
		            case self::MODIFY:
		            case self::MUTEX:
		            case self::MYSQL:
		            case self::MYSQL_ERRNO:
		            case self::NAME:
		            case self::NAMES:
		            case self::NCHAR:
		            case self::NEVER:
		            case self::NEXT:
		            case self::NO:
		            case self::NOCOPY:
		            case self::NOWAIT:
		            case self::NODEGROUP:
		            case self::NONE:
		            case self::ODBC:
		            case self::OFFLINE:
		            case self::OFFSET:
		            case self::OF:
		            case self::OJ:
		            case self::OLD_PASSWORD:
		            case self::ONE:
		            case self::ONLINE:
		            case self::ONLY:
		            case self::OPEN:
		            case self::OPTIMIZER_COSTS:
		            case self::OPTIONS:
		            case self::OWNER:
		            case self::PACK_KEYS:
		            case self::PAGE:
		            case self::PARSER:
		            case self::PARTIAL:
		            case self::PARTITIONING:
		            case self::PARTITIONS:
		            case self::PASSWORD:
		            case self::PASSWORD_LOCK_TIME:
		            case self::PHASE:
		            case self::PLUGIN:
		            case self::PLUGIN_DIR:
		            case self::PLUGINS:
		            case self::PORT:
		            case self::PRECEDES:
		            case self::PREPARE:
		            case self::PRESERVE:
		            case self::PREV:
		            case self::PROCESSLIST:
		            case self::PROFILE:
		            case self::PROFILES:
		            case self::PROXY:
		            case self::QUERY:
		            case self::QUICK:
		            case self::REBUILD:
		            case self::RECOVER:
		            case self::RECURSIVE:
		            case self::REDO_BUFFER_SIZE:
		            case self::REDUNDANT:
		            case self::RELAY:
		            case self::RELAY_LOG_FILE:
		            case self::RELAY_LOG_POS:
		            case self::RELAYLOG:
		            case self::REMOVE:
		            case self::REORGANIZE:
		            case self::REPAIR:
		            case self::REPLICATE_DO_DB:
		            case self::REPLICATE_DO_TABLE:
		            case self::REPLICATE_IGNORE_DB:
		            case self::REPLICATE_IGNORE_TABLE:
		            case self::REPLICATE_REWRITE_DB:
		            case self::REPLICATE_WILD_DO_TABLE:
		            case self::REPLICATE_WILD_IGNORE_TABLE:
		            case self::REPLICATION:
		            case self::RESET:
		            case self::RESUME:
		            case self::RETURNED_SQLSTATE:
		            case self::RETURNS:
		            case self::REUSE:
		            case self::ROLE:
		            case self::ROLLBACK:
		            case self::ROLLUP:
		            case self::ROTATE:
		            case self::ROW:
		            case self::ROWS:
		            case self::ROW_FORMAT:
		            case self::RTREE:
		            case self::SAVEPOINT:
		            case self::SCHEDULE:
		            case self::SECURITY:
		            case self::SERVER:
		            case self::SESSION:
		            case self::SHARE:
		            case self::SHARED:
		            case self::SIGNED:
		            case self::SIMPLE:
		            case self::SLAVE:
		            case self::SLOW:
		            case self::SNAPSHOT:
		            case self::SOCKET:
		            case self::SOME:
		            case self::SONAME:
		            case self::SOUNDS:
		            case self::SOURCE:
		            case self::SQL_AFTER_GTIDS:
		            case self::SQL_AFTER_MTS_GAPS:
		            case self::SQL_BEFORE_GTIDS:
		            case self::SQL_BUFFER_RESULT:
		            case self::SQL_CACHE:
		            case self::SQL_NO_CACHE:
		            case self::SQL_THREAD:
		            case self::START:
		            case self::STARTS:
		            case self::STATS_AUTO_RECALC:
		            case self::STATS_PERSISTENT:
		            case self::STATS_SAMPLE_PAGES:
		            case self::STATUS:
		            case self::STOP:
		            case self::STORAGE:
		            case self::STRING:
		            case self::SUBCLASS_ORIGIN:
		            case self::SUBJECT:
		            case self::SUBPARTITION:
		            case self::SUBPARTITIONS:
		            case self::SUSPEND:
		            case self::SWAPS:
		            case self::SWITCHES:
		            case self::TABLE_NAME:
		            case self::TABLESPACE:
		            case self::TABLE_TYPE:
		            case self::TEMPORARY:
		            case self::TEMPTABLE:
		            case self::THAN:
		            case self::TRADITIONAL:
		            case self::TRANSACTION:
		            case self::TRANSACTIONAL:
		            case self::TRIGGERS:
		            case self::TRUNCATE:
		            case self::UNBOUNDED:
		            case self::UNDEFINED:
		            case self::UNDOFILE:
		            case self::UNDO_BUFFER_SIZE:
		            case self::UNINSTALL:
		            case self::UNKNOWN:
		            case self::UNTIL:
		            case self::UPGRADE:
		            case self::USER:
		            case self::USE_FRM:
		            case self::USER_RESOURCES:
		            case self::VALIDATION:
		            case self::VALUE:
		            case self::VARIABLES:
		            case self::VIEW:
		            case self::VIRTUAL:
		            case self::VISIBLE:
		            case self::WAIT:
		            case self::WARNINGS:
		            case self::WITHOUT:
		            case self::WORK:
		            case self::WRAPPER:
		            case self::X509:
		            case self::XA:
		            case self::XML:
		            case self::EUR:
		            case self::USA:
		            case self::JIS:
		            case self::ISO:
		            case self::INTERNAL:
		            case self::QUARTER:
		            case self::MONTH:
		            case self::DAY:
		            case self::HOUR:
		            case self::MINUTE:
		            case self::WEEK:
		            case self::SECOND:
		            case self::MICROSECOND:
		            case self::ADMIN:
		            case self::AUDIT_ABORT_EXEMPT:
		            case self::AUDIT_ADMIN:
		            case self::AUTHENTICATION_POLICY_ADMIN:
		            case self::BACKUP_ADMIN:
		            case self::BINLOG_ADMIN:
		            case self::BINLOG_ENCRYPTION_ADMIN:
		            case self::CLONE_ADMIN:
		            case self::CONNECTION_ADMIN:
		            case self::ENCRYPTION_KEY_ADMIN:
		            case self::EXECUTE:
		            case self::FILE:
		            case self::FIREWALL_ADMIN:
		            case self::FIREWALL_EXEMPT:
		            case self::FIREWALL_USER:
		            case self::GROUP_REPLICATION_ADMIN:
		            case self::INNODB_REDO_LOG_ARCHIVE:
		            case self::INVOKE:
		            case self::LAMBDA:
		            case self::NDB_STORED_USER:
		            case self::PASSWORDLESS_USER_ADMIN:
		            case self::PERSIST_RO_VARIABLES_ADMIN:
		            case self::PRIVILEGES:
		            case self::PROCESS:
		            case self::RELOAD:
		            case self::REPLICATION_APPLIER:
		            case self::REPLICATION_SLAVE_ADMIN:
		            case self::RESOURCE_GROUP_ADMIN:
		            case self::RESOURCE_GROUP_USER:
		            case self::ROLE_ADMIN:
		            case self::ROUTINE:
		            case self::S3:
		            case self::SESSION_VARIABLES_ADMIN:
		            case self::SET_USER_ID:
		            case self::SHOW_ROUTINE:
		            case self::SHUTDOWN:
		            case self::SUPER:
		            case self::SYSTEM_VARIABLES_ADMIN:
		            case self::TABLES:
		            case self::TABLE_ENCRYPTION_ADMIN:
		            case self::VERSION_TOKEN_ADMIN:
		            case self::XA_RECOVER_ADMIN:
		            case self::ARMSCII8:
		            case self::ASCII:
		            case self::BIG5:
		            case self::CP1250:
		            case self::CP1251:
		            case self::CP1256:
		            case self::CP1257:
		            case self::CP850:
		            case self::CP852:
		            case self::CP866:
		            case self::CP932:
		            case self::DEC8:
		            case self::EUCJPMS:
		            case self::EUCKR:
		            case self::GB18030:
		            case self::GB2312:
		            case self::GBK:
		            case self::GEOSTD8:
		            case self::GREEK:
		            case self::HEBREW:
		            case self::HP8:
		            case self::KEYBCS2:
		            case self::KOI8R:
		            case self::KOI8U:
		            case self::LATIN1:
		            case self::LATIN2:
		            case self::LATIN5:
		            case self::LATIN7:
		            case self::MACCE:
		            case self::MACROMAN:
		            case self::SJIS:
		            case self::SWE7:
		            case self::TIS620:
		            case self::UCS2:
		            case self::UJIS:
		            case self::UTF16:
		            case self::UTF16LE:
		            case self::UTF32:
		            case self::UTF8:
		            case self::UTF8MB3:
		            case self::UTF8MB4:
		            case self::ARCHIVE:
		            case self::BLACKHOLE:
		            case self::CSV:
		            case self::FEDERATED:
		            case self::INNODB:
		            case self::MEMORY:
		            case self::MRG_MYISAM:
		            case self::MYISAM:
		            case self::NDB:
		            case self::NDBCLUSTER:
		            case self::PERFORMANCE_SCHEMA:
		            case self::TOKUDB:
		            case self::REPEATABLE:
		            case self::COMMITTED:
		            case self::UNCOMMITTED:
		            case self::SERIALIZABLE:
		            case self::GEOMETRYCOLLECTION:
		            case self::LINESTRING:
		            case self::MULTILINESTRING:
		            case self::MULTIPOINT:
		            case self::MULTIPOLYGON:
		            case self::POINT:
		            case self::POLYGON:
		            case self::ABS:
		            case self::ACOS:
		            case self::ADDDATE:
		            case self::ADDTIME:
		            case self::AES_DECRYPT:
		            case self::AES_ENCRYPT:
		            case self::AREA:
		            case self::ASBINARY:
		            case self::ASIN:
		            case self::ASTEXT:
		            case self::ASWKB:
		            case self::ASWKT:
		            case self::ASYMMETRIC_DECRYPT:
		            case self::ASYMMETRIC_DERIVE:
		            case self::ASYMMETRIC_ENCRYPT:
		            case self::ASYMMETRIC_SIGN:
		            case self::ASYMMETRIC_VERIFY:
		            case self::ATAN:
		            case self::ATAN2:
		            case self::BENCHMARK:
		            case self::BIN:
		            case self::BIT_COUNT:
		            case self::BIT_LENGTH:
		            case self::BUFFER:
		            case self::CATALOG_NAME:
		            case self::CEIL:
		            case self::CEILING:
		            case self::CENTROID:
		            case self::CHARACTER_LENGTH:
		            case self::CHARSET:
		            case self::CHAR_LENGTH:
		            case self::COERCIBILITY:
		            case self::COLLATION:
		            case self::COMPRESS:
		            case self::CONCAT:
		            case self::CONCAT_WS:
		            case self::CONNECTION_ID:
		            case self::CONV:
		            case self::CONVERT_TZ:
		            case self::COS:
		            case self::COT:
		            case self::CRC32:
		            case self::CREATE_ASYMMETRIC_PRIV_KEY:
		            case self::CREATE_ASYMMETRIC_PUB_KEY:
		            case self::CREATE_DH_PARAMETERS:
		            case self::CREATE_DIGEST:
		            case self::CROSSES:
		            case self::DATEDIFF:
		            case self::DATE_FORMAT:
		            case self::DAYNAME:
		            case self::DAYOFMONTH:
		            case self::DAYOFWEEK:
		            case self::DAYOFYEAR:
		            case self::DECODE:
		            case self::DEGREES:
		            case self::DES_DECRYPT:
		            case self::DES_ENCRYPT:
		            case self::DIMENSION:
		            case self::DISJOINT:
		            case self::ELT:
		            case self::ENCODE:
		            case self::ENCRYPT:
		            case self::ENDPOINT:
		            case self::ENGINE_ATTRIBUTE:
		            case self::ENVELOPE:
		            case self::EQUALS:
		            case self::EXP:
		            case self::EXPORT_SET:
		            case self::EXTERIORRING:
		            case self::EXTRACTVALUE:
		            case self::FIELD:
		            case self::FIND_IN_SET:
		            case self::FLOOR:
		            case self::FORMAT:
		            case self::FOUND_ROWS:
		            case self::FROM_BASE64:
		            case self::FROM_DAYS:
		            case self::FROM_UNIXTIME:
		            case self::GEOMCOLLFROMTEXT:
		            case self::GEOMCOLLFROMWKB:
		            case self::GEOMETRYCOLLECTIONFROMTEXT:
		            case self::GEOMETRYCOLLECTIONFROMWKB:
		            case self::GEOMETRYFROMTEXT:
		            case self::GEOMETRYFROMWKB:
		            case self::GEOMETRYN:
		            case self::GEOMETRYTYPE:
		            case self::GEOMFROMTEXT:
		            case self::GEOMFROMWKB:
		            case self::GET_FORMAT:
		            case self::GET_LOCK:
		            case self::GLENGTH:
		            case self::GREATEST:
		            case self::GTID_SUBSET:
		            case self::GTID_SUBTRACT:
		            case self::HEX:
		            case self::IFNULL:
		            case self::INET6_ATON:
		            case self::INET6_NTOA:
		            case self::INET_ATON:
		            case self::INET_NTOA:
		            case self::INSTR:
		            case self::INTERIORRINGN:
		            case self::INTERSECTS:
		            case self::ISCLOSED:
		            case self::ISEMPTY:
		            case self::ISNULL:
		            case self::ISSIMPLE:
		            case self::IS_FREE_LOCK:
		            case self::IS_IPV4:
		            case self::IS_IPV4_COMPAT:
		            case self::IS_IPV4_MAPPED:
		            case self::IS_IPV6:
		            case self::IS_USED_LOCK:
		            case self::LAST_INSERT_ID:
		            case self::LCASE:
		            case self::LEAST:
		            case self::LENGTH:
		            case self::LINEFROMTEXT:
		            case self::LINEFROMWKB:
		            case self::LINESTRINGFROMTEXT:
		            case self::LINESTRINGFROMWKB:
		            case self::LN:
		            case self::LOAD_FILE:
		            case self::LOCATE:
		            case self::LOG:
		            case self::LOG10:
		            case self::LOG2:
		            case self::LOWER:
		            case self::LPAD:
		            case self::LTRIM:
		            case self::MAKEDATE:
		            case self::MAKETIME:
		            case self::MAKE_SET:
		            case self::MASTER_POS_WAIT:
		            case self::MBRCONTAINS:
		            case self::MBRDISJOINT:
		            case self::MBREQUAL:
		            case self::MBRINTERSECTS:
		            case self::MBROVERLAPS:
		            case self::MBRTOUCHES:
		            case self::MBRWITHIN:
		            case self::MD5:
		            case self::MLINEFROMTEXT:
		            case self::MLINEFROMWKB:
		            case self::MONTHNAME:
		            case self::MPOINTFROMTEXT:
		            case self::MPOINTFROMWKB:
		            case self::MPOLYFROMTEXT:
		            case self::MPOLYFROMWKB:
		            case self::MULTILINESTRINGFROMTEXT:
		            case self::MULTILINESTRINGFROMWKB:
		            case self::MULTIPOINTFROMTEXT:
		            case self::MULTIPOINTFROMWKB:
		            case self::MULTIPOLYGONFROMTEXT:
		            case self::MULTIPOLYGONFROMWKB:
		            case self::NAME_CONST:
		            case self::NULLIF:
		            case self::NUMGEOMETRIES:
		            case self::NUMINTERIORRINGS:
		            case self::NUMPOINTS:
		            case self::OCT:
		            case self::OCTET_LENGTH:
		            case self::ORD:
		            case self::OVERLAPS:
		            case self::PERIOD_ADD:
		            case self::PERIOD_DIFF:
		            case self::PI:
		            case self::POINTFROMTEXT:
		            case self::POINTFROMWKB:
		            case self::POINTN:
		            case self::POLYFROMTEXT:
		            case self::POLYFROMWKB:
		            case self::POLYGONFROMTEXT:
		            case self::POLYGONFROMWKB:
		            case self::POW:
		            case self::POWER:
		            case self::QUOTE:
		            case self::RADIANS:
		            case self::RAND:
		            case self::RANDOM:
		            case self::RANDOM_BYTES:
		            case self::RELEASE_LOCK:
		            case self::REVERSE:
		            case self::ROUND:
		            case self::ROW_COUNT:
		            case self::RPAD:
		            case self::RTRIM:
		            case self::SEC_TO_TIME:
		            case self::SECONDARY_ENGINE_ATTRIBUTE:
		            case self::SESSION_USER:
		            case self::SHA:
		            case self::SHA1:
		            case self::SHA2:
		            case self::SCHEMA_NAME:
		            case self::SIGN:
		            case self::SIN:
		            case self::SLEEP:
		            case self::SOUNDEX:
		            case self::SQL_THREAD_WAIT_AFTER_GTIDS:
		            case self::SQRT:
		            case self::SRID:
		            case self::STARTPOINT:
		            case self::STRCMP:
		            case self::STR_TO_DATE:
		            case self::ST_AREA:
		            case self::ST_ASBINARY:
		            case self::ST_ASTEXT:
		            case self::ST_ASWKB:
		            case self::ST_ASWKT:
		            case self::ST_BUFFER:
		            case self::ST_CENTROID:
		            case self::ST_CONTAINS:
		            case self::ST_CROSSES:
		            case self::ST_DIFFERENCE:
		            case self::ST_DIMENSION:
		            case self::ST_DISJOINT:
		            case self::ST_DISTANCE:
		            case self::ST_ENDPOINT:
		            case self::ST_ENVELOPE:
		            case self::ST_EQUALS:
		            case self::ST_EXTERIORRING:
		            case self::ST_GEOMCOLLFROMTEXT:
		            case self::ST_GEOMCOLLFROMTXT:
		            case self::ST_GEOMCOLLFROMWKB:
		            case self::ST_GEOMETRYCOLLECTIONFROMTEXT:
		            case self::ST_GEOMETRYCOLLECTIONFROMWKB:
		            case self::ST_GEOMETRYFROMTEXT:
		            case self::ST_GEOMETRYFROMWKB:
		            case self::ST_GEOMETRYN:
		            case self::ST_GEOMETRYTYPE:
		            case self::ST_GEOMFROMTEXT:
		            case self::ST_GEOMFROMWKB:
		            case self::ST_INTERIORRINGN:
		            case self::ST_INTERSECTION:
		            case self::ST_INTERSECTS:
		            case self::ST_ISCLOSED:
		            case self::ST_ISEMPTY:
		            case self::ST_ISSIMPLE:
		            case self::ST_LINEFROMTEXT:
		            case self::ST_LINEFROMWKB:
		            case self::ST_LINESTRINGFROMTEXT:
		            case self::ST_LINESTRINGFROMWKB:
		            case self::ST_NUMGEOMETRIES:
		            case self::ST_NUMINTERIORRING:
		            case self::ST_NUMINTERIORRINGS:
		            case self::ST_NUMPOINTS:
		            case self::ST_OVERLAPS:
		            case self::ST_POINTFROMTEXT:
		            case self::ST_POINTFROMWKB:
		            case self::ST_POINTN:
		            case self::ST_POLYFROMTEXT:
		            case self::ST_POLYFROMWKB:
		            case self::ST_POLYGONFROMTEXT:
		            case self::ST_POLYGONFROMWKB:
		            case self::ST_SRID:
		            case self::ST_STARTPOINT:
		            case self::ST_SYMDIFFERENCE:
		            case self::ST_TOUCHES:
		            case self::ST_UNION:
		            case self::ST_WITHIN:
		            case self::ST_X:
		            case self::ST_Y:
		            case self::SUBDATE:
		            case self::SUBSTRING_INDEX:
		            case self::SUBTIME:
		            case self::SYSTEM_USER:
		            case self::TAN:
		            case self::TIMEDIFF:
		            case self::TIMESTAMPADD:
		            case self::TIMESTAMPDIFF:
		            case self::TIME_FORMAT:
		            case self::TIME_TO_SEC:
		            case self::TOUCHES:
		            case self::TO_BASE64:
		            case self::TO_DAYS:
		            case self::TO_SECONDS:
		            case self::TP_CONNECTION_ADMIN:
		            case self::UCASE:
		            case self::UNCOMPRESS:
		            case self::UNCOMPRESSED_LENGTH:
		            case self::UNHEX:
		            case self::UNIX_TIMESTAMP:
		            case self::UPDATEXML:
		            case self::UPPER:
		            case self::UUID:
		            case self::UUID_SHORT:
		            case self::VALIDATE_PASSWORD_STRENGTH:
		            case self::VERSION:
		            case self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
		            case self::WEEKDAY:
		            case self::WEEKOFYEAR:
		            case self::WEIGHT_STRING:
		            case self::WITHIN:
		            case self::YEARWEEK:
		            case self::Y_FUNCTION:
		            case self::X_FUNCTION:
		            case self::MOD:
		            case self::ID:
		            	$this->enterOuterAlt($localContext, 3);
		            	$this->setState(4258);
		            	$this->simpleId();
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function startTransaction(): Context\StartTransactionContext
		{
		    $localContext = new Context\StartTransactionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 298, self::RULE_startTransaction);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4261);
		        $this->match(self::START);
		        $this->setState(4262);
		        $this->match(self::TRANSACTION);
		        $this->setState(4271);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 625, $this->ctx)) {
		            case 1:
		        	    $this->setState(4263);
		        	    $this->transactionMode();
		        	    $this->setState(4268);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::COMMA) {
		        	    	$this->setState(4264);
		        	    	$this->match(self::COMMA);
		        	    	$this->setState(4265);
		        	    	$this->transactionMode();
		        	    	$this->setState(4270);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function beginWork(): Context\BeginWorkContext
		{
		    $localContext = new Context\BeginWorkContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 300, self::RULE_beginWork);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4273);
		        $this->match(self::BEGIN);
		        $this->setState(4275);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::WORK) {
		        	$this->setState(4274);
		        	$this->match(self::WORK);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function commitWork(): Context\CommitWorkContext
		{
		    $localContext = new Context\CommitWorkContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 302, self::RULE_commitWork);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4277);
		        $this->match(self::COMMIT);
		        $this->setState(4279);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::WORK) {
		        	$this->setState(4278);
		        	$this->match(self::WORK);
		        }
		        $this->setState(4286);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::AND) {
		        	$this->setState(4281);
		        	$this->match(self::AND);
		        	$this->setState(4283);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);

		        	if ($_la === self::NO) {
		        		$this->setState(4282);
		        		$localContext->nochain = $this->match(self::NO);
		        	}
		        	$this->setState(4285);
		        	$this->match(self::CHAIN);
		        }
		        $this->setState(4292);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 631, $this->ctx)) {
		            case 1:
		        	    $this->setState(4289);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::NO) {
		        	    	$this->setState(4288);
		        	    	$localContext->norelease = $this->match(self::NO);
		        	    }
		        	    $this->setState(4291);
		        	    $this->match(self::RELEASE);
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function rollbackWork(): Context\RollbackWorkContext
		{
		    $localContext = new Context\RollbackWorkContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 304, self::RULE_rollbackWork);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4294);
		        $this->match(self::ROLLBACK);
		        $this->setState(4296);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::WORK) {
		        	$this->setState(4295);
		        	$this->match(self::WORK);
		        }
		        $this->setState(4303);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::AND) {
		        	$this->setState(4298);
		        	$this->match(self::AND);
		        	$this->setState(4300);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);

		        	if ($_la === self::NO) {
		        		$this->setState(4299);
		        		$localContext->nochain = $this->match(self::NO);
		        	}
		        	$this->setState(4302);
		        	$this->match(self::CHAIN);
		        }
		        $this->setState(4309);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 636, $this->ctx)) {
		            case 1:
		        	    $this->setState(4306);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::NO) {
		        	    	$this->setState(4305);
		        	    	$localContext->norelease = $this->match(self::NO);
		        	    }
		        	    $this->setState(4308);
		        	    $this->match(self::RELEASE);
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function savepointStatement(): Context\SavepointStatementContext
		{
		    $localContext = new Context\SavepointStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 306, self::RULE_savepointStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4311);
		        $this->match(self::SAVEPOINT);
		        $this->setState(4312);
		        $this->uid();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function rollbackStatement(): Context\RollbackStatementContext
		{
		    $localContext = new Context\RollbackStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 308, self::RULE_rollbackStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4314);
		        $this->match(self::ROLLBACK);
		        $this->setState(4316);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::WORK) {
		        	$this->setState(4315);
		        	$this->match(self::WORK);
		        }
		        $this->setState(4318);
		        $this->match(self::TO);
		        $this->setState(4320);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 638, $this->ctx)) {
		            case 1:
		        	    $this->setState(4319);
		        	    $this->match(self::SAVEPOINT);
		        	break;
		        }
		        $this->setState(4322);
		        $this->uid();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function releaseStatement(): Context\ReleaseStatementContext
		{
		    $localContext = new Context\ReleaseStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 310, self::RULE_releaseStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4324);
		        $this->match(self::RELEASE);
		        $this->setState(4325);
		        $this->match(self::SAVEPOINT);
		        $this->setState(4326);
		        $this->uid();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function lockTables(): Context\LockTablesContext
		{
		    $localContext = new Context\LockTablesContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 312, self::RULE_lockTables);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4328);
		        $this->match(self::LOCK);
		        $this->setState(4329);

		        $_la = $this->input->LA(1);

		        if (!($_la === self::TABLE || $_la === self::TABLES)) {
		        $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		        $this->setState(4330);
		        $this->lockTableElement();
		        $this->setState(4335);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::COMMA) {
		        	$this->setState(4331);
		        	$this->match(self::COMMA);
		        	$this->setState(4332);
		        	$this->lockTableElement();
		        	$this->setState(4337);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		        $this->setState(4339);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::NOWAIT || $_la === self::WAIT) {
		        	$this->setState(4338);
		        	$this->waitNowaitClause();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function unlockTables(): Context\UnlockTablesContext
		{
		    $localContext = new Context\UnlockTablesContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 314, self::RULE_unlockTables);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4341);
		        $this->match(self::UNLOCK);
		        $this->setState(4342);
		        $this->match(self::TABLES);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function setAutocommitStatement(): Context\SetAutocommitStatementContext
		{
		    $localContext = new Context\SetAutocommitStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 316, self::RULE_setAutocommitStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4344);
		        $this->match(self::SET);
		        $this->setState(4345);
		        $this->match(self::AUTOCOMMIT);
		        $this->setState(4346);
		        $this->match(self::EQUAL_SYMBOL);
		        $this->setState(4347);

		        $localContext->autocommitValue = $this->input->LT(1);
		        $_la = $this->input->LA(1);

		        if (!($_la === self::ZERO_DECIMAL || $_la === self::ONE_DECIMAL)) {
		        	    $localContext->autocommitValue = $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function setTransactionStatement(): Context\SetTransactionStatementContext
		{
		    $localContext = new Context\SetTransactionStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 318, self::RULE_setTransactionStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4349);
		        $this->match(self::SET);
		        $this->setState(4351);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::GLOBAL || $_la === self::SESSION) {
		        	$this->setState(4350);

		        	$localContext->transactionContext = $this->input->LT(1);
		        	$_la = $this->input->LA(1);

		        	if (!($_la === self::GLOBAL || $_la === self::SESSION)) {
		        		    $localContext->transactionContext = $this->errorHandler->recoverInline($this);
		        	} else {
		        		if ($this->input->LA(1) === Token::EOF) {
		        		    $this->matchedEOF = true;
		        	    }

		        		$this->errorHandler->reportMatch($this);
		        		$this->consume();
		        	}
		        }
		        $this->setState(4353);
		        $this->match(self::TRANSACTION);
		        $this->setState(4354);
		        $this->transactionOption();
		        $this->setState(4359);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::COMMA) {
		        	$this->setState(4355);
		        	$this->match(self::COMMA);
		        	$this->setState(4356);
		        	$this->transactionOption();
		        	$this->setState(4361);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function transactionMode(): Context\TransactionModeContext
		{
		    $localContext = new Context\TransactionModeContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 320, self::RULE_transactionMode);

		    try {
		        $this->setState(4369);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 643, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(4362);
		        	    $this->match(self::WITH);
		        	    $this->setState(4363);
		        	    $this->match(self::CONSISTENT);
		        	    $this->setState(4364);
		        	    $this->match(self::SNAPSHOT);
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(4365);
		        	    $this->match(self::READ);
		        	    $this->setState(4366);
		        	    $this->match(self::WRITE);
		        	break;

		        	case 3:
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(4367);
		        	    $this->match(self::READ);
		        	    $this->setState(4368);
		        	    $this->match(self::ONLY);
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function lockTableElement(): Context\LockTableElementContext
		{
		    $localContext = new Context\LockTableElementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 322, self::RULE_lockTableElement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4371);
		        $this->tableName();
		        $this->setState(4376);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if (((($_la) & ~0x3f) === 0 && ((1 << $_la) & 756891332513126400) !== 0) || (((($_la - 73)) & ~0x3f) === 0 && ((1 << ($_la - 73)) & 146666055071174737) !== 0) || (((($_la - 140)) & ~0x3f) === 0 && ((1 << ($_la - 140)) & 268698883) !== 0) || (((($_la - 217)) & ~0x3f) === 0 && ((1 << ($_la - 217)) & -17174494689) !== 0) || (((($_la - 281)) & ~0x3f) === 0 && ((1 << ($_la - 281)) & -1099511627777) !== 0) || (((($_la - 345)) & ~0x3f) === 0 && ((1 << ($_la - 345)) & -2882305960540372993) !== 0) || (((($_la - 409)) & ~0x3f) === 0 && ((1 << ($_la - 409)) & -4398063288321) !== 0) || (((($_la - 473)) & ~0x3f) === 0 && ((1 << ($_la - 473)) & -16325548649218049) !== 0) || (((($_la - 537)) & ~0x3f) === 0 && ((1 << ($_la - 537)) & -81064793296864001) !== 0) || (((($_la - 601)) & ~0x3f) === 0 && ((1 << ($_la - 601)) & -68719476801) !== 0) || (((($_la - 665)) & ~0x3f) === 0 && ((1 << ($_la - 665)) & -22236531750340609) !== 0) || (((($_la - 729)) & ~0x3f) === 0 && ((1 << ($_la - 729)) & -65) !== 0) || (((($_la - 793)) & ~0x3f) === 0 && ((1 << ($_la - 793)) & -6145) !== 0) || (((($_la - 857)) & ~0x3f) === 0 && ((1 << ($_la - 857)) & -1) !== 0) || (((($_la - 921)) & ~0x3f) === 0 && ((1 << ($_la - 921)) & -1) !== 0) || (((($_la - 985)) & ~0x3f) === 0 && ((1 << ($_la - 985)) & -1) !== 0) || (((($_la - 1049)) & ~0x3f) === 0 && ((1 << ($_la - 1049)) & 576460752303423487) !== 0) || (((($_la - 1123)) & ~0x3f) === 0 && ((1 << ($_la - 1123)) & 8627683329) !== 0)) {
		        	$this->setState(4373);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);

		        	if ($_la === self::AS) {
		        		$this->setState(4372);
		        		$this->match(self::AS);
		        	}
		        	$this->setState(4375);
		        	$this->uid();
		        }
		        $this->setState(4378);
		        $this->lockAction();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function lockAction(): Context\LockActionContext
		{
		    $localContext = new Context\LockActionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 324, self::RULE_lockAction);

		    try {
		        $this->setState(4388);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::READ:
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(4380);
		            	$this->match(self::READ);
		            	$this->setState(4382);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::LOCAL) {
		            		$this->setState(4381);
		            		$this->match(self::LOCAL);
		            	}
		            	break;

		            case self::LOW_PRIORITY:
		            case self::WRITE:
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(4385);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::LOW_PRIORITY) {
		            		$this->setState(4384);
		            		$this->match(self::LOW_PRIORITY);
		            	}
		            	$this->setState(4387);
		            	$this->match(self::WRITE);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function transactionOption(): Context\TransactionOptionContext
		{
		    $localContext = new Context\TransactionOptionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 326, self::RULE_transactionOption);

		    try {
		        $this->setState(4397);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 649, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(4390);
		        	    $this->match(self::ISOLATION);
		        	    $this->setState(4391);
		        	    $this->match(self::LEVEL);
		        	    $this->setState(4392);
		        	    $this->transactionLevel();
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(4393);
		        	    $this->match(self::READ);
		        	    $this->setState(4394);
		        	    $this->match(self::WRITE);
		        	break;

		        	case 3:
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(4395);
		        	    $this->match(self::READ);
		        	    $this->setState(4396);
		        	    $this->match(self::ONLY);
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function transactionLevel(): Context\TransactionLevelContext
		{
		    $localContext = new Context\TransactionLevelContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 328, self::RULE_transactionLevel);

		    try {
		        $this->setState(4406);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 650, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(4399);
		        	    $this->match(self::REPEATABLE);
		        	    $this->setState(4400);
		        	    $this->match(self::READ);
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(4401);
		        	    $this->match(self::READ);
		        	    $this->setState(4402);
		        	    $this->match(self::COMMITTED);
		        	break;

		        	case 3:
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(4403);
		        	    $this->match(self::READ);
		        	    $this->setState(4404);
		        	    $this->match(self::UNCOMMITTED);
		        	break;

		        	case 4:
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(4405);
		        	    $this->match(self::SERIALIZABLE);
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function changeMaster(): Context\ChangeMasterContext
		{
		    $localContext = new Context\ChangeMasterContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 330, self::RULE_changeMaster);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4408);
		        $this->match(self::CHANGE);
		        $this->setState(4409);
		        $this->match(self::MASTER);
		        $this->setState(4410);
		        $this->match(self::TO);
		        $this->setState(4411);
		        $this->masterOption();
		        $this->setState(4416);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::COMMA) {
		        	$this->setState(4412);
		        	$this->match(self::COMMA);
		        	$this->setState(4413);
		        	$this->masterOption();
		        	$this->setState(4418);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		        $this->setState(4420);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::FOR) {
		        	$this->setState(4419);
		        	$this->channelOption();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function changeReplicationFilter(): Context\ChangeReplicationFilterContext
		{
		    $localContext = new Context\ChangeReplicationFilterContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 332, self::RULE_changeReplicationFilter);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4422);
		        $this->match(self::CHANGE);
		        $this->setState(4423);
		        $this->match(self::REPLICATION);
		        $this->setState(4424);
		        $this->match(self::FILTER);
		        $this->setState(4425);
		        $this->replicationFilter();
		        $this->setState(4430);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::COMMA) {
		        	$this->setState(4426);
		        	$this->match(self::COMMA);
		        	$this->setState(4427);
		        	$this->replicationFilter();
		        	$this->setState(4432);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function purgeBinaryLogs(): Context\PurgeBinaryLogsContext
		{
		    $localContext = new Context\PurgeBinaryLogsContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 334, self::RULE_purgeBinaryLogs);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4433);
		        $this->match(self::PURGE);
		        $this->setState(4434);

		        $localContext->purgeFormat = $this->input->LT(1);
		        $_la = $this->input->LA(1);

		        if (!($_la === self::BINARY || $_la === self::MASTER)) {
		        	    $localContext->purgeFormat = $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		        $this->setState(4435);
		        $this->match(self::LOGS);
		        $this->setState(4440);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::TO:
		            	$this->setState(4436);
		            	$this->match(self::TO);
		            	$this->setState(4437);
		            	$localContext->fileName = $this->match(self::STRING_LITERAL);
		            	break;

		            case self::BEFORE:
		            	$this->setState(4438);
		            	$this->match(self::BEFORE);
		            	$this->setState(4439);
		            	$localContext->timeValue = $this->match(self::STRING_LITERAL);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function resetMaster(): Context\ResetMasterContext
		{
		    $localContext = new Context\ResetMasterContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 336, self::RULE_resetMaster);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4442);
		        $this->match(self::RESET);
		        $this->setState(4443);
		        $this->match(self::MASTER);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function resetSlave(): Context\ResetSlaveContext
		{
		    $localContext = new Context\ResetSlaveContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 338, self::RULE_resetSlave);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4445);
		        $this->match(self::RESET);
		        $this->setState(4446);
		        $this->match(self::SLAVE);
		        $this->setState(4448);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::ALL) {
		        	$this->setState(4447);
		        	$this->match(self::ALL);
		        }
		        $this->setState(4451);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::FOR) {
		        	$this->setState(4450);
		        	$this->channelOption();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function startSlave(): Context\StartSlaveContext
		{
		    $localContext = new Context\StartSlaveContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 340, self::RULE_startSlave);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4453);
		        $this->match(self::START);
		        $this->setState(4454);
		        $this->match(self::SLAVE);
		        $this->setState(4463);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::IO_THREAD || $_la === self::SQL_THREAD) {
		        	$this->setState(4455);
		        	$this->threadType();
		        	$this->setState(4460);
		        	$this->errorHandler->sync($this);

		        	$_la = $this->input->LA(1);
		        	while ($_la === self::COMMA) {
		        		$this->setState(4456);
		        		$this->match(self::COMMA);
		        		$this->setState(4457);
		        		$this->threadType();
		        		$this->setState(4462);
		        		$this->errorHandler->sync($this);
		        		$_la = $this->input->LA(1);
		        	}
		        }
		        $this->setState(4467);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::UNTIL) {
		        	$this->setState(4465);
		        	$this->match(self::UNTIL);
		        	$this->setState(4466);
		        	$this->untilOption();
		        }
		        $this->setState(4472);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::DEFAULT_AUTH || $_la === self::PASSWORD || $_la === self::PLUGIN_DIR || $_la === self::USER) {
		        	$this->setState(4469);
		        	$this->connectionOption();
		        	$this->setState(4474);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		        $this->setState(4476);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::FOR) {
		        	$this->setState(4475);
		        	$this->channelOption();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function stopSlave(): Context\StopSlaveContext
		{
		    $localContext = new Context\StopSlaveContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 342, self::RULE_stopSlave);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4478);
		        $this->match(self::STOP);
		        $this->setState(4479);
		        $this->match(self::SLAVE);
		        $this->setState(4488);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::IO_THREAD || $_la === self::SQL_THREAD) {
		        	$this->setState(4480);
		        	$this->threadType();
		        	$this->setState(4485);
		        	$this->errorHandler->sync($this);

		        	$_la = $this->input->LA(1);
		        	while ($_la === self::COMMA) {
		        		$this->setState(4481);
		        		$this->match(self::COMMA);
		        		$this->setState(4482);
		        		$this->threadType();
		        		$this->setState(4487);
		        		$this->errorHandler->sync($this);
		        		$_la = $this->input->LA(1);
		        	}
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function startGroupReplication(): Context\StartGroupReplicationContext
		{
		    $localContext = new Context\StartGroupReplicationContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 344, self::RULE_startGroupReplication);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4490);
		        $this->match(self::START);
		        $this->setState(4491);
		        $this->match(self::GROUP_REPLICATION);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function stopGroupReplication(): Context\StopGroupReplicationContext
		{
		    $localContext = new Context\StopGroupReplicationContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 346, self::RULE_stopGroupReplication);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4493);
		        $this->match(self::STOP);
		        $this->setState(4494);
		        $this->match(self::GROUP_REPLICATION);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function masterOption(): Context\MasterOptionContext
		{
		    $localContext = new Context\MasterOptionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 348, self::RULE_masterOption);

		    try {
		        $this->setState(4525);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::MASTER_BIND:
		            case self::MASTER_HOST:
		            case self::MASTER_LOG_FILE:
		            case self::MASTER_PASSWORD:
		            case self::MASTER_SSL_CA:
		            case self::MASTER_SSL_CAPATH:
		            case self::MASTER_SSL_CERT:
		            case self::MASTER_SSL_CIPHER:
		            case self::MASTER_SSL_CRL:
		            case self::MASTER_SSL_CRLPATH:
		            case self::MASTER_SSL_KEY:
		            case self::MASTER_TLS_VERSION:
		            case self::MASTER_USER:
		            case self::RELAY_LOG_FILE:
		            	$localContext = new Context\MasterStringOptionContext($localContext);
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(4496);
		            	$this->stringMasterOption();
		            	$this->setState(4497);
		            	$this->match(self::EQUAL_SYMBOL);
		            	$this->setState(4498);
		            	$this->match(self::STRING_LITERAL);
		            	break;

		            case self::MASTER_CONNECT_RETRY:
		            case self::MASTER_DELAY:
		            case self::MASTER_LOG_POS:
		            case self::MASTER_PORT:
		            case self::MASTER_RETRY_COUNT:
		            case self::RELAY_LOG_POS:
		            	$localContext = new Context\MasterDecimalOptionContext($localContext);
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(4500);
		            	$this->decimalMasterOption();
		            	$this->setState(4501);
		            	$this->match(self::EQUAL_SYMBOL);
		            	$this->setState(4502);
		            	$this->decimalLiteral();
		            	break;

		            case self::MASTER_SSL_VERIFY_SERVER_CERT:
		            case self::MASTER_AUTO_POSITION:
		            case self::MASTER_SSL:
		            	$localContext = new Context\MasterBoolOptionContext($localContext);
		            	$this->enterOuterAlt($localContext, 3);
		            	$this->setState(4504);
		            	$this->boolMasterOption();
		            	$this->setState(4505);
		            	$this->match(self::EQUAL_SYMBOL);
		            	$this->setState(4506);

		            	$localContext->boolVal = $this->input->LT(1);
		            	$_la = $this->input->LA(1);

		            	if (!($_la === self::ZERO_DECIMAL || $_la === self::ONE_DECIMAL)) {
		            		    $localContext->boolVal = $this->errorHandler->recoverInline($this);
		            	} else {
		            		if ($this->input->LA(1) === Token::EOF) {
		            		    $this->matchedEOF = true;
		            	    }

		            		$this->errorHandler->reportMatch($this);
		            		$this->consume();
		            	}
		            	break;

		            case self::MASTER_HEARTBEAT_PERIOD:
		            	$localContext = new Context\MasterRealOptionContext($localContext);
		            	$this->enterOuterAlt($localContext, 4);
		            	$this->setState(4508);
		            	$this->match(self::MASTER_HEARTBEAT_PERIOD);
		            	$this->setState(4509);
		            	$this->match(self::EQUAL_SYMBOL);
		            	$this->setState(4510);
		            	$this->match(self::REAL_LITERAL);
		            	break;

		            case self::IGNORE_SERVER_IDS:
		            	$localContext = new Context\MasterUidListOptionContext($localContext);
		            	$this->enterOuterAlt($localContext, 5);
		            	$this->setState(4511);
		            	$this->match(self::IGNORE_SERVER_IDS);
		            	$this->setState(4512);
		            	$this->match(self::EQUAL_SYMBOL);
		            	$this->setState(4513);
		            	$this->match(self::LR_BRACKET);
		            	$this->setState(4522);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if (((($_la) & ~0x3f) === 0 && ((1 << $_la) & 756891332513122304) !== 0) || (((($_la - 73)) & ~0x3f) === 0 && ((1 << ($_la - 73)) & 146666055071174737) !== 0) || (((($_la - 140)) & ~0x3f) === 0 && ((1 << ($_la - 140)) & 268698883) !== 0) || (((($_la - 217)) & ~0x3f) === 0 && ((1 << ($_la - 217)) & -17174494689) !== 0) || (((($_la - 281)) & ~0x3f) === 0 && ((1 << ($_la - 281)) & -1099511627777) !== 0) || (((($_la - 345)) & ~0x3f) === 0 && ((1 << ($_la - 345)) & -2882305960540372993) !== 0) || (((($_la - 409)) & ~0x3f) === 0 && ((1 << ($_la - 409)) & -4398063288321) !== 0) || (((($_la - 473)) & ~0x3f) === 0 && ((1 << ($_la - 473)) & -16325548649218049) !== 0) || (((($_la - 537)) & ~0x3f) === 0 && ((1 << ($_la - 537)) & -81064793296864001) !== 0) || (((($_la - 601)) & ~0x3f) === 0 && ((1 << ($_la - 601)) & -68719476801) !== 0) || (((($_la - 665)) & ~0x3f) === 0 && ((1 << ($_la - 665)) & -22236531750340609) !== 0) || (((($_la - 729)) & ~0x3f) === 0 && ((1 << ($_la - 729)) & -65) !== 0) || (((($_la - 793)) & ~0x3f) === 0 && ((1 << ($_la - 793)) & -6145) !== 0) || (((($_la - 857)) & ~0x3f) === 0 && ((1 << ($_la - 857)) & -1) !== 0) || (((($_la - 921)) & ~0x3f) === 0 && ((1 << ($_la - 921)) & -1) !== 0) || (((($_la - 985)) & ~0x3f) === 0 && ((1 << ($_la - 985)) & -1) !== 0) || (((($_la - 1049)) & ~0x3f) === 0 && ((1 << ($_la - 1049)) & 576460752303423487) !== 0) || (((($_la - 1123)) & ~0x3f) === 0 && ((1 << ($_la - 1123)) & 8627683329) !== 0)) {
		            		$this->setState(4514);
		            		$this->uid();
		            		$this->setState(4519);
		            		$this->errorHandler->sync($this);

		            		$_la = $this->input->LA(1);
		            		while ($_la === self::COMMA) {
		            			$this->setState(4515);
		            			$this->match(self::COMMA);
		            			$this->setState(4516);
		            			$this->uid();
		            			$this->setState(4521);
		            			$this->errorHandler->sync($this);
		            			$_la = $this->input->LA(1);
		            		}
		            	}
		            	$this->setState(4524);
		            	$this->match(self::RR_BRACKET);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function stringMasterOption(): Context\StringMasterOptionContext
		{
		    $localContext = new Context\StringMasterOptionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 350, self::RULE_stringMasterOption);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4527);

		        $_la = $this->input->LA(1);

		        if (!($_la === self::MASTER_BIND || (((($_la - 482)) & ~0x3f) === 0 && ((1 << ($_la - 482)) & 65419) !== 0) || $_la === self::RELAY_LOG_FILE)) {
		        $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function decimalMasterOption(): Context\DecimalMasterOptionContext
		{
		    $localContext = new Context\DecimalMasterOptionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 352, self::RULE_decimalMasterOption);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4529);

		        $_la = $this->input->LA(1);

		        if (!((((($_la - 479)) & ~0x3f) === 0 && ((1 << ($_la - 479)) & 419) !== 0) || $_la === self::RELAY_LOG_POS)) {
		        $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function boolMasterOption(): Context\BoolMasterOptionContext
		{
		    $localContext = new Context\BoolMasterOptionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 354, self::RULE_boolMasterOption);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4531);

		        $_la = $this->input->LA(1);

		        if (!($_la === self::MASTER_SSL_VERIFY_SERVER_CERT || $_la === self::MASTER_AUTO_POSITION || $_la === self::MASTER_SSL)) {
		        $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function channelOption(): Context\ChannelOptionContext
		{
		    $localContext = new Context\ChannelOptionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 356, self::RULE_channelOption);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4533);
		        $this->match(self::FOR);
		        $this->setState(4534);
		        $this->match(self::CHANNEL);
		        $this->setState(4535);
		        $this->match(self::STRING_LITERAL);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function replicationFilter(): Context\ReplicationFilterContext
		{
		    $localContext = new Context\ReplicationFilterContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 358, self::RULE_replicationFilter);

		    try {
		        $this->setState(4586);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::REPLICATE_DO_DB:
		            	$localContext = new Context\DoDbReplicationContext($localContext);
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(4537);
		            	$this->match(self::REPLICATE_DO_DB);
		            	$this->setState(4538);
		            	$this->match(self::EQUAL_SYMBOL);
		            	$this->setState(4539);
		            	$this->match(self::LR_BRACKET);
		            	$this->setState(4540);
		            	$this->uidList();
		            	$this->setState(4541);
		            	$this->match(self::RR_BRACKET);
		            	break;

		            case self::REPLICATE_IGNORE_DB:
		            	$localContext = new Context\IgnoreDbReplicationContext($localContext);
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(4543);
		            	$this->match(self::REPLICATE_IGNORE_DB);
		            	$this->setState(4544);
		            	$this->match(self::EQUAL_SYMBOL);
		            	$this->setState(4545);
		            	$this->match(self::LR_BRACKET);
		            	$this->setState(4546);
		            	$this->uidList();
		            	$this->setState(4547);
		            	$this->match(self::RR_BRACKET);
		            	break;

		            case self::REPLICATE_DO_TABLE:
		            	$localContext = new Context\DoTableReplicationContext($localContext);
		            	$this->enterOuterAlt($localContext, 3);
		            	$this->setState(4549);
		            	$this->match(self::REPLICATE_DO_TABLE);
		            	$this->setState(4550);
		            	$this->match(self::EQUAL_SYMBOL);
		            	$this->setState(4551);
		            	$this->match(self::LR_BRACKET);
		            	$this->setState(4552);
		            	$this->tables();
		            	$this->setState(4553);
		            	$this->match(self::RR_BRACKET);
		            	break;

		            case self::REPLICATE_IGNORE_TABLE:
		            	$localContext = new Context\IgnoreTableReplicationContext($localContext);
		            	$this->enterOuterAlt($localContext, 4);
		            	$this->setState(4555);
		            	$this->match(self::REPLICATE_IGNORE_TABLE);
		            	$this->setState(4556);
		            	$this->match(self::EQUAL_SYMBOL);
		            	$this->setState(4557);
		            	$this->match(self::LR_BRACKET);
		            	$this->setState(4558);
		            	$this->tables();
		            	$this->setState(4559);
		            	$this->match(self::RR_BRACKET);
		            	break;

		            case self::REPLICATE_WILD_DO_TABLE:
		            	$localContext = new Context\WildDoTableReplicationContext($localContext);
		            	$this->enterOuterAlt($localContext, 5);
		            	$this->setState(4561);
		            	$this->match(self::REPLICATE_WILD_DO_TABLE);
		            	$this->setState(4562);
		            	$this->match(self::EQUAL_SYMBOL);
		            	$this->setState(4563);
		            	$this->match(self::LR_BRACKET);
		            	$this->setState(4564);
		            	$this->simpleStrings();
		            	$this->setState(4565);
		            	$this->match(self::RR_BRACKET);
		            	break;

		            case self::REPLICATE_WILD_IGNORE_TABLE:
		            	$localContext = new Context\WildIgnoreTableReplicationContext($localContext);
		            	$this->enterOuterAlt($localContext, 6);
		            	$this->setState(4567);
		            	$this->match(self::REPLICATE_WILD_IGNORE_TABLE);
		            	$this->setState(4568);
		            	$this->match(self::EQUAL_SYMBOL);
		            	$this->setState(4569);
		            	$this->match(self::LR_BRACKET);
		            	$this->setState(4570);
		            	$this->simpleStrings();
		            	$this->setState(4571);
		            	$this->match(self::RR_BRACKET);
		            	break;

		            case self::REPLICATE_REWRITE_DB:
		            	$localContext = new Context\RewriteDbReplicationContext($localContext);
		            	$this->enterOuterAlt($localContext, 7);
		            	$this->setState(4573);
		            	$this->match(self::REPLICATE_REWRITE_DB);
		            	$this->setState(4574);
		            	$this->match(self::EQUAL_SYMBOL);
		            	$this->setState(4575);
		            	$this->match(self::LR_BRACKET);
		            	$this->setState(4576);
		            	$this->tablePair();
		            	$this->setState(4581);
		            	$this->errorHandler->sync($this);

		            	$_la = $this->input->LA(1);
		            	while ($_la === self::COMMA) {
		            		$this->setState(4577);
		            		$this->match(self::COMMA);
		            		$this->setState(4578);
		            		$this->tablePair();
		            		$this->setState(4583);
		            		$this->errorHandler->sync($this);
		            		$_la = $this->input->LA(1);
		            	}
		            	$this->setState(4584);
		            	$this->match(self::RR_BRACKET);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function tablePair(): Context\TablePairContext
		{
		    $localContext = new Context\TablePairContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 360, self::RULE_tablePair);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4588);
		        $this->match(self::LR_BRACKET);
		        $this->setState(4589);
		        $localContext->firstTable = $this->tableName();
		        $this->setState(4590);
		        $this->match(self::COMMA);
		        $this->setState(4591);
		        $localContext->secondTable = $this->tableName();
		        $this->setState(4592);
		        $this->match(self::RR_BRACKET);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function threadType(): Context\ThreadTypeContext
		{
		    $localContext = new Context\ThreadTypeContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 362, self::RULE_threadType);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4594);

		        $_la = $this->input->LA(1);

		        if (!($_la === self::IO_THREAD || $_la === self::SQL_THREAD)) {
		        $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function untilOption(): Context\UntilOptionContext
		{
		    $localContext = new Context\UntilOptionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 364, self::RULE_untilOption);

		    try {
		        $this->setState(4614);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::SQL_AFTER_GTIDS:
		            case self::SQL_BEFORE_GTIDS:
		            	$localContext = new Context\GtidsUntilOptionContext($localContext);
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(4596);

		            	$localContext->gtids = $this->input->LT(1);
		            	$_la = $this->input->LA(1);

		            	if (!($_la === self::SQL_AFTER_GTIDS || $_la === self::SQL_BEFORE_GTIDS)) {
		            		    $localContext->gtids = $this->errorHandler->recoverInline($this);
		            	} else {
		            		if ($this->input->LA(1) === Token::EOF) {
		            		    $this->matchedEOF = true;
		            	    }

		            		$this->errorHandler->reportMatch($this);
		            		$this->consume();
		            	}
		            	$this->setState(4597);
		            	$this->match(self::EQUAL_SYMBOL);
		            	$this->setState(4598);
		            	$this->gtuidSet();
		            	break;

		            case self::MASTER_LOG_FILE:
		            	$localContext = new Context\MasterLogUntilOptionContext($localContext);
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(4599);
		            	$this->match(self::MASTER_LOG_FILE);
		            	$this->setState(4600);
		            	$this->match(self::EQUAL_SYMBOL);
		            	$this->setState(4601);
		            	$this->match(self::STRING_LITERAL);
		            	$this->setState(4602);
		            	$this->match(self::COMMA);
		            	$this->setState(4603);
		            	$this->match(self::MASTER_LOG_POS);
		            	$this->setState(4604);
		            	$this->match(self::EQUAL_SYMBOL);
		            	$this->setState(4605);
		            	$this->decimalLiteral();
		            	break;

		            case self::RELAY_LOG_FILE:
		            	$localContext = new Context\RelayLogUntilOptionContext($localContext);
		            	$this->enterOuterAlt($localContext, 3);
		            	$this->setState(4606);
		            	$this->match(self::RELAY_LOG_FILE);
		            	$this->setState(4607);
		            	$this->match(self::EQUAL_SYMBOL);
		            	$this->setState(4608);
		            	$this->match(self::STRING_LITERAL);
		            	$this->setState(4609);
		            	$this->match(self::COMMA);
		            	$this->setState(4610);
		            	$this->match(self::RELAY_LOG_POS);
		            	$this->setState(4611);
		            	$this->match(self::EQUAL_SYMBOL);
		            	$this->setState(4612);
		            	$this->decimalLiteral();
		            	break;

		            case self::SQL_AFTER_MTS_GAPS:
		            	$localContext = new Context\SqlGapsUntilOptionContext($localContext);
		            	$this->enterOuterAlt($localContext, 4);
		            	$this->setState(4613);
		            	$this->match(self::SQL_AFTER_MTS_GAPS);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function connectionOption(): Context\ConnectionOptionContext
		{
		    $localContext = new Context\ConnectionOptionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 366, self::RULE_connectionOption);

		    try {
		        $this->setState(4628);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::USER:
		            	$localContext = new Context\UserConnectionOptionContext($localContext);
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(4616);
		            	$this->match(self::USER);
		            	$this->setState(4617);
		            	$this->match(self::EQUAL_SYMBOL);
		            	$this->setState(4618);
		            	$localContext->conOptUser = $this->match(self::STRING_LITERAL);
		            	break;

		            case self::PASSWORD:
		            	$localContext = new Context\PasswordConnectionOptionContext($localContext);
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(4619);
		            	$this->match(self::PASSWORD);
		            	$this->setState(4620);
		            	$this->match(self::EQUAL_SYMBOL);
		            	$this->setState(4621);
		            	$localContext->conOptPassword = $this->match(self::STRING_LITERAL);
		            	break;

		            case self::DEFAULT_AUTH:
		            	$localContext = new Context\DefaultAuthConnectionOptionContext($localContext);
		            	$this->enterOuterAlt($localContext, 3);
		            	$this->setState(4622);
		            	$this->match(self::DEFAULT_AUTH);
		            	$this->setState(4623);
		            	$this->match(self::EQUAL_SYMBOL);
		            	$this->setState(4624);
		            	$localContext->conOptDefAuth = $this->match(self::STRING_LITERAL);
		            	break;

		            case self::PLUGIN_DIR:
		            	$localContext = new Context\PluginDirConnectionOptionContext($localContext);
		            	$this->enterOuterAlt($localContext, 4);
		            	$this->setState(4625);
		            	$this->match(self::PLUGIN_DIR);
		            	$this->setState(4626);
		            	$this->match(self::EQUAL_SYMBOL);
		            	$this->setState(4627);
		            	$localContext->conOptPluginDir = $this->match(self::STRING_LITERAL);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function gtuidSet(): Context\GtuidSetContext
		{
		    $localContext = new Context\GtuidSetContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 368, self::RULE_gtuidSet);

		    try {
		        $this->setState(4639);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::ZERO_DECIMAL:
		            case self::ONE_DECIMAL:
		            case self::TWO_DECIMAL:
		            case self::DECIMAL_LITERAL:
		            case self::REAL_LITERAL:
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(4630);
		            	$this->uuidSet();
		            	$this->setState(4635);
		            	$this->errorHandler->sync($this);

		            	$_la = $this->input->LA(1);
		            	while ($_la === self::COMMA) {
		            		$this->setState(4631);
		            		$this->match(self::COMMA);
		            		$this->setState(4632);
		            		$this->uuidSet();
		            		$this->setState(4637);
		            		$this->errorHandler->sync($this);
		            		$_la = $this->input->LA(1);
		            	}
		            	break;

		            case self::STRING_LITERAL:
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(4638);
		            	$this->match(self::STRING_LITERAL);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function xaStartTransaction(): Context\XaStartTransactionContext
		{
		    $localContext = new Context\XaStartTransactionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 370, self::RULE_xaStartTransaction);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4641);
		        $this->match(self::XA);
		        $this->setState(4642);

		        $localContext->xaStart = $this->input->LT(1);
		        $_la = $this->input->LA(1);

		        if (!($_la === self::BEGIN || $_la === self::START)) {
		        	    $localContext->xaStart = $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		        $this->setState(4643);
		        $this->xid();
		        $this->setState(4645);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::JOIN || $_la === self::RESUME) {
		        	$this->setState(4644);

		        	$localContext->xaAction = $this->input->LT(1);
		        	$_la = $this->input->LA(1);

		        	if (!($_la === self::JOIN || $_la === self::RESUME)) {
		        		    $localContext->xaAction = $this->errorHandler->recoverInline($this);
		        	} else {
		        		if ($this->input->LA(1) === Token::EOF) {
		        		    $this->matchedEOF = true;
		        	    }

		        		$this->errorHandler->reportMatch($this);
		        		$this->consume();
		        	}
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function xaEndTransaction(): Context\XaEndTransactionContext
		{
		    $localContext = new Context\XaEndTransactionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 372, self::RULE_xaEndTransaction);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4647);
		        $this->match(self::XA);
		        $this->setState(4648);
		        $this->match(self::END);
		        $this->setState(4649);
		        $this->xid();
		        $this->setState(4655);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::SUSPEND) {
		        	$this->setState(4650);
		        	$this->match(self::SUSPEND);
		        	$this->setState(4653);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);

		        	if ($_la === self::FOR) {
		        		$this->setState(4651);
		        		$this->match(self::FOR);
		        		$this->setState(4652);
		        		$this->match(self::MIGRATE);
		        	}
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function xaPrepareStatement(): Context\XaPrepareStatementContext
		{
		    $localContext = new Context\XaPrepareStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 374, self::RULE_xaPrepareStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4657);
		        $this->match(self::XA);
		        $this->setState(4658);
		        $this->match(self::PREPARE);
		        $this->setState(4659);
		        $this->xid();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function xaCommitWork(): Context\XaCommitWorkContext
		{
		    $localContext = new Context\XaCommitWorkContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 376, self::RULE_xaCommitWork);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4661);
		        $this->match(self::XA);
		        $this->setState(4662);
		        $this->match(self::COMMIT);
		        $this->setState(4663);
		        $this->xid();
		        $this->setState(4666);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::ONE) {
		        	$this->setState(4664);
		        	$this->match(self::ONE);
		        	$this->setState(4665);
		        	$this->match(self::PHASE);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function xaRollbackWork(): Context\XaRollbackWorkContext
		{
		    $localContext = new Context\XaRollbackWorkContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 378, self::RULE_xaRollbackWork);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4668);
		        $this->match(self::XA);
		        $this->setState(4669);
		        $this->match(self::ROLLBACK);
		        $this->setState(4670);
		        $this->xid();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function xaRecoverWork(): Context\XaRecoverWorkContext
		{
		    $localContext = new Context\XaRecoverWorkContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 380, self::RULE_xaRecoverWork);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4672);
		        $this->match(self::XA);
		        $this->setState(4673);
		        $this->match(self::RECOVER);
		        $this->setState(4676);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::CONVERT) {
		        	$this->setState(4674);
		        	$this->match(self::CONVERT);
		        	$this->setState(4675);
		        	$this->xid();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function prepareStatement(): Context\PrepareStatementContext
		{
		    $localContext = new Context\PrepareStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 382, self::RULE_prepareStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4678);
		        $this->match(self::PREPARE);
		        $this->setState(4679);
		        $this->uid();
		        $this->setState(4680);
		        $this->match(self::FROM);
		        $this->setState(4683);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::STRING_LITERAL:
		            	$this->setState(4681);
		            	$localContext->query = $this->match(self::STRING_LITERAL);
		            	break;

		            case self::LOCAL_ID:
		            	$this->setState(4682);
		            	$localContext->variable = $this->match(self::LOCAL_ID);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function executeStatement(): Context\ExecuteStatementContext
		{
		    $localContext = new Context\ExecuteStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 384, self::RULE_executeStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4685);
		        $this->match(self::EXECUTE);
		        $this->setState(4686);
		        $this->uid();
		        $this->setState(4689);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::USING) {
		        	$this->setState(4687);
		        	$this->match(self::USING);
		        	$this->setState(4688);
		        	$this->userVariables();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function deallocatePrepare(): Context\DeallocatePrepareContext
		{
		    $localContext = new Context\DeallocatePrepareContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 386, self::RULE_deallocatePrepare);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4691);

		        $localContext->dropFormat = $this->input->LT(1);
		        $_la = $this->input->LA(1);

		        if (!($_la === self::DROP || $_la === self::DEALLOCATE)) {
		        	    $localContext->dropFormat = $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		        $this->setState(4692);
		        $this->match(self::PREPARE);
		        $this->setState(4693);
		        $this->uid();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function routineBody(): Context\RoutineBodyContext
		{
		    $localContext = new Context\RoutineBodyContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 388, self::RULE_routineBody);

		    try {
		        $this->setState(4697);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 680, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(4695);
		        	    $this->blockStatement();
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(4696);
		        	    $this->sqlStatement();
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function blockStatement(): Context\BlockStatementContext
		{
		    $localContext = new Context\BlockStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 390, self::RULE_blockStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4702);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 681, $this->ctx)) {
		            case 1:
		        	    $this->setState(4699);
		        	    $this->uid();
		        	    $this->setState(4700);
		        	    $this->match(self::COLON_SYMB);
		        	break;
		        }
		        $this->setState(4704);
		        $this->match(self::BEGIN);
		        $this->setState(4710);
		        $this->errorHandler->sync($this);

		        $alt = $this->getInterpreter()->adaptivePredict($this->input, 682, $this->ctx);

		        while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
		        	if ($alt === 1) {
		        		$this->setState(4705);
		        		$this->declareVariable();
		        		$this->setState(4706);
		        		$this->match(self::SEMI); 
		        	}

		        	$this->setState(4712);
		        	$this->errorHandler->sync($this);

		        	$alt = $this->getInterpreter()->adaptivePredict($this->input, 682, $this->ctx);
		        }
		        $this->setState(4718);
		        $this->errorHandler->sync($this);

		        $alt = $this->getInterpreter()->adaptivePredict($this->input, 683, $this->ctx);

		        while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
		        	if ($alt === 1) {
		        		$this->setState(4713);
		        		$this->declareCondition();
		        		$this->setState(4714);
		        		$this->match(self::SEMI); 
		        	}

		        	$this->setState(4720);
		        	$this->errorHandler->sync($this);

		        	$alt = $this->getInterpreter()->adaptivePredict($this->input, 683, $this->ctx);
		        }
		        $this->setState(4726);
		        $this->errorHandler->sync($this);

		        $alt = $this->getInterpreter()->adaptivePredict($this->input, 684, $this->ctx);

		        while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
		        	if ($alt === 1) {
		        		$this->setState(4721);
		        		$this->declareCursor();
		        		$this->setState(4722);
		        		$this->match(self::SEMI); 
		        	}

		        	$this->setState(4728);
		        	$this->errorHandler->sync($this);

		        	$alt = $this->getInterpreter()->adaptivePredict($this->input, 684, $this->ctx);
		        }
		        $this->setState(4734);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::DECLARE) {
		        	$this->setState(4729);
		        	$this->declareHandler();
		        	$this->setState(4730);
		        	$this->match(self::SEMI);
		        	$this->setState(4736);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		        $this->setState(4740);
		        $this->errorHandler->sync($this);

		        $alt = $this->getInterpreter()->adaptivePredict($this->input, 686, $this->ctx);

		        while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
		        	if ($alt === 1) {
		        		$this->setState(4737);
		        		$this->procedureSqlStatement(); 
		        	}

		        	$this->setState(4742);
		        	$this->errorHandler->sync($this);

		        	$alt = $this->getInterpreter()->adaptivePredict($this->input, 686, $this->ctx);
		        }
		        $this->setState(4743);
		        $this->match(self::END);
		        $this->setState(4745);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 687, $this->ctx)) {
		            case 1:
		        	    $this->setState(4744);
		        	    $this->uid();
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function caseStatement(): Context\CaseStatementContext
		{
		    $localContext = new Context\CaseStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 392, self::RULE_caseStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4747);
		        $this->match(self::CASE);
		        $this->setState(4750);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 688, $this->ctx)) {
		            case 1:
		        	    $this->setState(4748);
		        	    $this->uid();
		        	break;

		            case 2:
		        	    $this->setState(4749);
		        	    $this->recursiveExpression(0);
		        	break;
		        }
		        $this->setState(4753); 
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        do {
		        	$this->setState(4752);
		        	$this->caseAlternative();
		        	$this->setState(4755); 
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        } while ($_la === self::WHEN);
		        $this->setState(4763);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::ELSE) {
		        	$this->setState(4757);
		        	$this->match(self::ELSE);
		        	$this->setState(4759); 
		        	$this->errorHandler->sync($this);

		        	$alt = 1;

		        	do {
		        		switch ($alt) {
		        		case 1:
		        			$this->setState(4758);
		        			$this->procedureSqlStatement();
		        			break;
		        		default:
		        			throw new NoViableAltException($this);
		        		}

		        		$this->setState(4761); 
		        		$this->errorHandler->sync($this);

		        		$alt = $this->getInterpreter()->adaptivePredict($this->input, 690, $this->ctx);
		        	} while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER);
		        }
		        $this->setState(4765);
		        $this->match(self::END);
		        $this->setState(4766);
		        $this->match(self::CASE);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function ifStatement(): Context\IfStatementContext
		{
		    $localContext = new Context\IfStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 394, self::RULE_ifStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4768);
		        $this->match(self::IF);
		        $this->setState(4769);
		        $this->recursiveExpression(0);
		        $this->setState(4770);
		        $this->match(self::THEN);
		        $this->setState(4772); 
		        $this->errorHandler->sync($this);

		        $alt = 1;

		        do {
		        	switch ($alt) {
		        	case 1:
		        		$this->setState(4771);
		        		$localContext->procedureSqlStatement = $this->procedureSqlStatement();
		        		$localContext->thenStatements[] = $localContext->procedureSqlStatement;
		        		break;
		        	default:
		        		throw new NoViableAltException($this);
		        	}

		        	$this->setState(4774); 
		        	$this->errorHandler->sync($this);

		        	$alt = $this->getInterpreter()->adaptivePredict($this->input, 692, $this->ctx);
		        } while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER);
		        $this->setState(4779);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::ELSEIF) {
		        	$this->setState(4776);
		        	$this->elifAlternative();
		        	$this->setState(4781);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		        $this->setState(4788);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::ELSE) {
		        	$this->setState(4782);
		        	$this->match(self::ELSE);
		        	$this->setState(4784); 
		        	$this->errorHandler->sync($this);

		        	$alt = 1;

		        	do {
		        		switch ($alt) {
		        		case 1:
		        			$this->setState(4783);
		        			$localContext->procedureSqlStatement = $this->procedureSqlStatement();
		        			$localContext->elseStatements[] = $localContext->procedureSqlStatement;
		        			break;
		        		default:
		        			throw new NoViableAltException($this);
		        		}

		        		$this->setState(4786); 
		        		$this->errorHandler->sync($this);

		        		$alt = $this->getInterpreter()->adaptivePredict($this->input, 694, $this->ctx);
		        	} while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER);
		        }
		        $this->setState(4790);
		        $this->match(self::END);
		        $this->setState(4791);
		        $this->match(self::IF);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function iterateStatement(): Context\IterateStatementContext
		{
		    $localContext = new Context\IterateStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 396, self::RULE_iterateStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4793);
		        $this->match(self::ITERATE);
		        $this->setState(4794);
		        $this->uid();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function leaveStatement(): Context\LeaveStatementContext
		{
		    $localContext = new Context\LeaveStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 398, self::RULE_leaveStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4796);
		        $this->match(self::LEAVE);
		        $this->setState(4797);
		        $this->uid();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function loopStatement(): Context\LoopStatementContext
		{
		    $localContext = new Context\LoopStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 400, self::RULE_loopStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4802);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if (((($_la) & ~0x3f) === 0 && ((1 << $_la) & 756891332513122304) !== 0) || (((($_la - 73)) & ~0x3f) === 0 && ((1 << ($_la - 73)) & 146666055071174737) !== 0) || (((($_la - 140)) & ~0x3f) === 0 && ((1 << ($_la - 140)) & 268698883) !== 0) || (((($_la - 217)) & ~0x3f) === 0 && ((1 << ($_la - 217)) & -17174494689) !== 0) || (((($_la - 281)) & ~0x3f) === 0 && ((1 << ($_la - 281)) & -1099511627777) !== 0) || (((($_la - 345)) & ~0x3f) === 0 && ((1 << ($_la - 345)) & -2882305960540372993) !== 0) || (((($_la - 409)) & ~0x3f) === 0 && ((1 << ($_la - 409)) & -4398063288321) !== 0) || (((($_la - 473)) & ~0x3f) === 0 && ((1 << ($_la - 473)) & -16325548649218049) !== 0) || (((($_la - 537)) & ~0x3f) === 0 && ((1 << ($_la - 537)) & -81064793296864001) !== 0) || (((($_la - 601)) & ~0x3f) === 0 && ((1 << ($_la - 601)) & -68719476801) !== 0) || (((($_la - 665)) & ~0x3f) === 0 && ((1 << ($_la - 665)) & -22236531750340609) !== 0) || (((($_la - 729)) & ~0x3f) === 0 && ((1 << ($_la - 729)) & -65) !== 0) || (((($_la - 793)) & ~0x3f) === 0 && ((1 << ($_la - 793)) & -6145) !== 0) || (((($_la - 857)) & ~0x3f) === 0 && ((1 << ($_la - 857)) & -1) !== 0) || (((($_la - 921)) & ~0x3f) === 0 && ((1 << ($_la - 921)) & -1) !== 0) || (((($_la - 985)) & ~0x3f) === 0 && ((1 << ($_la - 985)) & -1) !== 0) || (((($_la - 1049)) & ~0x3f) === 0 && ((1 << ($_la - 1049)) & 576460752303423487) !== 0) || (((($_la - 1123)) & ~0x3f) === 0 && ((1 << ($_la - 1123)) & 8627683329) !== 0)) {
		        	$this->setState(4799);
		        	$this->uid();
		        	$this->setState(4800);
		        	$this->match(self::COLON_SYMB);
		        }
		        $this->setState(4804);
		        $this->match(self::LOOP);
		        $this->setState(4806); 
		        $this->errorHandler->sync($this);

		        $alt = 1;

		        do {
		        	switch ($alt) {
		        	case 1:
		        		$this->setState(4805);
		        		$this->procedureSqlStatement();
		        		break;
		        	default:
		        		throw new NoViableAltException($this);
		        	}

		        	$this->setState(4808); 
		        	$this->errorHandler->sync($this);

		        	$alt = $this->getInterpreter()->adaptivePredict($this->input, 697, $this->ctx);
		        } while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER);
		        $this->setState(4810);
		        $this->match(self::END);
		        $this->setState(4811);
		        $this->match(self::LOOP);
		        $this->setState(4813);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if (((($_la) & ~0x3f) === 0 && ((1 << $_la) & 756891332513122304) !== 0) || (((($_la - 73)) & ~0x3f) === 0 && ((1 << ($_la - 73)) & 146666055071174737) !== 0) || (((($_la - 140)) & ~0x3f) === 0 && ((1 << ($_la - 140)) & 268698883) !== 0) || (((($_la - 217)) & ~0x3f) === 0 && ((1 << ($_la - 217)) & -17174494689) !== 0) || (((($_la - 281)) & ~0x3f) === 0 && ((1 << ($_la - 281)) & -1099511627777) !== 0) || (((($_la - 345)) & ~0x3f) === 0 && ((1 << ($_la - 345)) & -2882305960540372993) !== 0) || (((($_la - 409)) & ~0x3f) === 0 && ((1 << ($_la - 409)) & -4398063288321) !== 0) || (((($_la - 473)) & ~0x3f) === 0 && ((1 << ($_la - 473)) & -16325548649218049) !== 0) || (((($_la - 537)) & ~0x3f) === 0 && ((1 << ($_la - 537)) & -81064793296864001) !== 0) || (((($_la - 601)) & ~0x3f) === 0 && ((1 << ($_la - 601)) & -68719476801) !== 0) || (((($_la - 665)) & ~0x3f) === 0 && ((1 << ($_la - 665)) & -22236531750340609) !== 0) || (((($_la - 729)) & ~0x3f) === 0 && ((1 << ($_la - 729)) & -65) !== 0) || (((($_la - 793)) & ~0x3f) === 0 && ((1 << ($_la - 793)) & -6145) !== 0) || (((($_la - 857)) & ~0x3f) === 0 && ((1 << ($_la - 857)) & -1) !== 0) || (((($_la - 921)) & ~0x3f) === 0 && ((1 << ($_la - 921)) & -1) !== 0) || (((($_la - 985)) & ~0x3f) === 0 && ((1 << ($_la - 985)) & -1) !== 0) || (((($_la - 1049)) & ~0x3f) === 0 && ((1 << ($_la - 1049)) & 576460752303423487) !== 0) || (((($_la - 1123)) & ~0x3f) === 0 && ((1 << ($_la - 1123)) & 8627683329) !== 0)) {
		        	$this->setState(4812);
		        	$this->uid();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function repeatStatement(): Context\RepeatStatementContext
		{
		    $localContext = new Context\RepeatStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 402, self::RULE_repeatStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4818);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 699, $this->ctx)) {
		            case 1:
		        	    $this->setState(4815);
		        	    $this->uid();
		        	    $this->setState(4816);
		        	    $this->match(self::COLON_SYMB);
		        	break;
		        }
		        $this->setState(4820);
		        $this->match(self::REPEAT);
		        $this->setState(4822); 
		        $this->errorHandler->sync($this);

		        $alt = 1;

		        do {
		        	switch ($alt) {
		        	case 1:
		        		$this->setState(4821);
		        		$this->procedureSqlStatement();
		        		break;
		        	default:
		        		throw new NoViableAltException($this);
		        	}

		        	$this->setState(4824); 
		        	$this->errorHandler->sync($this);

		        	$alt = $this->getInterpreter()->adaptivePredict($this->input, 700, $this->ctx);
		        } while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER);
		        $this->setState(4826);
		        $this->match(self::UNTIL);
		        $this->setState(4827);
		        $this->recursiveExpression(0);
		        $this->setState(4828);
		        $this->match(self::END);
		        $this->setState(4829);
		        $this->match(self::REPEAT);
		        $this->setState(4831);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if (((($_la) & ~0x3f) === 0 && ((1 << $_la) & 756891332513122304) !== 0) || (((($_la - 73)) & ~0x3f) === 0 && ((1 << ($_la - 73)) & 146666055071174737) !== 0) || (((($_la - 140)) & ~0x3f) === 0 && ((1 << ($_la - 140)) & 268698883) !== 0) || (((($_la - 217)) & ~0x3f) === 0 && ((1 << ($_la - 217)) & -17174494689) !== 0) || (((($_la - 281)) & ~0x3f) === 0 && ((1 << ($_la - 281)) & -1099511627777) !== 0) || (((($_la - 345)) & ~0x3f) === 0 && ((1 << ($_la - 345)) & -2882305960540372993) !== 0) || (((($_la - 409)) & ~0x3f) === 0 && ((1 << ($_la - 409)) & -4398063288321) !== 0) || (((($_la - 473)) & ~0x3f) === 0 && ((1 << ($_la - 473)) & -16325548649218049) !== 0) || (((($_la - 537)) & ~0x3f) === 0 && ((1 << ($_la - 537)) & -81064793296864001) !== 0) || (((($_la - 601)) & ~0x3f) === 0 && ((1 << ($_la - 601)) & -68719476801) !== 0) || (((($_la - 665)) & ~0x3f) === 0 && ((1 << ($_la - 665)) & -22236531750340609) !== 0) || (((($_la - 729)) & ~0x3f) === 0 && ((1 << ($_la - 729)) & -65) !== 0) || (((($_la - 793)) & ~0x3f) === 0 && ((1 << ($_la - 793)) & -6145) !== 0) || (((($_la - 857)) & ~0x3f) === 0 && ((1 << ($_la - 857)) & -1) !== 0) || (((($_la - 921)) & ~0x3f) === 0 && ((1 << ($_la - 921)) & -1) !== 0) || (((($_la - 985)) & ~0x3f) === 0 && ((1 << ($_la - 985)) & -1) !== 0) || (((($_la - 1049)) & ~0x3f) === 0 && ((1 << ($_la - 1049)) & 576460752303423487) !== 0) || (((($_la - 1123)) & ~0x3f) === 0 && ((1 << ($_la - 1123)) & 8627683329) !== 0)) {
		        	$this->setState(4830);
		        	$this->uid();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function returnStatement(): Context\ReturnStatementContext
		{
		    $localContext = new Context\ReturnStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 404, self::RULE_returnStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4833);
		        $this->match(self::RETURN);
		        $this->setState(4834);
		        $this->recursiveExpression(0);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function whileStatement(): Context\WhileStatementContext
		{
		    $localContext = new Context\WhileStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 406, self::RULE_whileStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4839);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if (((($_la) & ~0x3f) === 0 && ((1 << $_la) & 756891332513122304) !== 0) || (((($_la - 73)) & ~0x3f) === 0 && ((1 << ($_la - 73)) & 146666055071174737) !== 0) || (((($_la - 140)) & ~0x3f) === 0 && ((1 << ($_la - 140)) & 268698883) !== 0) || (((($_la - 217)) & ~0x3f) === 0 && ((1 << ($_la - 217)) & -17174494689) !== 0) || (((($_la - 281)) & ~0x3f) === 0 && ((1 << ($_la - 281)) & -1099511627777) !== 0) || (((($_la - 345)) & ~0x3f) === 0 && ((1 << ($_la - 345)) & -2882305960540372993) !== 0) || (((($_la - 409)) & ~0x3f) === 0 && ((1 << ($_la - 409)) & -4398063288321) !== 0) || (((($_la - 473)) & ~0x3f) === 0 && ((1 << ($_la - 473)) & -16325548649218049) !== 0) || (((($_la - 537)) & ~0x3f) === 0 && ((1 << ($_la - 537)) & -81064793296864001) !== 0) || (((($_la - 601)) & ~0x3f) === 0 && ((1 << ($_la - 601)) & -68719476801) !== 0) || (((($_la - 665)) & ~0x3f) === 0 && ((1 << ($_la - 665)) & -22236531750340609) !== 0) || (((($_la - 729)) & ~0x3f) === 0 && ((1 << ($_la - 729)) & -65) !== 0) || (((($_la - 793)) & ~0x3f) === 0 && ((1 << ($_la - 793)) & -6145) !== 0) || (((($_la - 857)) & ~0x3f) === 0 && ((1 << ($_la - 857)) & -1) !== 0) || (((($_la - 921)) & ~0x3f) === 0 && ((1 << ($_la - 921)) & -1) !== 0) || (((($_la - 985)) & ~0x3f) === 0 && ((1 << ($_la - 985)) & -1) !== 0) || (((($_la - 1049)) & ~0x3f) === 0 && ((1 << ($_la - 1049)) & 576460752303423487) !== 0) || (((($_la - 1123)) & ~0x3f) === 0 && ((1 << ($_la - 1123)) & 8627683329) !== 0)) {
		        	$this->setState(4836);
		        	$this->uid();
		        	$this->setState(4837);
		        	$this->match(self::COLON_SYMB);
		        }
		        $this->setState(4841);
		        $this->match(self::WHILE);
		        $this->setState(4842);
		        $this->recursiveExpression(0);
		        $this->setState(4843);
		        $this->match(self::DO);
		        $this->setState(4845); 
		        $this->errorHandler->sync($this);

		        $alt = 1;

		        do {
		        	switch ($alt) {
		        	case 1:
		        		$this->setState(4844);
		        		$this->procedureSqlStatement();
		        		break;
		        	default:
		        		throw new NoViableAltException($this);
		        	}

		        	$this->setState(4847); 
		        	$this->errorHandler->sync($this);

		        	$alt = $this->getInterpreter()->adaptivePredict($this->input, 703, $this->ctx);
		        } while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER);
		        $this->setState(4849);
		        $this->match(self::END);
		        $this->setState(4850);
		        $this->match(self::WHILE);
		        $this->setState(4852);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if (((($_la) & ~0x3f) === 0 && ((1 << $_la) & 756891332513122304) !== 0) || (((($_la - 73)) & ~0x3f) === 0 && ((1 << ($_la - 73)) & 146666055071174737) !== 0) || (((($_la - 140)) & ~0x3f) === 0 && ((1 << ($_la - 140)) & 268698883) !== 0) || (((($_la - 217)) & ~0x3f) === 0 && ((1 << ($_la - 217)) & -17174494689) !== 0) || (((($_la - 281)) & ~0x3f) === 0 && ((1 << ($_la - 281)) & -1099511627777) !== 0) || (((($_la - 345)) & ~0x3f) === 0 && ((1 << ($_la - 345)) & -2882305960540372993) !== 0) || (((($_la - 409)) & ~0x3f) === 0 && ((1 << ($_la - 409)) & -4398063288321) !== 0) || (((($_la - 473)) & ~0x3f) === 0 && ((1 << ($_la - 473)) & -16325548649218049) !== 0) || (((($_la - 537)) & ~0x3f) === 0 && ((1 << ($_la - 537)) & -81064793296864001) !== 0) || (((($_la - 601)) & ~0x3f) === 0 && ((1 << ($_la - 601)) & -68719476801) !== 0) || (((($_la - 665)) & ~0x3f) === 0 && ((1 << ($_la - 665)) & -22236531750340609) !== 0) || (((($_la - 729)) & ~0x3f) === 0 && ((1 << ($_la - 729)) & -65) !== 0) || (((($_la - 793)) & ~0x3f) === 0 && ((1 << ($_la - 793)) & -6145) !== 0) || (((($_la - 857)) & ~0x3f) === 0 && ((1 << ($_la - 857)) & -1) !== 0) || (((($_la - 921)) & ~0x3f) === 0 && ((1 << ($_la - 921)) & -1) !== 0) || (((($_la - 985)) & ~0x3f) === 0 && ((1 << ($_la - 985)) & -1) !== 0) || (((($_la - 1049)) & ~0x3f) === 0 && ((1 << ($_la - 1049)) & 576460752303423487) !== 0) || (((($_la - 1123)) & ~0x3f) === 0 && ((1 << ($_la - 1123)) & 8627683329) !== 0)) {
		        	$this->setState(4851);
		        	$this->uid();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function cursorStatement(): Context\CursorStatementContext
		{
		    $localContext = new Context\CursorStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 408, self::RULE_cursorStatement);

		    try {
		        $this->setState(4869);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::CLOSE:
		            	$localContext = new Context\CloseCursorContext($localContext);
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(4854);
		            	$this->match(self::CLOSE);
		            	$this->setState(4855);
		            	$this->uid();
		            	break;

		            case self::FETCH:
		            	$localContext = new Context\FetchCursorContext($localContext);
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(4856);
		            	$this->match(self::FETCH);
		            	$this->setState(4861);
		            	$this->errorHandler->sync($this);

		            	switch ($this->getInterpreter()->adaptivePredict($this->input, 706, $this->ctx)) {
		            	    case 1:
		            		    $this->setState(4858);
		            		    $this->errorHandler->sync($this);
		            		    $_la = $this->input->LA(1);

		            		    if ($_la === self::NEXT) {
		            		    	$this->setState(4857);
		            		    	$this->match(self::NEXT);
		            		    }
		            		    $this->setState(4860);
		            		    $this->match(self::FROM);
		            		break;
		            	}
		            	$this->setState(4863);
		            	$this->uid();
		            	$this->setState(4864);
		            	$this->match(self::INTO);
		            	$this->setState(4865);
		            	$this->uidList();
		            	break;

		            case self::OPEN:
		            	$localContext = new Context\OpenCursorContext($localContext);
		            	$this->enterOuterAlt($localContext, 3);
		            	$this->setState(4867);
		            	$this->match(self::OPEN);
		            	$this->setState(4868);
		            	$this->uid();
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function declareVariable(): Context\DeclareVariableContext
		{
		    $localContext = new Context\DeclareVariableContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 410, self::RULE_declareVariable);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4871);
		        $this->match(self::DECLARE);
		        $this->setState(4872);
		        $this->uidList();
		        $this->setState(4873);
		        $this->dataType();
		        $this->setState(4876);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::DEFAULT) {
		        	$this->setState(4874);
		        	$this->match(self::DEFAULT);
		        	$this->setState(4875);
		        	$this->recursiveExpression(0);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function declareCondition(): Context\DeclareConditionContext
		{
		    $localContext = new Context\DeclareConditionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 412, self::RULE_declareCondition);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4878);
		        $this->match(self::DECLARE);
		        $this->setState(4879);
		        $this->uid();
		        $this->setState(4880);
		        $this->match(self::CONDITION);
		        $this->setState(4881);
		        $this->match(self::FOR);
		        $this->setState(4888);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::ZERO_DECIMAL:
		            case self::ONE_DECIMAL:
		            case self::TWO_DECIMAL:
		            case self::DECIMAL_LITERAL:
		            case self::REAL_LITERAL:
		            	$this->setState(4882);
		            	$this->decimalLiteral();
		            	break;

		            case self::SQLSTATE:
		            	$this->setState(4883);
		            	$this->match(self::SQLSTATE);
		            	$this->setState(4885);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::VALUE) {
		            		$this->setState(4884);
		            		$this->match(self::VALUE);
		            	}
		            	$this->setState(4887);
		            	$this->match(self::STRING_LITERAL);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function declareCursor(): Context\DeclareCursorContext
		{
		    $localContext = new Context\DeclareCursorContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 414, self::RULE_declareCursor);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4890);
		        $this->match(self::DECLARE);
		        $this->setState(4891);
		        $this->uid();
		        $this->setState(4892);
		        $this->match(self::CURSOR);
		        $this->setState(4893);
		        $this->match(self::FOR);
		        $this->setState(4894);
		        $this->selectStatement();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function declareHandler(): Context\DeclareHandlerContext
		{
		    $localContext = new Context\DeclareHandlerContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 416, self::RULE_declareHandler);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4896);
		        $this->match(self::DECLARE);
		        $this->setState(4897);

		        $localContext->handlerAction = $this->input->LT(1);
		        $_la = $this->input->LA(1);

		        if (!($_la === self::CONTINUE || $_la === self::EXIT || $_la === self::UNDO)) {
		        	    $localContext->handlerAction = $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		        $this->setState(4898);
		        $this->match(self::HANDLER);
		        $this->setState(4899);
		        $this->match(self::FOR);
		        $this->setState(4900);
		        $this->handlerConditionValue();
		        $this->setState(4905);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::COMMA) {
		        	$this->setState(4901);
		        	$this->match(self::COMMA);
		        	$this->setState(4902);
		        	$this->handlerConditionValue();
		        	$this->setState(4907);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		        $this->setState(4908);
		        $this->routineBody();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function handlerConditionValue(): Context\HandlerConditionValueContext
		{
		    $localContext = new Context\HandlerConditionValueContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 418, self::RULE_handlerConditionValue);

		    try {
		        $this->setState(4921);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::ZERO_DECIMAL:
		            case self::ONE_DECIMAL:
		            case self::TWO_DECIMAL:
		            case self::DECIMAL_LITERAL:
		            case self::REAL_LITERAL:
		            	$localContext = new Context\HandlerConditionCodeContext($localContext);
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(4910);
		            	$this->decimalLiteral();
		            	break;

		            case self::SQLSTATE:
		            	$localContext = new Context\HandlerConditionStateContext($localContext);
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(4911);
		            	$this->match(self::SQLSTATE);
		            	$this->setState(4913);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::VALUE) {
		            		$this->setState(4912);
		            		$this->match(self::VALUE);
		            	}
		            	$this->setState(4915);
		            	$this->match(self::STRING_LITERAL);
		            	break;

		            case self::ARRAY:
		            case self::ATTRIBUTE:
		            case self::BUCKETS:
		            case self::CONDITION:
		            case self::CURRENT:
		            case self::CURRENT_USER:
		            case self::DATABASE:
		            case self::DEFAULT:
		            case self::DIAGNOSTICS:
		            case self::EMPTY:
		            case self::ENFORCED:
		            case self::EXCEPT:
		            case self::GROUP:
		            case self::IF:
		            case self::IGNORED:
		            case self::INSERT:
		            case self::LATERAL:
		            case self::LEFT:
		            case self::NUMBER:
		            case self::OPTIONAL:
		            case self::ORDER:
		            case self::PRIMARY:
		            case self::REPEAT:
		            case self::REPLACE:
		            case self::RIGHT:
		            case self::SCHEMA:
		            case self::SKIP_QUERY_REWRITE:
		            case self::STACKED:
		            case self::DATE:
		            case self::TIME:
		            case self::TIMESTAMP:
		            case self::DATETIME:
		            case self::YEAR:
		            case self::BINARY:
		            case self::TEXT:
		            case self::ENUM:
		            case self::SERIAL:
		            case self::JSON_ARRAY:
		            case self::JSON_ARRAYAGG:
		            case self::JSON_ARRAY_APPEND:
		            case self::JSON_ARRAY_INSERT:
		            case self::JSON_CONTAINS:
		            case self::JSON_CONTAINS_PATH:
		            case self::JSON_DEPTH:
		            case self::JSON_EXTRACT:
		            case self::JSON_INSERT:
		            case self::JSON_KEYS:
		            case self::JSON_LENGTH:
		            case self::JSON_MERGE:
		            case self::JSON_MERGE_PATCH:
		            case self::JSON_MERGE_PRESERVE:
		            case self::JSON_OBJECT:
		            case self::JSON_OBJECTAGG:
		            case self::JSON_OVERLAPS:
		            case self::JSON_PRETTY:
		            case self::JSON_QUOTE:
		            case self::JSON_REMOVE:
		            case self::JSON_REPLACE:
		            case self::JSON_SCHEMA_VALID:
		            case self::JSON_SCHEMA_VALIDATION_REPORT:
		            case self::JSON_SEARCH:
		            case self::JSON_SET:
		            case self::JSON_STORAGE_FREE:
		            case self::JSON_STORAGE_SIZE:
		            case self::JSON_TABLE:
		            case self::JSON_TYPE:
		            case self::JSON_UNQUOTE:
		            case self::JSON_VALID:
		            case self::JSON_VALUE:
		            case self::NESTED:
		            case self::ORDINALITY:
		            case self::PATH:
		            case self::AVG:
		            case self::BIT_AND:
		            case self::BIT_OR:
		            case self::BIT_XOR:
		            case self::COUNT:
		            case self::CUME_DIST:
		            case self::DENSE_RANK:
		            case self::FIRST_VALUE:
		            case self::GROUP_CONCAT:
		            case self::LAG:
		            case self::LAST_VALUE:
		            case self::LEAD:
		            case self::MAX:
		            case self::MIN:
		            case self::NTILE:
		            case self::NTH_VALUE:
		            case self::PERCENT_RANK:
		            case self::RANK:
		            case self::ROW_NUMBER:
		            case self::STD:
		            case self::STDDEV:
		            case self::STDDEV_POP:
		            case self::STDDEV_SAMP:
		            case self::SUM:
		            case self::VAR_POP:
		            case self::VAR_SAMP:
		            case self::VARIANCE:
		            case self::CURRENT_DATE:
		            case self::CURRENT_TIME:
		            case self::CURRENT_TIMESTAMP:
		            case self::LOCALTIME:
		            case self::CURDATE:
		            case self::CURTIME:
		            case self::DATE_ADD:
		            case self::DATE_SUB:
		            case self::LOCALTIMESTAMP:
		            case self::NOW:
		            case self::POSITION:
		            case self::SUBSTR:
		            case self::SUBSTRING:
		            case self::SYSDATE:
		            case self::TRIM:
		            case self::UTC_DATE:
		            case self::UTC_TIME:
		            case self::UTC_TIMESTAMP:
		            case self::ACCOUNT:
		            case self::ACTION:
		            case self::AFTER:
		            case self::AGGREGATE:
		            case self::ALGORITHM:
		            case self::ANY:
		            case self::AT:
		            case self::AUTHORS:
		            case self::AUTOCOMMIT:
		            case self::AUTOEXTEND_SIZE:
		            case self::AUTO_INCREMENT:
		            case self::AVG_ROW_LENGTH:
		            case self::BEGIN:
		            case self::BINLOG:
		            case self::BIT:
		            case self::BLOCK:
		            case self::BOOL:
		            case self::BOOLEAN:
		            case self::BTREE:
		            case self::CACHE:
		            case self::CASCADED:
		            case self::CHAIN:
		            case self::CHANGED:
		            case self::CHANNEL:
		            case self::CHECKSUM:
		            case self::PAGE_CHECKSUM:
		            case self::CIPHER:
		            case self::CLASS_ORIGIN:
		            case self::CLIENT:
		            case self::CLOSE:
		            case self::CLUSTERING:
		            case self::COALESCE:
		            case self::CODE:
		            case self::COLUMNS:
		            case self::COLUMN_FORMAT:
		            case self::COLUMN_NAME:
		            case self::COMMENT:
		            case self::COMMIT:
		            case self::COMPACT:
		            case self::COMPLETION:
		            case self::COMPRESSED:
		            case self::COMPRESSION:
		            case self::CONCURRENT:
		            case self::CONNECT:
		            case self::CONNECTION:
		            case self::CONSISTENT:
		            case self::CONSTRAINT_CATALOG:
		            case self::CONSTRAINT_SCHEMA:
		            case self::CONSTRAINT_NAME:
		            case self::CONTAINS:
		            case self::CONTEXT:
		            case self::CONTRIBUTORS:
		            case self::COPY:
		            case self::CPU:
		            case self::CURSOR_NAME:
		            case self::DATA:
		            case self::DATAFILE:
		            case self::DEALLOCATE:
		            case self::DEFAULT_AUTH:
		            case self::DEFINER:
		            case self::DELAY_KEY_WRITE:
		            case self::DES_KEY_FILE:
		            case self::DIRECTORY:
		            case self::DISABLE:
		            case self::DISCARD:
		            case self::DISK:
		            case self::DO:
		            case self::DUMPFILE:
		            case self::DUPLICATE:
		            case self::DYNAMIC:
		            case self::ENABLE:
		            case self::ENCRYPTION:
		            case self::END:
		            case self::ENDS:
		            case self::ENGINE:
		            case self::ENGINES:
		            case self::ERROR:
		            case self::ERRORS:
		            case self::ESCAPE:
		            case self::EVEN:
		            case self::EVENT:
		            case self::EVENTS:
		            case self::EVERY:
		            case self::EXCHANGE:
		            case self::EXCLUSIVE:
		            case self::EXPIRE:
		            case self::EXPORT:
		            case self::EXTENDED:
		            case self::EXTENT_SIZE:
		            case self::FAILED_LOGIN_ATTEMPTS:
		            case self::FAST:
		            case self::FAULTS:
		            case self::FIELDS:
		            case self::FILE_BLOCK_SIZE:
		            case self::FILTER:
		            case self::FIRST:
		            case self::FIXED:
		            case self::FLUSH:
		            case self::FOLLOWS:
		            case self::FOUND:
		            case self::FULL:
		            case self::FUNCTION:
		            case self::GENERAL:
		            case self::GLOBAL:
		            case self::GRANTS:
		            case self::GROUP_REPLICATION:
		            case self::HANDLER:
		            case self::HASH:
		            case self::HELP:
		            case self::HISTORY:
		            case self::HOST:
		            case self::HOSTS:
		            case self::IDENTIFIED:
		            case self::IGNORE_SERVER_IDS:
		            case self::IMPORT:
		            case self::INDEXES:
		            case self::INITIAL_SIZE:
		            case self::INPLACE:
		            case self::INSERT_METHOD:
		            case self::INSTALL:
		            case self::INSTANCE:
		            case self::INSTANT:
		            case self::INVISIBLE:
		            case self::INVOKER:
		            case self::IO:
		            case self::IO_THREAD:
		            case self::IPC:
		            case self::ISOLATION:
		            case self::ISSUER:
		            case self::JSON:
		            case self::KEY_BLOCK_SIZE:
		            case self::LANGUAGE:
		            case self::LAST:
		            case self::LEAVES:
		            case self::LESS:
		            case self::LEVEL:
		            case self::LIST:
		            case self::LOCAL:
		            case self::LOGFILE:
		            case self::LOGS:
		            case self::MASTER:
		            case self::MASTER_AUTO_POSITION:
		            case self::MASTER_CONNECT_RETRY:
		            case self::MASTER_DELAY:
		            case self::MASTER_HEARTBEAT_PERIOD:
		            case self::MASTER_HOST:
		            case self::MASTER_LOG_FILE:
		            case self::MASTER_LOG_POS:
		            case self::MASTER_PASSWORD:
		            case self::MASTER_PORT:
		            case self::MASTER_RETRY_COUNT:
		            case self::MASTER_SSL:
		            case self::MASTER_SSL_CA:
		            case self::MASTER_SSL_CAPATH:
		            case self::MASTER_SSL_CERT:
		            case self::MASTER_SSL_CIPHER:
		            case self::MASTER_SSL_CRL:
		            case self::MASTER_SSL_CRLPATH:
		            case self::MASTER_SSL_KEY:
		            case self::MASTER_TLS_VERSION:
		            case self::MASTER_USER:
		            case self::MAX_CONNECTIONS_PER_HOUR:
		            case self::MAX_QUERIES_PER_HOUR:
		            case self::MAX_ROWS:
		            case self::MAX_SIZE:
		            case self::MAX_UPDATES_PER_HOUR:
		            case self::MAX_USER_CONNECTIONS:
		            case self::MEDIUM:
		            case self::MEMBER:
		            case self::MERGE:
		            case self::MESSAGE_TEXT:
		            case self::MID:
		            case self::MIGRATE:
		            case self::MIN_ROWS:
		            case self::MODE:
		            case self::MODIFY:
		            case self::MUTEX:
		            case self::MYSQL:
		            case self::MYSQL_ERRNO:
		            case self::NAME:
		            case self::NAMES:
		            case self::NCHAR:
		            case self::NEVER:
		            case self::NEXT:
		            case self::NO:
		            case self::NOCOPY:
		            case self::NOWAIT:
		            case self::NODEGROUP:
		            case self::NONE:
		            case self::ODBC:
		            case self::OFFLINE:
		            case self::OFFSET:
		            case self::OF:
		            case self::OJ:
		            case self::OLD_PASSWORD:
		            case self::ONE:
		            case self::ONLINE:
		            case self::ONLY:
		            case self::OPEN:
		            case self::OPTIMIZER_COSTS:
		            case self::OPTIONS:
		            case self::OWNER:
		            case self::PACK_KEYS:
		            case self::PAGE:
		            case self::PARSER:
		            case self::PARTIAL:
		            case self::PARTITIONING:
		            case self::PARTITIONS:
		            case self::PASSWORD:
		            case self::PASSWORD_LOCK_TIME:
		            case self::PHASE:
		            case self::PLUGIN:
		            case self::PLUGIN_DIR:
		            case self::PLUGINS:
		            case self::PORT:
		            case self::PRECEDES:
		            case self::PREPARE:
		            case self::PRESERVE:
		            case self::PREV:
		            case self::PROCESSLIST:
		            case self::PROFILE:
		            case self::PROFILES:
		            case self::PROXY:
		            case self::QUERY:
		            case self::QUICK:
		            case self::REBUILD:
		            case self::RECOVER:
		            case self::RECURSIVE:
		            case self::REDO_BUFFER_SIZE:
		            case self::REDUNDANT:
		            case self::RELAY:
		            case self::RELAY_LOG_FILE:
		            case self::RELAY_LOG_POS:
		            case self::RELAYLOG:
		            case self::REMOVE:
		            case self::REORGANIZE:
		            case self::REPAIR:
		            case self::REPLICATE_DO_DB:
		            case self::REPLICATE_DO_TABLE:
		            case self::REPLICATE_IGNORE_DB:
		            case self::REPLICATE_IGNORE_TABLE:
		            case self::REPLICATE_REWRITE_DB:
		            case self::REPLICATE_WILD_DO_TABLE:
		            case self::REPLICATE_WILD_IGNORE_TABLE:
		            case self::REPLICATION:
		            case self::RESET:
		            case self::RESUME:
		            case self::RETURNED_SQLSTATE:
		            case self::RETURNS:
		            case self::REUSE:
		            case self::ROLE:
		            case self::ROLLBACK:
		            case self::ROLLUP:
		            case self::ROTATE:
		            case self::ROW:
		            case self::ROWS:
		            case self::ROW_FORMAT:
		            case self::RTREE:
		            case self::SAVEPOINT:
		            case self::SCHEDULE:
		            case self::SECURITY:
		            case self::SERVER:
		            case self::SESSION:
		            case self::SHARE:
		            case self::SHARED:
		            case self::SIGNED:
		            case self::SIMPLE:
		            case self::SLAVE:
		            case self::SLOW:
		            case self::SNAPSHOT:
		            case self::SOCKET:
		            case self::SOME:
		            case self::SONAME:
		            case self::SOUNDS:
		            case self::SOURCE:
		            case self::SQL_AFTER_GTIDS:
		            case self::SQL_AFTER_MTS_GAPS:
		            case self::SQL_BEFORE_GTIDS:
		            case self::SQL_BUFFER_RESULT:
		            case self::SQL_CACHE:
		            case self::SQL_NO_CACHE:
		            case self::SQL_THREAD:
		            case self::START:
		            case self::STARTS:
		            case self::STATS_AUTO_RECALC:
		            case self::STATS_PERSISTENT:
		            case self::STATS_SAMPLE_PAGES:
		            case self::STATUS:
		            case self::STOP:
		            case self::STORAGE:
		            case self::STRING:
		            case self::SUBCLASS_ORIGIN:
		            case self::SUBJECT:
		            case self::SUBPARTITION:
		            case self::SUBPARTITIONS:
		            case self::SUSPEND:
		            case self::SWAPS:
		            case self::SWITCHES:
		            case self::TABLE_NAME:
		            case self::TABLESPACE:
		            case self::TABLE_TYPE:
		            case self::TEMPORARY:
		            case self::TEMPTABLE:
		            case self::THAN:
		            case self::TRADITIONAL:
		            case self::TRANSACTION:
		            case self::TRANSACTIONAL:
		            case self::TRIGGERS:
		            case self::TRUNCATE:
		            case self::UNBOUNDED:
		            case self::UNDEFINED:
		            case self::UNDOFILE:
		            case self::UNDO_BUFFER_SIZE:
		            case self::UNINSTALL:
		            case self::UNKNOWN:
		            case self::UNTIL:
		            case self::UPGRADE:
		            case self::USER:
		            case self::USE_FRM:
		            case self::USER_RESOURCES:
		            case self::VALIDATION:
		            case self::VALUE:
		            case self::VARIABLES:
		            case self::VIEW:
		            case self::VIRTUAL:
		            case self::VISIBLE:
		            case self::WAIT:
		            case self::WARNINGS:
		            case self::WITHOUT:
		            case self::WORK:
		            case self::WRAPPER:
		            case self::X509:
		            case self::XA:
		            case self::XML:
		            case self::EUR:
		            case self::USA:
		            case self::JIS:
		            case self::ISO:
		            case self::INTERNAL:
		            case self::QUARTER:
		            case self::MONTH:
		            case self::DAY:
		            case self::HOUR:
		            case self::MINUTE:
		            case self::WEEK:
		            case self::SECOND:
		            case self::MICROSECOND:
		            case self::ADMIN:
		            case self::AUDIT_ABORT_EXEMPT:
		            case self::AUDIT_ADMIN:
		            case self::AUTHENTICATION_POLICY_ADMIN:
		            case self::BACKUP_ADMIN:
		            case self::BINLOG_ADMIN:
		            case self::BINLOG_ENCRYPTION_ADMIN:
		            case self::CLONE_ADMIN:
		            case self::CONNECTION_ADMIN:
		            case self::ENCRYPTION_KEY_ADMIN:
		            case self::EXECUTE:
		            case self::FILE:
		            case self::FIREWALL_ADMIN:
		            case self::FIREWALL_EXEMPT:
		            case self::FIREWALL_USER:
		            case self::GROUP_REPLICATION_ADMIN:
		            case self::INNODB_REDO_LOG_ARCHIVE:
		            case self::INVOKE:
		            case self::LAMBDA:
		            case self::NDB_STORED_USER:
		            case self::PASSWORDLESS_USER_ADMIN:
		            case self::PERSIST_RO_VARIABLES_ADMIN:
		            case self::PRIVILEGES:
		            case self::PROCESS:
		            case self::RELOAD:
		            case self::REPLICATION_APPLIER:
		            case self::REPLICATION_SLAVE_ADMIN:
		            case self::RESOURCE_GROUP_ADMIN:
		            case self::RESOURCE_GROUP_USER:
		            case self::ROLE_ADMIN:
		            case self::ROUTINE:
		            case self::S3:
		            case self::SESSION_VARIABLES_ADMIN:
		            case self::SET_USER_ID:
		            case self::SHOW_ROUTINE:
		            case self::SHUTDOWN:
		            case self::SUPER:
		            case self::SYSTEM_VARIABLES_ADMIN:
		            case self::TABLES:
		            case self::TABLE_ENCRYPTION_ADMIN:
		            case self::VERSION_TOKEN_ADMIN:
		            case self::XA_RECOVER_ADMIN:
		            case self::ARMSCII8:
		            case self::ASCII:
		            case self::BIG5:
		            case self::CP1250:
		            case self::CP1251:
		            case self::CP1256:
		            case self::CP1257:
		            case self::CP850:
		            case self::CP852:
		            case self::CP866:
		            case self::CP932:
		            case self::DEC8:
		            case self::EUCJPMS:
		            case self::EUCKR:
		            case self::GB18030:
		            case self::GB2312:
		            case self::GBK:
		            case self::GEOSTD8:
		            case self::GREEK:
		            case self::HEBREW:
		            case self::HP8:
		            case self::KEYBCS2:
		            case self::KOI8R:
		            case self::KOI8U:
		            case self::LATIN1:
		            case self::LATIN2:
		            case self::LATIN5:
		            case self::LATIN7:
		            case self::MACCE:
		            case self::MACROMAN:
		            case self::SJIS:
		            case self::SWE7:
		            case self::TIS620:
		            case self::UCS2:
		            case self::UJIS:
		            case self::UTF16:
		            case self::UTF16LE:
		            case self::UTF32:
		            case self::UTF8:
		            case self::UTF8MB3:
		            case self::UTF8MB4:
		            case self::ARCHIVE:
		            case self::BLACKHOLE:
		            case self::CSV:
		            case self::FEDERATED:
		            case self::INNODB:
		            case self::MEMORY:
		            case self::MRG_MYISAM:
		            case self::MYISAM:
		            case self::NDB:
		            case self::NDBCLUSTER:
		            case self::PERFORMANCE_SCHEMA:
		            case self::TOKUDB:
		            case self::REPEATABLE:
		            case self::COMMITTED:
		            case self::UNCOMMITTED:
		            case self::SERIALIZABLE:
		            case self::GEOMETRYCOLLECTION:
		            case self::LINESTRING:
		            case self::MULTILINESTRING:
		            case self::MULTIPOINT:
		            case self::MULTIPOLYGON:
		            case self::POINT:
		            case self::POLYGON:
		            case self::ABS:
		            case self::ACOS:
		            case self::ADDDATE:
		            case self::ADDTIME:
		            case self::AES_DECRYPT:
		            case self::AES_ENCRYPT:
		            case self::AREA:
		            case self::ASBINARY:
		            case self::ASIN:
		            case self::ASTEXT:
		            case self::ASWKB:
		            case self::ASWKT:
		            case self::ASYMMETRIC_DECRYPT:
		            case self::ASYMMETRIC_DERIVE:
		            case self::ASYMMETRIC_ENCRYPT:
		            case self::ASYMMETRIC_SIGN:
		            case self::ASYMMETRIC_VERIFY:
		            case self::ATAN:
		            case self::ATAN2:
		            case self::BENCHMARK:
		            case self::BIN:
		            case self::BIT_COUNT:
		            case self::BIT_LENGTH:
		            case self::BUFFER:
		            case self::CATALOG_NAME:
		            case self::CEIL:
		            case self::CEILING:
		            case self::CENTROID:
		            case self::CHARACTER_LENGTH:
		            case self::CHARSET:
		            case self::CHAR_LENGTH:
		            case self::COERCIBILITY:
		            case self::COLLATION:
		            case self::COMPRESS:
		            case self::CONCAT:
		            case self::CONCAT_WS:
		            case self::CONNECTION_ID:
		            case self::CONV:
		            case self::CONVERT_TZ:
		            case self::COS:
		            case self::COT:
		            case self::CRC32:
		            case self::CREATE_ASYMMETRIC_PRIV_KEY:
		            case self::CREATE_ASYMMETRIC_PUB_KEY:
		            case self::CREATE_DH_PARAMETERS:
		            case self::CREATE_DIGEST:
		            case self::CROSSES:
		            case self::DATEDIFF:
		            case self::DATE_FORMAT:
		            case self::DAYNAME:
		            case self::DAYOFMONTH:
		            case self::DAYOFWEEK:
		            case self::DAYOFYEAR:
		            case self::DECODE:
		            case self::DEGREES:
		            case self::DES_DECRYPT:
		            case self::DES_ENCRYPT:
		            case self::DIMENSION:
		            case self::DISJOINT:
		            case self::ELT:
		            case self::ENCODE:
		            case self::ENCRYPT:
		            case self::ENDPOINT:
		            case self::ENGINE_ATTRIBUTE:
		            case self::ENVELOPE:
		            case self::EQUALS:
		            case self::EXP:
		            case self::EXPORT_SET:
		            case self::EXTERIORRING:
		            case self::EXTRACTVALUE:
		            case self::FIELD:
		            case self::FIND_IN_SET:
		            case self::FLOOR:
		            case self::FORMAT:
		            case self::FOUND_ROWS:
		            case self::FROM_BASE64:
		            case self::FROM_DAYS:
		            case self::FROM_UNIXTIME:
		            case self::GEOMCOLLFROMTEXT:
		            case self::GEOMCOLLFROMWKB:
		            case self::GEOMETRYCOLLECTIONFROMTEXT:
		            case self::GEOMETRYCOLLECTIONFROMWKB:
		            case self::GEOMETRYFROMTEXT:
		            case self::GEOMETRYFROMWKB:
		            case self::GEOMETRYN:
		            case self::GEOMETRYTYPE:
		            case self::GEOMFROMTEXT:
		            case self::GEOMFROMWKB:
		            case self::GET_FORMAT:
		            case self::GET_LOCK:
		            case self::GLENGTH:
		            case self::GREATEST:
		            case self::GTID_SUBSET:
		            case self::GTID_SUBTRACT:
		            case self::HEX:
		            case self::IFNULL:
		            case self::INET6_ATON:
		            case self::INET6_NTOA:
		            case self::INET_ATON:
		            case self::INET_NTOA:
		            case self::INSTR:
		            case self::INTERIORRINGN:
		            case self::INTERSECTS:
		            case self::ISCLOSED:
		            case self::ISEMPTY:
		            case self::ISNULL:
		            case self::ISSIMPLE:
		            case self::IS_FREE_LOCK:
		            case self::IS_IPV4:
		            case self::IS_IPV4_COMPAT:
		            case self::IS_IPV4_MAPPED:
		            case self::IS_IPV6:
		            case self::IS_USED_LOCK:
		            case self::LAST_INSERT_ID:
		            case self::LCASE:
		            case self::LEAST:
		            case self::LENGTH:
		            case self::LINEFROMTEXT:
		            case self::LINEFROMWKB:
		            case self::LINESTRINGFROMTEXT:
		            case self::LINESTRINGFROMWKB:
		            case self::LN:
		            case self::LOAD_FILE:
		            case self::LOCATE:
		            case self::LOG:
		            case self::LOG10:
		            case self::LOG2:
		            case self::LOWER:
		            case self::LPAD:
		            case self::LTRIM:
		            case self::MAKEDATE:
		            case self::MAKETIME:
		            case self::MAKE_SET:
		            case self::MASTER_POS_WAIT:
		            case self::MBRCONTAINS:
		            case self::MBRDISJOINT:
		            case self::MBREQUAL:
		            case self::MBRINTERSECTS:
		            case self::MBROVERLAPS:
		            case self::MBRTOUCHES:
		            case self::MBRWITHIN:
		            case self::MD5:
		            case self::MLINEFROMTEXT:
		            case self::MLINEFROMWKB:
		            case self::MONTHNAME:
		            case self::MPOINTFROMTEXT:
		            case self::MPOINTFROMWKB:
		            case self::MPOLYFROMTEXT:
		            case self::MPOLYFROMWKB:
		            case self::MULTILINESTRINGFROMTEXT:
		            case self::MULTILINESTRINGFROMWKB:
		            case self::MULTIPOINTFROMTEXT:
		            case self::MULTIPOINTFROMWKB:
		            case self::MULTIPOLYGONFROMTEXT:
		            case self::MULTIPOLYGONFROMWKB:
		            case self::NAME_CONST:
		            case self::NULLIF:
		            case self::NUMGEOMETRIES:
		            case self::NUMINTERIORRINGS:
		            case self::NUMPOINTS:
		            case self::OCT:
		            case self::OCTET_LENGTH:
		            case self::ORD:
		            case self::OVERLAPS:
		            case self::PERIOD_ADD:
		            case self::PERIOD_DIFF:
		            case self::PI:
		            case self::POINTFROMTEXT:
		            case self::POINTFROMWKB:
		            case self::POINTN:
		            case self::POLYFROMTEXT:
		            case self::POLYFROMWKB:
		            case self::POLYGONFROMTEXT:
		            case self::POLYGONFROMWKB:
		            case self::POW:
		            case self::POWER:
		            case self::QUOTE:
		            case self::RADIANS:
		            case self::RAND:
		            case self::RANDOM:
		            case self::RANDOM_BYTES:
		            case self::RELEASE_LOCK:
		            case self::REVERSE:
		            case self::ROUND:
		            case self::ROW_COUNT:
		            case self::RPAD:
		            case self::RTRIM:
		            case self::SEC_TO_TIME:
		            case self::SECONDARY_ENGINE_ATTRIBUTE:
		            case self::SESSION_USER:
		            case self::SHA:
		            case self::SHA1:
		            case self::SHA2:
		            case self::SCHEMA_NAME:
		            case self::SIGN:
		            case self::SIN:
		            case self::SLEEP:
		            case self::SOUNDEX:
		            case self::SQL_THREAD_WAIT_AFTER_GTIDS:
		            case self::SQRT:
		            case self::SRID:
		            case self::STARTPOINT:
		            case self::STRCMP:
		            case self::STR_TO_DATE:
		            case self::ST_AREA:
		            case self::ST_ASBINARY:
		            case self::ST_ASTEXT:
		            case self::ST_ASWKB:
		            case self::ST_ASWKT:
		            case self::ST_BUFFER:
		            case self::ST_CENTROID:
		            case self::ST_CONTAINS:
		            case self::ST_CROSSES:
		            case self::ST_DIFFERENCE:
		            case self::ST_DIMENSION:
		            case self::ST_DISJOINT:
		            case self::ST_DISTANCE:
		            case self::ST_ENDPOINT:
		            case self::ST_ENVELOPE:
		            case self::ST_EQUALS:
		            case self::ST_EXTERIORRING:
		            case self::ST_GEOMCOLLFROMTEXT:
		            case self::ST_GEOMCOLLFROMTXT:
		            case self::ST_GEOMCOLLFROMWKB:
		            case self::ST_GEOMETRYCOLLECTIONFROMTEXT:
		            case self::ST_GEOMETRYCOLLECTIONFROMWKB:
		            case self::ST_GEOMETRYFROMTEXT:
		            case self::ST_GEOMETRYFROMWKB:
		            case self::ST_GEOMETRYN:
		            case self::ST_GEOMETRYTYPE:
		            case self::ST_GEOMFROMTEXT:
		            case self::ST_GEOMFROMWKB:
		            case self::ST_INTERIORRINGN:
		            case self::ST_INTERSECTION:
		            case self::ST_INTERSECTS:
		            case self::ST_ISCLOSED:
		            case self::ST_ISEMPTY:
		            case self::ST_ISSIMPLE:
		            case self::ST_LINEFROMTEXT:
		            case self::ST_LINEFROMWKB:
		            case self::ST_LINESTRINGFROMTEXT:
		            case self::ST_LINESTRINGFROMWKB:
		            case self::ST_NUMGEOMETRIES:
		            case self::ST_NUMINTERIORRING:
		            case self::ST_NUMINTERIORRINGS:
		            case self::ST_NUMPOINTS:
		            case self::ST_OVERLAPS:
		            case self::ST_POINTFROMTEXT:
		            case self::ST_POINTFROMWKB:
		            case self::ST_POINTN:
		            case self::ST_POLYFROMTEXT:
		            case self::ST_POLYFROMWKB:
		            case self::ST_POLYGONFROMTEXT:
		            case self::ST_POLYGONFROMWKB:
		            case self::ST_SRID:
		            case self::ST_STARTPOINT:
		            case self::ST_SYMDIFFERENCE:
		            case self::ST_TOUCHES:
		            case self::ST_UNION:
		            case self::ST_WITHIN:
		            case self::ST_X:
		            case self::ST_Y:
		            case self::SUBDATE:
		            case self::SUBSTRING_INDEX:
		            case self::SUBTIME:
		            case self::SYSTEM_USER:
		            case self::TAN:
		            case self::TIMEDIFF:
		            case self::TIMESTAMPADD:
		            case self::TIMESTAMPDIFF:
		            case self::TIME_FORMAT:
		            case self::TIME_TO_SEC:
		            case self::TOUCHES:
		            case self::TO_BASE64:
		            case self::TO_DAYS:
		            case self::TO_SECONDS:
		            case self::TP_CONNECTION_ADMIN:
		            case self::UCASE:
		            case self::UNCOMPRESS:
		            case self::UNCOMPRESSED_LENGTH:
		            case self::UNHEX:
		            case self::UNIX_TIMESTAMP:
		            case self::UPDATEXML:
		            case self::UPPER:
		            case self::UUID:
		            case self::UUID_SHORT:
		            case self::VALIDATE_PASSWORD_STRENGTH:
		            case self::VERSION:
		            case self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
		            case self::WEEKDAY:
		            case self::WEEKOFYEAR:
		            case self::WEIGHT_STRING:
		            case self::WITHIN:
		            case self::YEARWEEK:
		            case self::Y_FUNCTION:
		            case self::X_FUNCTION:
		            case self::MOD:
		            case self::CHARSET_REVERSE_QOUTE_STRING:
		            case self::STRING_LITERAL:
		            case self::ID:
		            	$localContext = new Context\HandlerConditionNameContext($localContext);
		            	$this->enterOuterAlt($localContext, 3);
		            	$this->setState(4916);
		            	$this->uid();
		            	break;

		            case self::SQLWARNING:
		            	$localContext = new Context\HandlerConditionWarningContext($localContext);
		            	$this->enterOuterAlt($localContext, 4);
		            	$this->setState(4917);
		            	$this->match(self::SQLWARNING);
		            	break;

		            case self::NOT:
		            	$localContext = new Context\HandlerConditionNotfoundContext($localContext);
		            	$this->enterOuterAlt($localContext, 5);
		            	$this->setState(4918);
		            	$this->match(self::NOT);
		            	$this->setState(4919);
		            	$this->match(self::FOUND);
		            	break;

		            case self::SQLEXCEPTION:
		            	$localContext = new Context\HandlerConditionExceptionContext($localContext);
		            	$this->enterOuterAlt($localContext, 6);
		            	$this->setState(4920);
		            	$this->match(self::SQLEXCEPTION);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function procedureSqlStatement(): Context\ProcedureSqlStatementContext
		{
		    $localContext = new Context\ProcedureSqlStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 420, self::RULE_procedureSqlStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4925);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 714, $this->ctx)) {
		        	case 1:
		        	    $this->setState(4923);
		        	    $this->compoundStatement();
		        	break;

		        	case 2:
		        	    $this->setState(4924);
		        	    $this->sqlStatement();
		        	break;
		        }
		        $this->setState(4927);
		        $this->match(self::SEMI);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function caseAlternative(): Context\CaseAlternativeContext
		{
		    $localContext = new Context\CaseAlternativeContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 422, self::RULE_caseAlternative);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4929);
		        $this->match(self::WHEN);
		        $this->setState(4932);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 715, $this->ctx)) {
		        	case 1:
		        	    $this->setState(4930);
		        	    $this->constant();
		        	break;

		        	case 2:
		        	    $this->setState(4931);
		        	    $this->recursiveExpression(0);
		        	break;
		        }
		        $this->setState(4934);
		        $this->match(self::THEN);
		        $this->setState(4936); 
		        $this->errorHandler->sync($this);

		        $alt = 1;

		        do {
		        	switch ($alt) {
		        	case 1:
		        		$this->setState(4935);
		        		$this->procedureSqlStatement();
		        		break;
		        	default:
		        		throw new NoViableAltException($this);
		        	}

		        	$this->setState(4938); 
		        	$this->errorHandler->sync($this);

		        	$alt = $this->getInterpreter()->adaptivePredict($this->input, 716, $this->ctx);
		        } while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function elifAlternative(): Context\ElifAlternativeContext
		{
		    $localContext = new Context\ElifAlternativeContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 424, self::RULE_elifAlternative);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4940);
		        $this->match(self::ELSEIF);
		        $this->setState(4941);
		        $this->recursiveExpression(0);
		        $this->setState(4942);
		        $this->match(self::THEN);
		        $this->setState(4944); 
		        $this->errorHandler->sync($this);

		        $alt = 1;

		        do {
		        	switch ($alt) {
		        	case 1:
		        		$this->setState(4943);
		        		$this->procedureSqlStatement();
		        		break;
		        	default:
		        		throw new NoViableAltException($this);
		        	}

		        	$this->setState(4946); 
		        	$this->errorHandler->sync($this);

		        	$alt = $this->getInterpreter()->adaptivePredict($this->input, 717, $this->ctx);
		        } while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function alterUser(): Context\AlterUserContext
		{
		    $localContext = new Context\AlterUserContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 426, self::RULE_alterUser);

		    try {
		        $this->setState(5021);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 732, $this->ctx)) {
		        	case 1:
		        	    $localContext = new Context\AlterUserMysqlV56Context($localContext);
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(4948);
		        	    $this->match(self::ALTER);
		        	    $this->setState(4949);
		        	    $this->match(self::USER);
		        	    $this->setState(4950);
		        	    $this->userSpecification();
		        	    $this->setState(4955);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::COMMA) {
		        	    	$this->setState(4951);
		        	    	$this->match(self::COMMA);
		        	    	$this->setState(4952);
		        	    	$this->userSpecification();
		        	    	$this->setState(4957);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	break;

		        	case 2:
		        	    $localContext = new Context\AlterUserMysqlV80Context($localContext);
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(4958);
		        	    $this->match(self::ALTER);
		        	    $this->setState(4959);
		        	    $this->match(self::USER);
		        	    $this->setState(4961);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::IF) {
		        	    	$this->setState(4960);
		        	    	$this->ifExists();
		        	    }
		        	    $this->setState(4963);
		        	    $this->userAuthOption();
		        	    $this->setState(4968);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::COMMA) {
		        	    	$this->setState(4964);
		        	    	$this->match(self::COMMA);
		        	    	$this->setState(4965);
		        	    	$this->userAuthOption();
		        	    	$this->setState(4970);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	    $this->setState(4985);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::REQUIRE) {
		        	    	$this->setState(4971);
		        	    	$this->match(self::REQUIRE);
		        	    	$this->setState(4983);
		        	    	$this->errorHandler->sync($this);

		        	    	switch ($this->input->LA(1)) {
		        	    	    case self::NONE:
		        	    	    	$this->setState(4972);
		        	    	    	$localContext->tlsNone = $this->match(self::NONE);
		        	    	    	break;

		        	    	    case self::SSL:
		        	    	    case self::CIPHER:
		        	    	    case self::ISSUER:
		        	    	    case self::SUBJECT:
		        	    	    case self::X509:
		        	    	    	$this->setState(4973);
		        	    	    	$this->tlsOption();
		        	    	    	$this->setState(4980);
		        	    	    	$this->errorHandler->sync($this);

		        	    	    	$_la = $this->input->LA(1);
		        	    	    	while ($_la === self::AND || $_la === self::SSL || $_la === self::CIPHER || $_la === self::ISSUER || $_la === self::SUBJECT || $_la === self::X509) {
		        	    	    		$this->setState(4975);
		        	    	    		$this->errorHandler->sync($this);
		        	    	    		$_la = $this->input->LA(1);

		        	    	    		if ($_la === self::AND) {
		        	    	    			$this->setState(4974);
		        	    	    			$this->match(self::AND);
		        	    	    		}
		        	    	    		$this->setState(4977);
		        	    	    		$this->tlsOption();
		        	    	    		$this->setState(4982);
		        	    	    		$this->errorHandler->sync($this);
		        	    	    		$_la = $this->input->LA(1);
		        	    	    	}
		        	    	    	break;

		        	    	default:
		        	    		throw new NoViableAltException($this);
		        	    	}
		        	    }
		        	    $this->setState(4993);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 726, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(4987);
		        	    	    $this->match(self::WITH);
		        	    	    $this->setState(4989); 
		        	    	    $this->errorHandler->sync($this);

		        	    	    $_la = $this->input->LA(1);
		        	    	    do {
		        	    	    	$this->setState(4988);
		        	    	    	$this->userResourceOption();
		        	    	    	$this->setState(4991); 
		        	    	    	$this->errorHandler->sync($this);
		        	    	    	$_la = $this->input->LA(1);
		        	    	    } while ((((($_la - 498)) & ~0x3f) === 0 && ((1 << ($_la - 498)) & 51) !== 0));
		        	    	break;
		        	    }
		        	    $this->setState(4999);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::ACCOUNT || $_la === self::FAILED_LOGIN_ATTEMPTS || $_la === self::PASSWORD || $_la === self::PASSWORD_LOCK_TIME) {
		        	    	$this->setState(4997);
		        	    	$this->errorHandler->sync($this);

		        	    	switch ($this->input->LA(1)) {
		        	    	    case self::FAILED_LOGIN_ATTEMPTS:
		        	    	    case self::PASSWORD:
		        	    	    case self::PASSWORD_LOCK_TIME:
		        	    	    	$this->setState(4995);
		        	    	    	$this->userPasswordOption();
		        	    	    	break;

		        	    	    case self::ACCOUNT:
		        	    	    	$this->setState(4996);
		        	    	    	$this->userLockOption();
		        	    	    	break;

		        	    	default:
		        	    		throw new NoViableAltException($this);
		        	    	}
		        	    	$this->setState(5001);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	    $this->setState(5006);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->input->LA(1)) {
		        	        case self::COMMENT:
		        	        	$this->setState(5002);
		        	        	$this->match(self::COMMENT);
		        	        	$this->setState(5003);
		        	        	$this->match(self::STRING_LITERAL);
		        	        	break;

		        	        case self::ATTRIBUTE:
		        	        	$this->setState(5004);
		        	        	$this->match(self::ATTRIBUTE);
		        	        	$this->setState(5005);
		        	        	$this->match(self::STRING_LITERAL);
		        	        	break;

		        	        case self::EOF:
		        	        case self::ALTER:
		        	        case self::ANALYZE:
		        	        case self::CALL:
		        	        case self::CHANGE:
		        	        case self::CHECK:
		        	        case self::CREATE:
		        	        case self::DELETE:
		        	        case self::DESC:
		        	        case self::DESCRIBE:
		        	        case self::DROP:
		        	        case self::EXPLAIN:
		        	        case self::GET:
		        	        case self::GRANT:
		        	        case self::INSERT:
		        	        case self::KILL:
		        	        case self::LOAD:
		        	        case self::LOCK:
		        	        case self::OPTIMIZE:
		        	        case self::PURGE:
		        	        case self::RELEASE:
		        	        case self::RENAME:
		        	        case self::REPLACE:
		        	        case self::RESIGNAL:
		        	        case self::REVOKE:
		        	        case self::SELECT:
		        	        case self::SET:
		        	        case self::SHOW:
		        	        case self::SIGNAL:
		        	        case self::TABLE:
		        	        case self::UNLOCK:
		        	        case self::UPDATE:
		        	        case self::USE:
		        	        case self::VALUES:
		        	        case self::WITH:
		        	        case self::BEGIN:
		        	        case self::BINLOG:
		        	        case self::CACHE:
		        	        case self::CHECKSUM:
		        	        case self::COMMIT:
		        	        case self::DEALLOCATE:
		        	        case self::DO:
		        	        case self::FLUSH:
		        	        case self::HANDLER:
		        	        case self::HELP:
		        	        case self::INSTALL:
		        	        case self::PREPARE:
		        	        case self::REPAIR:
		        	        case self::RESET:
		        	        case self::ROLLBACK:
		        	        case self::SAVEPOINT:
		        	        case self::START:
		        	        case self::STOP:
		        	        case self::TRUNCATE:
		        	        case self::UNINSTALL:
		        	        case self::XA:
		        	        case self::EXECUTE:
		        	        case self::SHUTDOWN:
		        	        case self::MINUS:
		        	        case self::LR_BRACKET:
		        	        case self::SEMI:
		        	        	break;

		        	    default:
		        	    	break;
		        	    }
		        	break;

		        	case 3:
		        	    $localContext = new Context\AlterUserMysqlV80Context($localContext);
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(5008);
		        	    $this->match(self::ALTER);
		        	    $this->setState(5009);
		        	    $this->match(self::USER);
		        	    $this->setState(5011);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 730, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(5010);
		        	    	    $this->ifExists();
		        	    	break;
		        	    }
		        	    $this->setState(5015);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 731, $this->ctx)) {
		        	    	case 1:
		        	    	    $this->setState(5013);
		        	    	    $this->userName();
		        	    	break;

		        	    	case 2:
		        	    	    $this->setState(5014);
		        	    	    $this->uid();
		        	    	break;
		        	    }
		        	    $this->setState(5017);
		        	    $this->match(self::DEFAULT);
		        	    $this->setState(5018);
		        	    $this->match(self::ROLE);
		        	    $this->setState(5019);
		        	    $this->roleOption();
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function createUser(): Context\CreateUserContext
		{
		    $localContext = new Context\CreateUserContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 428, self::RULE_createUser);

		    try {
		        $this->setState(5088);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 746, $this->ctx)) {
		        	case 1:
		        	    $localContext = new Context\CreateUserMysqlV56Context($localContext);
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(5023);
		        	    $this->match(self::CREATE);
		        	    $this->setState(5024);
		        	    $this->match(self::USER);
		        	    $this->setState(5025);
		        	    $this->userAuthOption();
		        	    $this->setState(5030);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::COMMA) {
		        	    	$this->setState(5026);
		        	    	$this->match(self::COMMA);
		        	    	$this->setState(5027);
		        	    	$this->userAuthOption();
		        	    	$this->setState(5032);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	break;

		        	case 2:
		        	    $localContext = new Context\CreateUserMysqlV80Context($localContext);
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(5033);
		        	    $this->match(self::CREATE);
		        	    $this->setState(5034);
		        	    $this->match(self::USER);
		        	    $this->setState(5036);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::IF) {
		        	    	$this->setState(5035);
		        	    	$this->ifNotExists();
		        	    }
		        	    $this->setState(5038);
		        	    $this->userAuthOption();
		        	    $this->setState(5043);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::COMMA) {
		        	    	$this->setState(5039);
		        	    	$this->match(self::COMMA);
		        	    	$this->setState(5040);
		        	    	$this->userAuthOption();
		        	    	$this->setState(5045);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	    $this->setState(5049);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::DEFAULT) {
		        	    	$this->setState(5046);
		        	    	$this->match(self::DEFAULT);
		        	    	$this->setState(5047);
		        	    	$this->match(self::ROLE);
		        	    	$this->setState(5048);
		        	    	$this->roleOption();
		        	    }
		        	    $this->setState(5065);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::REQUIRE) {
		        	    	$this->setState(5051);
		        	    	$this->match(self::REQUIRE);
		        	    	$this->setState(5063);
		        	    	$this->errorHandler->sync($this);

		        	    	switch ($this->input->LA(1)) {
		        	    	    case self::NONE:
		        	    	    	$this->setState(5052);
		        	    	    	$localContext->tlsNone = $this->match(self::NONE);
		        	    	    	break;

		        	    	    case self::SSL:
		        	    	    case self::CIPHER:
		        	    	    case self::ISSUER:
		        	    	    case self::SUBJECT:
		        	    	    case self::X509:
		        	    	    	$this->setState(5053);
		        	    	    	$this->tlsOption();
		        	    	    	$this->setState(5060);
		        	    	    	$this->errorHandler->sync($this);

		        	    	    	$_la = $this->input->LA(1);
		        	    	    	while ($_la === self::AND || $_la === self::SSL || $_la === self::CIPHER || $_la === self::ISSUER || $_la === self::SUBJECT || $_la === self::X509) {
		        	    	    		$this->setState(5055);
		        	    	    		$this->errorHandler->sync($this);
		        	    	    		$_la = $this->input->LA(1);

		        	    	    		if ($_la === self::AND) {
		        	    	    			$this->setState(5054);
		        	    	    			$this->match(self::AND);
		        	    	    		}
		        	    	    		$this->setState(5057);
		        	    	    		$this->tlsOption();
		        	    	    		$this->setState(5062);
		        	    	    		$this->errorHandler->sync($this);
		        	    	    		$_la = $this->input->LA(1);
		        	    	    	}
		        	    	    	break;

		        	    	default:
		        	    		throw new NoViableAltException($this);
		        	    	}
		        	    }
		        	    $this->setState(5073);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 742, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(5067);
		        	    	    $this->match(self::WITH);
		        	    	    $this->setState(5069); 
		        	    	    $this->errorHandler->sync($this);

		        	    	    $_la = $this->input->LA(1);
		        	    	    do {
		        	    	    	$this->setState(5068);
		        	    	    	$this->userResourceOption();
		        	    	    	$this->setState(5071); 
		        	    	    	$this->errorHandler->sync($this);
		        	    	    	$_la = $this->input->LA(1);
		        	    	    } while ((((($_la - 498)) & ~0x3f) === 0 && ((1 << ($_la - 498)) & 51) !== 0));
		        	    	break;
		        	    }
		        	    $this->setState(5079);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::ACCOUNT || $_la === self::FAILED_LOGIN_ATTEMPTS || $_la === self::PASSWORD || $_la === self::PASSWORD_LOCK_TIME) {
		        	    	$this->setState(5077);
		        	    	$this->errorHandler->sync($this);

		        	    	switch ($this->input->LA(1)) {
		        	    	    case self::FAILED_LOGIN_ATTEMPTS:
		        	    	    case self::PASSWORD:
		        	    	    case self::PASSWORD_LOCK_TIME:
		        	    	    	$this->setState(5075);
		        	    	    	$this->userPasswordOption();
		        	    	    	break;

		        	    	    case self::ACCOUNT:
		        	    	    	$this->setState(5076);
		        	    	    	$this->userLockOption();
		        	    	    	break;

		        	    	default:
		        	    		throw new NoViableAltException($this);
		        	    	}
		        	    	$this->setState(5081);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	    $this->setState(5086);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->input->LA(1)) {
		        	        case self::COMMENT:
		        	        	$this->setState(5082);
		        	        	$this->match(self::COMMENT);
		        	        	$this->setState(5083);
		        	        	$this->match(self::STRING_LITERAL);
		        	        	break;

		        	        case self::ATTRIBUTE:
		        	        	$this->setState(5084);
		        	        	$this->match(self::ATTRIBUTE);
		        	        	$this->setState(5085);
		        	        	$this->match(self::STRING_LITERAL);
		        	        	break;

		        	        case self::EOF:
		        	        case self::ALTER:
		        	        case self::ANALYZE:
		        	        case self::CALL:
		        	        case self::CHANGE:
		        	        case self::CHECK:
		        	        case self::CREATE:
		        	        case self::DELETE:
		        	        case self::DESC:
		        	        case self::DESCRIBE:
		        	        case self::DROP:
		        	        case self::EXPLAIN:
		        	        case self::GET:
		        	        case self::GRANT:
		        	        case self::INSERT:
		        	        case self::KILL:
		        	        case self::LOAD:
		        	        case self::LOCK:
		        	        case self::OPTIMIZE:
		        	        case self::PURGE:
		        	        case self::RELEASE:
		        	        case self::RENAME:
		        	        case self::REPLACE:
		        	        case self::RESIGNAL:
		        	        case self::REVOKE:
		        	        case self::SELECT:
		        	        case self::SET:
		        	        case self::SHOW:
		        	        case self::SIGNAL:
		        	        case self::TABLE:
		        	        case self::UNLOCK:
		        	        case self::UPDATE:
		        	        case self::USE:
		        	        case self::VALUES:
		        	        case self::WITH:
		        	        case self::BEGIN:
		        	        case self::BINLOG:
		        	        case self::CACHE:
		        	        case self::CHECKSUM:
		        	        case self::COMMIT:
		        	        case self::DEALLOCATE:
		        	        case self::DO:
		        	        case self::FLUSH:
		        	        case self::HANDLER:
		        	        case self::HELP:
		        	        case self::INSTALL:
		        	        case self::PREPARE:
		        	        case self::REPAIR:
		        	        case self::RESET:
		        	        case self::ROLLBACK:
		        	        case self::SAVEPOINT:
		        	        case self::START:
		        	        case self::STOP:
		        	        case self::TRUNCATE:
		        	        case self::UNINSTALL:
		        	        case self::XA:
		        	        case self::EXECUTE:
		        	        case self::SHUTDOWN:
		        	        case self::MINUS:
		        	        case self::LR_BRACKET:
		        	        case self::SEMI:
		        	        	break;

		        	    default:
		        	    	break;
		        	    }
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function dropUser(): Context\DropUserContext
		{
		    $localContext = new Context\DropUserContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 430, self::RULE_dropUser);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(5090);
		        $this->match(self::DROP);
		        $this->setState(5091);
		        $this->match(self::USER);
		        $this->setState(5093);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::IF) {
		        	$this->setState(5092);
		        	$this->ifExists();
		        }
		        $this->setState(5095);
		        $this->userName();
		        $this->setState(5100);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::COMMA) {
		        	$this->setState(5096);
		        	$this->match(self::COMMA);
		        	$this->setState(5097);
		        	$this->userName();
		        	$this->setState(5102);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function grantStatement(): Context\GrantStatementContext
		{
		    $localContext = new Context\GrantStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 432, self::RULE_grantStatement);

		    try {
		        $this->setState(5196);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 767, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(5103);
		        	    $this->match(self::GRANT);
		        	    $this->setState(5104);
		        	    $this->privelegeClause();
		        	    $this->setState(5109);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::COMMA) {
		        	    	$this->setState(5105);
		        	    	$this->match(self::COMMA);
		        	    	$this->setState(5106);
		        	    	$this->privelegeClause();
		        	    	$this->setState(5111);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	    $this->setState(5112);
		        	    $this->match(self::ON);
		        	    $this->setState(5114);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 750, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(5113);

		        	    	    $localContext->privilegeObject = $this->input->LT(1);
		        	    	    $_la = $this->input->LA(1);

		        	    	    if (!($_la === self::PROCEDURE || $_la === self::TABLE || $_la === self::FUNCTION)) {
		        	    	    	    $localContext->privilegeObject = $this->errorHandler->recoverInline($this);
		        	    	    } else {
		        	    	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    	    $this->matchedEOF = true;
		        	    	        }

		        	    	    	$this->errorHandler->reportMatch($this);
		        	    	    	$this->consume();
		        	    	    }
		        	    	break;
		        	    }
		        	    $this->setState(5116);
		        	    $this->privilegeLevel();
		        	    $this->setState(5117);
		        	    $this->match(self::TO);
		        	    $this->setState(5118);
		        	    $this->userAuthOption();
		        	    $this->setState(5123);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::COMMA) {
		        	    	$this->setState(5119);
		        	    	$this->match(self::COMMA);
		        	    	$this->setState(5120);
		        	    	$this->userAuthOption();
		        	    	$this->setState(5125);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	    $this->setState(5140);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::REQUIRE) {
		        	    	$this->setState(5126);
		        	    	$this->match(self::REQUIRE);
		        	    	$this->setState(5138);
		        	    	$this->errorHandler->sync($this);

		        	    	switch ($this->input->LA(1)) {
		        	    	    case self::NONE:
		        	    	    	$this->setState(5127);
		        	    	    	$localContext->tlsNone = $this->match(self::NONE);
		        	    	    	break;

		        	    	    case self::SSL:
		        	    	    case self::CIPHER:
		        	    	    case self::ISSUER:
		        	    	    case self::SUBJECT:
		        	    	    case self::X509:
		        	    	    	$this->setState(5128);
		        	    	    	$this->tlsOption();
		        	    	    	$this->setState(5135);
		        	    	    	$this->errorHandler->sync($this);

		        	    	    	$_la = $this->input->LA(1);
		        	    	    	while ($_la === self::AND || $_la === self::SSL || $_la === self::CIPHER || $_la === self::ISSUER || $_la === self::SUBJECT || $_la === self::X509) {
		        	    	    		$this->setState(5130);
		        	    	    		$this->errorHandler->sync($this);
		        	    	    		$_la = $this->input->LA(1);

		        	    	    		if ($_la === self::AND) {
		        	    	    			$this->setState(5129);
		        	    	    			$this->match(self::AND);
		        	    	    		}
		        	    	    		$this->setState(5132);
		        	    	    		$this->tlsOption();
		        	    	    		$this->setState(5137);
		        	    	    		$this->errorHandler->sync($this);
		        	    	    		$_la = $this->input->LA(1);
		        	    	    	}
		        	    	    	break;

		        	    	default:
		        	    		throw new NoViableAltException($this);
		        	    	}
		        	    }
		        	    $this->setState(5151);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 758, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(5142);
		        	    	    $this->match(self::WITH);
		        	    	    $this->setState(5148);
		        	    	    $this->errorHandler->sync($this);

		        	    	    $alt = $this->getInterpreter()->adaptivePredict($this->input, 757, $this->ctx);

		        	    	    while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
		        	    	    	if ($alt === 1) {
		        	    	    		$this->setState(5146);
		        	    	    		$this->errorHandler->sync($this);

		        	    	    		switch ($this->input->LA(1)) {
		        	    	    		    case self::GRANT:
		        	    	    		    	$this->setState(5143);
		        	    	    		    	$this->match(self::GRANT);
		        	    	    		    	$this->setState(5144);
		        	    	    		    	$this->match(self::OPTION);
		        	    	    		    	break;

		        	    	    		    case self::MAX_CONNECTIONS_PER_HOUR:
		        	    	    		    case self::MAX_QUERIES_PER_HOUR:
		        	    	    		    case self::MAX_UPDATES_PER_HOUR:
		        	    	    		    case self::MAX_USER_CONNECTIONS:
		        	    	    		    	$this->setState(5145);
		        	    	    		    	$this->userResourceOption();
		        	    	    		    	break;

		        	    	    		default:
		        	    	    			throw new NoViableAltException($this);
		        	    	    		} 
		        	    	    	}

		        	    	    	$this->setState(5150);
		        	    	    	$this->errorHandler->sync($this);

		        	    	    	$alt = $this->getInterpreter()->adaptivePredict($this->input, 757, $this->ctx);
		        	    	    }
		        	    	break;
		        	    }
		        	    $this->setState(5159);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::AS) {
		        	    	$this->setState(5153);
		        	    	$this->match(self::AS);
		        	    	$this->setState(5154);
		        	    	$this->userName();
		        	    	$this->setState(5155);
		        	    	$this->match(self::WITH);
		        	    	$this->setState(5156);
		        	    	$this->match(self::ROLE);
		        	    	$this->setState(5157);
		        	    	$this->roleOption();
		        	    }
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(5161);
		        	    $this->match(self::GRANT);
		        	    $this->setState(5164);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 760, $this->ctx)) {
		        	    	case 1:
		        	    	    $this->setState(5162);
		        	    	    $this->userName();
		        	    	break;

		        	    	case 2:
		        	    	    $this->setState(5163);
		        	    	    $this->uid();
		        	    	break;
		        	    }
		        	    $this->setState(5173);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::COMMA) {
		        	    	$this->setState(5166);
		        	    	$this->match(self::COMMA);
		        	    	$this->setState(5169);
		        	    	$this->errorHandler->sync($this);

		        	    	switch ($this->getInterpreter()->adaptivePredict($this->input, 761, $this->ctx)) {
		        	    		case 1:
		        	    		    $this->setState(5167);
		        	    		    $this->userName();
		        	    		break;

		        	    		case 2:
		        	    		    $this->setState(5168);
		        	    		    $this->uid();
		        	    		break;
		        	    	}
		        	    	$this->setState(5175);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	    $this->setState(5176);
		        	    $this->match(self::TO);
		        	    $this->setState(5179);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 763, $this->ctx)) {
		        	    	case 1:
		        	    	    $this->setState(5177);
		        	    	    $this->userName();
		        	    	break;

		        	    	case 2:
		        	    	    $this->setState(5178);
		        	    	    $this->uid();
		        	    	break;
		        	    }
		        	    $this->setState(5188);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::COMMA) {
		        	    	$this->setState(5181);
		        	    	$this->match(self::COMMA);
		        	    	$this->setState(5184);
		        	    	$this->errorHandler->sync($this);

		        	    	switch ($this->getInterpreter()->adaptivePredict($this->input, 764, $this->ctx)) {
		        	    		case 1:
		        	    		    $this->setState(5182);
		        	    		    $this->userName();
		        	    		break;

		        	    		case 2:
		        	    		    $this->setState(5183);
		        	    		    $this->uid();
		        	    		break;
		        	    	}
		        	    	$this->setState(5190);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	    $this->setState(5194);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 766, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(5191);
		        	    	    $this->match(self::WITH);
		        	    	    $this->setState(5192);
		        	    	    $this->match(self::ADMIN);
		        	    	    $this->setState(5193);
		        	    	    $this->match(self::OPTION);
		        	    	break;
		        	    }
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function roleOption(): Context\RoleOptionContext
		{
		    $localContext = new Context\RoleOptionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 434, self::RULE_roleOption);

		    try {
		        $this->setState(5220);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 771, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(5198);
		        	    $this->match(self::DEFAULT);
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(5199);
		        	    $this->match(self::NONE);
		        	break;

		        	case 3:
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(5200);
		        	    $this->match(self::ALL);
		        	    $this->setState(5210);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::EXCEPT) {
		        	    	$this->setState(5201);
		        	    	$this->match(self::EXCEPT);
		        	    	$this->setState(5202);
		        	    	$this->userName();
		        	    	$this->setState(5207);
		        	    	$this->errorHandler->sync($this);

		        	    	$_la = $this->input->LA(1);
		        	    	while ($_la === self::COMMA) {
		        	    		$this->setState(5203);
		        	    		$this->match(self::COMMA);
		        	    		$this->setState(5204);
		        	    		$this->userName();
		        	    		$this->setState(5209);
		        	    		$this->errorHandler->sync($this);
		        	    		$_la = $this->input->LA(1);
		        	    	}
		        	    }
		        	break;

		        	case 4:
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(5212);
		        	    $this->userName();
		        	    $this->setState(5217);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::COMMA) {
		        	    	$this->setState(5213);
		        	    	$this->match(self::COMMA);
		        	    	$this->setState(5214);
		        	    	$this->userName();
		        	    	$this->setState(5219);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function grantProxy(): Context\GrantProxyContext
		{
		    $localContext = new Context\GrantProxyContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 436, self::RULE_grantProxy);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(5222);
		        $this->match(self::GRANT);
		        $this->setState(5223);
		        $this->match(self::PROXY);
		        $this->setState(5224);
		        $this->match(self::ON);
		        $this->setState(5225);
		        $localContext->fromFirst = $this->userName();
		        $this->setState(5226);
		        $this->match(self::TO);
		        $this->setState(5227);
		        $localContext->toFirst = $this->userName();
		        $this->setState(5232);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::COMMA) {
		        	$this->setState(5228);
		        	$this->match(self::COMMA);
		        	$this->setState(5229);
		        	$localContext->userName = $this->userName();
		        	$localContext->toOther[] = $localContext->userName;
		        	$this->setState(5234);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		        $this->setState(5238);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 773, $this->ctx)) {
		            case 1:
		        	    $this->setState(5235);
		        	    $this->match(self::WITH);
		        	    $this->setState(5236);
		        	    $this->match(self::GRANT);
		        	    $this->setState(5237);
		        	    $this->match(self::OPTION);
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function renameUser(): Context\RenameUserContext
		{
		    $localContext = new Context\RenameUserContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 438, self::RULE_renameUser);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(5240);
		        $this->match(self::RENAME);
		        $this->setState(5241);
		        $this->match(self::USER);
		        $this->setState(5242);
		        $this->renameUserClause();
		        $this->setState(5247);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::COMMA) {
		        	$this->setState(5243);
		        	$this->match(self::COMMA);
		        	$this->setState(5244);
		        	$this->renameUserClause();
		        	$this->setState(5249);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function revokeStatement(): Context\RevokeStatementContext
		{
		    $localContext = new Context\RevokeStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 440, self::RULE_revokeStatement);

		    try {
		        $this->setState(5320);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 786, $this->ctx)) {
		        	case 1:
		        	    $localContext = new Context\DetailRevokeContext($localContext);
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(5250);
		        	    $this->match(self::REVOKE);
		        	    $this->setState(5251);
		        	    $this->privelegeClause();
		        	    $this->setState(5256);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::COMMA) {
		        	    	$this->setState(5252);
		        	    	$this->match(self::COMMA);
		        	    	$this->setState(5253);
		        	    	$this->privelegeClause();
		        	    	$this->setState(5258);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	    $this->setState(5259);
		        	    $this->match(self::ON);
		        	    $this->setState(5261);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 776, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(5260);

		        	    	    $localContext->privilegeObject = $this->input->LT(1);
		        	    	    $_la = $this->input->LA(1);

		        	    	    if (!($_la === self::PROCEDURE || $_la === self::TABLE || $_la === self::FUNCTION)) {
		        	    	    	    $localContext->privilegeObject = $this->errorHandler->recoverInline($this);
		        	    	    } else {
		        	    	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    	    $this->matchedEOF = true;
		        	    	        }

		        	    	    	$this->errorHandler->reportMatch($this);
		        	    	    	$this->consume();
		        	    	    }
		        	    	break;
		        	    }
		        	    $this->setState(5263);
		        	    $this->privilegeLevel();
		        	    $this->setState(5264);
		        	    $this->match(self::FROM);
		        	    $this->setState(5265);
		        	    $this->userName();
		        	    $this->setState(5270);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::COMMA) {
		        	    	$this->setState(5266);
		        	    	$this->match(self::COMMA);
		        	    	$this->setState(5267);
		        	    	$this->userName();
		        	    	$this->setState(5272);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	break;

		        	case 2:
		        	    $localContext = new Context\ShortRevokeContext($localContext);
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(5273);
		        	    $this->match(self::REVOKE);
		        	    $this->setState(5274);
		        	    $this->match(self::ALL);
		        	    $this->setState(5276);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::PRIVILEGES) {
		        	    	$this->setState(5275);
		        	    	$this->match(self::PRIVILEGES);
		        	    }
		        	    $this->setState(5278);
		        	    $this->match(self::COMMA);
		        	    $this->setState(5279);
		        	    $this->match(self::GRANT);
		        	    $this->setState(5280);
		        	    $this->match(self::OPTION);
		        	    $this->setState(5281);
		        	    $this->match(self::FROM);
		        	    $this->setState(5282);
		        	    $this->userName();
		        	    $this->setState(5287);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::COMMA) {
		        	    	$this->setState(5283);
		        	    	$this->match(self::COMMA);
		        	    	$this->setState(5284);
		        	    	$this->userName();
		        	    	$this->setState(5289);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	break;

		        	case 3:
		        	    $localContext = new Context\RoleRevokeContext($localContext);
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(5290);
		        	    $this->match(self::REVOKE);
		        	    $this->setState(5293);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 780, $this->ctx)) {
		        	    	case 1:
		        	    	    $this->setState(5291);
		        	    	    $this->userName();
		        	    	break;

		        	    	case 2:
		        	    	    $this->setState(5292);
		        	    	    $this->uid();
		        	    	break;
		        	    }
		        	    $this->setState(5302);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::COMMA) {
		        	    	$this->setState(5295);
		        	    	$this->match(self::COMMA);
		        	    	$this->setState(5298);
		        	    	$this->errorHandler->sync($this);

		        	    	switch ($this->getInterpreter()->adaptivePredict($this->input, 781, $this->ctx)) {
		        	    		case 1:
		        	    		    $this->setState(5296);
		        	    		    $this->userName();
		        	    		break;

		        	    		case 2:
		        	    		    $this->setState(5297);
		        	    		    $this->uid();
		        	    		break;
		        	    	}
		        	    	$this->setState(5304);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	    $this->setState(5305);
		        	    $this->match(self::FROM);
		        	    $this->setState(5308);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 783, $this->ctx)) {
		        	    	case 1:
		        	    	    $this->setState(5306);
		        	    	    $this->userName();
		        	    	break;

		        	    	case 2:
		        	    	    $this->setState(5307);
		        	    	    $this->uid();
		        	    	break;
		        	    }
		        	    $this->setState(5317);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::COMMA) {
		        	    	$this->setState(5310);
		        	    	$this->match(self::COMMA);
		        	    	$this->setState(5313);
		        	    	$this->errorHandler->sync($this);

		        	    	switch ($this->getInterpreter()->adaptivePredict($this->input, 784, $this->ctx)) {
		        	    		case 1:
		        	    		    $this->setState(5311);
		        	    		    $this->userName();
		        	    		break;

		        	    		case 2:
		        	    		    $this->setState(5312);
		        	    		    $this->uid();
		        	    		break;
		        	    	}
		        	    	$this->setState(5319);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function revokeProxy(): Context\RevokeProxyContext
		{
		    $localContext = new Context\RevokeProxyContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 442, self::RULE_revokeProxy);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(5322);
		        $this->match(self::REVOKE);
		        $this->setState(5323);
		        $this->match(self::PROXY);
		        $this->setState(5324);
		        $this->match(self::ON);
		        $this->setState(5325);
		        $localContext->onUser = $this->userName();
		        $this->setState(5326);
		        $this->match(self::FROM);
		        $this->setState(5327);
		        $localContext->fromFirst = $this->userName();
		        $this->setState(5332);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::COMMA) {
		        	$this->setState(5328);
		        	$this->match(self::COMMA);
		        	$this->setState(5329);
		        	$localContext->userName = $this->userName();
		        	$localContext->fromOther[] = $localContext->userName;
		        	$this->setState(5334);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function setPasswordStatement(): Context\SetPasswordStatementContext
		{
		    $localContext = new Context\SetPasswordStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 444, self::RULE_setPasswordStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(5335);
		        $this->match(self::SET);
		        $this->setState(5336);
		        $this->match(self::PASSWORD);
		        $this->setState(5339);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::FOR) {
		        	$this->setState(5337);
		        	$this->match(self::FOR);
		        	$this->setState(5338);
		        	$this->userName();
		        }
		        $this->setState(5341);
		        $this->match(self::EQUAL_SYMBOL);
		        $this->setState(5344);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::OLD_PASSWORD:
		            case self::PASSWORD:
		            	$this->setState(5342);
		            	$this->passwordFunctionClause();
		            	break;

		            case self::STRING_LITERAL:
		            	$this->setState(5343);
		            	$this->match(self::STRING_LITERAL);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function userSpecification(): Context\UserSpecificationContext
		{
		    $localContext = new Context\UserSpecificationContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 446, self::RULE_userSpecification);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(5346);
		        $this->userName();
		        $this->setState(5347);
		        $this->userPasswordOption();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function userAuthOption(): Context\UserAuthOptionContext
		{
		    $localContext = new Context\UserAuthOptionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 448, self::RULE_userAuthOption);

		    try {
		        $this->setState(5374);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 790, $this->ctx)) {
		        	case 1:
		        	    $localContext = new Context\HashAuthOptionContext($localContext);
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(5349);
		        	    $this->userName();
		        	    $this->setState(5350);
		        	    $this->match(self::IDENTIFIED);
		        	    $this->setState(5351);
		        	    $this->match(self::BY);
		        	    $this->setState(5352);
		        	    $this->match(self::PASSWORD);
		        	    $this->setState(5353);
		        	    $localContext->hashed = $this->match(self::STRING_LITERAL);
		        	break;

		        	case 2:
		        	    $localContext = new Context\RandomAuthOptionContext($localContext);
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(5355);
		        	    $this->userName();
		        	    $this->setState(5356);
		        	    $this->match(self::IDENTIFIED);
		        	    $this->setState(5357);
		        	    $this->match(self::BY);
		        	    $this->setState(5358);
		        	    $this->match(self::RANDOM);
		        	    $this->setState(5359);
		        	    $this->match(self::PASSWORD);
		        	    $this->setState(5360);
		        	    $this->authOptionClause();
		        	break;

		        	case 3:
		        	    $localContext = new Context\StringAuthOptionContext($localContext);
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(5362);
		        	    $this->userName();
		        	    $this->setState(5363);
		        	    $this->match(self::IDENTIFIED);
		        	    $this->setState(5364);
		        	    $this->match(self::BY);
		        	    $this->setState(5365);
		        	    $this->match(self::STRING_LITERAL);
		        	    $this->setState(5366);
		        	    $this->authOptionClause();
		        	break;

		        	case 4:
		        	    $localContext = new Context\ModuleAuthOptionContext($localContext);
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(5368);
		        	    $this->userName();
		        	    $this->setState(5369);
		        	    $this->match(self::IDENTIFIED);
		        	    $this->setState(5370);
		        	    $this->match(self::WITH);
		        	    $this->setState(5371);
		        	    $this->authenticationRule();
		        	break;

		        	case 5:
		        	    $localContext = new Context\SimpleAuthOptionContext($localContext);
		        	    $this->enterOuterAlt($localContext, 5);
		        	    $this->setState(5373);
		        	    $this->userName();
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function authOptionClause(): Context\AuthOptionClauseContext
		{
		    $localContext = new Context\AuthOptionClauseContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 450, self::RULE_authOptionClause);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(5378);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 791, $this->ctx)) {
		            case 1:
		        	    $this->setState(5376);
		        	    $this->match(self::REPLACE);
		        	    $this->setState(5377);
		        	    $this->match(self::STRING_LITERAL);
		        	break;
		        }
		        $this->setState(5383);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::RETAIN) {
		        	$this->setState(5380);
		        	$this->match(self::RETAIN);
		        	$this->setState(5381);
		        	$this->match(self::CURRENT);
		        	$this->setState(5382);
		        	$this->match(self::PASSWORD);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function authenticationRule(): Context\AuthenticationRuleContext
		{
		    $localContext = new Context\AuthenticationRuleContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 452, self::RULE_authenticationRule);

		    try {
		        $this->setState(5399);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 795, $this->ctx)) {
		        	case 1:
		        	    $localContext = new Context\ModuleContext($localContext);
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(5385);
		        	    $this->authPlugin();
		        	    $this->setState(5393);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 794, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(5386);

		        	    	    $_la = $this->input->LA(1);

		        	    	    if (!($_la === self::AS || $_la === self::BY || $_la === self::USING)) {
		        	    	    $this->errorHandler->recoverInline($this);
		        	    	    } else {
		        	    	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    	    $this->matchedEOF = true;
		        	    	        }

		        	    	    	$this->errorHandler->reportMatch($this);
		        	    	    	$this->consume();
		        	    	    }
		        	    	    $this->setState(5390);
		        	    	    $this->errorHandler->sync($this);

		        	    	    switch ($this->input->LA(1)) {
		        	    	        case self::STRING_LITERAL:
		        	    	        	$this->setState(5387);
		        	    	        	$this->match(self::STRING_LITERAL);
		        	    	        	break;

		        	    	        case self::RANDOM:
		        	    	        	$this->setState(5388);
		        	    	        	$this->match(self::RANDOM);
		        	    	        	$this->setState(5389);
		        	    	        	$this->match(self::PASSWORD);
		        	    	        	break;

		        	    	    default:
		        	    	    	throw new NoViableAltException($this);
		        	    	    }
		        	    	    $this->setState(5392);
		        	    	    $this->authOptionClause();
		        	    	break;
		        	    }
		        	break;

		        	case 2:
		        	    $localContext = new Context\PasswordModuleOptionContext($localContext);
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(5395);
		        	    $this->authPlugin();
		        	    $this->setState(5396);
		        	    $this->match(self::USING);
		        	    $this->setState(5397);
		        	    $this->passwordFunctionClause();
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function tlsOption(): Context\TlsOptionContext
		{
		    $localContext = new Context\TlsOptionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 454, self::RULE_tlsOption);

		    try {
		        $this->setState(5409);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::SSL:
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(5401);
		            	$this->match(self::SSL);
		            	break;

		            case self::X509:
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(5402);
		            	$this->match(self::X509);
		            	break;

		            case self::CIPHER:
		            	$this->enterOuterAlt($localContext, 3);
		            	$this->setState(5403);
		            	$this->match(self::CIPHER);
		            	$this->setState(5404);
		            	$this->match(self::STRING_LITERAL);
		            	break;

		            case self::ISSUER:
		            	$this->enterOuterAlt($localContext, 4);
		            	$this->setState(5405);
		            	$this->match(self::ISSUER);
		            	$this->setState(5406);
		            	$this->match(self::STRING_LITERAL);
		            	break;

		            case self::SUBJECT:
		            	$this->enterOuterAlt($localContext, 5);
		            	$this->setState(5407);
		            	$this->match(self::SUBJECT);
		            	$this->setState(5408);
		            	$this->match(self::STRING_LITERAL);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function userResourceOption(): Context\UserResourceOptionContext
		{
		    $localContext = new Context\UserResourceOptionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 456, self::RULE_userResourceOption);

		    try {
		        $this->setState(5419);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::MAX_QUERIES_PER_HOUR:
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(5411);
		            	$this->match(self::MAX_QUERIES_PER_HOUR);
		            	$this->setState(5412);
		            	$this->decimalLiteral();
		            	break;

		            case self::MAX_UPDATES_PER_HOUR:
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(5413);
		            	$this->match(self::MAX_UPDATES_PER_HOUR);
		            	$this->setState(5414);
		            	$this->decimalLiteral();
		            	break;

		            case self::MAX_CONNECTIONS_PER_HOUR:
		            	$this->enterOuterAlt($localContext, 3);
		            	$this->setState(5415);
		            	$this->match(self::MAX_CONNECTIONS_PER_HOUR);
		            	$this->setState(5416);
		            	$this->decimalLiteral();
		            	break;

		            case self::MAX_USER_CONNECTIONS:
		            	$this->enterOuterAlt($localContext, 4);
		            	$this->setState(5417);
		            	$this->match(self::MAX_USER_CONNECTIONS);
		            	$this->setState(5418);
		            	$this->decimalLiteral();
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function userPasswordOption(): Context\UserPasswordOptionContext
		{
		    $localContext = new Context\UserPasswordOptionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 458, self::RULE_userPasswordOption);

		    try {
		        $this->setState(5459);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 803, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(5421);
		        	    $this->match(self::PASSWORD);
		        	    $this->setState(5422);
		        	    $this->match(self::EXPIRE);
		        	    $this->setState(5429);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->input->LA(1)) {
		        	        case self::DEFAULT:
		        	        	$this->setState(5423);
		        	        	$localContext->expireType = $this->match(self::DEFAULT);
		        	        	break;

		        	        case self::NEVER:
		        	        	$this->setState(5424);
		        	        	$localContext->expireType = $this->match(self::NEVER);
		        	        	break;

		        	        case self::INTERVAL:
		        	        	$this->setState(5425);
		        	        	$localContext->expireType = $this->match(self::INTERVAL);
		        	        	$this->setState(5426);
		        	        	$this->decimalLiteral();
		        	        	$this->setState(5427);
		        	        	$this->match(self::DAY);
		        	        	break;

		        	        case self::EOF:
		        	        case self::ALTER:
		        	        case self::ANALYZE:
		        	        case self::ATTRIBUTE:
		        	        case self::CALL:
		        	        case self::CHANGE:
		        	        case self::CHECK:
		        	        case self::CREATE:
		        	        case self::DELETE:
		        	        case self::DESC:
		        	        case self::DESCRIBE:
		        	        case self::DROP:
		        	        case self::EXPLAIN:
		        	        case self::GET:
		        	        case self::GRANT:
		        	        case self::INSERT:
		        	        case self::KILL:
		        	        case self::LOAD:
		        	        case self::LOCK:
		        	        case self::OPTIMIZE:
		        	        case self::PURGE:
		        	        case self::RELEASE:
		        	        case self::RENAME:
		        	        case self::REPLACE:
		        	        case self::RESIGNAL:
		        	        case self::REVOKE:
		        	        case self::SELECT:
		        	        case self::SET:
		        	        case self::SHOW:
		        	        case self::SIGNAL:
		        	        case self::TABLE:
		        	        case self::UNLOCK:
		        	        case self::UPDATE:
		        	        case self::USE:
		        	        case self::VALUES:
		        	        case self::WITH:
		        	        case self::ACCOUNT:
		        	        case self::BEGIN:
		        	        case self::BINLOG:
		        	        case self::CACHE:
		        	        case self::CHECKSUM:
		        	        case self::COMMENT:
		        	        case self::COMMIT:
		        	        case self::DEALLOCATE:
		        	        case self::DO:
		        	        case self::FAILED_LOGIN_ATTEMPTS:
		        	        case self::FLUSH:
		        	        case self::HANDLER:
		        	        case self::HELP:
		        	        case self::INSTALL:
		        	        case self::PASSWORD:
		        	        case self::PASSWORD_LOCK_TIME:
		        	        case self::PREPARE:
		        	        case self::REPAIR:
		        	        case self::RESET:
		        	        case self::ROLLBACK:
		        	        case self::SAVEPOINT:
		        	        case self::START:
		        	        case self::STOP:
		        	        case self::TRUNCATE:
		        	        case self::UNINSTALL:
		        	        case self::XA:
		        	        case self::EXECUTE:
		        	        case self::SHUTDOWN:
		        	        case self::MINUS:
		        	        case self::LR_BRACKET:
		        	        case self::COMMA:
		        	        case self::SEMI:
		        	        	break;

		        	    default:
		        	    	break;
		        	    }
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(5431);
		        	    $this->match(self::PASSWORD);
		        	    $this->setState(5432);
		        	    $this->match(self::HISTORY);
		        	    $this->setState(5435);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->input->LA(1)) {
		        	        case self::DEFAULT:
		        	        	$this->setState(5433);
		        	        	$this->match(self::DEFAULT);
		        	        	break;

		        	        case self::ZERO_DECIMAL:
		        	        case self::ONE_DECIMAL:
		        	        case self::TWO_DECIMAL:
		        	        case self::DECIMAL_LITERAL:
		        	        case self::REAL_LITERAL:
		        	        	$this->setState(5434);
		        	        	$this->decimalLiteral();
		        	        	break;

		        	    default:
		        	    	throw new NoViableAltException($this);
		        	    }
		        	break;

		        	case 3:
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(5437);
		        	    $this->match(self::PASSWORD);
		        	    $this->setState(5438);
		        	    $this->match(self::REUSE);
		        	    $this->setState(5439);
		        	    $this->match(self::INTERVAL);
		        	    $this->setState(5444);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->input->LA(1)) {
		        	        case self::DEFAULT:
		        	        	$this->setState(5440);
		        	        	$this->match(self::DEFAULT);
		        	        	break;

		        	        case self::ZERO_DECIMAL:
		        	        case self::ONE_DECIMAL:
		        	        case self::TWO_DECIMAL:
		        	        case self::DECIMAL_LITERAL:
		        	        case self::REAL_LITERAL:
		        	        	$this->setState(5441);
		        	        	$this->decimalLiteral();
		        	        	$this->setState(5442);
		        	        	$this->match(self::DAY);
		        	        	break;

		        	    default:
		        	    	throw new NoViableAltException($this);
		        	    }
		        	break;

		        	case 4:
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(5446);
		        	    $this->match(self::PASSWORD);
		        	    $this->setState(5447);
		        	    $this->match(self::REQUIRE);
		        	    $this->setState(5448);
		        	    $this->match(self::CURRENT);
		        	    $this->setState(5450);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::DEFAULT || $_la === self::OPTIONAL) {
		        	    	$this->setState(5449);

		        	    	$_la = $this->input->LA(1);

		        	    	if (!($_la === self::DEFAULT || $_la === self::OPTIONAL)) {
		        	    	$this->errorHandler->recoverInline($this);
		        	    	} else {
		        	    		if ($this->input->LA(1) === Token::EOF) {
		        	    		    $this->matchedEOF = true;
		        	    	    }

		        	    		$this->errorHandler->reportMatch($this);
		        	    		$this->consume();
		        	    	}
		        	    }
		        	break;

		        	case 5:
		        	    $this->enterOuterAlt($localContext, 5);
		        	    $this->setState(5452);
		        	    $this->match(self::FAILED_LOGIN_ATTEMPTS);
		        	    $this->setState(5453);
		        	    $this->decimalLiteral();
		        	break;

		        	case 6:
		        	    $this->enterOuterAlt($localContext, 6);
		        	    $this->setState(5454);
		        	    $this->match(self::PASSWORD_LOCK_TIME);
		        	    $this->setState(5457);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->input->LA(1)) {
		        	        case self::ZERO_DECIMAL:
		        	        case self::ONE_DECIMAL:
		        	        case self::TWO_DECIMAL:
		        	        case self::DECIMAL_LITERAL:
		        	        case self::REAL_LITERAL:
		        	        	$this->setState(5455);
		        	        	$this->decimalLiteral();
		        	        	break;

		        	        case self::UNBOUNDED:
		        	        	$this->setState(5456);
		        	        	$this->match(self::UNBOUNDED);
		        	        	break;

		        	    default:
		        	    	throw new NoViableAltException($this);
		        	    }
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function userLockOption(): Context\UserLockOptionContext
		{
		    $localContext = new Context\UserLockOptionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 460, self::RULE_userLockOption);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(5461);
		        $this->match(self::ACCOUNT);
		        $this->setState(5462);

		        $localContext->lockType = $this->input->LT(1);
		        $_la = $this->input->LA(1);

		        if (!($_la === self::LOCK || $_la === self::UNLOCK)) {
		        	    $localContext->lockType = $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function privelegeClause(): Context\PrivelegeClauseContext
		{
		    $localContext = new Context\PrivelegeClauseContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 462, self::RULE_privelegeClause);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(5464);
		        $this->privilege();
		        $this->setState(5469);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::LR_BRACKET) {
		        	$this->setState(5465);
		        	$this->match(self::LR_BRACKET);
		        	$this->setState(5466);
		        	$this->uidList();
		        	$this->setState(5467);
		        	$this->match(self::RR_BRACKET);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function privilege(): Context\PrivilegeContext
		{
		    $localContext = new Context\PrivilegeContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 464, self::RULE_privilege);

		    try {
		        $this->setState(5564);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 809, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(5471);
		        	    $this->match(self::ALL);
		        	    $this->setState(5473);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::PRIVILEGES) {
		        	    	$this->setState(5472);
		        	    	$this->match(self::PRIVILEGES);
		        	    }
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(5475);
		        	    $this->match(self::ALTER);
		        	    $this->setState(5477);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::ROUTINE) {
		        	    	$this->setState(5476);
		        	    	$this->match(self::ROUTINE);
		        	    }
		        	break;

		        	case 3:
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(5479);
		        	    $this->match(self::CREATE);
		        	    $this->setState(5487);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->input->LA(1)) {
		        	        case self::TEMPORARY:
		        	        	$this->setState(5480);
		        	        	$this->match(self::TEMPORARY);
		        	        	$this->setState(5481);
		        	        	$this->match(self::TABLES);
		        	        	break;

		        	        case self::ROUTINE:
		        	        	$this->setState(5482);
		        	        	$this->match(self::ROUTINE);
		        	        	break;

		        	        case self::VIEW:
		        	        	$this->setState(5483);
		        	        	$this->match(self::VIEW);
		        	        	break;

		        	        case self::USER:
		        	        	$this->setState(5484);
		        	        	$this->match(self::USER);
		        	        	break;

		        	        case self::TABLESPACE:
		        	        	$this->setState(5485);
		        	        	$this->match(self::TABLESPACE);
		        	        	break;

		        	        case self::ROLE:
		        	        	$this->setState(5486);
		        	        	$this->match(self::ROLE);
		        	        	break;

		        	        case self::ON:
		        	        case self::LR_BRACKET:
		        	        case self::COMMA:
		        	        	break;

		        	    default:
		        	    	break;
		        	    }
		        	break;

		        	case 4:
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(5489);
		        	    $this->match(self::DELETE);
		        	break;

		        	case 5:
		        	    $this->enterOuterAlt($localContext, 5);
		        	    $this->setState(5490);
		        	    $this->match(self::DROP);
		        	    $this->setState(5492);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::ROLE) {
		        	    	$this->setState(5491);
		        	    	$this->match(self::ROLE);
		        	    }
		        	break;

		        	case 6:
		        	    $this->enterOuterAlt($localContext, 6);
		        	    $this->setState(5494);
		        	    $this->match(self::EVENT);
		        	break;

		        	case 7:
		        	    $this->enterOuterAlt($localContext, 7);
		        	    $this->setState(5495);
		        	    $this->match(self::EXECUTE);
		        	break;

		        	case 8:
		        	    $this->enterOuterAlt($localContext, 8);
		        	    $this->setState(5496);
		        	    $this->match(self::FILE);
		        	break;

		        	case 9:
		        	    $this->enterOuterAlt($localContext, 9);
		        	    $this->setState(5497);
		        	    $this->match(self::GRANT);
		        	    $this->setState(5498);
		        	    $this->match(self::OPTION);
		        	break;

		        	case 10:
		        	    $this->enterOuterAlt($localContext, 10);
		        	    $this->setState(5499);
		        	    $this->match(self::INDEX);
		        	break;

		        	case 11:
		        	    $this->enterOuterAlt($localContext, 11);
		        	    $this->setState(5500);
		        	    $this->match(self::INSERT);
		        	break;

		        	case 12:
		        	    $this->enterOuterAlt($localContext, 12);
		        	    $this->setState(5501);
		        	    $this->match(self::LOCK);
		        	    $this->setState(5502);
		        	    $this->match(self::TABLES);
		        	break;

		        	case 13:
		        	    $this->enterOuterAlt($localContext, 13);
		        	    $this->setState(5503);
		        	    $this->match(self::PROCESS);
		        	break;

		        	case 14:
		        	    $this->enterOuterAlt($localContext, 14);
		        	    $this->setState(5504);
		        	    $this->match(self::PROXY);
		        	break;

		        	case 15:
		        	    $this->enterOuterAlt($localContext, 15);
		        	    $this->setState(5505);
		        	    $this->match(self::REFERENCES);
		        	break;

		        	case 16:
		        	    $this->enterOuterAlt($localContext, 16);
		        	    $this->setState(5506);
		        	    $this->match(self::RELOAD);
		        	break;

		        	case 17:
		        	    $this->enterOuterAlt($localContext, 17);
		        	    $this->setState(5507);
		        	    $this->match(self::REPLICATION);
		        	    $this->setState(5508);

		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::CLIENT || $_la === self::SLAVE)) {
		        	    $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	break;

		        	case 18:
		        	    $this->enterOuterAlt($localContext, 18);
		        	    $this->setState(5509);
		        	    $this->match(self::SELECT);
		        	break;

		        	case 19:
		        	    $this->enterOuterAlt($localContext, 19);
		        	    $this->setState(5510);
		        	    $this->match(self::SHOW);
		        	    $this->setState(5511);

		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::DATABASES || $_la === self::VIEW)) {
		        	    $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	break;

		        	case 20:
		        	    $this->enterOuterAlt($localContext, 20);
		        	    $this->setState(5512);
		        	    $this->match(self::SHUTDOWN);
		        	break;

		        	case 21:
		        	    $this->enterOuterAlt($localContext, 21);
		        	    $this->setState(5513);
		        	    $this->match(self::SUPER);
		        	break;

		        	case 22:
		        	    $this->enterOuterAlt($localContext, 22);
		        	    $this->setState(5514);
		        	    $this->match(self::TRIGGER);
		        	break;

		        	case 23:
		        	    $this->enterOuterAlt($localContext, 23);
		        	    $this->setState(5515);
		        	    $this->match(self::UPDATE);
		        	break;

		        	case 24:
		        	    $this->enterOuterAlt($localContext, 24);
		        	    $this->setState(5516);
		        	    $this->match(self::USAGE);
		        	break;

		        	case 25:
		        	    $this->enterOuterAlt($localContext, 25);
		        	    $this->setState(5517);
		        	    $this->match(self::APPLICATION_PASSWORD_ADMIN);
		        	break;

		        	case 26:
		        	    $this->enterOuterAlt($localContext, 26);
		        	    $this->setState(5518);
		        	    $this->match(self::AUDIT_ABORT_EXEMPT);
		        	break;

		        	case 27:
		        	    $this->enterOuterAlt($localContext, 27);
		        	    $this->setState(5519);
		        	    $this->match(self::AUDIT_ADMIN);
		        	break;

		        	case 28:
		        	    $this->enterOuterAlt($localContext, 28);
		        	    $this->setState(5520);
		        	    $this->match(self::AUTHENTICATION_POLICY_ADMIN);
		        	break;

		        	case 29:
		        	    $this->enterOuterAlt($localContext, 29);
		        	    $this->setState(5521);
		        	    $this->match(self::BACKUP_ADMIN);
		        	break;

		        	case 30:
		        	    $this->enterOuterAlt($localContext, 30);
		        	    $this->setState(5522);
		        	    $this->match(self::BINLOG_ADMIN);
		        	break;

		        	case 31:
		        	    $this->enterOuterAlt($localContext, 31);
		        	    $this->setState(5523);
		        	    $this->match(self::BINLOG_ENCRYPTION_ADMIN);
		        	break;

		        	case 32:
		        	    $this->enterOuterAlt($localContext, 32);
		        	    $this->setState(5524);
		        	    $this->match(self::CLONE_ADMIN);
		        	break;

		        	case 33:
		        	    $this->enterOuterAlt($localContext, 33);
		        	    $this->setState(5525);
		        	    $this->match(self::CONNECTION_ADMIN);
		        	break;

		        	case 34:
		        	    $this->enterOuterAlt($localContext, 34);
		        	    $this->setState(5526);
		        	    $this->match(self::ENCRYPTION_KEY_ADMIN);
		        	break;

		        	case 35:
		        	    $this->enterOuterAlt($localContext, 35);
		        	    $this->setState(5527);
		        	    $this->match(self::FIREWALL_ADMIN);
		        	break;

		        	case 36:
		        	    $this->enterOuterAlt($localContext, 36);
		        	    $this->setState(5528);
		        	    $this->match(self::FIREWALL_EXEMPT);
		        	break;

		        	case 37:
		        	    $this->enterOuterAlt($localContext, 37);
		        	    $this->setState(5529);
		        	    $this->match(self::FIREWALL_USER);
		        	break;

		        	case 38:
		        	    $this->enterOuterAlt($localContext, 38);
		        	    $this->setState(5530);
		        	    $this->match(self::FLUSH_OPTIMIZER_COSTS);
		        	break;

		        	case 39:
		        	    $this->enterOuterAlt($localContext, 39);
		        	    $this->setState(5531);
		        	    $this->match(self::FLUSH_STATUS);
		        	break;

		        	case 40:
		        	    $this->enterOuterAlt($localContext, 40);
		        	    $this->setState(5532);
		        	    $this->match(self::FLUSH_TABLES);
		        	break;

		        	case 41:
		        	    $this->enterOuterAlt($localContext, 41);
		        	    $this->setState(5533);
		        	    $this->match(self::FLUSH_USER_RESOURCES);
		        	break;

		        	case 42:
		        	    $this->enterOuterAlt($localContext, 42);
		        	    $this->setState(5534);
		        	    $this->match(self::GROUP_REPLICATION_ADMIN);
		        	break;

		        	case 43:
		        	    $this->enterOuterAlt($localContext, 43);
		        	    $this->setState(5535);
		        	    $this->match(self::INNODB_REDO_LOG_ARCHIVE);
		        	break;

		        	case 44:
		        	    $this->enterOuterAlt($localContext, 44);
		        	    $this->setState(5536);
		        	    $this->match(self::INNODB_REDO_LOG_ENABLE);
		        	break;

		        	case 45:
		        	    $this->enterOuterAlt($localContext, 45);
		        	    $this->setState(5537);
		        	    $this->match(self::NDB_STORED_USER);
		        	break;

		        	case 46:
		        	    $this->enterOuterAlt($localContext, 46);
		        	    $this->setState(5538);
		        	    $this->match(self::PASSWORDLESS_USER_ADMIN);
		        	break;

		        	case 47:
		        	    $this->enterOuterAlt($localContext, 47);
		        	    $this->setState(5539);
		        	    $this->match(self::PERSIST_RO_VARIABLES_ADMIN);
		        	break;

		        	case 48:
		        	    $this->enterOuterAlt($localContext, 48);
		        	    $this->setState(5540);
		        	    $this->match(self::REPLICATION_APPLIER);
		        	break;

		        	case 49:
		        	    $this->enterOuterAlt($localContext, 49);
		        	    $this->setState(5541);
		        	    $this->match(self::REPLICATION_SLAVE_ADMIN);
		        	break;

		        	case 50:
		        	    $this->enterOuterAlt($localContext, 50);
		        	    $this->setState(5542);
		        	    $this->match(self::RESOURCE_GROUP_ADMIN);
		        	break;

		        	case 51:
		        	    $this->enterOuterAlt($localContext, 51);
		        	    $this->setState(5543);
		        	    $this->match(self::RESOURCE_GROUP_USER);
		        	break;

		        	case 52:
		        	    $this->enterOuterAlt($localContext, 52);
		        	    $this->setState(5544);
		        	    $this->match(self::ROLE_ADMIN);
		        	break;

		        	case 53:
		        	    $this->enterOuterAlt($localContext, 53);
		        	    $this->setState(5545);
		        	    $this->match(self::SERVICE_CONNECTION_ADMIN);
		        	break;

		        	case 54:
		        	    $this->enterOuterAlt($localContext, 54);
		        	    $this->setState(5546);
		        	    $this->match(self::SESSION_VARIABLES_ADMIN);
		        	break;

		        	case 55:
		        	    $this->enterOuterAlt($localContext, 55);
		        	    $this->setState(5547);
		        	    $this->match(self::SET_USER_ID);
		        	break;

		        	case 56:
		        	    $this->enterOuterAlt($localContext, 56);
		        	    $this->setState(5548);
		        	    $this->match(self::SKIP_QUERY_REWRITE);
		        	break;

		        	case 57:
		        	    $this->enterOuterAlt($localContext, 57);
		        	    $this->setState(5549);
		        	    $this->match(self::SHOW_ROUTINE);
		        	break;

		        	case 58:
		        	    $this->enterOuterAlt($localContext, 58);
		        	    $this->setState(5550);
		        	    $this->match(self::SYSTEM_USER);
		        	break;

		        	case 59:
		        	    $this->enterOuterAlt($localContext, 59);
		        	    $this->setState(5551);
		        	    $this->match(self::SYSTEM_VARIABLES_ADMIN);
		        	break;

		        	case 60:
		        	    $this->enterOuterAlt($localContext, 60);
		        	    $this->setState(5552);
		        	    $this->match(self::TABLE_ENCRYPTION_ADMIN);
		        	break;

		        	case 61:
		        	    $this->enterOuterAlt($localContext, 61);
		        	    $this->setState(5553);
		        	    $this->match(self::TP_CONNECTION_ADMIN);
		        	break;

		        	case 62:
		        	    $this->enterOuterAlt($localContext, 62);
		        	    $this->setState(5554);
		        	    $this->match(self::VERSION_TOKEN_ADMIN);
		        	break;

		        	case 63:
		        	    $this->enterOuterAlt($localContext, 63);
		        	    $this->setState(5555);
		        	    $this->match(self::XA_RECOVER_ADMIN);
		        	break;

		        	case 64:
		        	    $this->enterOuterAlt($localContext, 64);
		        	    $this->setState(5556);
		        	    $this->match(self::LOAD);
		        	    $this->setState(5557);
		        	    $this->match(self::FROM);
		        	    $this->setState(5558);
		        	    $this->match(self::S3);
		        	break;

		        	case 65:
		        	    $this->enterOuterAlt($localContext, 65);
		        	    $this->setState(5559);
		        	    $this->match(self::SELECT);
		        	    $this->setState(5560);
		        	    $this->match(self::INTO);
		        	    $this->setState(5561);
		        	    $this->match(self::S3);
		        	break;

		        	case 66:
		        	    $this->enterOuterAlt($localContext, 66);
		        	    $this->setState(5562);
		        	    $this->match(self::INVOKE);
		        	    $this->setState(5563);
		        	    $this->match(self::LAMBDA);
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function privilegeLevel(): Context\PrivilegeLevelContext
		{
		    $localContext = new Context\PrivilegeLevelContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 466, self::RULE_privilegeLevel);

		    try {
		        $this->setState(5582);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 810, $this->ctx)) {
		        	case 1:
		        	    $localContext = new Context\CurrentSchemaPriviLevelContext($localContext);
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(5566);
		        	    $this->match(self::STAR);
		        	break;

		        	case 2:
		        	    $localContext = new Context\GlobalPrivLevelContext($localContext);
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(5567);
		        	    $this->match(self::STAR);
		        	    $this->setState(5568);
		        	    $this->match(self::DOT);
		        	    $this->setState(5569);
		        	    $this->match(self::STAR);
		        	break;

		        	case 3:
		        	    $localContext = new Context\DefiniteSchemaPrivLevelContext($localContext);
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(5570);
		        	    $this->uid();
		        	    $this->setState(5571);
		        	    $this->match(self::DOT);
		        	    $this->setState(5572);
		        	    $this->match(self::STAR);
		        	break;

		        	case 4:
		        	    $localContext = new Context\DefiniteFullTablePrivLevelContext($localContext);
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(5574);
		        	    $this->uid();
		        	    $this->setState(5575);
		        	    $this->match(self::DOT);
		        	    $this->setState(5576);
		        	    $this->uid();
		        	break;

		        	case 5:
		        	    $localContext = new Context\DefiniteFullTablePrivLevel2Context($localContext);
		        	    $this->enterOuterAlt($localContext, 5);
		        	    $this->setState(5578);
		        	    $this->uid();
		        	    $this->setState(5579);
		        	    $this->dottedId();
		        	break;

		        	case 6:
		        	    $localContext = new Context\DefiniteTablePrivLevelContext($localContext);
		        	    $this->enterOuterAlt($localContext, 6);
		        	    $this->setState(5581);
		        	    $this->uid();
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function renameUserClause(): Context\RenameUserClauseContext
		{
		    $localContext = new Context\RenameUserClauseContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 468, self::RULE_renameUserClause);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(5584);
		        $localContext->fromFirst = $this->userName();
		        $this->setState(5585);
		        $this->match(self::TO);
		        $this->setState(5586);
		        $localContext->toFirst = $this->userName();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function analyzeTable(): Context\AnalyzeTableContext
		{
		    $localContext = new Context\AnalyzeTableContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 470, self::RULE_analyzeTable);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(5588);
		        $this->match(self::ANALYZE);
		        $this->setState(5590);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::NO_WRITE_TO_BINLOG || $_la === self::LOCAL) {
		        	$this->setState(5589);

		        	$localContext->actionOption = $this->input->LT(1);
		        	$_la = $this->input->LA(1);

		        	if (!($_la === self::NO_WRITE_TO_BINLOG || $_la === self::LOCAL)) {
		        		    $localContext->actionOption = $this->errorHandler->recoverInline($this);
		        	} else {
		        		if ($this->input->LA(1) === Token::EOF) {
		        		    $this->matchedEOF = true;
		        	    }

		        		$this->errorHandler->reportMatch($this);
		        		$this->consume();
		        	}
		        }
		        $this->setState(5592);

		        $_la = $this->input->LA(1);

		        if (!($_la === self::TABLE || $_la === self::TABLES)) {
		        $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		        $this->setState(5593);
		        $this->tables();
		        $this->setState(5611);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 814, $this->ctx)) {
		            case 1:
		        	    $this->setState(5594);
		        	    $this->match(self::UPDATE);
		        	    $this->setState(5595);
		        	    $this->match(self::HISTOGRAM);
		        	    $this->setState(5596);
		        	    $this->match(self::ON);
		        	    $this->setState(5597);
		        	    $this->fullColumnName();
		        	    $this->setState(5602);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::COMMA) {
		        	    	$this->setState(5598);
		        	    	$this->match(self::COMMA);
		        	    	$this->setState(5599);
		        	    	$this->fullColumnName();
		        	    	$this->setState(5604);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	    $this->setState(5609);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 813, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(5605);
		        	    	    $this->match(self::WITH);
		        	    	    $this->setState(5606);
		        	    	    $this->decimalLiteral();
		        	    	    $this->setState(5607);
		        	    	    $this->match(self::BUCKETS);
		        	    	break;
		        	    }
		        	break;
		        }
		        $this->setState(5624);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 816, $this->ctx)) {
		            case 1:
		        	    $this->setState(5613);
		        	    $this->match(self::DROP);
		        	    $this->setState(5614);
		        	    $this->match(self::HISTOGRAM);
		        	    $this->setState(5615);
		        	    $this->match(self::ON);
		        	    $this->setState(5616);
		        	    $this->fullColumnName();
		        	    $this->setState(5621);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::COMMA) {
		        	    	$this->setState(5617);
		        	    	$this->match(self::COMMA);
		        	    	$this->setState(5618);
		        	    	$this->fullColumnName();
		        	    	$this->setState(5623);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function checkTable(): Context\CheckTableContext
		{
		    $localContext = new Context\CheckTableContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 472, self::RULE_checkTable);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(5626);
		        $this->match(self::CHECK);
		        $this->setState(5627);
		        $this->match(self::TABLE);
		        $this->setState(5628);
		        $this->tables();
		        $this->setState(5632);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::FOR || $_la === self::CHANGED || $_la === self::EXTENDED || $_la === self::FAST || $_la === self::MEDIUM || $_la === self::QUICK) {
		        	$this->setState(5629);
		        	$this->checkTableOption();
		        	$this->setState(5634);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function checksumTable(): Context\ChecksumTableContext
		{
		    $localContext = new Context\ChecksumTableContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 474, self::RULE_checksumTable);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(5635);
		        $this->match(self::CHECKSUM);
		        $this->setState(5636);
		        $this->match(self::TABLE);
		        $this->setState(5637);
		        $this->tables();
		        $this->setState(5639);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::EXTENDED || $_la === self::QUICK) {
		        	$this->setState(5638);

		        	$localContext->actionOption = $this->input->LT(1);
		        	$_la = $this->input->LA(1);

		        	if (!($_la === self::EXTENDED || $_la === self::QUICK)) {
		        		    $localContext->actionOption = $this->errorHandler->recoverInline($this);
		        	} else {
		        		if ($this->input->LA(1) === Token::EOF) {
		        		    $this->matchedEOF = true;
		        	    }

		        		$this->errorHandler->reportMatch($this);
		        		$this->consume();
		        	}
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function optimizeTable(): Context\OptimizeTableContext
		{
		    $localContext = new Context\OptimizeTableContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 476, self::RULE_optimizeTable);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(5641);
		        $this->match(self::OPTIMIZE);
		        $this->setState(5643);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::NO_WRITE_TO_BINLOG || $_la === self::LOCAL) {
		        	$this->setState(5642);

		        	$localContext->actionOption = $this->input->LT(1);
		        	$_la = $this->input->LA(1);

		        	if (!($_la === self::NO_WRITE_TO_BINLOG || $_la === self::LOCAL)) {
		        		    $localContext->actionOption = $this->errorHandler->recoverInline($this);
		        	} else {
		        		if ($this->input->LA(1) === Token::EOF) {
		        		    $this->matchedEOF = true;
		        	    }

		        		$this->errorHandler->reportMatch($this);
		        		$this->consume();
		        	}
		        }
		        $this->setState(5645);

		        $_la = $this->input->LA(1);

		        if (!($_la === self::TABLE || $_la === self::TABLES)) {
		        $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		        $this->setState(5646);
		        $this->tables();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function repairTable(): Context\RepairTableContext
		{
		    $localContext = new Context\RepairTableContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 478, self::RULE_repairTable);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(5648);
		        $this->match(self::REPAIR);
		        $this->setState(5650);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::NO_WRITE_TO_BINLOG || $_la === self::LOCAL) {
		        	$this->setState(5649);

		        	$localContext->actionOption = $this->input->LT(1);
		        	$_la = $this->input->LA(1);

		        	if (!($_la === self::NO_WRITE_TO_BINLOG || $_la === self::LOCAL)) {
		        		    $localContext->actionOption = $this->errorHandler->recoverInline($this);
		        	} else {
		        		if ($this->input->LA(1) === Token::EOF) {
		        		    $this->matchedEOF = true;
		        	    }

		        		$this->errorHandler->reportMatch($this);
		        		$this->consume();
		        	}
		        }
		        $this->setState(5652);
		        $this->match(self::TABLE);
		        $this->setState(5653);
		        $this->tables();
		        $this->setState(5655);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::QUICK) {
		        	$this->setState(5654);
		        	$this->match(self::QUICK);
		        }
		        $this->setState(5658);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::EXTENDED) {
		        	$this->setState(5657);
		        	$this->match(self::EXTENDED);
		        }
		        $this->setState(5661);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::USE_FRM) {
		        	$this->setState(5660);
		        	$this->match(self::USE_FRM);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function checkTableOption(): Context\CheckTableOptionContext
		{
		    $localContext = new Context\CheckTableOptionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 480, self::RULE_checkTableOption);

		    try {
		        $this->setState(5670);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::FOR:
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(5663);
		            	$this->match(self::FOR);
		            	$this->setState(5664);
		            	$this->match(self::UPGRADE);
		            	break;

		            case self::QUICK:
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(5665);
		            	$this->match(self::QUICK);
		            	break;

		            case self::FAST:
		            	$this->enterOuterAlt($localContext, 3);
		            	$this->setState(5666);
		            	$this->match(self::FAST);
		            	break;

		            case self::MEDIUM:
		            	$this->enterOuterAlt($localContext, 4);
		            	$this->setState(5667);
		            	$this->match(self::MEDIUM);
		            	break;

		            case self::EXTENDED:
		            	$this->enterOuterAlt($localContext, 5);
		            	$this->setState(5668);
		            	$this->match(self::EXTENDED);
		            	break;

		            case self::CHANGED:
		            	$this->enterOuterAlt($localContext, 6);
		            	$this->setState(5669);
		            	$this->match(self::CHANGED);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function createUdfunction(): Context\CreateUdfunctionContext
		{
		    $localContext = new Context\CreateUdfunctionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 482, self::RULE_createUdfunction);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(5672);
		        $this->match(self::CREATE);
		        $this->setState(5674);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::AGGREGATE) {
		        	$this->setState(5673);
		        	$this->match(self::AGGREGATE);
		        }
		        $this->setState(5676);
		        $this->match(self::FUNCTION);
		        $this->setState(5678);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 826, $this->ctx)) {
		            case 1:
		        	    $this->setState(5677);
		        	    $this->ifNotExists();
		        	break;
		        }
		        $this->setState(5680);
		        $this->uid();
		        $this->setState(5681);
		        $this->match(self::RETURNS);
		        $this->setState(5682);

		        $localContext->returnType = $this->input->LT(1);
		        $_la = $this->input->LA(1);

		        if (!((((($_la - 206)) & ~0x3f) === 0 && ((1 << ($_la - 206)) & 261) !== 0) || $_la === self::STRING)) {
		        	    $localContext->returnType = $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		        $this->setState(5683);
		        $this->match(self::SONAME);
		        $this->setState(5684);
		        $this->match(self::STRING_LITERAL);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function installPlugin(): Context\InstallPluginContext
		{
		    $localContext = new Context\InstallPluginContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 484, self::RULE_installPlugin);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(5686);
		        $this->match(self::INSTALL);
		        $this->setState(5687);
		        $this->match(self::PLUGIN);
		        $this->setState(5688);
		        $this->uid();
		        $this->setState(5689);
		        $this->match(self::SONAME);
		        $this->setState(5690);
		        $this->match(self::STRING_LITERAL);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function uninstallPlugin(): Context\UninstallPluginContext
		{
		    $localContext = new Context\UninstallPluginContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 486, self::RULE_uninstallPlugin);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(5692);
		        $this->match(self::UNINSTALL);
		        $this->setState(5693);
		        $this->match(self::PLUGIN);
		        $this->setState(5694);
		        $this->uid();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function setStatement(): Context\SetStatementContext
		{
		    $localContext = new Context\SetStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 488, self::RULE_setStatement);

		    try {
		        $this->setState(5748);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 834, $this->ctx)) {
		        	case 1:
		        	    $localContext = new Context\SetVariableContext($localContext);
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(5696);
		        	    $this->match(self::SET);
		        	    $this->setState(5697);
		        	    $this->variableClause();
		        	    $this->setState(5698);

		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::VAR_ASSIGN || $_la === self::EQUAL_SYMBOL)) {
		        	    $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	    $this->setState(5701);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 827, $this->ctx)) {
		        	    	case 1:
		        	    	    $this->setState(5699);
		        	    	    $this->recursiveExpression(0);
		        	    	break;

		        	    	case 2:
		        	    	    $this->setState(5700);
		        	    	    $this->match(self::ON);
		        	    	break;
		        	    }
		        	    $this->setState(5712);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::COMMA) {
		        	    	$this->setState(5703);
		        	    	$this->match(self::COMMA);
		        	    	$this->setState(5704);
		        	    	$this->variableClause();
		        	    	$this->setState(5705);

		        	    	$_la = $this->input->LA(1);

		        	    	if (!($_la === self::VAR_ASSIGN || $_la === self::EQUAL_SYMBOL)) {
		        	    	$this->errorHandler->recoverInline($this);
		        	    	} else {
		        	    		if ($this->input->LA(1) === Token::EOF) {
		        	    		    $this->matchedEOF = true;
		        	    	    }

		        	    		$this->errorHandler->reportMatch($this);
		        	    		$this->consume();
		        	    	}
		        	    	$this->setState(5708);
		        	    	$this->errorHandler->sync($this);

		        	    	switch ($this->getInterpreter()->adaptivePredict($this->input, 828, $this->ctx)) {
		        	    		case 1:
		        	    		    $this->setState(5706);
		        	    		    $this->recursiveExpression(0);
		        	    		break;

		        	    		case 2:
		        	    		    $this->setState(5707);
		        	    		    $this->match(self::ON);
		        	    		break;
		        	    	}
		        	    	$this->setState(5714);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	break;

		        	case 2:
		        	    $localContext = new Context\SetCharsetContext($localContext);
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(5715);
		        	    $this->match(self::SET);
		        	    $this->setState(5716);
		        	    $this->charSet();
		        	    $this->setState(5719);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->input->LA(1)) {
		        	        case self::BINARY:
		        	        case self::ARMSCII8:
		        	        case self::ASCII:
		        	        case self::BIG5:
		        	        case self::CP1250:
		        	        case self::CP1251:
		        	        case self::CP1256:
		        	        case self::CP1257:
		        	        case self::CP850:
		        	        case self::CP852:
		        	        case self::CP866:
		        	        case self::CP932:
		        	        case self::DEC8:
		        	        case self::EUCJPMS:
		        	        case self::EUCKR:
		        	        case self::GB18030:
		        	        case self::GB2312:
		        	        case self::GBK:
		        	        case self::GEOSTD8:
		        	        case self::GREEK:
		        	        case self::HEBREW:
		        	        case self::HP8:
		        	        case self::KEYBCS2:
		        	        case self::KOI8R:
		        	        case self::KOI8U:
		        	        case self::LATIN1:
		        	        case self::LATIN2:
		        	        case self::LATIN5:
		        	        case self::LATIN7:
		        	        case self::MACCE:
		        	        case self::MACROMAN:
		        	        case self::SJIS:
		        	        case self::SWE7:
		        	        case self::TIS620:
		        	        case self::UCS2:
		        	        case self::UJIS:
		        	        case self::UTF16:
		        	        case self::UTF16LE:
		        	        case self::UTF32:
		        	        case self::UTF8:
		        	        case self::UTF8MB3:
		        	        case self::UTF8MB4:
		        	        case self::CHARSET_REVERSE_QOUTE_STRING:
		        	        case self::STRING_LITERAL:
		        	        	$this->setState(5717);
		        	        	$this->charsetName();
		        	        	break;

		        	        case self::DEFAULT:
		        	        	$this->setState(5718);
		        	        	$this->match(self::DEFAULT);
		        	        	break;

		        	    default:
		        	    	throw new NoViableAltException($this);
		        	    }
		        	break;

		        	case 3:
		        	    $localContext = new Context\SetNamesContext($localContext);
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(5721);
		        	    $this->match(self::SET);
		        	    $this->setState(5722);
		        	    $this->match(self::NAMES);
		        	    $this->setState(5729);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->input->LA(1)) {
		        	        case self::BINARY:
		        	        case self::ARMSCII8:
		        	        case self::ASCII:
		        	        case self::BIG5:
		        	        case self::CP1250:
		        	        case self::CP1251:
		        	        case self::CP1256:
		        	        case self::CP1257:
		        	        case self::CP850:
		        	        case self::CP852:
		        	        case self::CP866:
		        	        case self::CP932:
		        	        case self::DEC8:
		        	        case self::EUCJPMS:
		        	        case self::EUCKR:
		        	        case self::GB18030:
		        	        case self::GB2312:
		        	        case self::GBK:
		        	        case self::GEOSTD8:
		        	        case self::GREEK:
		        	        case self::HEBREW:
		        	        case self::HP8:
		        	        case self::KEYBCS2:
		        	        case self::KOI8R:
		        	        case self::KOI8U:
		        	        case self::LATIN1:
		        	        case self::LATIN2:
		        	        case self::LATIN5:
		        	        case self::LATIN7:
		        	        case self::MACCE:
		        	        case self::MACROMAN:
		        	        case self::SJIS:
		        	        case self::SWE7:
		        	        case self::TIS620:
		        	        case self::UCS2:
		        	        case self::UJIS:
		        	        case self::UTF16:
		        	        case self::UTF16LE:
		        	        case self::UTF32:
		        	        case self::UTF8:
		        	        case self::UTF8MB3:
		        	        case self::UTF8MB4:
		        	        case self::CHARSET_REVERSE_QOUTE_STRING:
		        	        case self::STRING_LITERAL:
		        	        	$this->setState(5723);
		        	        	$this->charsetName();
		        	        	$this->setState(5726);
		        	        	$this->errorHandler->sync($this);
		        	        	$_la = $this->input->LA(1);

		        	        	if ($_la === self::COLLATE) {
		        	        		$this->setState(5724);
		        	        		$this->match(self::COLLATE);
		        	        		$this->setState(5725);
		        	        		$this->collationName();
		        	        	}
		        	        	break;

		        	        case self::DEFAULT:
		        	        	$this->setState(5728);
		        	        	$this->match(self::DEFAULT);
		        	        	break;

		        	    default:
		        	    	throw new NoViableAltException($this);
		        	    }
		        	break;

		        	case 4:
		        	    $localContext = new Context\SetPasswordContext($localContext);
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(5731);
		        	    $this->setPasswordStatement();
		        	break;

		        	case 5:
		        	    $localContext = new Context\SetTransactionContext($localContext);
		        	    $this->enterOuterAlt($localContext, 5);
		        	    $this->setState(5732);
		        	    $this->setTransactionStatement();
		        	break;

		        	case 6:
		        	    $localContext = new Context\SetAutocommitContext($localContext);
		        	    $this->enterOuterAlt($localContext, 6);
		        	    $this->setState(5733);
		        	    $this->setAutocommitStatement();
		        	break;

		        	case 7:
		        	    $localContext = new Context\SetNewValueInsideTriggerContext($localContext);
		        	    $this->enterOuterAlt($localContext, 7);
		        	    $this->setState(5734);
		        	    $this->match(self::SET);
		        	    $this->setState(5735);
		        	    $this->fullId();
		        	    $this->setState(5736);

		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::VAR_ASSIGN || $_la === self::EQUAL_SYMBOL)) {
		        	    $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	    $this->setState(5737);
		        	    $this->recursiveExpression(0);
		        	    $this->setState(5745);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::COMMA) {
		        	    	$this->setState(5738);
		        	    	$this->match(self::COMMA);
		        	    	$this->setState(5739);
		        	    	$this->fullId();
		        	    	$this->setState(5740);

		        	    	$_la = $this->input->LA(1);

		        	    	if (!($_la === self::VAR_ASSIGN || $_la === self::EQUAL_SYMBOL)) {
		        	    	$this->errorHandler->recoverInline($this);
		        	    	} else {
		        	    		if ($this->input->LA(1) === Token::EOF) {
		        	    		    $this->matchedEOF = true;
		        	    	    }

		        	    		$this->errorHandler->reportMatch($this);
		        	    		$this->consume();
		        	    	}
		        	    	$this->setState(5741);
		        	    	$this->recursiveExpression(0);
		        	    	$this->setState(5747);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function showStatement(): Context\ShowStatementContext
		{
		    $localContext = new Context\ShowStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 490, self::RULE_showStatement);

		    try {
		        $this->setState(5903);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 857, $this->ctx)) {
		        	case 1:
		        	    $localContext = new Context\ShowMasterLogsContext($localContext);
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(5750);
		        	    $this->match(self::SHOW);
		        	    $this->setState(5751);

		        	    $localContext->logFormat = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::BINARY || $_la === self::MASTER)) {
		        	    	    $localContext->logFormat = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	    $this->setState(5752);
		        	    $this->match(self::LOGS);
		        	break;

		        	case 2:
		        	    $localContext = new Context\ShowLogEventsContext($localContext);
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(5753);
		        	    $this->match(self::SHOW);
		        	    $this->setState(5754);

		        	    $localContext->logFormat = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::BINLOG || $_la === self::RELAYLOG)) {
		        	    	    $localContext->logFormat = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	    $this->setState(5755);
		        	    $this->match(self::EVENTS);
		        	    $this->setState(5758);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::IN) {
		        	    	$this->setState(5756);
		        	    	$this->match(self::IN);
		        	    	$this->setState(5757);
		        	    	$localContext->filename = $this->match(self::STRING_LITERAL);
		        	    }
		        	    $this->setState(5762);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::FROM) {
		        	    	$this->setState(5760);
		        	    	$this->match(self::FROM);
		        	    	$this->setState(5761);
		        	    	$localContext->fromPosition = $this->decimalLiteral();
		        	    }
		        	    $this->setState(5771);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::LIMIT) {
		        	    	$this->setState(5764);
		        	    	$this->match(self::LIMIT);
		        	    	$this->setState(5768);
		        	    	$this->errorHandler->sync($this);

		        	    	switch ($this->getInterpreter()->adaptivePredict($this->input, 837, $this->ctx)) {
		        	    	    case 1:
		        	    		    $this->setState(5765);
		        	    		    $localContext->offset = $this->decimalLiteral();
		        	    		    $this->setState(5766);
		        	    		    $this->match(self::COMMA);
		        	    		break;
		        	    	}
		        	    	$this->setState(5770);
		        	    	$localContext->rowCount = $this->decimalLiteral();
		        	    }
		        	break;

		        	case 3:
		        	    $localContext = new Context\ShowObjectFilterContext($localContext);
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(5773);
		        	    $this->match(self::SHOW);
		        	    $this->setState(5774);
		        	    $this->showCommonEntity();
		        	    $this->setState(5776);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::LIKE || $_la === self::WHERE) {
		        	    	$this->setState(5775);
		        	    	$this->showFilter();
		        	    }
		        	break;

		        	case 4:
		        	    $localContext = new Context\ShowColumnsContext($localContext);
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(5778);
		        	    $this->match(self::SHOW);
		        	    $this->setState(5780);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::FULL) {
		        	    	$this->setState(5779);
		        	    	$this->match(self::FULL);
		        	    }
		        	    $this->setState(5782);

		        	    $localContext->columnsFormat = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::COLUMNS || $_la === self::FIELDS)) {
		        	    	    $localContext->columnsFormat = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	    $this->setState(5783);

		        	    $localContext->tableFormat = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::FROM || $_la === self::IN)) {
		        	    	    $localContext->tableFormat = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	    $this->setState(5784);
		        	    $this->tableName();
		        	    $this->setState(5787);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::FROM || $_la === self::IN) {
		        	    	$this->setState(5785);

		        	    	$localContext->schemaFormat = $this->input->LT(1);
		        	    	$_la = $this->input->LA(1);

		        	    	if (!($_la === self::FROM || $_la === self::IN)) {
		        	    		    $localContext->schemaFormat = $this->errorHandler->recoverInline($this);
		        	    	} else {
		        	    		if ($this->input->LA(1) === Token::EOF) {
		        	    		    $this->matchedEOF = true;
		        	    	    }

		        	    		$this->errorHandler->reportMatch($this);
		        	    		$this->consume();
		        	    	}
		        	    	$this->setState(5786);
		        	    	$this->uid();
		        	    }
		        	    $this->setState(5790);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::LIKE || $_la === self::WHERE) {
		        	    	$this->setState(5789);
		        	    	$this->showFilter();
		        	    }
		        	break;

		        	case 5:
		        	    $localContext = new Context\ShowCreateDbContext($localContext);
		        	    $this->enterOuterAlt($localContext, 5);
		        	    $this->setState(5792);
		        	    $this->match(self::SHOW);
		        	    $this->setState(5793);
		        	    $this->match(self::CREATE);
		        	    $this->setState(5794);

		        	    $localContext->schemaFormat = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::DATABASE || $_la === self::SCHEMA)) {
		        	    	    $localContext->schemaFormat = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	    $this->setState(5796);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 843, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(5795);
		        	    	    $this->ifNotExists();
		        	    	break;
		        	    }
		        	    $this->setState(5798);
		        	    $this->uid();
		        	break;

		        	case 6:
		        	    $localContext = new Context\ShowCreateFullIdObjectContext($localContext);
		        	    $this->enterOuterAlt($localContext, 6);
		        	    $this->setState(5799);
		        	    $this->match(self::SHOW);
		        	    $this->setState(5800);
		        	    $this->match(self::CREATE);
		        	    $this->setState(5801);

		        	    $localContext->namedEntity = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!((((($_la - 131)) & ~0x3f) === 0 && ((1 << ($_la - 131)) & 72567767433217) !== 0) || $_la === self::EVENT || $_la === self::FUNCTION || $_la === self::VIEW)) {
		        	    	    $localContext->namedEntity = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	    $this->setState(5802);
		        	    $this->fullId();
		        	break;

		        	case 7:
		        	    $localContext = new Context\ShowCreateUserContext($localContext);
		        	    $this->enterOuterAlt($localContext, 7);
		        	    $this->setState(5803);
		        	    $this->match(self::SHOW);
		        	    $this->setState(5804);
		        	    $this->match(self::CREATE);
		        	    $this->setState(5805);
		        	    $this->match(self::USER);
		        	    $this->setState(5806);
		        	    $this->userName();
		        	break;

		        	case 8:
		        	    $localContext = new Context\ShowEngineContext($localContext);
		        	    $this->enterOuterAlt($localContext, 8);
		        	    $this->setState(5807);
		        	    $this->match(self::SHOW);
		        	    $this->setState(5808);
		        	    $this->match(self::ENGINE);
		        	    $this->setState(5809);
		        	    $this->engineName();
		        	    $this->setState(5810);

		        	    $localContext->engineOption = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::MUTEX || $_la === self::STATUS)) {
		        	    	    $localContext->engineOption = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	break;

		        	case 9:
		        	    $localContext = new Context\ShowGlobalInfoContext($localContext);
		        	    $this->enterOuterAlt($localContext, 9);
		        	    $this->setState(5812);
		        	    $this->match(self::SHOW);
		        	    $this->setState(5813);
		        	    $this->showGlobalInfoClause();
		        	break;

		        	case 10:
		        	    $localContext = new Context\ShowErrorsContext($localContext);
		        	    $this->enterOuterAlt($localContext, 10);
		        	    $this->setState(5814);
		        	    $this->match(self::SHOW);
		        	    $this->setState(5815);

		        	    $localContext->errorFormat = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::ERRORS || $_la === self::WARNINGS)) {
		        	    	    $localContext->errorFormat = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	    $this->setState(5823);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::LIMIT) {
		        	    	$this->setState(5816);
		        	    	$this->match(self::LIMIT);
		        	    	$this->setState(5820);
		        	    	$this->errorHandler->sync($this);

		        	    	switch ($this->getInterpreter()->adaptivePredict($this->input, 844, $this->ctx)) {
		        	    	    case 1:
		        	    		    $this->setState(5817);
		        	    		    $localContext->offset = $this->decimalLiteral();
		        	    		    $this->setState(5818);
		        	    		    $this->match(self::COMMA);
		        	    		break;
		        	    	}
		        	    	$this->setState(5822);
		        	    	$localContext->rowCount = $this->decimalLiteral();
		        	    }
		        	break;

		        	case 11:
		        	    $localContext = new Context\ShowCountErrorsContext($localContext);
		        	    $this->enterOuterAlt($localContext, 11);
		        	    $this->setState(5825);
		        	    $this->match(self::SHOW);
		        	    $this->setState(5826);
		        	    $this->match(self::COUNT);
		        	    $this->setState(5827);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(5828);
		        	    $this->match(self::STAR);
		        	    $this->setState(5829);
		        	    $this->match(self::RR_BRACKET);
		        	    $this->setState(5830);

		        	    $localContext->errorFormat = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::ERRORS || $_la === self::WARNINGS)) {
		        	    	    $localContext->errorFormat = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	break;

		        	case 12:
		        	    $localContext = new Context\ShowSchemaFilterContext($localContext);
		        	    $this->enterOuterAlt($localContext, 12);
		        	    $this->setState(5831);
		        	    $this->match(self::SHOW);
		        	    $this->setState(5832);
		        	    $this->showSchemaEntity();
		        	    $this->setState(5835);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::FROM || $_la === self::IN) {
		        	    	$this->setState(5833);

		        	    	$localContext->schemaFormat = $this->input->LT(1);
		        	    	$_la = $this->input->LA(1);

		        	    	if (!($_la === self::FROM || $_la === self::IN)) {
		        	    		    $localContext->schemaFormat = $this->errorHandler->recoverInline($this);
		        	    	} else {
		        	    		if ($this->input->LA(1) === Token::EOF) {
		        	    		    $this->matchedEOF = true;
		        	    	    }

		        	    		$this->errorHandler->reportMatch($this);
		        	    		$this->consume();
		        	    	}
		        	    	$this->setState(5834);
		        	    	$this->uid();
		        	    }
		        	    $this->setState(5838);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::LIKE || $_la === self::WHERE) {
		        	    	$this->setState(5837);
		        	    	$this->showFilter();
		        	    }
		        	break;

		        	case 13:
		        	    $localContext = new Context\ShowRoutineContext($localContext);
		        	    $this->enterOuterAlt($localContext, 13);
		        	    $this->setState(5840);
		        	    $this->match(self::SHOW);
		        	    $this->setState(5841);

		        	    $localContext->routine = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::PROCEDURE || $_la === self::FUNCTION)) {
		        	    	    $localContext->routine = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	    $this->setState(5842);
		        	    $this->match(self::CODE);
		        	    $this->setState(5843);
		        	    $this->fullId();
		        	break;

		        	case 14:
		        	    $localContext = new Context\ShowGrantsContext($localContext);
		        	    $this->enterOuterAlt($localContext, 14);
		        	    $this->setState(5844);
		        	    $this->match(self::SHOW);
		        	    $this->setState(5845);
		        	    $this->match(self::GRANTS);
		        	    $this->setState(5848);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::FOR) {
		        	    	$this->setState(5846);
		        	    	$this->match(self::FOR);
		        	    	$this->setState(5847);
		        	    	$this->userName();
		        	    }
		        	break;

		        	case 15:
		        	    $localContext = new Context\ShowIndexesContext($localContext);
		        	    $this->enterOuterAlt($localContext, 15);
		        	    $this->setState(5850);
		        	    $this->match(self::SHOW);
		        	    $this->setState(5851);

		        	    $localContext->indexFormat = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::INDEX || $_la === self::KEYS || $_la === self::INDEXES)) {
		        	    	    $localContext->indexFormat = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	    $this->setState(5852);

		        	    $localContext->tableFormat = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::FROM || $_la === self::IN)) {
		        	    	    $localContext->tableFormat = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	    $this->setState(5853);
		        	    $this->tableName();
		        	    $this->setState(5856);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::FROM || $_la === self::IN) {
		        	    	$this->setState(5854);

		        	    	$localContext->schemaFormat = $this->input->LT(1);
		        	    	$_la = $this->input->LA(1);

		        	    	if (!($_la === self::FROM || $_la === self::IN)) {
		        	    		    $localContext->schemaFormat = $this->errorHandler->recoverInline($this);
		        	    	} else {
		        	    		if ($this->input->LA(1) === Token::EOF) {
		        	    		    $this->matchedEOF = true;
		        	    	    }

		        	    		$this->errorHandler->reportMatch($this);
		        	    		$this->consume();
		        	    	}
		        	    	$this->setState(5855);
		        	    	$this->uid();
		        	    }
		        	    $this->setState(5860);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::WHERE) {
		        	    	$this->setState(5858);
		        	    	$this->match(self::WHERE);
		        	    	$this->setState(5859);
		        	    	$this->recursiveExpression(0);
		        	    }
		        	break;

		        	case 16:
		        	    $localContext = new Context\ShowOpenTablesContext($localContext);
		        	    $this->enterOuterAlt($localContext, 16);
		        	    $this->setState(5862);
		        	    $this->match(self::SHOW);
		        	    $this->setState(5863);
		        	    $this->match(self::OPEN);
		        	    $this->setState(5864);
		        	    $this->match(self::TABLES);
		        	    $this->setState(5867);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::FROM || $_la === self::IN) {
		        	    	$this->setState(5865);

		        	    	$localContext->schemaFormat = $this->input->LT(1);
		        	    	$_la = $this->input->LA(1);

		        	    	if (!($_la === self::FROM || $_la === self::IN)) {
		        	    		    $localContext->schemaFormat = $this->errorHandler->recoverInline($this);
		        	    	} else {
		        	    		if ($this->input->LA(1) === Token::EOF) {
		        	    		    $this->matchedEOF = true;
		        	    	    }

		        	    		$this->errorHandler->reportMatch($this);
		        	    		$this->consume();
		        	    	}
		        	    	$this->setState(5866);
		        	    	$this->uid();
		        	    }
		        	    $this->setState(5870);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::LIKE || $_la === self::WHERE) {
		        	    	$this->setState(5869);
		        	    	$this->showFilter();
		        	    }
		        	break;

		        	case 17:
		        	    $localContext = new Context\ShowProfileContext($localContext);
		        	    $this->enterOuterAlt($localContext, 17);
		        	    $this->setState(5872);
		        	    $this->match(self::SHOW);
		        	    $this->setState(5873);
		        	    $this->match(self::PROFILE);
		        	    $this->setState(5874);
		        	    $this->showProfileType();
		        	    $this->setState(5879);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::COMMA) {
		        	    	$this->setState(5875);
		        	    	$this->match(self::COMMA);
		        	    	$this->setState(5876);
		        	    	$this->showProfileType();
		        	    	$this->setState(5881);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	    $this->setState(5885);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::FOR) {
		        	    	$this->setState(5882);
		        	    	$this->match(self::FOR);
		        	    	$this->setState(5883);
		        	    	$this->match(self::QUERY);
		        	    	$this->setState(5884);
		        	    	$localContext->queryCount = $this->decimalLiteral();
		        	    }

		        	    $this->setState(5887);
		        	    $this->match(self::LIMIT);
		        	    $this->setState(5891);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 855, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(5888);
		        	    	    $localContext->offset = $this->decimalLiteral();
		        	    	    $this->setState(5889);
		        	    	    $this->match(self::COMMA);
		        	    	break;
		        	    }
		        	    $this->setState(5893);
		        	    $localContext->rowCount = $this->decimalLiteral();
		        	break;

		        	case 18:
		        	    $localContext = new Context\ShowSlaveStatusContext($localContext);
		        	    $this->enterOuterAlt($localContext, 18);
		        	    $this->setState(5895);
		        	    $this->match(self::SHOW);
		        	    $this->setState(5896);
		        	    $this->match(self::SLAVE);
		        	    $this->setState(5897);
		        	    $this->match(self::STATUS);
		        	    $this->setState(5901);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::FOR) {
		        	    	$this->setState(5898);
		        	    	$this->match(self::FOR);
		        	    	$this->setState(5899);
		        	    	$this->match(self::CHANNEL);
		        	    	$this->setState(5900);
		        	    	$this->match(self::STRING_LITERAL);
		        	    }
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function variableClause(): Context\VariableClauseContext
		{
		    $localContext = new Context\VariableClauseContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 492, self::RULE_variableClause);

		    try {
		        $this->setState(5915);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::LOCAL_ID:
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(5905);
		            	$this->match(self::LOCAL_ID);
		            	break;

		            case self::GLOBAL_ID:
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(5906);
		            	$this->match(self::GLOBAL_ID);
		            	break;

		            case self::ARRAY:
		            case self::ATTRIBUTE:
		            case self::BUCKETS:
		            case self::CONDITION:
		            case self::CURRENT:
		            case self::CURRENT_USER:
		            case self::DATABASE:
		            case self::DEFAULT:
		            case self::DIAGNOSTICS:
		            case self::EMPTY:
		            case self::ENFORCED:
		            case self::EXCEPT:
		            case self::GROUP:
		            case self::IF:
		            case self::IGNORED:
		            case self::INSERT:
		            case self::LATERAL:
		            case self::LEFT:
		            case self::NUMBER:
		            case self::OPTIONAL:
		            case self::ORDER:
		            case self::PRIMARY:
		            case self::REPEAT:
		            case self::REPLACE:
		            case self::RIGHT:
		            case self::SCHEMA:
		            case self::SKIP_QUERY_REWRITE:
		            case self::STACKED:
		            case self::DATE:
		            case self::TIME:
		            case self::TIMESTAMP:
		            case self::DATETIME:
		            case self::YEAR:
		            case self::BINARY:
		            case self::TEXT:
		            case self::ENUM:
		            case self::SERIAL:
		            case self::JSON_ARRAY:
		            case self::JSON_ARRAYAGG:
		            case self::JSON_ARRAY_APPEND:
		            case self::JSON_ARRAY_INSERT:
		            case self::JSON_CONTAINS:
		            case self::JSON_CONTAINS_PATH:
		            case self::JSON_DEPTH:
		            case self::JSON_EXTRACT:
		            case self::JSON_INSERT:
		            case self::JSON_KEYS:
		            case self::JSON_LENGTH:
		            case self::JSON_MERGE:
		            case self::JSON_MERGE_PATCH:
		            case self::JSON_MERGE_PRESERVE:
		            case self::JSON_OBJECT:
		            case self::JSON_OBJECTAGG:
		            case self::JSON_OVERLAPS:
		            case self::JSON_PRETTY:
		            case self::JSON_QUOTE:
		            case self::JSON_REMOVE:
		            case self::JSON_REPLACE:
		            case self::JSON_SCHEMA_VALID:
		            case self::JSON_SCHEMA_VALIDATION_REPORT:
		            case self::JSON_SEARCH:
		            case self::JSON_SET:
		            case self::JSON_STORAGE_FREE:
		            case self::JSON_STORAGE_SIZE:
		            case self::JSON_TABLE:
		            case self::JSON_TYPE:
		            case self::JSON_UNQUOTE:
		            case self::JSON_VALID:
		            case self::JSON_VALUE:
		            case self::NESTED:
		            case self::ORDINALITY:
		            case self::PATH:
		            case self::AVG:
		            case self::BIT_AND:
		            case self::BIT_OR:
		            case self::BIT_XOR:
		            case self::COUNT:
		            case self::CUME_DIST:
		            case self::DENSE_RANK:
		            case self::FIRST_VALUE:
		            case self::GROUP_CONCAT:
		            case self::LAG:
		            case self::LAST_VALUE:
		            case self::LEAD:
		            case self::MAX:
		            case self::MIN:
		            case self::NTILE:
		            case self::NTH_VALUE:
		            case self::PERCENT_RANK:
		            case self::RANK:
		            case self::ROW_NUMBER:
		            case self::STD:
		            case self::STDDEV:
		            case self::STDDEV_POP:
		            case self::STDDEV_SAMP:
		            case self::SUM:
		            case self::VAR_POP:
		            case self::VAR_SAMP:
		            case self::VARIANCE:
		            case self::CURRENT_DATE:
		            case self::CURRENT_TIME:
		            case self::CURRENT_TIMESTAMP:
		            case self::LOCALTIME:
		            case self::CURDATE:
		            case self::CURTIME:
		            case self::DATE_ADD:
		            case self::DATE_SUB:
		            case self::LOCALTIMESTAMP:
		            case self::NOW:
		            case self::POSITION:
		            case self::SUBSTR:
		            case self::SUBSTRING:
		            case self::SYSDATE:
		            case self::TRIM:
		            case self::UTC_DATE:
		            case self::UTC_TIME:
		            case self::UTC_TIMESTAMP:
		            case self::ACCOUNT:
		            case self::ACTION:
		            case self::AFTER:
		            case self::AGGREGATE:
		            case self::ALGORITHM:
		            case self::ANY:
		            case self::AT:
		            case self::AUTHORS:
		            case self::AUTOCOMMIT:
		            case self::AUTOEXTEND_SIZE:
		            case self::AUTO_INCREMENT:
		            case self::AVG_ROW_LENGTH:
		            case self::BEGIN:
		            case self::BINLOG:
		            case self::BIT:
		            case self::BLOCK:
		            case self::BOOL:
		            case self::BOOLEAN:
		            case self::BTREE:
		            case self::CACHE:
		            case self::CASCADED:
		            case self::CHAIN:
		            case self::CHANGED:
		            case self::CHANNEL:
		            case self::CHECKSUM:
		            case self::PAGE_CHECKSUM:
		            case self::CIPHER:
		            case self::CLASS_ORIGIN:
		            case self::CLIENT:
		            case self::CLOSE:
		            case self::CLUSTERING:
		            case self::COALESCE:
		            case self::CODE:
		            case self::COLUMNS:
		            case self::COLUMN_FORMAT:
		            case self::COLUMN_NAME:
		            case self::COMMENT:
		            case self::COMMIT:
		            case self::COMPACT:
		            case self::COMPLETION:
		            case self::COMPRESSED:
		            case self::COMPRESSION:
		            case self::CONCURRENT:
		            case self::CONNECT:
		            case self::CONNECTION:
		            case self::CONSISTENT:
		            case self::CONSTRAINT_CATALOG:
		            case self::CONSTRAINT_SCHEMA:
		            case self::CONSTRAINT_NAME:
		            case self::CONTAINS:
		            case self::CONTEXT:
		            case self::CONTRIBUTORS:
		            case self::COPY:
		            case self::CPU:
		            case self::CURSOR_NAME:
		            case self::DATA:
		            case self::DATAFILE:
		            case self::DEALLOCATE:
		            case self::DEFAULT_AUTH:
		            case self::DEFINER:
		            case self::DELAY_KEY_WRITE:
		            case self::DES_KEY_FILE:
		            case self::DIRECTORY:
		            case self::DISABLE:
		            case self::DISCARD:
		            case self::DISK:
		            case self::DO:
		            case self::DUMPFILE:
		            case self::DUPLICATE:
		            case self::DYNAMIC:
		            case self::ENABLE:
		            case self::ENCRYPTION:
		            case self::END:
		            case self::ENDS:
		            case self::ENGINE:
		            case self::ENGINES:
		            case self::ERROR:
		            case self::ERRORS:
		            case self::ESCAPE:
		            case self::EVEN:
		            case self::EVENT:
		            case self::EVENTS:
		            case self::EVERY:
		            case self::EXCHANGE:
		            case self::EXCLUSIVE:
		            case self::EXPIRE:
		            case self::EXPORT:
		            case self::EXTENDED:
		            case self::EXTENT_SIZE:
		            case self::FAILED_LOGIN_ATTEMPTS:
		            case self::FAST:
		            case self::FAULTS:
		            case self::FIELDS:
		            case self::FILE_BLOCK_SIZE:
		            case self::FILTER:
		            case self::FIRST:
		            case self::FIXED:
		            case self::FLUSH:
		            case self::FOLLOWS:
		            case self::FOUND:
		            case self::FULL:
		            case self::FUNCTION:
		            case self::GENERAL:
		            case self::GLOBAL:
		            case self::GRANTS:
		            case self::GROUP_REPLICATION:
		            case self::HANDLER:
		            case self::HASH:
		            case self::HELP:
		            case self::HISTORY:
		            case self::HOST:
		            case self::HOSTS:
		            case self::IDENTIFIED:
		            case self::IGNORE_SERVER_IDS:
		            case self::IMPORT:
		            case self::INDEXES:
		            case self::INITIAL_SIZE:
		            case self::INPLACE:
		            case self::INSERT_METHOD:
		            case self::INSTALL:
		            case self::INSTANCE:
		            case self::INSTANT:
		            case self::INVISIBLE:
		            case self::INVOKER:
		            case self::IO:
		            case self::IO_THREAD:
		            case self::IPC:
		            case self::ISOLATION:
		            case self::ISSUER:
		            case self::JSON:
		            case self::KEY_BLOCK_SIZE:
		            case self::LANGUAGE:
		            case self::LAST:
		            case self::LEAVES:
		            case self::LESS:
		            case self::LEVEL:
		            case self::LIST:
		            case self::LOCAL:
		            case self::LOGFILE:
		            case self::LOGS:
		            case self::MASTER:
		            case self::MASTER_AUTO_POSITION:
		            case self::MASTER_CONNECT_RETRY:
		            case self::MASTER_DELAY:
		            case self::MASTER_HEARTBEAT_PERIOD:
		            case self::MASTER_HOST:
		            case self::MASTER_LOG_FILE:
		            case self::MASTER_LOG_POS:
		            case self::MASTER_PASSWORD:
		            case self::MASTER_PORT:
		            case self::MASTER_RETRY_COUNT:
		            case self::MASTER_SSL:
		            case self::MASTER_SSL_CA:
		            case self::MASTER_SSL_CAPATH:
		            case self::MASTER_SSL_CERT:
		            case self::MASTER_SSL_CIPHER:
		            case self::MASTER_SSL_CRL:
		            case self::MASTER_SSL_CRLPATH:
		            case self::MASTER_SSL_KEY:
		            case self::MASTER_TLS_VERSION:
		            case self::MASTER_USER:
		            case self::MAX_CONNECTIONS_PER_HOUR:
		            case self::MAX_QUERIES_PER_HOUR:
		            case self::MAX_ROWS:
		            case self::MAX_SIZE:
		            case self::MAX_UPDATES_PER_HOUR:
		            case self::MAX_USER_CONNECTIONS:
		            case self::MEDIUM:
		            case self::MEMBER:
		            case self::MERGE:
		            case self::MESSAGE_TEXT:
		            case self::MID:
		            case self::MIGRATE:
		            case self::MIN_ROWS:
		            case self::MODE:
		            case self::MODIFY:
		            case self::MUTEX:
		            case self::MYSQL:
		            case self::MYSQL_ERRNO:
		            case self::NAME:
		            case self::NAMES:
		            case self::NCHAR:
		            case self::NEVER:
		            case self::NEXT:
		            case self::NO:
		            case self::NOCOPY:
		            case self::NOWAIT:
		            case self::NODEGROUP:
		            case self::NONE:
		            case self::ODBC:
		            case self::OFFLINE:
		            case self::OFFSET:
		            case self::OF:
		            case self::OJ:
		            case self::OLD_PASSWORD:
		            case self::ONE:
		            case self::ONLINE:
		            case self::ONLY:
		            case self::OPEN:
		            case self::OPTIMIZER_COSTS:
		            case self::OPTIONS:
		            case self::OWNER:
		            case self::PACK_KEYS:
		            case self::PAGE:
		            case self::PARSER:
		            case self::PARTIAL:
		            case self::PARTITIONING:
		            case self::PARTITIONS:
		            case self::PASSWORD:
		            case self::PASSWORD_LOCK_TIME:
		            case self::PHASE:
		            case self::PLUGIN:
		            case self::PLUGIN_DIR:
		            case self::PLUGINS:
		            case self::PORT:
		            case self::PRECEDES:
		            case self::PREPARE:
		            case self::PRESERVE:
		            case self::PREV:
		            case self::PROCESSLIST:
		            case self::PROFILE:
		            case self::PROFILES:
		            case self::PROXY:
		            case self::QUERY:
		            case self::QUICK:
		            case self::REBUILD:
		            case self::RECOVER:
		            case self::RECURSIVE:
		            case self::REDO_BUFFER_SIZE:
		            case self::REDUNDANT:
		            case self::RELAY:
		            case self::RELAY_LOG_FILE:
		            case self::RELAY_LOG_POS:
		            case self::RELAYLOG:
		            case self::REMOVE:
		            case self::REORGANIZE:
		            case self::REPAIR:
		            case self::REPLICATE_DO_DB:
		            case self::REPLICATE_DO_TABLE:
		            case self::REPLICATE_IGNORE_DB:
		            case self::REPLICATE_IGNORE_TABLE:
		            case self::REPLICATE_REWRITE_DB:
		            case self::REPLICATE_WILD_DO_TABLE:
		            case self::REPLICATE_WILD_IGNORE_TABLE:
		            case self::REPLICATION:
		            case self::RESET:
		            case self::RESUME:
		            case self::RETURNED_SQLSTATE:
		            case self::RETURNS:
		            case self::REUSE:
		            case self::ROLE:
		            case self::ROLLBACK:
		            case self::ROLLUP:
		            case self::ROTATE:
		            case self::ROW:
		            case self::ROWS:
		            case self::ROW_FORMAT:
		            case self::RTREE:
		            case self::SAVEPOINT:
		            case self::SCHEDULE:
		            case self::SECURITY:
		            case self::SERVER:
		            case self::SESSION:
		            case self::SHARE:
		            case self::SHARED:
		            case self::SIGNED:
		            case self::SIMPLE:
		            case self::SLAVE:
		            case self::SLOW:
		            case self::SNAPSHOT:
		            case self::SOCKET:
		            case self::SOME:
		            case self::SONAME:
		            case self::SOUNDS:
		            case self::SOURCE:
		            case self::SQL_AFTER_GTIDS:
		            case self::SQL_AFTER_MTS_GAPS:
		            case self::SQL_BEFORE_GTIDS:
		            case self::SQL_BUFFER_RESULT:
		            case self::SQL_CACHE:
		            case self::SQL_NO_CACHE:
		            case self::SQL_THREAD:
		            case self::START:
		            case self::STARTS:
		            case self::STATS_AUTO_RECALC:
		            case self::STATS_PERSISTENT:
		            case self::STATS_SAMPLE_PAGES:
		            case self::STATUS:
		            case self::STOP:
		            case self::STORAGE:
		            case self::STRING:
		            case self::SUBCLASS_ORIGIN:
		            case self::SUBJECT:
		            case self::SUBPARTITION:
		            case self::SUBPARTITIONS:
		            case self::SUSPEND:
		            case self::SWAPS:
		            case self::SWITCHES:
		            case self::TABLE_NAME:
		            case self::TABLESPACE:
		            case self::TABLE_TYPE:
		            case self::TEMPORARY:
		            case self::TEMPTABLE:
		            case self::THAN:
		            case self::TRADITIONAL:
		            case self::TRANSACTION:
		            case self::TRANSACTIONAL:
		            case self::TRIGGERS:
		            case self::TRUNCATE:
		            case self::UNBOUNDED:
		            case self::UNDEFINED:
		            case self::UNDOFILE:
		            case self::UNDO_BUFFER_SIZE:
		            case self::UNINSTALL:
		            case self::UNKNOWN:
		            case self::UNTIL:
		            case self::UPGRADE:
		            case self::USER:
		            case self::USE_FRM:
		            case self::USER_RESOURCES:
		            case self::VALIDATION:
		            case self::VALUE:
		            case self::VARIABLES:
		            case self::VIEW:
		            case self::VIRTUAL:
		            case self::VISIBLE:
		            case self::WAIT:
		            case self::WARNINGS:
		            case self::WITHOUT:
		            case self::WORK:
		            case self::WRAPPER:
		            case self::X509:
		            case self::XA:
		            case self::XML:
		            case self::EUR:
		            case self::USA:
		            case self::JIS:
		            case self::ISO:
		            case self::INTERNAL:
		            case self::QUARTER:
		            case self::MONTH:
		            case self::DAY:
		            case self::HOUR:
		            case self::MINUTE:
		            case self::WEEK:
		            case self::SECOND:
		            case self::MICROSECOND:
		            case self::ADMIN:
		            case self::AUDIT_ABORT_EXEMPT:
		            case self::AUDIT_ADMIN:
		            case self::AUTHENTICATION_POLICY_ADMIN:
		            case self::BACKUP_ADMIN:
		            case self::BINLOG_ADMIN:
		            case self::BINLOG_ENCRYPTION_ADMIN:
		            case self::CLONE_ADMIN:
		            case self::CONNECTION_ADMIN:
		            case self::ENCRYPTION_KEY_ADMIN:
		            case self::EXECUTE:
		            case self::FILE:
		            case self::FIREWALL_ADMIN:
		            case self::FIREWALL_EXEMPT:
		            case self::FIREWALL_USER:
		            case self::GROUP_REPLICATION_ADMIN:
		            case self::INNODB_REDO_LOG_ARCHIVE:
		            case self::INVOKE:
		            case self::LAMBDA:
		            case self::NDB_STORED_USER:
		            case self::PASSWORDLESS_USER_ADMIN:
		            case self::PERSIST_RO_VARIABLES_ADMIN:
		            case self::PRIVILEGES:
		            case self::PROCESS:
		            case self::RELOAD:
		            case self::REPLICATION_APPLIER:
		            case self::REPLICATION_SLAVE_ADMIN:
		            case self::RESOURCE_GROUP_ADMIN:
		            case self::RESOURCE_GROUP_USER:
		            case self::ROLE_ADMIN:
		            case self::ROUTINE:
		            case self::S3:
		            case self::SESSION_VARIABLES_ADMIN:
		            case self::SET_USER_ID:
		            case self::SHOW_ROUTINE:
		            case self::SHUTDOWN:
		            case self::SUPER:
		            case self::SYSTEM_VARIABLES_ADMIN:
		            case self::TABLES:
		            case self::TABLE_ENCRYPTION_ADMIN:
		            case self::VERSION_TOKEN_ADMIN:
		            case self::XA_RECOVER_ADMIN:
		            case self::ARMSCII8:
		            case self::ASCII:
		            case self::BIG5:
		            case self::CP1250:
		            case self::CP1251:
		            case self::CP1256:
		            case self::CP1257:
		            case self::CP850:
		            case self::CP852:
		            case self::CP866:
		            case self::CP932:
		            case self::DEC8:
		            case self::EUCJPMS:
		            case self::EUCKR:
		            case self::GB18030:
		            case self::GB2312:
		            case self::GBK:
		            case self::GEOSTD8:
		            case self::GREEK:
		            case self::HEBREW:
		            case self::HP8:
		            case self::KEYBCS2:
		            case self::KOI8R:
		            case self::KOI8U:
		            case self::LATIN1:
		            case self::LATIN2:
		            case self::LATIN5:
		            case self::LATIN7:
		            case self::MACCE:
		            case self::MACROMAN:
		            case self::SJIS:
		            case self::SWE7:
		            case self::TIS620:
		            case self::UCS2:
		            case self::UJIS:
		            case self::UTF16:
		            case self::UTF16LE:
		            case self::UTF32:
		            case self::UTF8:
		            case self::UTF8MB3:
		            case self::UTF8MB4:
		            case self::ARCHIVE:
		            case self::BLACKHOLE:
		            case self::CSV:
		            case self::FEDERATED:
		            case self::INNODB:
		            case self::MEMORY:
		            case self::MRG_MYISAM:
		            case self::MYISAM:
		            case self::NDB:
		            case self::NDBCLUSTER:
		            case self::PERFORMANCE_SCHEMA:
		            case self::TOKUDB:
		            case self::REPEATABLE:
		            case self::COMMITTED:
		            case self::UNCOMMITTED:
		            case self::SERIALIZABLE:
		            case self::GEOMETRYCOLLECTION:
		            case self::LINESTRING:
		            case self::MULTILINESTRING:
		            case self::MULTIPOINT:
		            case self::MULTIPOLYGON:
		            case self::POINT:
		            case self::POLYGON:
		            case self::ABS:
		            case self::ACOS:
		            case self::ADDDATE:
		            case self::ADDTIME:
		            case self::AES_DECRYPT:
		            case self::AES_ENCRYPT:
		            case self::AREA:
		            case self::ASBINARY:
		            case self::ASIN:
		            case self::ASTEXT:
		            case self::ASWKB:
		            case self::ASWKT:
		            case self::ASYMMETRIC_DECRYPT:
		            case self::ASYMMETRIC_DERIVE:
		            case self::ASYMMETRIC_ENCRYPT:
		            case self::ASYMMETRIC_SIGN:
		            case self::ASYMMETRIC_VERIFY:
		            case self::ATAN:
		            case self::ATAN2:
		            case self::BENCHMARK:
		            case self::BIN:
		            case self::BIT_COUNT:
		            case self::BIT_LENGTH:
		            case self::BUFFER:
		            case self::CATALOG_NAME:
		            case self::CEIL:
		            case self::CEILING:
		            case self::CENTROID:
		            case self::CHARACTER_LENGTH:
		            case self::CHARSET:
		            case self::CHAR_LENGTH:
		            case self::COERCIBILITY:
		            case self::COLLATION:
		            case self::COMPRESS:
		            case self::CONCAT:
		            case self::CONCAT_WS:
		            case self::CONNECTION_ID:
		            case self::CONV:
		            case self::CONVERT_TZ:
		            case self::COS:
		            case self::COT:
		            case self::CRC32:
		            case self::CREATE_ASYMMETRIC_PRIV_KEY:
		            case self::CREATE_ASYMMETRIC_PUB_KEY:
		            case self::CREATE_DH_PARAMETERS:
		            case self::CREATE_DIGEST:
		            case self::CROSSES:
		            case self::DATEDIFF:
		            case self::DATE_FORMAT:
		            case self::DAYNAME:
		            case self::DAYOFMONTH:
		            case self::DAYOFWEEK:
		            case self::DAYOFYEAR:
		            case self::DECODE:
		            case self::DEGREES:
		            case self::DES_DECRYPT:
		            case self::DES_ENCRYPT:
		            case self::DIMENSION:
		            case self::DISJOINT:
		            case self::ELT:
		            case self::ENCODE:
		            case self::ENCRYPT:
		            case self::ENDPOINT:
		            case self::ENGINE_ATTRIBUTE:
		            case self::ENVELOPE:
		            case self::EQUALS:
		            case self::EXP:
		            case self::EXPORT_SET:
		            case self::EXTERIORRING:
		            case self::EXTRACTVALUE:
		            case self::FIELD:
		            case self::FIND_IN_SET:
		            case self::FLOOR:
		            case self::FORMAT:
		            case self::FOUND_ROWS:
		            case self::FROM_BASE64:
		            case self::FROM_DAYS:
		            case self::FROM_UNIXTIME:
		            case self::GEOMCOLLFROMTEXT:
		            case self::GEOMCOLLFROMWKB:
		            case self::GEOMETRYCOLLECTIONFROMTEXT:
		            case self::GEOMETRYCOLLECTIONFROMWKB:
		            case self::GEOMETRYFROMTEXT:
		            case self::GEOMETRYFROMWKB:
		            case self::GEOMETRYN:
		            case self::GEOMETRYTYPE:
		            case self::GEOMFROMTEXT:
		            case self::GEOMFROMWKB:
		            case self::GET_FORMAT:
		            case self::GET_LOCK:
		            case self::GLENGTH:
		            case self::GREATEST:
		            case self::GTID_SUBSET:
		            case self::GTID_SUBTRACT:
		            case self::HEX:
		            case self::IFNULL:
		            case self::INET6_ATON:
		            case self::INET6_NTOA:
		            case self::INET_ATON:
		            case self::INET_NTOA:
		            case self::INSTR:
		            case self::INTERIORRINGN:
		            case self::INTERSECTS:
		            case self::ISCLOSED:
		            case self::ISEMPTY:
		            case self::ISNULL:
		            case self::ISSIMPLE:
		            case self::IS_FREE_LOCK:
		            case self::IS_IPV4:
		            case self::IS_IPV4_COMPAT:
		            case self::IS_IPV4_MAPPED:
		            case self::IS_IPV6:
		            case self::IS_USED_LOCK:
		            case self::LAST_INSERT_ID:
		            case self::LCASE:
		            case self::LEAST:
		            case self::LENGTH:
		            case self::LINEFROMTEXT:
		            case self::LINEFROMWKB:
		            case self::LINESTRINGFROMTEXT:
		            case self::LINESTRINGFROMWKB:
		            case self::LN:
		            case self::LOAD_FILE:
		            case self::LOCATE:
		            case self::LOG:
		            case self::LOG10:
		            case self::LOG2:
		            case self::LOWER:
		            case self::LPAD:
		            case self::LTRIM:
		            case self::MAKEDATE:
		            case self::MAKETIME:
		            case self::MAKE_SET:
		            case self::MASTER_POS_WAIT:
		            case self::MBRCONTAINS:
		            case self::MBRDISJOINT:
		            case self::MBREQUAL:
		            case self::MBRINTERSECTS:
		            case self::MBROVERLAPS:
		            case self::MBRTOUCHES:
		            case self::MBRWITHIN:
		            case self::MD5:
		            case self::MLINEFROMTEXT:
		            case self::MLINEFROMWKB:
		            case self::MONTHNAME:
		            case self::MPOINTFROMTEXT:
		            case self::MPOINTFROMWKB:
		            case self::MPOLYFROMTEXT:
		            case self::MPOLYFROMWKB:
		            case self::MULTILINESTRINGFROMTEXT:
		            case self::MULTILINESTRINGFROMWKB:
		            case self::MULTIPOINTFROMTEXT:
		            case self::MULTIPOINTFROMWKB:
		            case self::MULTIPOLYGONFROMTEXT:
		            case self::MULTIPOLYGONFROMWKB:
		            case self::NAME_CONST:
		            case self::NULLIF:
		            case self::NUMGEOMETRIES:
		            case self::NUMINTERIORRINGS:
		            case self::NUMPOINTS:
		            case self::OCT:
		            case self::OCTET_LENGTH:
		            case self::ORD:
		            case self::OVERLAPS:
		            case self::PERIOD_ADD:
		            case self::PERIOD_DIFF:
		            case self::PI:
		            case self::POINTFROMTEXT:
		            case self::POINTFROMWKB:
		            case self::POINTN:
		            case self::POLYFROMTEXT:
		            case self::POLYFROMWKB:
		            case self::POLYGONFROMTEXT:
		            case self::POLYGONFROMWKB:
		            case self::POW:
		            case self::POWER:
		            case self::QUOTE:
		            case self::RADIANS:
		            case self::RAND:
		            case self::RANDOM:
		            case self::RANDOM_BYTES:
		            case self::RELEASE_LOCK:
		            case self::REVERSE:
		            case self::ROUND:
		            case self::ROW_COUNT:
		            case self::RPAD:
		            case self::RTRIM:
		            case self::SEC_TO_TIME:
		            case self::SECONDARY_ENGINE_ATTRIBUTE:
		            case self::SESSION_USER:
		            case self::SHA:
		            case self::SHA1:
		            case self::SHA2:
		            case self::SCHEMA_NAME:
		            case self::SIGN:
		            case self::SIN:
		            case self::SLEEP:
		            case self::SOUNDEX:
		            case self::SQL_THREAD_WAIT_AFTER_GTIDS:
		            case self::SQRT:
		            case self::SRID:
		            case self::STARTPOINT:
		            case self::STRCMP:
		            case self::STR_TO_DATE:
		            case self::ST_AREA:
		            case self::ST_ASBINARY:
		            case self::ST_ASTEXT:
		            case self::ST_ASWKB:
		            case self::ST_ASWKT:
		            case self::ST_BUFFER:
		            case self::ST_CENTROID:
		            case self::ST_CONTAINS:
		            case self::ST_CROSSES:
		            case self::ST_DIFFERENCE:
		            case self::ST_DIMENSION:
		            case self::ST_DISJOINT:
		            case self::ST_DISTANCE:
		            case self::ST_ENDPOINT:
		            case self::ST_ENVELOPE:
		            case self::ST_EQUALS:
		            case self::ST_EXTERIORRING:
		            case self::ST_GEOMCOLLFROMTEXT:
		            case self::ST_GEOMCOLLFROMTXT:
		            case self::ST_GEOMCOLLFROMWKB:
		            case self::ST_GEOMETRYCOLLECTIONFROMTEXT:
		            case self::ST_GEOMETRYCOLLECTIONFROMWKB:
		            case self::ST_GEOMETRYFROMTEXT:
		            case self::ST_GEOMETRYFROMWKB:
		            case self::ST_GEOMETRYN:
		            case self::ST_GEOMETRYTYPE:
		            case self::ST_GEOMFROMTEXT:
		            case self::ST_GEOMFROMWKB:
		            case self::ST_INTERIORRINGN:
		            case self::ST_INTERSECTION:
		            case self::ST_INTERSECTS:
		            case self::ST_ISCLOSED:
		            case self::ST_ISEMPTY:
		            case self::ST_ISSIMPLE:
		            case self::ST_LINEFROMTEXT:
		            case self::ST_LINEFROMWKB:
		            case self::ST_LINESTRINGFROMTEXT:
		            case self::ST_LINESTRINGFROMWKB:
		            case self::ST_NUMGEOMETRIES:
		            case self::ST_NUMINTERIORRING:
		            case self::ST_NUMINTERIORRINGS:
		            case self::ST_NUMPOINTS:
		            case self::ST_OVERLAPS:
		            case self::ST_POINTFROMTEXT:
		            case self::ST_POINTFROMWKB:
		            case self::ST_POINTN:
		            case self::ST_POLYFROMTEXT:
		            case self::ST_POLYFROMWKB:
		            case self::ST_POLYGONFROMTEXT:
		            case self::ST_POLYGONFROMWKB:
		            case self::ST_SRID:
		            case self::ST_STARTPOINT:
		            case self::ST_SYMDIFFERENCE:
		            case self::ST_TOUCHES:
		            case self::ST_UNION:
		            case self::ST_WITHIN:
		            case self::ST_X:
		            case self::ST_Y:
		            case self::SUBDATE:
		            case self::SUBSTRING_INDEX:
		            case self::SUBTIME:
		            case self::SYSTEM_USER:
		            case self::TAN:
		            case self::TIMEDIFF:
		            case self::TIMESTAMPADD:
		            case self::TIMESTAMPDIFF:
		            case self::TIME_FORMAT:
		            case self::TIME_TO_SEC:
		            case self::TOUCHES:
		            case self::TO_BASE64:
		            case self::TO_DAYS:
		            case self::TO_SECONDS:
		            case self::TP_CONNECTION_ADMIN:
		            case self::UCASE:
		            case self::UNCOMPRESS:
		            case self::UNCOMPRESSED_LENGTH:
		            case self::UNHEX:
		            case self::UNIX_TIMESTAMP:
		            case self::UPDATEXML:
		            case self::UPPER:
		            case self::UUID:
		            case self::UUID_SHORT:
		            case self::VALIDATE_PASSWORD_STRENGTH:
		            case self::VERSION:
		            case self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
		            case self::WEEKDAY:
		            case self::WEEKOFYEAR:
		            case self::WEIGHT_STRING:
		            case self::WITHIN:
		            case self::YEARWEEK:
		            case self::Y_FUNCTION:
		            case self::X_FUNCTION:
		            case self::MOD:
		            case self::AT_SIGN:
		            case self::CHARSET_REVERSE_QOUTE_STRING:
		            case self::STRING_LITERAL:
		            case self::ID:
		            	$this->enterOuterAlt($localContext, 3);
		            	$this->setState(5912);
		            	$this->errorHandler->sync($this);

		            	switch ($this->getInterpreter()->adaptivePredict($this->input, 859, $this->ctx)) {
		            	    case 1:
		            		    $this->setState(5909);
		            		    $this->errorHandler->sync($this);
		            		    $_la = $this->input->LA(1);

		            		    if ($_la === self::AT_SIGN) {
		            		    	$this->setState(5907);
		            		    	$this->match(self::AT_SIGN);
		            		    	$this->setState(5908);
		            		    	$this->match(self::AT_SIGN);
		            		    }
		            		    $this->setState(5911);

		            		    $_la = $this->input->LA(1);

		            		    if (!($_la === self::GLOBAL || $_la === self::LOCAL || $_la === self::SESSION)) {
		            		    $this->errorHandler->recoverInline($this);
		            		    } else {
		            		    	if ($this->input->LA(1) === Token::EOF) {
		            		    	    $this->matchedEOF = true;
		            		        }

		            		    	$this->errorHandler->reportMatch($this);
		            		    	$this->consume();
		            		    }
		            		break;
		            	}
		            	$this->setState(5914);
		            	$this->uid();
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function showCommonEntity(): Context\ShowCommonEntityContext
		{
		    $localContext = new Context\ShowCommonEntityContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 494, self::RULE_showCommonEntity);

		    try {
		        $this->setState(5930);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::CHARACTER:
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(5917);
		            	$this->match(self::CHARACTER);
		            	$this->setState(5918);
		            	$this->match(self::SET);
		            	break;

		            case self::COLLATION:
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(5919);
		            	$this->match(self::COLLATION);
		            	break;

		            case self::DATABASES:
		            	$this->enterOuterAlt($localContext, 3);
		            	$this->setState(5920);
		            	$this->match(self::DATABASES);
		            	break;

		            case self::SCHEMAS:
		            	$this->enterOuterAlt($localContext, 4);
		            	$this->setState(5921);
		            	$this->match(self::SCHEMAS);
		            	break;

		            case self::FUNCTION:
		            	$this->enterOuterAlt($localContext, 5);
		            	$this->setState(5922);
		            	$this->match(self::FUNCTION);
		            	$this->setState(5923);
		            	$this->match(self::STATUS);
		            	break;

		            case self::PROCEDURE:
		            	$this->enterOuterAlt($localContext, 6);
		            	$this->setState(5924);
		            	$this->match(self::PROCEDURE);
		            	$this->setState(5925);
		            	$this->match(self::STATUS);
		            	break;

		            case self::GLOBAL:
		            case self::SESSION:
		            case self::STATUS:
		            case self::VARIABLES:
		            	$this->enterOuterAlt($localContext, 7);
		            	$this->setState(5927);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::GLOBAL || $_la === self::SESSION) {
		            		$this->setState(5926);

		            		$_la = $this->input->LA(1);

		            		if (!($_la === self::GLOBAL || $_la === self::SESSION)) {
		            		$this->errorHandler->recoverInline($this);
		            		} else {
		            			if ($this->input->LA(1) === Token::EOF) {
		            			    $this->matchedEOF = true;
		            		    }

		            			$this->errorHandler->reportMatch($this);
		            			$this->consume();
		            		}
		            	}
		            	$this->setState(5929);

		            	$_la = $this->input->LA(1);

		            	if (!($_la === self::STATUS || $_la === self::VARIABLES)) {
		            	$this->errorHandler->recoverInline($this);
		            	} else {
		            		if ($this->input->LA(1) === Token::EOF) {
		            		    $this->matchedEOF = true;
		            	    }

		            		$this->errorHandler->reportMatch($this);
		            		$this->consume();
		            	}
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function showFilter(): Context\ShowFilterContext
		{
		    $localContext = new Context\ShowFilterContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 496, self::RULE_showFilter);

		    try {
		        $this->setState(5936);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::LIKE:
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(5932);
		            	$this->match(self::LIKE);
		            	$this->setState(5933);
		            	$this->match(self::STRING_LITERAL);
		            	break;

		            case self::WHERE:
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(5934);
		            	$this->match(self::WHERE);
		            	$this->setState(5935);
		            	$this->recursiveExpression(0);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function showGlobalInfoClause(): Context\ShowGlobalInfoClauseContext
		{
		    $localContext = new Context\ShowGlobalInfoClauseContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 498, self::RULE_showGlobalInfoClause);

		    try {
		        $this->setState(5955);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::ENGINES:
		            case self::STORAGE:
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(5939);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::STORAGE) {
		            		$this->setState(5938);
		            		$this->match(self::STORAGE);
		            	}
		            	$this->setState(5941);
		            	$this->match(self::ENGINES);
		            	break;

		            case self::MASTER:
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(5942);
		            	$this->match(self::MASTER);
		            	$this->setState(5943);
		            	$this->match(self::STATUS);
		            	break;

		            case self::PLUGINS:
		            	$this->enterOuterAlt($localContext, 3);
		            	$this->setState(5944);
		            	$this->match(self::PLUGINS);
		            	break;

		            case self::PRIVILEGES:
		            	$this->enterOuterAlt($localContext, 4);
		            	$this->setState(5945);
		            	$this->match(self::PRIVILEGES);
		            	break;

		            case self::FULL:
		            case self::PROCESSLIST:
		            	$this->enterOuterAlt($localContext, 5);
		            	$this->setState(5947);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::FULL) {
		            		$this->setState(5946);
		            		$this->match(self::FULL);
		            	}
		            	$this->setState(5949);
		            	$this->match(self::PROCESSLIST);
		            	break;

		            case self::PROFILES:
		            	$this->enterOuterAlt($localContext, 6);
		            	$this->setState(5950);
		            	$this->match(self::PROFILES);
		            	break;

		            case self::SLAVE:
		            	$this->enterOuterAlt($localContext, 7);
		            	$this->setState(5951);
		            	$this->match(self::SLAVE);
		            	$this->setState(5952);
		            	$this->match(self::HOSTS);
		            	break;

		            case self::AUTHORS:
		            	$this->enterOuterAlt($localContext, 8);
		            	$this->setState(5953);
		            	$this->match(self::AUTHORS);
		            	break;

		            case self::CONTRIBUTORS:
		            	$this->enterOuterAlt($localContext, 9);
		            	$this->setState(5954);
		            	$this->match(self::CONTRIBUTORS);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function showSchemaEntity(): Context\ShowSchemaEntityContext
		{
		    $localContext = new Context\ShowSchemaEntityContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 500, self::RULE_showSchemaEntity);

		    try {
		        $this->setState(5965);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::EVENTS:
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(5957);
		            	$this->match(self::EVENTS);
		            	break;

		            case self::TABLE:
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(5958);
		            	$this->match(self::TABLE);
		            	$this->setState(5959);
		            	$this->match(self::STATUS);
		            	break;

		            case self::FULL:
		            case self::TABLES:
		            	$this->enterOuterAlt($localContext, 3);
		            	$this->setState(5961);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::FULL) {
		            		$this->setState(5960);
		            		$this->match(self::FULL);
		            	}
		            	$this->setState(5963);
		            	$this->match(self::TABLES);
		            	break;

		            case self::TRIGGERS:
		            	$this->enterOuterAlt($localContext, 4);
		            	$this->setState(5964);
		            	$this->match(self::TRIGGERS);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function showProfileType(): Context\ShowProfileTypeContext
		{
		    $localContext = new Context\ShowProfileTypeContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 502, self::RULE_showProfileType);

		    try {
		        $this->setState(5979);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::ALL:
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(5967);
		            	$this->match(self::ALL);
		            	break;

		            case self::BLOCK:
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(5968);
		            	$this->match(self::BLOCK);
		            	$this->setState(5969);
		            	$this->match(self::IO);
		            	break;

		            case self::CONTEXT:
		            	$this->enterOuterAlt($localContext, 3);
		            	$this->setState(5970);
		            	$this->match(self::CONTEXT);
		            	$this->setState(5971);
		            	$this->match(self::SWITCHES);
		            	break;

		            case self::CPU:
		            	$this->enterOuterAlt($localContext, 4);
		            	$this->setState(5972);
		            	$this->match(self::CPU);
		            	break;

		            case self::IPC:
		            	$this->enterOuterAlt($localContext, 5);
		            	$this->setState(5973);
		            	$this->match(self::IPC);
		            	break;

		            case self::MEMORY:
		            	$this->enterOuterAlt($localContext, 6);
		            	$this->setState(5974);
		            	$this->match(self::MEMORY);
		            	break;

		            case self::PAGE:
		            	$this->enterOuterAlt($localContext, 7);
		            	$this->setState(5975);
		            	$this->match(self::PAGE);
		            	$this->setState(5976);
		            	$this->match(self::FAULTS);
		            	break;

		            case self::SOURCE:
		            	$this->enterOuterAlt($localContext, 8);
		            	$this->setState(5977);
		            	$this->match(self::SOURCE);
		            	break;

		            case self::SWAPS:
		            	$this->enterOuterAlt($localContext, 9);
		            	$this->setState(5978);
		            	$this->match(self::SWAPS);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function binlogStatement(): Context\BinlogStatementContext
		{
		    $localContext = new Context\BinlogStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 504, self::RULE_binlogStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(5981);
		        $this->match(self::BINLOG);
		        $this->setState(5982);
		        $this->match(self::STRING_LITERAL);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function cacheIndexStatement(): Context\CacheIndexStatementContext
		{
		    $localContext = new Context\CacheIndexStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 506, self::RULE_cacheIndexStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(5984);
		        $this->match(self::CACHE);
		        $this->setState(5985);
		        $this->match(self::INDEX);
		        $this->setState(5986);
		        $this->tableIndexes();
		        $this->setState(5991);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::COMMA) {
		        	$this->setState(5987);
		        	$this->match(self::COMMA);
		        	$this->setState(5988);
		        	$this->tableIndexes();
		        	$this->setState(5993);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		        $this->setState(6001);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::PARTITION) {
		        	$this->setState(5994);
		        	$this->match(self::PARTITION);
		        	$this->setState(5995);
		        	$this->match(self::LR_BRACKET);
		        	$this->setState(5998);
		        	$this->errorHandler->sync($this);

		        	switch ($this->input->LA(1)) {
		        	    case self::ARRAY:
		        	    case self::ATTRIBUTE:
		        	    case self::BUCKETS:
		        	    case self::CONDITION:
		        	    case self::CURRENT:
		        	    case self::CURRENT_USER:
		        	    case self::DATABASE:
		        	    case self::DEFAULT:
		        	    case self::DIAGNOSTICS:
		        	    case self::EMPTY:
		        	    case self::ENFORCED:
		        	    case self::EXCEPT:
		        	    case self::GROUP:
		        	    case self::IF:
		        	    case self::IGNORED:
		        	    case self::INSERT:
		        	    case self::LATERAL:
		        	    case self::LEFT:
		        	    case self::NUMBER:
		        	    case self::OPTIONAL:
		        	    case self::ORDER:
		        	    case self::PRIMARY:
		        	    case self::REPEAT:
		        	    case self::REPLACE:
		        	    case self::RIGHT:
		        	    case self::SCHEMA:
		        	    case self::SKIP_QUERY_REWRITE:
		        	    case self::STACKED:
		        	    case self::DATE:
		        	    case self::TIME:
		        	    case self::TIMESTAMP:
		        	    case self::DATETIME:
		        	    case self::YEAR:
		        	    case self::BINARY:
		        	    case self::TEXT:
		        	    case self::ENUM:
		        	    case self::SERIAL:
		        	    case self::JSON_ARRAY:
		        	    case self::JSON_ARRAYAGG:
		        	    case self::JSON_ARRAY_APPEND:
		        	    case self::JSON_ARRAY_INSERT:
		        	    case self::JSON_CONTAINS:
		        	    case self::JSON_CONTAINS_PATH:
		        	    case self::JSON_DEPTH:
		        	    case self::JSON_EXTRACT:
		        	    case self::JSON_INSERT:
		        	    case self::JSON_KEYS:
		        	    case self::JSON_LENGTH:
		        	    case self::JSON_MERGE:
		        	    case self::JSON_MERGE_PATCH:
		        	    case self::JSON_MERGE_PRESERVE:
		        	    case self::JSON_OBJECT:
		        	    case self::JSON_OBJECTAGG:
		        	    case self::JSON_OVERLAPS:
		        	    case self::JSON_PRETTY:
		        	    case self::JSON_QUOTE:
		        	    case self::JSON_REMOVE:
		        	    case self::JSON_REPLACE:
		        	    case self::JSON_SCHEMA_VALID:
		        	    case self::JSON_SCHEMA_VALIDATION_REPORT:
		        	    case self::JSON_SEARCH:
		        	    case self::JSON_SET:
		        	    case self::JSON_STORAGE_FREE:
		        	    case self::JSON_STORAGE_SIZE:
		        	    case self::JSON_TABLE:
		        	    case self::JSON_TYPE:
		        	    case self::JSON_UNQUOTE:
		        	    case self::JSON_VALID:
		        	    case self::JSON_VALUE:
		        	    case self::NESTED:
		        	    case self::ORDINALITY:
		        	    case self::PATH:
		        	    case self::AVG:
		        	    case self::BIT_AND:
		        	    case self::BIT_OR:
		        	    case self::BIT_XOR:
		        	    case self::COUNT:
		        	    case self::CUME_DIST:
		        	    case self::DENSE_RANK:
		        	    case self::FIRST_VALUE:
		        	    case self::GROUP_CONCAT:
		        	    case self::LAG:
		        	    case self::LAST_VALUE:
		        	    case self::LEAD:
		        	    case self::MAX:
		        	    case self::MIN:
		        	    case self::NTILE:
		        	    case self::NTH_VALUE:
		        	    case self::PERCENT_RANK:
		        	    case self::RANK:
		        	    case self::ROW_NUMBER:
		        	    case self::STD:
		        	    case self::STDDEV:
		        	    case self::STDDEV_POP:
		        	    case self::STDDEV_SAMP:
		        	    case self::SUM:
		        	    case self::VAR_POP:
		        	    case self::VAR_SAMP:
		        	    case self::VARIANCE:
		        	    case self::CURRENT_DATE:
		        	    case self::CURRENT_TIME:
		        	    case self::CURRENT_TIMESTAMP:
		        	    case self::LOCALTIME:
		        	    case self::CURDATE:
		        	    case self::CURTIME:
		        	    case self::DATE_ADD:
		        	    case self::DATE_SUB:
		        	    case self::LOCALTIMESTAMP:
		        	    case self::NOW:
		        	    case self::POSITION:
		        	    case self::SUBSTR:
		        	    case self::SUBSTRING:
		        	    case self::SYSDATE:
		        	    case self::TRIM:
		        	    case self::UTC_DATE:
		        	    case self::UTC_TIME:
		        	    case self::UTC_TIMESTAMP:
		        	    case self::ACCOUNT:
		        	    case self::ACTION:
		        	    case self::AFTER:
		        	    case self::AGGREGATE:
		        	    case self::ALGORITHM:
		        	    case self::ANY:
		        	    case self::AT:
		        	    case self::AUTHORS:
		        	    case self::AUTOCOMMIT:
		        	    case self::AUTOEXTEND_SIZE:
		        	    case self::AUTO_INCREMENT:
		        	    case self::AVG_ROW_LENGTH:
		        	    case self::BEGIN:
		        	    case self::BINLOG:
		        	    case self::BIT:
		        	    case self::BLOCK:
		        	    case self::BOOL:
		        	    case self::BOOLEAN:
		        	    case self::BTREE:
		        	    case self::CACHE:
		        	    case self::CASCADED:
		        	    case self::CHAIN:
		        	    case self::CHANGED:
		        	    case self::CHANNEL:
		        	    case self::CHECKSUM:
		        	    case self::PAGE_CHECKSUM:
		        	    case self::CIPHER:
		        	    case self::CLASS_ORIGIN:
		        	    case self::CLIENT:
		        	    case self::CLOSE:
		        	    case self::CLUSTERING:
		        	    case self::COALESCE:
		        	    case self::CODE:
		        	    case self::COLUMNS:
		        	    case self::COLUMN_FORMAT:
		        	    case self::COLUMN_NAME:
		        	    case self::COMMENT:
		        	    case self::COMMIT:
		        	    case self::COMPACT:
		        	    case self::COMPLETION:
		        	    case self::COMPRESSED:
		        	    case self::COMPRESSION:
		        	    case self::CONCURRENT:
		        	    case self::CONNECT:
		        	    case self::CONNECTION:
		        	    case self::CONSISTENT:
		        	    case self::CONSTRAINT_CATALOG:
		        	    case self::CONSTRAINT_SCHEMA:
		        	    case self::CONSTRAINT_NAME:
		        	    case self::CONTAINS:
		        	    case self::CONTEXT:
		        	    case self::CONTRIBUTORS:
		        	    case self::COPY:
		        	    case self::CPU:
		        	    case self::CURSOR_NAME:
		        	    case self::DATA:
		        	    case self::DATAFILE:
		        	    case self::DEALLOCATE:
		        	    case self::DEFAULT_AUTH:
		        	    case self::DEFINER:
		        	    case self::DELAY_KEY_WRITE:
		        	    case self::DES_KEY_FILE:
		        	    case self::DIRECTORY:
		        	    case self::DISABLE:
		        	    case self::DISCARD:
		        	    case self::DISK:
		        	    case self::DO:
		        	    case self::DUMPFILE:
		        	    case self::DUPLICATE:
		        	    case self::DYNAMIC:
		        	    case self::ENABLE:
		        	    case self::ENCRYPTION:
		        	    case self::END:
		        	    case self::ENDS:
		        	    case self::ENGINE:
		        	    case self::ENGINES:
		        	    case self::ERROR:
		        	    case self::ERRORS:
		        	    case self::ESCAPE:
		        	    case self::EVEN:
		        	    case self::EVENT:
		        	    case self::EVENTS:
		        	    case self::EVERY:
		        	    case self::EXCHANGE:
		        	    case self::EXCLUSIVE:
		        	    case self::EXPIRE:
		        	    case self::EXPORT:
		        	    case self::EXTENDED:
		        	    case self::EXTENT_SIZE:
		        	    case self::FAILED_LOGIN_ATTEMPTS:
		        	    case self::FAST:
		        	    case self::FAULTS:
		        	    case self::FIELDS:
		        	    case self::FILE_BLOCK_SIZE:
		        	    case self::FILTER:
		        	    case self::FIRST:
		        	    case self::FIXED:
		        	    case self::FLUSH:
		        	    case self::FOLLOWS:
		        	    case self::FOUND:
		        	    case self::FULL:
		        	    case self::FUNCTION:
		        	    case self::GENERAL:
		        	    case self::GLOBAL:
		        	    case self::GRANTS:
		        	    case self::GROUP_REPLICATION:
		        	    case self::HANDLER:
		        	    case self::HASH:
		        	    case self::HELP:
		        	    case self::HISTORY:
		        	    case self::HOST:
		        	    case self::HOSTS:
		        	    case self::IDENTIFIED:
		        	    case self::IGNORE_SERVER_IDS:
		        	    case self::IMPORT:
		        	    case self::INDEXES:
		        	    case self::INITIAL_SIZE:
		        	    case self::INPLACE:
		        	    case self::INSERT_METHOD:
		        	    case self::INSTALL:
		        	    case self::INSTANCE:
		        	    case self::INSTANT:
		        	    case self::INVISIBLE:
		        	    case self::INVOKER:
		        	    case self::IO:
		        	    case self::IO_THREAD:
		        	    case self::IPC:
		        	    case self::ISOLATION:
		        	    case self::ISSUER:
		        	    case self::JSON:
		        	    case self::KEY_BLOCK_SIZE:
		        	    case self::LANGUAGE:
		        	    case self::LAST:
		        	    case self::LEAVES:
		        	    case self::LESS:
		        	    case self::LEVEL:
		        	    case self::LIST:
		        	    case self::LOCAL:
		        	    case self::LOGFILE:
		        	    case self::LOGS:
		        	    case self::MASTER:
		        	    case self::MASTER_AUTO_POSITION:
		        	    case self::MASTER_CONNECT_RETRY:
		        	    case self::MASTER_DELAY:
		        	    case self::MASTER_HEARTBEAT_PERIOD:
		        	    case self::MASTER_HOST:
		        	    case self::MASTER_LOG_FILE:
		        	    case self::MASTER_LOG_POS:
		        	    case self::MASTER_PASSWORD:
		        	    case self::MASTER_PORT:
		        	    case self::MASTER_RETRY_COUNT:
		        	    case self::MASTER_SSL:
		        	    case self::MASTER_SSL_CA:
		        	    case self::MASTER_SSL_CAPATH:
		        	    case self::MASTER_SSL_CERT:
		        	    case self::MASTER_SSL_CIPHER:
		        	    case self::MASTER_SSL_CRL:
		        	    case self::MASTER_SSL_CRLPATH:
		        	    case self::MASTER_SSL_KEY:
		        	    case self::MASTER_TLS_VERSION:
		        	    case self::MASTER_USER:
		        	    case self::MAX_CONNECTIONS_PER_HOUR:
		        	    case self::MAX_QUERIES_PER_HOUR:
		        	    case self::MAX_ROWS:
		        	    case self::MAX_SIZE:
		        	    case self::MAX_UPDATES_PER_HOUR:
		        	    case self::MAX_USER_CONNECTIONS:
		        	    case self::MEDIUM:
		        	    case self::MEMBER:
		        	    case self::MERGE:
		        	    case self::MESSAGE_TEXT:
		        	    case self::MID:
		        	    case self::MIGRATE:
		        	    case self::MIN_ROWS:
		        	    case self::MODE:
		        	    case self::MODIFY:
		        	    case self::MUTEX:
		        	    case self::MYSQL:
		        	    case self::MYSQL_ERRNO:
		        	    case self::NAME:
		        	    case self::NAMES:
		        	    case self::NCHAR:
		        	    case self::NEVER:
		        	    case self::NEXT:
		        	    case self::NO:
		        	    case self::NOCOPY:
		        	    case self::NOWAIT:
		        	    case self::NODEGROUP:
		        	    case self::NONE:
		        	    case self::ODBC:
		        	    case self::OFFLINE:
		        	    case self::OFFSET:
		        	    case self::OF:
		        	    case self::OJ:
		        	    case self::OLD_PASSWORD:
		        	    case self::ONE:
		        	    case self::ONLINE:
		        	    case self::ONLY:
		        	    case self::OPEN:
		        	    case self::OPTIMIZER_COSTS:
		        	    case self::OPTIONS:
		        	    case self::OWNER:
		        	    case self::PACK_KEYS:
		        	    case self::PAGE:
		        	    case self::PARSER:
		        	    case self::PARTIAL:
		        	    case self::PARTITIONING:
		        	    case self::PARTITIONS:
		        	    case self::PASSWORD:
		        	    case self::PASSWORD_LOCK_TIME:
		        	    case self::PHASE:
		        	    case self::PLUGIN:
		        	    case self::PLUGIN_DIR:
		        	    case self::PLUGINS:
		        	    case self::PORT:
		        	    case self::PRECEDES:
		        	    case self::PREPARE:
		        	    case self::PRESERVE:
		        	    case self::PREV:
		        	    case self::PROCESSLIST:
		        	    case self::PROFILE:
		        	    case self::PROFILES:
		        	    case self::PROXY:
		        	    case self::QUERY:
		        	    case self::QUICK:
		        	    case self::REBUILD:
		        	    case self::RECOVER:
		        	    case self::RECURSIVE:
		        	    case self::REDO_BUFFER_SIZE:
		        	    case self::REDUNDANT:
		        	    case self::RELAY:
		        	    case self::RELAY_LOG_FILE:
		        	    case self::RELAY_LOG_POS:
		        	    case self::RELAYLOG:
		        	    case self::REMOVE:
		        	    case self::REORGANIZE:
		        	    case self::REPAIR:
		        	    case self::REPLICATE_DO_DB:
		        	    case self::REPLICATE_DO_TABLE:
		        	    case self::REPLICATE_IGNORE_DB:
		        	    case self::REPLICATE_IGNORE_TABLE:
		        	    case self::REPLICATE_REWRITE_DB:
		        	    case self::REPLICATE_WILD_DO_TABLE:
		        	    case self::REPLICATE_WILD_IGNORE_TABLE:
		        	    case self::REPLICATION:
		        	    case self::RESET:
		        	    case self::RESUME:
		        	    case self::RETURNED_SQLSTATE:
		        	    case self::RETURNS:
		        	    case self::REUSE:
		        	    case self::ROLE:
		        	    case self::ROLLBACK:
		        	    case self::ROLLUP:
		        	    case self::ROTATE:
		        	    case self::ROW:
		        	    case self::ROWS:
		        	    case self::ROW_FORMAT:
		        	    case self::RTREE:
		        	    case self::SAVEPOINT:
		        	    case self::SCHEDULE:
		        	    case self::SECURITY:
		        	    case self::SERVER:
		        	    case self::SESSION:
		        	    case self::SHARE:
		        	    case self::SHARED:
		        	    case self::SIGNED:
		        	    case self::SIMPLE:
		        	    case self::SLAVE:
		        	    case self::SLOW:
		        	    case self::SNAPSHOT:
		        	    case self::SOCKET:
		        	    case self::SOME:
		        	    case self::SONAME:
		        	    case self::SOUNDS:
		        	    case self::SOURCE:
		        	    case self::SQL_AFTER_GTIDS:
		        	    case self::SQL_AFTER_MTS_GAPS:
		        	    case self::SQL_BEFORE_GTIDS:
		        	    case self::SQL_BUFFER_RESULT:
		        	    case self::SQL_CACHE:
		        	    case self::SQL_NO_CACHE:
		        	    case self::SQL_THREAD:
		        	    case self::START:
		        	    case self::STARTS:
		        	    case self::STATS_AUTO_RECALC:
		        	    case self::STATS_PERSISTENT:
		        	    case self::STATS_SAMPLE_PAGES:
		        	    case self::STATUS:
		        	    case self::STOP:
		        	    case self::STORAGE:
		        	    case self::STRING:
		        	    case self::SUBCLASS_ORIGIN:
		        	    case self::SUBJECT:
		        	    case self::SUBPARTITION:
		        	    case self::SUBPARTITIONS:
		        	    case self::SUSPEND:
		        	    case self::SWAPS:
		        	    case self::SWITCHES:
		        	    case self::TABLE_NAME:
		        	    case self::TABLESPACE:
		        	    case self::TABLE_TYPE:
		        	    case self::TEMPORARY:
		        	    case self::TEMPTABLE:
		        	    case self::THAN:
		        	    case self::TRADITIONAL:
		        	    case self::TRANSACTION:
		        	    case self::TRANSACTIONAL:
		        	    case self::TRIGGERS:
		        	    case self::TRUNCATE:
		        	    case self::UNBOUNDED:
		        	    case self::UNDEFINED:
		        	    case self::UNDOFILE:
		        	    case self::UNDO_BUFFER_SIZE:
		        	    case self::UNINSTALL:
		        	    case self::UNKNOWN:
		        	    case self::UNTIL:
		        	    case self::UPGRADE:
		        	    case self::USER:
		        	    case self::USE_FRM:
		        	    case self::USER_RESOURCES:
		        	    case self::VALIDATION:
		        	    case self::VALUE:
		        	    case self::VARIABLES:
		        	    case self::VIEW:
		        	    case self::VIRTUAL:
		        	    case self::VISIBLE:
		        	    case self::WAIT:
		        	    case self::WARNINGS:
		        	    case self::WITHOUT:
		        	    case self::WORK:
		        	    case self::WRAPPER:
		        	    case self::X509:
		        	    case self::XA:
		        	    case self::XML:
		        	    case self::EUR:
		        	    case self::USA:
		        	    case self::JIS:
		        	    case self::ISO:
		        	    case self::INTERNAL:
		        	    case self::QUARTER:
		        	    case self::MONTH:
		        	    case self::DAY:
		        	    case self::HOUR:
		        	    case self::MINUTE:
		        	    case self::WEEK:
		        	    case self::SECOND:
		        	    case self::MICROSECOND:
		        	    case self::ADMIN:
		        	    case self::AUDIT_ABORT_EXEMPT:
		        	    case self::AUDIT_ADMIN:
		        	    case self::AUTHENTICATION_POLICY_ADMIN:
		        	    case self::BACKUP_ADMIN:
		        	    case self::BINLOG_ADMIN:
		        	    case self::BINLOG_ENCRYPTION_ADMIN:
		        	    case self::CLONE_ADMIN:
		        	    case self::CONNECTION_ADMIN:
		        	    case self::ENCRYPTION_KEY_ADMIN:
		        	    case self::EXECUTE:
		        	    case self::FILE:
		        	    case self::FIREWALL_ADMIN:
		        	    case self::FIREWALL_EXEMPT:
		        	    case self::FIREWALL_USER:
		        	    case self::GROUP_REPLICATION_ADMIN:
		        	    case self::INNODB_REDO_LOG_ARCHIVE:
		        	    case self::INVOKE:
		        	    case self::LAMBDA:
		        	    case self::NDB_STORED_USER:
		        	    case self::PASSWORDLESS_USER_ADMIN:
		        	    case self::PERSIST_RO_VARIABLES_ADMIN:
		        	    case self::PRIVILEGES:
		        	    case self::PROCESS:
		        	    case self::RELOAD:
		        	    case self::REPLICATION_APPLIER:
		        	    case self::REPLICATION_SLAVE_ADMIN:
		        	    case self::RESOURCE_GROUP_ADMIN:
		        	    case self::RESOURCE_GROUP_USER:
		        	    case self::ROLE_ADMIN:
		        	    case self::ROUTINE:
		        	    case self::S3:
		        	    case self::SESSION_VARIABLES_ADMIN:
		        	    case self::SET_USER_ID:
		        	    case self::SHOW_ROUTINE:
		        	    case self::SHUTDOWN:
		        	    case self::SUPER:
		        	    case self::SYSTEM_VARIABLES_ADMIN:
		        	    case self::TABLES:
		        	    case self::TABLE_ENCRYPTION_ADMIN:
		        	    case self::VERSION_TOKEN_ADMIN:
		        	    case self::XA_RECOVER_ADMIN:
		        	    case self::ARMSCII8:
		        	    case self::ASCII:
		        	    case self::BIG5:
		        	    case self::CP1250:
		        	    case self::CP1251:
		        	    case self::CP1256:
		        	    case self::CP1257:
		        	    case self::CP850:
		        	    case self::CP852:
		        	    case self::CP866:
		        	    case self::CP932:
		        	    case self::DEC8:
		        	    case self::EUCJPMS:
		        	    case self::EUCKR:
		        	    case self::GB18030:
		        	    case self::GB2312:
		        	    case self::GBK:
		        	    case self::GEOSTD8:
		        	    case self::GREEK:
		        	    case self::HEBREW:
		        	    case self::HP8:
		        	    case self::KEYBCS2:
		        	    case self::KOI8R:
		        	    case self::KOI8U:
		        	    case self::LATIN1:
		        	    case self::LATIN2:
		        	    case self::LATIN5:
		        	    case self::LATIN7:
		        	    case self::MACCE:
		        	    case self::MACROMAN:
		        	    case self::SJIS:
		        	    case self::SWE7:
		        	    case self::TIS620:
		        	    case self::UCS2:
		        	    case self::UJIS:
		        	    case self::UTF16:
		        	    case self::UTF16LE:
		        	    case self::UTF32:
		        	    case self::UTF8:
		        	    case self::UTF8MB3:
		        	    case self::UTF8MB4:
		        	    case self::ARCHIVE:
		        	    case self::BLACKHOLE:
		        	    case self::CSV:
		        	    case self::FEDERATED:
		        	    case self::INNODB:
		        	    case self::MEMORY:
		        	    case self::MRG_MYISAM:
		        	    case self::MYISAM:
		        	    case self::NDB:
		        	    case self::NDBCLUSTER:
		        	    case self::PERFORMANCE_SCHEMA:
		        	    case self::TOKUDB:
		        	    case self::REPEATABLE:
		        	    case self::COMMITTED:
		        	    case self::UNCOMMITTED:
		        	    case self::SERIALIZABLE:
		        	    case self::GEOMETRYCOLLECTION:
		        	    case self::LINESTRING:
		        	    case self::MULTILINESTRING:
		        	    case self::MULTIPOINT:
		        	    case self::MULTIPOLYGON:
		        	    case self::POINT:
		        	    case self::POLYGON:
		        	    case self::ABS:
		        	    case self::ACOS:
		        	    case self::ADDDATE:
		        	    case self::ADDTIME:
		        	    case self::AES_DECRYPT:
		        	    case self::AES_ENCRYPT:
		        	    case self::AREA:
		        	    case self::ASBINARY:
		        	    case self::ASIN:
		        	    case self::ASTEXT:
		        	    case self::ASWKB:
		        	    case self::ASWKT:
		        	    case self::ASYMMETRIC_DECRYPT:
		        	    case self::ASYMMETRIC_DERIVE:
		        	    case self::ASYMMETRIC_ENCRYPT:
		        	    case self::ASYMMETRIC_SIGN:
		        	    case self::ASYMMETRIC_VERIFY:
		        	    case self::ATAN:
		        	    case self::ATAN2:
		        	    case self::BENCHMARK:
		        	    case self::BIN:
		        	    case self::BIT_COUNT:
		        	    case self::BIT_LENGTH:
		        	    case self::BUFFER:
		        	    case self::CATALOG_NAME:
		        	    case self::CEIL:
		        	    case self::CEILING:
		        	    case self::CENTROID:
		        	    case self::CHARACTER_LENGTH:
		        	    case self::CHARSET:
		        	    case self::CHAR_LENGTH:
		        	    case self::COERCIBILITY:
		        	    case self::COLLATION:
		        	    case self::COMPRESS:
		        	    case self::CONCAT:
		        	    case self::CONCAT_WS:
		        	    case self::CONNECTION_ID:
		        	    case self::CONV:
		        	    case self::CONVERT_TZ:
		        	    case self::COS:
		        	    case self::COT:
		        	    case self::CRC32:
		        	    case self::CREATE_ASYMMETRIC_PRIV_KEY:
		        	    case self::CREATE_ASYMMETRIC_PUB_KEY:
		        	    case self::CREATE_DH_PARAMETERS:
		        	    case self::CREATE_DIGEST:
		        	    case self::CROSSES:
		        	    case self::DATEDIFF:
		        	    case self::DATE_FORMAT:
		        	    case self::DAYNAME:
		        	    case self::DAYOFMONTH:
		        	    case self::DAYOFWEEK:
		        	    case self::DAYOFYEAR:
		        	    case self::DECODE:
		        	    case self::DEGREES:
		        	    case self::DES_DECRYPT:
		        	    case self::DES_ENCRYPT:
		        	    case self::DIMENSION:
		        	    case self::DISJOINT:
		        	    case self::ELT:
		        	    case self::ENCODE:
		        	    case self::ENCRYPT:
		        	    case self::ENDPOINT:
		        	    case self::ENGINE_ATTRIBUTE:
		        	    case self::ENVELOPE:
		        	    case self::EQUALS:
		        	    case self::EXP:
		        	    case self::EXPORT_SET:
		        	    case self::EXTERIORRING:
		        	    case self::EXTRACTVALUE:
		        	    case self::FIELD:
		        	    case self::FIND_IN_SET:
		        	    case self::FLOOR:
		        	    case self::FORMAT:
		        	    case self::FOUND_ROWS:
		        	    case self::FROM_BASE64:
		        	    case self::FROM_DAYS:
		        	    case self::FROM_UNIXTIME:
		        	    case self::GEOMCOLLFROMTEXT:
		        	    case self::GEOMCOLLFROMWKB:
		        	    case self::GEOMETRYCOLLECTIONFROMTEXT:
		        	    case self::GEOMETRYCOLLECTIONFROMWKB:
		        	    case self::GEOMETRYFROMTEXT:
		        	    case self::GEOMETRYFROMWKB:
		        	    case self::GEOMETRYN:
		        	    case self::GEOMETRYTYPE:
		        	    case self::GEOMFROMTEXT:
		        	    case self::GEOMFROMWKB:
		        	    case self::GET_FORMAT:
		        	    case self::GET_LOCK:
		        	    case self::GLENGTH:
		        	    case self::GREATEST:
		        	    case self::GTID_SUBSET:
		        	    case self::GTID_SUBTRACT:
		        	    case self::HEX:
		        	    case self::IFNULL:
		        	    case self::INET6_ATON:
		        	    case self::INET6_NTOA:
		        	    case self::INET_ATON:
		        	    case self::INET_NTOA:
		        	    case self::INSTR:
		        	    case self::INTERIORRINGN:
		        	    case self::INTERSECTS:
		        	    case self::ISCLOSED:
		        	    case self::ISEMPTY:
		        	    case self::ISNULL:
		        	    case self::ISSIMPLE:
		        	    case self::IS_FREE_LOCK:
		        	    case self::IS_IPV4:
		        	    case self::IS_IPV4_COMPAT:
		        	    case self::IS_IPV4_MAPPED:
		        	    case self::IS_IPV6:
		        	    case self::IS_USED_LOCK:
		        	    case self::LAST_INSERT_ID:
		        	    case self::LCASE:
		        	    case self::LEAST:
		        	    case self::LENGTH:
		        	    case self::LINEFROMTEXT:
		        	    case self::LINEFROMWKB:
		        	    case self::LINESTRINGFROMTEXT:
		        	    case self::LINESTRINGFROMWKB:
		        	    case self::LN:
		        	    case self::LOAD_FILE:
		        	    case self::LOCATE:
		        	    case self::LOG:
		        	    case self::LOG10:
		        	    case self::LOG2:
		        	    case self::LOWER:
		        	    case self::LPAD:
		        	    case self::LTRIM:
		        	    case self::MAKEDATE:
		        	    case self::MAKETIME:
		        	    case self::MAKE_SET:
		        	    case self::MASTER_POS_WAIT:
		        	    case self::MBRCONTAINS:
		        	    case self::MBRDISJOINT:
		        	    case self::MBREQUAL:
		        	    case self::MBRINTERSECTS:
		        	    case self::MBROVERLAPS:
		        	    case self::MBRTOUCHES:
		        	    case self::MBRWITHIN:
		        	    case self::MD5:
		        	    case self::MLINEFROMTEXT:
		        	    case self::MLINEFROMWKB:
		        	    case self::MONTHNAME:
		        	    case self::MPOINTFROMTEXT:
		        	    case self::MPOINTFROMWKB:
		        	    case self::MPOLYFROMTEXT:
		        	    case self::MPOLYFROMWKB:
		        	    case self::MULTILINESTRINGFROMTEXT:
		        	    case self::MULTILINESTRINGFROMWKB:
		        	    case self::MULTIPOINTFROMTEXT:
		        	    case self::MULTIPOINTFROMWKB:
		        	    case self::MULTIPOLYGONFROMTEXT:
		        	    case self::MULTIPOLYGONFROMWKB:
		        	    case self::NAME_CONST:
		        	    case self::NULLIF:
		        	    case self::NUMGEOMETRIES:
		        	    case self::NUMINTERIORRINGS:
		        	    case self::NUMPOINTS:
		        	    case self::OCT:
		        	    case self::OCTET_LENGTH:
		        	    case self::ORD:
		        	    case self::OVERLAPS:
		        	    case self::PERIOD_ADD:
		        	    case self::PERIOD_DIFF:
		        	    case self::PI:
		        	    case self::POINTFROMTEXT:
		        	    case self::POINTFROMWKB:
		        	    case self::POINTN:
		        	    case self::POLYFROMTEXT:
		        	    case self::POLYFROMWKB:
		        	    case self::POLYGONFROMTEXT:
		        	    case self::POLYGONFROMWKB:
		        	    case self::POW:
		        	    case self::POWER:
		        	    case self::QUOTE:
		        	    case self::RADIANS:
		        	    case self::RAND:
		        	    case self::RANDOM:
		        	    case self::RANDOM_BYTES:
		        	    case self::RELEASE_LOCK:
		        	    case self::REVERSE:
		        	    case self::ROUND:
		        	    case self::ROW_COUNT:
		        	    case self::RPAD:
		        	    case self::RTRIM:
		        	    case self::SEC_TO_TIME:
		        	    case self::SECONDARY_ENGINE_ATTRIBUTE:
		        	    case self::SESSION_USER:
		        	    case self::SHA:
		        	    case self::SHA1:
		        	    case self::SHA2:
		        	    case self::SCHEMA_NAME:
		        	    case self::SIGN:
		        	    case self::SIN:
		        	    case self::SLEEP:
		        	    case self::SOUNDEX:
		        	    case self::SQL_THREAD_WAIT_AFTER_GTIDS:
		        	    case self::SQRT:
		        	    case self::SRID:
		        	    case self::STARTPOINT:
		        	    case self::STRCMP:
		        	    case self::STR_TO_DATE:
		        	    case self::ST_AREA:
		        	    case self::ST_ASBINARY:
		        	    case self::ST_ASTEXT:
		        	    case self::ST_ASWKB:
		        	    case self::ST_ASWKT:
		        	    case self::ST_BUFFER:
		        	    case self::ST_CENTROID:
		        	    case self::ST_CONTAINS:
		        	    case self::ST_CROSSES:
		        	    case self::ST_DIFFERENCE:
		        	    case self::ST_DIMENSION:
		        	    case self::ST_DISJOINT:
		        	    case self::ST_DISTANCE:
		        	    case self::ST_ENDPOINT:
		        	    case self::ST_ENVELOPE:
		        	    case self::ST_EQUALS:
		        	    case self::ST_EXTERIORRING:
		        	    case self::ST_GEOMCOLLFROMTEXT:
		        	    case self::ST_GEOMCOLLFROMTXT:
		        	    case self::ST_GEOMCOLLFROMWKB:
		        	    case self::ST_GEOMETRYCOLLECTIONFROMTEXT:
		        	    case self::ST_GEOMETRYCOLLECTIONFROMWKB:
		        	    case self::ST_GEOMETRYFROMTEXT:
		        	    case self::ST_GEOMETRYFROMWKB:
		        	    case self::ST_GEOMETRYN:
		        	    case self::ST_GEOMETRYTYPE:
		        	    case self::ST_GEOMFROMTEXT:
		        	    case self::ST_GEOMFROMWKB:
		        	    case self::ST_INTERIORRINGN:
		        	    case self::ST_INTERSECTION:
		        	    case self::ST_INTERSECTS:
		        	    case self::ST_ISCLOSED:
		        	    case self::ST_ISEMPTY:
		        	    case self::ST_ISSIMPLE:
		        	    case self::ST_LINEFROMTEXT:
		        	    case self::ST_LINEFROMWKB:
		        	    case self::ST_LINESTRINGFROMTEXT:
		        	    case self::ST_LINESTRINGFROMWKB:
		        	    case self::ST_NUMGEOMETRIES:
		        	    case self::ST_NUMINTERIORRING:
		        	    case self::ST_NUMINTERIORRINGS:
		        	    case self::ST_NUMPOINTS:
		        	    case self::ST_OVERLAPS:
		        	    case self::ST_POINTFROMTEXT:
		        	    case self::ST_POINTFROMWKB:
		        	    case self::ST_POINTN:
		        	    case self::ST_POLYFROMTEXT:
		        	    case self::ST_POLYFROMWKB:
		        	    case self::ST_POLYGONFROMTEXT:
		        	    case self::ST_POLYGONFROMWKB:
		        	    case self::ST_SRID:
		        	    case self::ST_STARTPOINT:
		        	    case self::ST_SYMDIFFERENCE:
		        	    case self::ST_TOUCHES:
		        	    case self::ST_UNION:
		        	    case self::ST_WITHIN:
		        	    case self::ST_X:
		        	    case self::ST_Y:
		        	    case self::SUBDATE:
		        	    case self::SUBSTRING_INDEX:
		        	    case self::SUBTIME:
		        	    case self::SYSTEM_USER:
		        	    case self::TAN:
		        	    case self::TIMEDIFF:
		        	    case self::TIMESTAMPADD:
		        	    case self::TIMESTAMPDIFF:
		        	    case self::TIME_FORMAT:
		        	    case self::TIME_TO_SEC:
		        	    case self::TOUCHES:
		        	    case self::TO_BASE64:
		        	    case self::TO_DAYS:
		        	    case self::TO_SECONDS:
		        	    case self::TP_CONNECTION_ADMIN:
		        	    case self::UCASE:
		        	    case self::UNCOMPRESS:
		        	    case self::UNCOMPRESSED_LENGTH:
		        	    case self::UNHEX:
		        	    case self::UNIX_TIMESTAMP:
		        	    case self::UPDATEXML:
		        	    case self::UPPER:
		        	    case self::UUID:
		        	    case self::UUID_SHORT:
		        	    case self::VALIDATE_PASSWORD_STRENGTH:
		        	    case self::VERSION:
		        	    case self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
		        	    case self::WEEKDAY:
		        	    case self::WEEKOFYEAR:
		        	    case self::WEIGHT_STRING:
		        	    case self::WITHIN:
		        	    case self::YEARWEEK:
		        	    case self::Y_FUNCTION:
		        	    case self::X_FUNCTION:
		        	    case self::MOD:
		        	    case self::CHARSET_REVERSE_QOUTE_STRING:
		        	    case self::STRING_LITERAL:
		        	    case self::ID:
		        	    	$this->setState(5996);
		        	    	$this->uidList();
		        	    	break;

		        	    case self::ALL:
		        	    	$this->setState(5997);
		        	    	$this->match(self::ALL);
		        	    	break;

		        	default:
		        		throw new NoViableAltException($this);
		        	}
		        	$this->setState(6000);
		        	$this->match(self::RR_BRACKET);
		        }
		        $this->setState(6003);
		        $this->match(self::IN);
		        $this->setState(6004);
		        $localContext->schema = $this->uid();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function flushStatement(): Context\FlushStatementContext
		{
		    $localContext = new Context\FlushStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 508, self::RULE_flushStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(6006);
		        $this->match(self::FLUSH);
		        $this->setState(6008);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::NO_WRITE_TO_BINLOG || $_la === self::LOCAL) {
		        	$this->setState(6007);

		        	$localContext->flushFormat = $this->input->LT(1);
		        	$_la = $this->input->LA(1);

		        	if (!($_la === self::NO_WRITE_TO_BINLOG || $_la === self::LOCAL)) {
		        		    $localContext->flushFormat = $this->errorHandler->recoverInline($this);
		        	} else {
		        		if ($this->input->LA(1) === Token::EOF) {
		        		    $this->matchedEOF = true;
		        	    }

		        		$this->errorHandler->reportMatch($this);
		        		$this->consume();
		        	}
		        }
		        $this->setState(6010);
		        $this->flushOption();
		        $this->setState(6015);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::COMMA) {
		        	$this->setState(6011);
		        	$this->match(self::COMMA);
		        	$this->setState(6012);
		        	$this->flushOption();
		        	$this->setState(6017);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function killStatement(): Context\KillStatementContext
		{
		    $localContext = new Context\KillStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 510, self::RULE_killStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(6018);
		        $this->match(self::KILL);
		        $this->setState(6020);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 875, $this->ctx)) {
		            case 1:
		        	    $this->setState(6019);

		        	    $localContext->connectionFormat = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::CONNECTION || $_la === self::QUERY)) {
		        	    	    $localContext->connectionFormat = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	break;
		        }
		        $this->setState(6022);
		        $this->recursiveExpression(0);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function loadIndexIntoCache(): Context\LoadIndexIntoCacheContext
		{
		    $localContext = new Context\LoadIndexIntoCacheContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 512, self::RULE_loadIndexIntoCache);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(6024);
		        $this->match(self::LOAD);
		        $this->setState(6025);
		        $this->match(self::INDEX);
		        $this->setState(6026);
		        $this->match(self::INTO);
		        $this->setState(6027);
		        $this->match(self::CACHE);
		        $this->setState(6028);
		        $this->loadedTableIndexes();
		        $this->setState(6033);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::COMMA) {
		        	$this->setState(6029);
		        	$this->match(self::COMMA);
		        	$this->setState(6030);
		        	$this->loadedTableIndexes();
		        	$this->setState(6035);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function resetStatement(): Context\ResetStatementContext
		{
		    $localContext = new Context\ResetStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 514, self::RULE_resetStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(6036);
		        $this->match(self::RESET);
		        $this->setState(6037);
		        $this->match(self::QUERY);
		        $this->setState(6038);
		        $this->match(self::CACHE);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function shutdownStatement(): Context\ShutdownStatementContext
		{
		    $localContext = new Context\ShutdownStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 516, self::RULE_shutdownStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(6040);
		        $this->match(self::SHUTDOWN);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function tableIndexes(): Context\TableIndexesContext
		{
		    $localContext = new Context\TableIndexesContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 518, self::RULE_tableIndexes);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(6042);
		        $this->tableName();
		        $this->setState(6050);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::INDEX || $_la === self::KEY || $_la === self::LR_BRACKET) {
		        	$this->setState(6044);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);

		        	if ($_la === self::INDEX || $_la === self::KEY) {
		        		$this->setState(6043);

		        		$localContext->indexFormat = $this->input->LT(1);
		        		$_la = $this->input->LA(1);

		        		if (!($_la === self::INDEX || $_la === self::KEY)) {
		        			    $localContext->indexFormat = $this->errorHandler->recoverInline($this);
		        		} else {
		        			if ($this->input->LA(1) === Token::EOF) {
		        			    $this->matchedEOF = true;
		        		    }

		        			$this->errorHandler->reportMatch($this);
		        			$this->consume();
		        		}
		        	}
		        	$this->setState(6046);
		        	$this->match(self::LR_BRACKET);
		        	$this->setState(6047);
		        	$this->uidList();
		        	$this->setState(6048);
		        	$this->match(self::RR_BRACKET);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function flushOption(): Context\FlushOptionContext
		{
		    $localContext = new Context\FlushOptionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 520, self::RULE_flushOption);

		    try {
		        $this->setState(6084);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 885, $this->ctx)) {
		        	case 1:
		        	    $localContext = new Context\SimpleFlushOptionContext($localContext);
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(6070);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->input->LA(1)) {
		        	        case self::DES_KEY_FILE:
		        	        	$this->setState(6052);
		        	        	$this->match(self::DES_KEY_FILE);
		        	        	break;

		        	        case self::HOSTS:
		        	        	$this->setState(6053);
		        	        	$this->match(self::HOSTS);
		        	        	break;

		        	        case self::BINARY:
		        	        case self::ENGINE:
		        	        case self::ERROR:
		        	        case self::GENERAL:
		        	        case self::LOGS:
		        	        case self::RELAY:
		        	        case self::SLOW:
		        	        	$this->setState(6055);
		        	        	$this->errorHandler->sync($this);
		        	        	$_la = $this->input->LA(1);

		        	        	if ($_la === self::BINARY || (((($_la - 409)) & ~0x3f) === 0 && ((1 << ($_la - 409)) & 536870917) !== 0) || $_la === self::RELAY || $_la === self::SLOW) {
		        	        		$this->setState(6054);

		        	        		$_la = $this->input->LA(1);

		        	        		if (!($_la === self::BINARY || (((($_la - 409)) & ~0x3f) === 0 && ((1 << ($_la - 409)) & 536870917) !== 0) || $_la === self::RELAY || $_la === self::SLOW)) {
		        	        		$this->errorHandler->recoverInline($this);
		        	        		} else {
		        	        			if ($this->input->LA(1) === Token::EOF) {
		        	        			    $this->matchedEOF = true;
		        	        		    }

		        	        			$this->errorHandler->reportMatch($this);
		        	        			$this->consume();
		        	        		}
		        	        	}
		        	        	$this->setState(6057);
		        	        	$this->match(self::LOGS);
		        	        	break;

		        	        case self::OPTIMIZER_COSTS:
		        	        	$this->setState(6058);
		        	        	$this->match(self::OPTIMIZER_COSTS);
		        	        	break;

		        	        case self::PRIVILEGES:
		        	        	$this->setState(6059);
		        	        	$this->match(self::PRIVILEGES);
		        	        	break;

		        	        case self::QUERY:
		        	        	$this->setState(6060);
		        	        	$this->match(self::QUERY);
		        	        	$this->setState(6061);
		        	        	$this->match(self::CACHE);
		        	        	break;

		        	        case self::STATUS:
		        	        	$this->setState(6062);
		        	        	$this->match(self::STATUS);
		        	        	break;

		        	        case self::USER_RESOURCES:
		        	        	$this->setState(6063);
		        	        	$this->match(self::USER_RESOURCES);
		        	        	break;

		        	        case self::TABLES:
		        	        	$this->setState(6064);
		        	        	$this->match(self::TABLES);
		        	        	$this->setState(6068);
		        	        	$this->errorHandler->sync($this);

		        	        	switch ($this->getInterpreter()->adaptivePredict($this->input, 880, $this->ctx)) {
		        	        	    case 1:
		        	        		    $this->setState(6065);
		        	        		    $this->match(self::WITH);
		        	        		    $this->setState(6066);
		        	        		    $this->match(self::READ);
		        	        		    $this->setState(6067);
		        	        		    $this->match(self::LOCK);
		        	        		break;
		        	        	}
		        	        	break;

		        	    default:
		        	    	throw new NoViableAltException($this);
		        	    }
		        	break;

		        	case 2:
		        	    $localContext = new Context\ChannelFlushOptionContext($localContext);
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(6072);
		        	    $this->match(self::RELAY);
		        	    $this->setState(6073);
		        	    $this->match(self::LOGS);
		        	    $this->setState(6075);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::FOR) {
		        	    	$this->setState(6074);
		        	    	$this->channelOption();
		        	    }
		        	break;

		        	case 3:
		        	    $localContext = new Context\TableFlushOptionContext($localContext);
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(6077);

		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::TABLE || $_la === self::TABLES)) {
		        	    $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	    $this->setState(6079);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 883, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(6078);
		        	    	    $this->tables();
		        	    	break;
		        	    }
		        	    $this->setState(6082);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 884, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(6081);
		        	    	    $this->flushTableOption();
		        	    	break;
		        	    }
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function flushTableOption(): Context\FlushTableOptionContext
		{
		    $localContext = new Context\FlushTableOptionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 522, self::RULE_flushTableOption);

		    try {
		        $this->setState(6091);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::WITH:
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(6086);
		            	$this->match(self::WITH);
		            	$this->setState(6087);
		            	$this->match(self::READ);
		            	$this->setState(6088);
		            	$this->match(self::LOCK);
		            	break;

		            case self::FOR:
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(6089);
		            	$this->match(self::FOR);
		            	$this->setState(6090);
		            	$this->match(self::EXPORT);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function loadedTableIndexes(): Context\LoadedTableIndexesContext
		{
		    $localContext = new Context\LoadedTableIndexesContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 524, self::RULE_loadedTableIndexes);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(6093);
		        $this->tableName();
		        $this->setState(6101);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::PARTITION) {
		        	$this->setState(6094);
		        	$this->match(self::PARTITION);
		        	$this->setState(6095);
		        	$this->match(self::LR_BRACKET);
		        	$this->setState(6098);
		        	$this->errorHandler->sync($this);

		        	switch ($this->input->LA(1)) {
		        	    case self::ARRAY:
		        	    case self::ATTRIBUTE:
		        	    case self::BUCKETS:
		        	    case self::CONDITION:
		        	    case self::CURRENT:
		        	    case self::CURRENT_USER:
		        	    case self::DATABASE:
		        	    case self::DEFAULT:
		        	    case self::DIAGNOSTICS:
		        	    case self::EMPTY:
		        	    case self::ENFORCED:
		        	    case self::EXCEPT:
		        	    case self::GROUP:
		        	    case self::IF:
		        	    case self::IGNORED:
		        	    case self::INSERT:
		        	    case self::LATERAL:
		        	    case self::LEFT:
		        	    case self::NUMBER:
		        	    case self::OPTIONAL:
		        	    case self::ORDER:
		        	    case self::PRIMARY:
		        	    case self::REPEAT:
		        	    case self::REPLACE:
		        	    case self::RIGHT:
		        	    case self::SCHEMA:
		        	    case self::SKIP_QUERY_REWRITE:
		        	    case self::STACKED:
		        	    case self::DATE:
		        	    case self::TIME:
		        	    case self::TIMESTAMP:
		        	    case self::DATETIME:
		        	    case self::YEAR:
		        	    case self::BINARY:
		        	    case self::TEXT:
		        	    case self::ENUM:
		        	    case self::SERIAL:
		        	    case self::JSON_ARRAY:
		        	    case self::JSON_ARRAYAGG:
		        	    case self::JSON_ARRAY_APPEND:
		        	    case self::JSON_ARRAY_INSERT:
		        	    case self::JSON_CONTAINS:
		        	    case self::JSON_CONTAINS_PATH:
		        	    case self::JSON_DEPTH:
		        	    case self::JSON_EXTRACT:
		        	    case self::JSON_INSERT:
		        	    case self::JSON_KEYS:
		        	    case self::JSON_LENGTH:
		        	    case self::JSON_MERGE:
		        	    case self::JSON_MERGE_PATCH:
		        	    case self::JSON_MERGE_PRESERVE:
		        	    case self::JSON_OBJECT:
		        	    case self::JSON_OBJECTAGG:
		        	    case self::JSON_OVERLAPS:
		        	    case self::JSON_PRETTY:
		        	    case self::JSON_QUOTE:
		        	    case self::JSON_REMOVE:
		        	    case self::JSON_REPLACE:
		        	    case self::JSON_SCHEMA_VALID:
		        	    case self::JSON_SCHEMA_VALIDATION_REPORT:
		        	    case self::JSON_SEARCH:
		        	    case self::JSON_SET:
		        	    case self::JSON_STORAGE_FREE:
		        	    case self::JSON_STORAGE_SIZE:
		        	    case self::JSON_TABLE:
		        	    case self::JSON_TYPE:
		        	    case self::JSON_UNQUOTE:
		        	    case self::JSON_VALID:
		        	    case self::JSON_VALUE:
		        	    case self::NESTED:
		        	    case self::ORDINALITY:
		        	    case self::PATH:
		        	    case self::AVG:
		        	    case self::BIT_AND:
		        	    case self::BIT_OR:
		        	    case self::BIT_XOR:
		        	    case self::COUNT:
		        	    case self::CUME_DIST:
		        	    case self::DENSE_RANK:
		        	    case self::FIRST_VALUE:
		        	    case self::GROUP_CONCAT:
		        	    case self::LAG:
		        	    case self::LAST_VALUE:
		        	    case self::LEAD:
		        	    case self::MAX:
		        	    case self::MIN:
		        	    case self::NTILE:
		        	    case self::NTH_VALUE:
		        	    case self::PERCENT_RANK:
		        	    case self::RANK:
		        	    case self::ROW_NUMBER:
		        	    case self::STD:
		        	    case self::STDDEV:
		        	    case self::STDDEV_POP:
		        	    case self::STDDEV_SAMP:
		        	    case self::SUM:
		        	    case self::VAR_POP:
		        	    case self::VAR_SAMP:
		        	    case self::VARIANCE:
		        	    case self::CURRENT_DATE:
		        	    case self::CURRENT_TIME:
		        	    case self::CURRENT_TIMESTAMP:
		        	    case self::LOCALTIME:
		        	    case self::CURDATE:
		        	    case self::CURTIME:
		        	    case self::DATE_ADD:
		        	    case self::DATE_SUB:
		        	    case self::LOCALTIMESTAMP:
		        	    case self::NOW:
		        	    case self::POSITION:
		        	    case self::SUBSTR:
		        	    case self::SUBSTRING:
		        	    case self::SYSDATE:
		        	    case self::TRIM:
		        	    case self::UTC_DATE:
		        	    case self::UTC_TIME:
		        	    case self::UTC_TIMESTAMP:
		        	    case self::ACCOUNT:
		        	    case self::ACTION:
		        	    case self::AFTER:
		        	    case self::AGGREGATE:
		        	    case self::ALGORITHM:
		        	    case self::ANY:
		        	    case self::AT:
		        	    case self::AUTHORS:
		        	    case self::AUTOCOMMIT:
		        	    case self::AUTOEXTEND_SIZE:
		        	    case self::AUTO_INCREMENT:
		        	    case self::AVG_ROW_LENGTH:
		        	    case self::BEGIN:
		        	    case self::BINLOG:
		        	    case self::BIT:
		        	    case self::BLOCK:
		        	    case self::BOOL:
		        	    case self::BOOLEAN:
		        	    case self::BTREE:
		        	    case self::CACHE:
		        	    case self::CASCADED:
		        	    case self::CHAIN:
		        	    case self::CHANGED:
		        	    case self::CHANNEL:
		        	    case self::CHECKSUM:
		        	    case self::PAGE_CHECKSUM:
		        	    case self::CIPHER:
		        	    case self::CLASS_ORIGIN:
		        	    case self::CLIENT:
		        	    case self::CLOSE:
		        	    case self::CLUSTERING:
		        	    case self::COALESCE:
		        	    case self::CODE:
		        	    case self::COLUMNS:
		        	    case self::COLUMN_FORMAT:
		        	    case self::COLUMN_NAME:
		        	    case self::COMMENT:
		        	    case self::COMMIT:
		        	    case self::COMPACT:
		        	    case self::COMPLETION:
		        	    case self::COMPRESSED:
		        	    case self::COMPRESSION:
		        	    case self::CONCURRENT:
		        	    case self::CONNECT:
		        	    case self::CONNECTION:
		        	    case self::CONSISTENT:
		        	    case self::CONSTRAINT_CATALOG:
		        	    case self::CONSTRAINT_SCHEMA:
		        	    case self::CONSTRAINT_NAME:
		        	    case self::CONTAINS:
		        	    case self::CONTEXT:
		        	    case self::CONTRIBUTORS:
		        	    case self::COPY:
		        	    case self::CPU:
		        	    case self::CURSOR_NAME:
		        	    case self::DATA:
		        	    case self::DATAFILE:
		        	    case self::DEALLOCATE:
		        	    case self::DEFAULT_AUTH:
		        	    case self::DEFINER:
		        	    case self::DELAY_KEY_WRITE:
		        	    case self::DES_KEY_FILE:
		        	    case self::DIRECTORY:
		        	    case self::DISABLE:
		        	    case self::DISCARD:
		        	    case self::DISK:
		        	    case self::DO:
		        	    case self::DUMPFILE:
		        	    case self::DUPLICATE:
		        	    case self::DYNAMIC:
		        	    case self::ENABLE:
		        	    case self::ENCRYPTION:
		        	    case self::END:
		        	    case self::ENDS:
		        	    case self::ENGINE:
		        	    case self::ENGINES:
		        	    case self::ERROR:
		        	    case self::ERRORS:
		        	    case self::ESCAPE:
		        	    case self::EVEN:
		        	    case self::EVENT:
		        	    case self::EVENTS:
		        	    case self::EVERY:
		        	    case self::EXCHANGE:
		        	    case self::EXCLUSIVE:
		        	    case self::EXPIRE:
		        	    case self::EXPORT:
		        	    case self::EXTENDED:
		        	    case self::EXTENT_SIZE:
		        	    case self::FAILED_LOGIN_ATTEMPTS:
		        	    case self::FAST:
		        	    case self::FAULTS:
		        	    case self::FIELDS:
		        	    case self::FILE_BLOCK_SIZE:
		        	    case self::FILTER:
		        	    case self::FIRST:
		        	    case self::FIXED:
		        	    case self::FLUSH:
		        	    case self::FOLLOWS:
		        	    case self::FOUND:
		        	    case self::FULL:
		        	    case self::FUNCTION:
		        	    case self::GENERAL:
		        	    case self::GLOBAL:
		        	    case self::GRANTS:
		        	    case self::GROUP_REPLICATION:
		        	    case self::HANDLER:
		        	    case self::HASH:
		        	    case self::HELP:
		        	    case self::HISTORY:
		        	    case self::HOST:
		        	    case self::HOSTS:
		        	    case self::IDENTIFIED:
		        	    case self::IGNORE_SERVER_IDS:
		        	    case self::IMPORT:
		        	    case self::INDEXES:
		        	    case self::INITIAL_SIZE:
		        	    case self::INPLACE:
		        	    case self::INSERT_METHOD:
		        	    case self::INSTALL:
		        	    case self::INSTANCE:
		        	    case self::INSTANT:
		        	    case self::INVISIBLE:
		        	    case self::INVOKER:
		        	    case self::IO:
		        	    case self::IO_THREAD:
		        	    case self::IPC:
		        	    case self::ISOLATION:
		        	    case self::ISSUER:
		        	    case self::JSON:
		        	    case self::KEY_BLOCK_SIZE:
		        	    case self::LANGUAGE:
		        	    case self::LAST:
		        	    case self::LEAVES:
		        	    case self::LESS:
		        	    case self::LEVEL:
		        	    case self::LIST:
		        	    case self::LOCAL:
		        	    case self::LOGFILE:
		        	    case self::LOGS:
		        	    case self::MASTER:
		        	    case self::MASTER_AUTO_POSITION:
		        	    case self::MASTER_CONNECT_RETRY:
		        	    case self::MASTER_DELAY:
		        	    case self::MASTER_HEARTBEAT_PERIOD:
		        	    case self::MASTER_HOST:
		        	    case self::MASTER_LOG_FILE:
		        	    case self::MASTER_LOG_POS:
		        	    case self::MASTER_PASSWORD:
		        	    case self::MASTER_PORT:
		        	    case self::MASTER_RETRY_COUNT:
		        	    case self::MASTER_SSL:
		        	    case self::MASTER_SSL_CA:
		        	    case self::MASTER_SSL_CAPATH:
		        	    case self::MASTER_SSL_CERT:
		        	    case self::MASTER_SSL_CIPHER:
		        	    case self::MASTER_SSL_CRL:
		        	    case self::MASTER_SSL_CRLPATH:
		        	    case self::MASTER_SSL_KEY:
		        	    case self::MASTER_TLS_VERSION:
		        	    case self::MASTER_USER:
		        	    case self::MAX_CONNECTIONS_PER_HOUR:
		        	    case self::MAX_QUERIES_PER_HOUR:
		        	    case self::MAX_ROWS:
		        	    case self::MAX_SIZE:
		        	    case self::MAX_UPDATES_PER_HOUR:
		        	    case self::MAX_USER_CONNECTIONS:
		        	    case self::MEDIUM:
		        	    case self::MEMBER:
		        	    case self::MERGE:
		        	    case self::MESSAGE_TEXT:
		        	    case self::MID:
		        	    case self::MIGRATE:
		        	    case self::MIN_ROWS:
		        	    case self::MODE:
		        	    case self::MODIFY:
		        	    case self::MUTEX:
		        	    case self::MYSQL:
		        	    case self::MYSQL_ERRNO:
		        	    case self::NAME:
		        	    case self::NAMES:
		        	    case self::NCHAR:
		        	    case self::NEVER:
		        	    case self::NEXT:
		        	    case self::NO:
		        	    case self::NOCOPY:
		        	    case self::NOWAIT:
		        	    case self::NODEGROUP:
		        	    case self::NONE:
		        	    case self::ODBC:
		        	    case self::OFFLINE:
		        	    case self::OFFSET:
		        	    case self::OF:
		        	    case self::OJ:
		        	    case self::OLD_PASSWORD:
		        	    case self::ONE:
		        	    case self::ONLINE:
		        	    case self::ONLY:
		        	    case self::OPEN:
		        	    case self::OPTIMIZER_COSTS:
		        	    case self::OPTIONS:
		        	    case self::OWNER:
		        	    case self::PACK_KEYS:
		        	    case self::PAGE:
		        	    case self::PARSER:
		        	    case self::PARTIAL:
		        	    case self::PARTITIONING:
		        	    case self::PARTITIONS:
		        	    case self::PASSWORD:
		        	    case self::PASSWORD_LOCK_TIME:
		        	    case self::PHASE:
		        	    case self::PLUGIN:
		        	    case self::PLUGIN_DIR:
		        	    case self::PLUGINS:
		        	    case self::PORT:
		        	    case self::PRECEDES:
		        	    case self::PREPARE:
		        	    case self::PRESERVE:
		        	    case self::PREV:
		        	    case self::PROCESSLIST:
		        	    case self::PROFILE:
		        	    case self::PROFILES:
		        	    case self::PROXY:
		        	    case self::QUERY:
		        	    case self::QUICK:
		        	    case self::REBUILD:
		        	    case self::RECOVER:
		        	    case self::RECURSIVE:
		        	    case self::REDO_BUFFER_SIZE:
		        	    case self::REDUNDANT:
		        	    case self::RELAY:
		        	    case self::RELAY_LOG_FILE:
		        	    case self::RELAY_LOG_POS:
		        	    case self::RELAYLOG:
		        	    case self::REMOVE:
		        	    case self::REORGANIZE:
		        	    case self::REPAIR:
		        	    case self::REPLICATE_DO_DB:
		        	    case self::REPLICATE_DO_TABLE:
		        	    case self::REPLICATE_IGNORE_DB:
		        	    case self::REPLICATE_IGNORE_TABLE:
		        	    case self::REPLICATE_REWRITE_DB:
		        	    case self::REPLICATE_WILD_DO_TABLE:
		        	    case self::REPLICATE_WILD_IGNORE_TABLE:
		        	    case self::REPLICATION:
		        	    case self::RESET:
		        	    case self::RESUME:
		        	    case self::RETURNED_SQLSTATE:
		        	    case self::RETURNS:
		        	    case self::REUSE:
		        	    case self::ROLE:
		        	    case self::ROLLBACK:
		        	    case self::ROLLUP:
		        	    case self::ROTATE:
		        	    case self::ROW:
		        	    case self::ROWS:
		        	    case self::ROW_FORMAT:
		        	    case self::RTREE:
		        	    case self::SAVEPOINT:
		        	    case self::SCHEDULE:
		        	    case self::SECURITY:
		        	    case self::SERVER:
		        	    case self::SESSION:
		        	    case self::SHARE:
		        	    case self::SHARED:
		        	    case self::SIGNED:
		        	    case self::SIMPLE:
		        	    case self::SLAVE:
		        	    case self::SLOW:
		        	    case self::SNAPSHOT:
		        	    case self::SOCKET:
		        	    case self::SOME:
		        	    case self::SONAME:
		        	    case self::SOUNDS:
		        	    case self::SOURCE:
		        	    case self::SQL_AFTER_GTIDS:
		        	    case self::SQL_AFTER_MTS_GAPS:
		        	    case self::SQL_BEFORE_GTIDS:
		        	    case self::SQL_BUFFER_RESULT:
		        	    case self::SQL_CACHE:
		        	    case self::SQL_NO_CACHE:
		        	    case self::SQL_THREAD:
		        	    case self::START:
		        	    case self::STARTS:
		        	    case self::STATS_AUTO_RECALC:
		        	    case self::STATS_PERSISTENT:
		        	    case self::STATS_SAMPLE_PAGES:
		        	    case self::STATUS:
		        	    case self::STOP:
		        	    case self::STORAGE:
		        	    case self::STRING:
		        	    case self::SUBCLASS_ORIGIN:
		        	    case self::SUBJECT:
		        	    case self::SUBPARTITION:
		        	    case self::SUBPARTITIONS:
		        	    case self::SUSPEND:
		        	    case self::SWAPS:
		        	    case self::SWITCHES:
		        	    case self::TABLE_NAME:
		        	    case self::TABLESPACE:
		        	    case self::TABLE_TYPE:
		        	    case self::TEMPORARY:
		        	    case self::TEMPTABLE:
		        	    case self::THAN:
		        	    case self::TRADITIONAL:
		        	    case self::TRANSACTION:
		        	    case self::TRANSACTIONAL:
		        	    case self::TRIGGERS:
		        	    case self::TRUNCATE:
		        	    case self::UNBOUNDED:
		        	    case self::UNDEFINED:
		        	    case self::UNDOFILE:
		        	    case self::UNDO_BUFFER_SIZE:
		        	    case self::UNINSTALL:
		        	    case self::UNKNOWN:
		        	    case self::UNTIL:
		        	    case self::UPGRADE:
		        	    case self::USER:
		        	    case self::USE_FRM:
		        	    case self::USER_RESOURCES:
		        	    case self::VALIDATION:
		        	    case self::VALUE:
		        	    case self::VARIABLES:
		        	    case self::VIEW:
		        	    case self::VIRTUAL:
		        	    case self::VISIBLE:
		        	    case self::WAIT:
		        	    case self::WARNINGS:
		        	    case self::WITHOUT:
		        	    case self::WORK:
		        	    case self::WRAPPER:
		        	    case self::X509:
		        	    case self::XA:
		        	    case self::XML:
		        	    case self::EUR:
		        	    case self::USA:
		        	    case self::JIS:
		        	    case self::ISO:
		        	    case self::INTERNAL:
		        	    case self::QUARTER:
		        	    case self::MONTH:
		        	    case self::DAY:
		        	    case self::HOUR:
		        	    case self::MINUTE:
		        	    case self::WEEK:
		        	    case self::SECOND:
		        	    case self::MICROSECOND:
		        	    case self::ADMIN:
		        	    case self::AUDIT_ABORT_EXEMPT:
		        	    case self::AUDIT_ADMIN:
		        	    case self::AUTHENTICATION_POLICY_ADMIN:
		        	    case self::BACKUP_ADMIN:
		        	    case self::BINLOG_ADMIN:
		        	    case self::BINLOG_ENCRYPTION_ADMIN:
		        	    case self::CLONE_ADMIN:
		        	    case self::CONNECTION_ADMIN:
		        	    case self::ENCRYPTION_KEY_ADMIN:
		        	    case self::EXECUTE:
		        	    case self::FILE:
		        	    case self::FIREWALL_ADMIN:
		        	    case self::FIREWALL_EXEMPT:
		        	    case self::FIREWALL_USER:
		        	    case self::GROUP_REPLICATION_ADMIN:
		        	    case self::INNODB_REDO_LOG_ARCHIVE:
		        	    case self::INVOKE:
		        	    case self::LAMBDA:
		        	    case self::NDB_STORED_USER:
		        	    case self::PASSWORDLESS_USER_ADMIN:
		        	    case self::PERSIST_RO_VARIABLES_ADMIN:
		        	    case self::PRIVILEGES:
		        	    case self::PROCESS:
		        	    case self::RELOAD:
		        	    case self::REPLICATION_APPLIER:
		        	    case self::REPLICATION_SLAVE_ADMIN:
		        	    case self::RESOURCE_GROUP_ADMIN:
		        	    case self::RESOURCE_GROUP_USER:
		        	    case self::ROLE_ADMIN:
		        	    case self::ROUTINE:
		        	    case self::S3:
		        	    case self::SESSION_VARIABLES_ADMIN:
		        	    case self::SET_USER_ID:
		        	    case self::SHOW_ROUTINE:
		        	    case self::SHUTDOWN:
		        	    case self::SUPER:
		        	    case self::SYSTEM_VARIABLES_ADMIN:
		        	    case self::TABLES:
		        	    case self::TABLE_ENCRYPTION_ADMIN:
		        	    case self::VERSION_TOKEN_ADMIN:
		        	    case self::XA_RECOVER_ADMIN:
		        	    case self::ARMSCII8:
		        	    case self::ASCII:
		        	    case self::BIG5:
		        	    case self::CP1250:
		        	    case self::CP1251:
		        	    case self::CP1256:
		        	    case self::CP1257:
		        	    case self::CP850:
		        	    case self::CP852:
		        	    case self::CP866:
		        	    case self::CP932:
		        	    case self::DEC8:
		        	    case self::EUCJPMS:
		        	    case self::EUCKR:
		        	    case self::GB18030:
		        	    case self::GB2312:
		        	    case self::GBK:
		        	    case self::GEOSTD8:
		        	    case self::GREEK:
		        	    case self::HEBREW:
		        	    case self::HP8:
		        	    case self::KEYBCS2:
		        	    case self::KOI8R:
		        	    case self::KOI8U:
		        	    case self::LATIN1:
		        	    case self::LATIN2:
		        	    case self::LATIN5:
		        	    case self::LATIN7:
		        	    case self::MACCE:
		        	    case self::MACROMAN:
		        	    case self::SJIS:
		        	    case self::SWE7:
		        	    case self::TIS620:
		        	    case self::UCS2:
		        	    case self::UJIS:
		        	    case self::UTF16:
		        	    case self::UTF16LE:
		        	    case self::UTF32:
		        	    case self::UTF8:
		        	    case self::UTF8MB3:
		        	    case self::UTF8MB4:
		        	    case self::ARCHIVE:
		        	    case self::BLACKHOLE:
		        	    case self::CSV:
		        	    case self::FEDERATED:
		        	    case self::INNODB:
		        	    case self::MEMORY:
		        	    case self::MRG_MYISAM:
		        	    case self::MYISAM:
		        	    case self::NDB:
		        	    case self::NDBCLUSTER:
		        	    case self::PERFORMANCE_SCHEMA:
		        	    case self::TOKUDB:
		        	    case self::REPEATABLE:
		        	    case self::COMMITTED:
		        	    case self::UNCOMMITTED:
		        	    case self::SERIALIZABLE:
		        	    case self::GEOMETRYCOLLECTION:
		        	    case self::LINESTRING:
		        	    case self::MULTILINESTRING:
		        	    case self::MULTIPOINT:
		        	    case self::MULTIPOLYGON:
		        	    case self::POINT:
		        	    case self::POLYGON:
		        	    case self::ABS:
		        	    case self::ACOS:
		        	    case self::ADDDATE:
		        	    case self::ADDTIME:
		        	    case self::AES_DECRYPT:
		        	    case self::AES_ENCRYPT:
		        	    case self::AREA:
		        	    case self::ASBINARY:
		        	    case self::ASIN:
		        	    case self::ASTEXT:
		        	    case self::ASWKB:
		        	    case self::ASWKT:
		        	    case self::ASYMMETRIC_DECRYPT:
		        	    case self::ASYMMETRIC_DERIVE:
		        	    case self::ASYMMETRIC_ENCRYPT:
		        	    case self::ASYMMETRIC_SIGN:
		        	    case self::ASYMMETRIC_VERIFY:
		        	    case self::ATAN:
		        	    case self::ATAN2:
		        	    case self::BENCHMARK:
		        	    case self::BIN:
		        	    case self::BIT_COUNT:
		        	    case self::BIT_LENGTH:
		        	    case self::BUFFER:
		        	    case self::CATALOG_NAME:
		        	    case self::CEIL:
		        	    case self::CEILING:
		        	    case self::CENTROID:
		        	    case self::CHARACTER_LENGTH:
		        	    case self::CHARSET:
		        	    case self::CHAR_LENGTH:
		        	    case self::COERCIBILITY:
		        	    case self::COLLATION:
		        	    case self::COMPRESS:
		        	    case self::CONCAT:
		        	    case self::CONCAT_WS:
		        	    case self::CONNECTION_ID:
		        	    case self::CONV:
		        	    case self::CONVERT_TZ:
		        	    case self::COS:
		        	    case self::COT:
		        	    case self::CRC32:
		        	    case self::CREATE_ASYMMETRIC_PRIV_KEY:
		        	    case self::CREATE_ASYMMETRIC_PUB_KEY:
		        	    case self::CREATE_DH_PARAMETERS:
		        	    case self::CREATE_DIGEST:
		        	    case self::CROSSES:
		        	    case self::DATEDIFF:
		        	    case self::DATE_FORMAT:
		        	    case self::DAYNAME:
		        	    case self::DAYOFMONTH:
		        	    case self::DAYOFWEEK:
		        	    case self::DAYOFYEAR:
		        	    case self::DECODE:
		        	    case self::DEGREES:
		        	    case self::DES_DECRYPT:
		        	    case self::DES_ENCRYPT:
		        	    case self::DIMENSION:
		        	    case self::DISJOINT:
		        	    case self::ELT:
		        	    case self::ENCODE:
		        	    case self::ENCRYPT:
		        	    case self::ENDPOINT:
		        	    case self::ENGINE_ATTRIBUTE:
		        	    case self::ENVELOPE:
		        	    case self::EQUALS:
		        	    case self::EXP:
		        	    case self::EXPORT_SET:
		        	    case self::EXTERIORRING:
		        	    case self::EXTRACTVALUE:
		        	    case self::FIELD:
		        	    case self::FIND_IN_SET:
		        	    case self::FLOOR:
		        	    case self::FORMAT:
		        	    case self::FOUND_ROWS:
		        	    case self::FROM_BASE64:
		        	    case self::FROM_DAYS:
		        	    case self::FROM_UNIXTIME:
		        	    case self::GEOMCOLLFROMTEXT:
		        	    case self::GEOMCOLLFROMWKB:
		        	    case self::GEOMETRYCOLLECTIONFROMTEXT:
		        	    case self::GEOMETRYCOLLECTIONFROMWKB:
		        	    case self::GEOMETRYFROMTEXT:
		        	    case self::GEOMETRYFROMWKB:
		        	    case self::GEOMETRYN:
		        	    case self::GEOMETRYTYPE:
		        	    case self::GEOMFROMTEXT:
		        	    case self::GEOMFROMWKB:
		        	    case self::GET_FORMAT:
		        	    case self::GET_LOCK:
		        	    case self::GLENGTH:
		        	    case self::GREATEST:
		        	    case self::GTID_SUBSET:
		        	    case self::GTID_SUBTRACT:
		        	    case self::HEX:
		        	    case self::IFNULL:
		        	    case self::INET6_ATON:
		        	    case self::INET6_NTOA:
		        	    case self::INET_ATON:
		        	    case self::INET_NTOA:
		        	    case self::INSTR:
		        	    case self::INTERIORRINGN:
		        	    case self::INTERSECTS:
		        	    case self::ISCLOSED:
		        	    case self::ISEMPTY:
		        	    case self::ISNULL:
		        	    case self::ISSIMPLE:
		        	    case self::IS_FREE_LOCK:
		        	    case self::IS_IPV4:
		        	    case self::IS_IPV4_COMPAT:
		        	    case self::IS_IPV4_MAPPED:
		        	    case self::IS_IPV6:
		        	    case self::IS_USED_LOCK:
		        	    case self::LAST_INSERT_ID:
		        	    case self::LCASE:
		        	    case self::LEAST:
		        	    case self::LENGTH:
		        	    case self::LINEFROMTEXT:
		        	    case self::LINEFROMWKB:
		        	    case self::LINESTRINGFROMTEXT:
		        	    case self::LINESTRINGFROMWKB:
		        	    case self::LN:
		        	    case self::LOAD_FILE:
		        	    case self::LOCATE:
		        	    case self::LOG:
		        	    case self::LOG10:
		        	    case self::LOG2:
		        	    case self::LOWER:
		        	    case self::LPAD:
		        	    case self::LTRIM:
		        	    case self::MAKEDATE:
		        	    case self::MAKETIME:
		        	    case self::MAKE_SET:
		        	    case self::MASTER_POS_WAIT:
		        	    case self::MBRCONTAINS:
		        	    case self::MBRDISJOINT:
		        	    case self::MBREQUAL:
		        	    case self::MBRINTERSECTS:
		        	    case self::MBROVERLAPS:
		        	    case self::MBRTOUCHES:
		        	    case self::MBRWITHIN:
		        	    case self::MD5:
		        	    case self::MLINEFROMTEXT:
		        	    case self::MLINEFROMWKB:
		        	    case self::MONTHNAME:
		        	    case self::MPOINTFROMTEXT:
		        	    case self::MPOINTFROMWKB:
		        	    case self::MPOLYFROMTEXT:
		        	    case self::MPOLYFROMWKB:
		        	    case self::MULTILINESTRINGFROMTEXT:
		        	    case self::MULTILINESTRINGFROMWKB:
		        	    case self::MULTIPOINTFROMTEXT:
		        	    case self::MULTIPOINTFROMWKB:
		        	    case self::MULTIPOLYGONFROMTEXT:
		        	    case self::MULTIPOLYGONFROMWKB:
		        	    case self::NAME_CONST:
		        	    case self::NULLIF:
		        	    case self::NUMGEOMETRIES:
		        	    case self::NUMINTERIORRINGS:
		        	    case self::NUMPOINTS:
		        	    case self::OCT:
		        	    case self::OCTET_LENGTH:
		        	    case self::ORD:
		        	    case self::OVERLAPS:
		        	    case self::PERIOD_ADD:
		        	    case self::PERIOD_DIFF:
		        	    case self::PI:
		        	    case self::POINTFROMTEXT:
		        	    case self::POINTFROMWKB:
		        	    case self::POINTN:
		        	    case self::POLYFROMTEXT:
		        	    case self::POLYFROMWKB:
		        	    case self::POLYGONFROMTEXT:
		        	    case self::POLYGONFROMWKB:
		        	    case self::POW:
		        	    case self::POWER:
		        	    case self::QUOTE:
		        	    case self::RADIANS:
		        	    case self::RAND:
		        	    case self::RANDOM:
		        	    case self::RANDOM_BYTES:
		        	    case self::RELEASE_LOCK:
		        	    case self::REVERSE:
		        	    case self::ROUND:
		        	    case self::ROW_COUNT:
		        	    case self::RPAD:
		        	    case self::RTRIM:
		        	    case self::SEC_TO_TIME:
		        	    case self::SECONDARY_ENGINE_ATTRIBUTE:
		        	    case self::SESSION_USER:
		        	    case self::SHA:
		        	    case self::SHA1:
		        	    case self::SHA2:
		        	    case self::SCHEMA_NAME:
		        	    case self::SIGN:
		        	    case self::SIN:
		        	    case self::SLEEP:
		        	    case self::SOUNDEX:
		        	    case self::SQL_THREAD_WAIT_AFTER_GTIDS:
		        	    case self::SQRT:
		        	    case self::SRID:
		        	    case self::STARTPOINT:
		        	    case self::STRCMP:
		        	    case self::STR_TO_DATE:
		        	    case self::ST_AREA:
		        	    case self::ST_ASBINARY:
		        	    case self::ST_ASTEXT:
		        	    case self::ST_ASWKB:
		        	    case self::ST_ASWKT:
		        	    case self::ST_BUFFER:
		        	    case self::ST_CENTROID:
		        	    case self::ST_CONTAINS:
		        	    case self::ST_CROSSES:
		        	    case self::ST_DIFFERENCE:
		        	    case self::ST_DIMENSION:
		        	    case self::ST_DISJOINT:
		        	    case self::ST_DISTANCE:
		        	    case self::ST_ENDPOINT:
		        	    case self::ST_ENVELOPE:
		        	    case self::ST_EQUALS:
		        	    case self::ST_EXTERIORRING:
		        	    case self::ST_GEOMCOLLFROMTEXT:
		        	    case self::ST_GEOMCOLLFROMTXT:
		        	    case self::ST_GEOMCOLLFROMWKB:
		        	    case self::ST_GEOMETRYCOLLECTIONFROMTEXT:
		        	    case self::ST_GEOMETRYCOLLECTIONFROMWKB:
		        	    case self::ST_GEOMETRYFROMTEXT:
		        	    case self::ST_GEOMETRYFROMWKB:
		        	    case self::ST_GEOMETRYN:
		        	    case self::ST_GEOMETRYTYPE:
		        	    case self::ST_GEOMFROMTEXT:
		        	    case self::ST_GEOMFROMWKB:
		        	    case self::ST_INTERIORRINGN:
		        	    case self::ST_INTERSECTION:
		        	    case self::ST_INTERSECTS:
		        	    case self::ST_ISCLOSED:
		        	    case self::ST_ISEMPTY:
		        	    case self::ST_ISSIMPLE:
		        	    case self::ST_LINEFROMTEXT:
		        	    case self::ST_LINEFROMWKB:
		        	    case self::ST_LINESTRINGFROMTEXT:
		        	    case self::ST_LINESTRINGFROMWKB:
		        	    case self::ST_NUMGEOMETRIES:
		        	    case self::ST_NUMINTERIORRING:
		        	    case self::ST_NUMINTERIORRINGS:
		        	    case self::ST_NUMPOINTS:
		        	    case self::ST_OVERLAPS:
		        	    case self::ST_POINTFROMTEXT:
		        	    case self::ST_POINTFROMWKB:
		        	    case self::ST_POINTN:
		        	    case self::ST_POLYFROMTEXT:
		        	    case self::ST_POLYFROMWKB:
		        	    case self::ST_POLYGONFROMTEXT:
		        	    case self::ST_POLYGONFROMWKB:
		        	    case self::ST_SRID:
		        	    case self::ST_STARTPOINT:
		        	    case self::ST_SYMDIFFERENCE:
		        	    case self::ST_TOUCHES:
		        	    case self::ST_UNION:
		        	    case self::ST_WITHIN:
		        	    case self::ST_X:
		        	    case self::ST_Y:
		        	    case self::SUBDATE:
		        	    case self::SUBSTRING_INDEX:
		        	    case self::SUBTIME:
		        	    case self::SYSTEM_USER:
		        	    case self::TAN:
		        	    case self::TIMEDIFF:
		        	    case self::TIMESTAMPADD:
		        	    case self::TIMESTAMPDIFF:
		        	    case self::TIME_FORMAT:
		        	    case self::TIME_TO_SEC:
		        	    case self::TOUCHES:
		        	    case self::TO_BASE64:
		        	    case self::TO_DAYS:
		        	    case self::TO_SECONDS:
		        	    case self::TP_CONNECTION_ADMIN:
		        	    case self::UCASE:
		        	    case self::UNCOMPRESS:
		        	    case self::UNCOMPRESSED_LENGTH:
		        	    case self::UNHEX:
		        	    case self::UNIX_TIMESTAMP:
		        	    case self::UPDATEXML:
		        	    case self::UPPER:
		        	    case self::UUID:
		        	    case self::UUID_SHORT:
		        	    case self::VALIDATE_PASSWORD_STRENGTH:
		        	    case self::VERSION:
		        	    case self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
		        	    case self::WEEKDAY:
		        	    case self::WEEKOFYEAR:
		        	    case self::WEIGHT_STRING:
		        	    case self::WITHIN:
		        	    case self::YEARWEEK:
		        	    case self::Y_FUNCTION:
		        	    case self::X_FUNCTION:
		        	    case self::MOD:
		        	    case self::CHARSET_REVERSE_QOUTE_STRING:
		        	    case self::STRING_LITERAL:
		        	    case self::ID:
		        	    	$this->setState(6096);
		        	    	$localContext->partitionList = $this->uidList();
		        	    	break;

		        	    case self::ALL:
		        	    	$this->setState(6097);
		        	    	$this->match(self::ALL);
		        	    	break;

		        	default:
		        		throw new NoViableAltException($this);
		        	}
		        	$this->setState(6100);
		        	$this->match(self::RR_BRACKET);
		        }
		        $this->setState(6110);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 890, $this->ctx)) {
		            case 1:
		        	    $this->setState(6104);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::INDEX || $_la === self::KEY) {
		        	    	$this->setState(6103);

		        	    	$localContext->indexFormat = $this->input->LT(1);
		        	    	$_la = $this->input->LA(1);

		        	    	if (!($_la === self::INDEX || $_la === self::KEY)) {
		        	    		    $localContext->indexFormat = $this->errorHandler->recoverInline($this);
		        	    	} else {
		        	    		if ($this->input->LA(1) === Token::EOF) {
		        	    		    $this->matchedEOF = true;
		        	    	    }

		        	    		$this->errorHandler->reportMatch($this);
		        	    		$this->consume();
		        	    	}
		        	    }
		        	    $this->setState(6106);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(6107);
		        	    $localContext->indexList = $this->uidList();
		        	    $this->setState(6108);
		        	    $this->match(self::RR_BRACKET);
		        	break;
		        }
		        $this->setState(6114);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::IGNORE) {
		        	$this->setState(6112);
		        	$this->match(self::IGNORE);
		        	$this->setState(6113);
		        	$this->match(self::LEAVES);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function simpleDescribeStatement(): Context\SimpleDescribeStatementContext
		{
		    $localContext = new Context\SimpleDescribeStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 526, self::RULE_simpleDescribeStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(6116);

		        $localContext->command = $this->input->LT(1);
		        $_la = $this->input->LA(1);

		        if (!(((($_la) & ~0x3f) === 0 && ((1 << $_la) & 4611791571543654400) !== 0))) {
		        	    $localContext->command = $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		        $this->setState(6117);
		        $this->tableName();
		        $this->setState(6120);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 892, $this->ctx)) {
		            case 1:
		        	    $this->setState(6118);
		        	    $localContext->column = $this->uid();
		        	break;

		            case 2:
		        	    $this->setState(6119);
		        	    $localContext->pattern = $this->match(self::STRING_LITERAL);
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function fullDescribeStatement(): Context\FullDescribeStatementContext
		{
		    $localContext = new Context\FullDescribeStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 528, self::RULE_fullDescribeStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(6122);

		        $localContext->command = $this->input->LT(1);
		        $_la = $this->input->LA(1);

		        if (!(((($_la) & ~0x3f) === 0 && ((1 << $_la) & 4611791571543654400) !== 0))) {
		        	    $localContext->command = $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		        $this->setState(6126);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::EXTENDED || $_la === self::PARTITIONS || $_la === self::FORMAT) {
		        	$this->setState(6123);

		        	$localContext->formatType = $this->input->LT(1);
		        	$_la = $this->input->LA(1);

		        	if (!($_la === self::EXTENDED || $_la === self::PARTITIONS || $_la === self::FORMAT)) {
		        		    $localContext->formatType = $this->errorHandler->recoverInline($this);
		        	} else {
		        		if ($this->input->LA(1) === Token::EOF) {
		        		    $this->matchedEOF = true;
		        	    }

		        		$this->errorHandler->reportMatch($this);
		        		$this->consume();
		        	}
		        	$this->setState(6124);
		        	$this->match(self::EQUAL_SYMBOL);
		        	$this->setState(6125);

		        	$localContext->formatValue = $this->input->LT(1);
		        	$_la = $this->input->LA(1);

		        	if (!($_la === self::JSON || $_la === self::TRADITIONAL)) {
		        		    $localContext->formatValue = $this->errorHandler->recoverInline($this);
		        	} else {
		        		if ($this->input->LA(1) === Token::EOF) {
		        		    $this->matchedEOF = true;
		        	    }

		        		$this->errorHandler->reportMatch($this);
		        		$this->consume();
		        	}
		        }
		        $this->setState(6128);
		        $this->describeObjectClause();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function helpStatement(): Context\HelpStatementContext
		{
		    $localContext = new Context\HelpStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 530, self::RULE_helpStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(6130);
		        $this->match(self::HELP);
		        $this->setState(6131);
		        $this->match(self::STRING_LITERAL);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function useStatement(): Context\UseStatementContext
		{
		    $localContext = new Context\UseStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 532, self::RULE_useStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(6133);
		        $this->match(self::USE);
		        $this->setState(6134);
		        $this->uid();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function signalStatement(): Context\SignalStatementContext
		{
		    $localContext = new Context\SignalStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 534, self::RULE_signalStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(6136);
		        $this->match(self::SIGNAL);
		        $this->setState(6144);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::SQLSTATE:
		            	$this->setState(6137);
		            	$this->match(self::SQLSTATE);
		            	$this->setState(6139);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::VALUE) {
		            		$this->setState(6138);
		            		$this->match(self::VALUE);
		            	}
		            	$this->setState(6141);
		            	$this->stringLiteral();
		            	break;

		            case self::ID:
		            	$this->setState(6142);
		            	$this->match(self::ID);
		            	break;

		            case self::REVERSE_QUOTE_ID:
		            	$this->setState(6143);
		            	$this->match(self::REVERSE_QUOTE_ID);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		        $this->setState(6155);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 897, $this->ctx)) {
		            case 1:
		        	    $this->setState(6146);
		        	    $this->match(self::SET);
		        	    $this->setState(6147);
		        	    $this->signalConditionInformation();
		        	    $this->setState(6152);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::COMMA) {
		        	    	$this->setState(6148);
		        	    	$this->match(self::COMMA);
		        	    	$this->setState(6149);
		        	    	$this->signalConditionInformation();
		        	    	$this->setState(6154);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function resignalStatement(): Context\ResignalStatementContext
		{
		    $localContext = new Context\ResignalStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 536, self::RULE_resignalStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(6157);
		        $this->match(self::RESIGNAL);
		        $this->setState(6165);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::SQLSTATE:
		            	$this->setState(6158);
		            	$this->match(self::SQLSTATE);
		            	$this->setState(6160);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::VALUE) {
		            		$this->setState(6159);
		            		$this->match(self::VALUE);
		            	}
		            	$this->setState(6162);
		            	$this->stringLiteral();
		            	break;

		            case self::ID:
		            	$this->setState(6163);
		            	$this->match(self::ID);
		            	break;

		            case self::REVERSE_QUOTE_ID:
		            	$this->setState(6164);
		            	$this->match(self::REVERSE_QUOTE_ID);
		            	break;

		            case self::EOF:
		            case self::ALTER:
		            case self::ANALYZE:
		            case self::CALL:
		            case self::CHANGE:
		            case self::CHECK:
		            case self::CREATE:
		            case self::DELETE:
		            case self::DESC:
		            case self::DESCRIBE:
		            case self::DROP:
		            case self::EXPLAIN:
		            case self::GET:
		            case self::GRANT:
		            case self::INSERT:
		            case self::KILL:
		            case self::LOAD:
		            case self::LOCK:
		            case self::OPTIMIZE:
		            case self::PURGE:
		            case self::RELEASE:
		            case self::RENAME:
		            case self::REPLACE:
		            case self::RESIGNAL:
		            case self::REVOKE:
		            case self::SELECT:
		            case self::SET:
		            case self::SHOW:
		            case self::SIGNAL:
		            case self::TABLE:
		            case self::UNLOCK:
		            case self::UPDATE:
		            case self::USE:
		            case self::VALUES:
		            case self::WITH:
		            case self::BEGIN:
		            case self::BINLOG:
		            case self::CACHE:
		            case self::CHECKSUM:
		            case self::COMMIT:
		            case self::DEALLOCATE:
		            case self::DO:
		            case self::FLUSH:
		            case self::HANDLER:
		            case self::HELP:
		            case self::INSTALL:
		            case self::PREPARE:
		            case self::REPAIR:
		            case self::RESET:
		            case self::ROLLBACK:
		            case self::SAVEPOINT:
		            case self::START:
		            case self::STOP:
		            case self::TRUNCATE:
		            case self::UNINSTALL:
		            case self::XA:
		            case self::EXECUTE:
		            case self::SHUTDOWN:
		            case self::MINUS:
		            case self::LR_BRACKET:
		            case self::SEMI:
		            	break;

		        default:
		        	break;
		        }
		        $this->setState(6176);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 901, $this->ctx)) {
		            case 1:
		        	    $this->setState(6167);
		        	    $this->match(self::SET);
		        	    $this->setState(6168);
		        	    $this->signalConditionInformation();
		        	    $this->setState(6173);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::COMMA) {
		        	    	$this->setState(6169);
		        	    	$this->match(self::COMMA);
		        	    	$this->setState(6170);
		        	    	$this->signalConditionInformation();
		        	    	$this->setState(6175);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function signalConditionInformation(): Context\SignalConditionInformationContext
		{
		    $localContext = new Context\SignalConditionInformationContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 538, self::RULE_signalConditionInformation);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(6178);

		        $_la = $this->input->LA(1);

		        if (!((((($_la - 359)) & ~0x3f) === 0 && ((1 << ($_la - 359)) & 272105729) !== 0) || $_la === self::MESSAGE_TEXT || $_la === self::MYSQL_ERRNO || $_la === self::SUBCLASS_ORIGIN || $_la === self::TABLE_NAME || $_la === self::CATALOG_NAME || $_la === self::SCHEMA_NAME)) {
		        $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		        $this->setState(6179);
		        $this->match(self::EQUAL_SYMBOL);
		        $this->setState(6184);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::START_NATIONAL_STRING_LITERAL:
		            case self::STRING_LITERAL:
		            case self::STRING_CHARSET_NAME:
		            	$this->setState(6180);
		            	$this->stringLiteral();
		            	break;

		            case self::DECIMAL_LITERAL:
		            	$this->setState(6181);
		            	$this->match(self::DECIMAL_LITERAL);
		            	break;

		            case self::LOCAL_ID:
		            case self::GLOBAL_ID:
		            	$this->setState(6182);
		            	$this->mysqlVariable();
		            	break;

		            case self::ARRAY:
		            case self::ATTRIBUTE:
		            case self::BUCKETS:
		            case self::CONDITION:
		            case self::CURRENT:
		            case self::CURRENT_USER:
		            case self::DATABASE:
		            case self::DEFAULT:
		            case self::DIAGNOSTICS:
		            case self::EMPTY:
		            case self::ENFORCED:
		            case self::EXCEPT:
		            case self::GROUP:
		            case self::IF:
		            case self::IGNORED:
		            case self::INSERT:
		            case self::LATERAL:
		            case self::LEFT:
		            case self::NUMBER:
		            case self::OPTIONAL:
		            case self::ORDER:
		            case self::PRIMARY:
		            case self::REPEAT:
		            case self::REPLACE:
		            case self::RIGHT:
		            case self::SCHEMA:
		            case self::SKIP_QUERY_REWRITE:
		            case self::STACKED:
		            case self::DATE:
		            case self::TIME:
		            case self::TIMESTAMP:
		            case self::DATETIME:
		            case self::YEAR:
		            case self::BINARY:
		            case self::TEXT:
		            case self::ENUM:
		            case self::SERIAL:
		            case self::JSON_ARRAY:
		            case self::JSON_ARRAYAGG:
		            case self::JSON_ARRAY_APPEND:
		            case self::JSON_ARRAY_INSERT:
		            case self::JSON_CONTAINS:
		            case self::JSON_CONTAINS_PATH:
		            case self::JSON_DEPTH:
		            case self::JSON_EXTRACT:
		            case self::JSON_INSERT:
		            case self::JSON_KEYS:
		            case self::JSON_LENGTH:
		            case self::JSON_MERGE:
		            case self::JSON_MERGE_PATCH:
		            case self::JSON_MERGE_PRESERVE:
		            case self::JSON_OBJECT:
		            case self::JSON_OBJECTAGG:
		            case self::JSON_OVERLAPS:
		            case self::JSON_PRETTY:
		            case self::JSON_QUOTE:
		            case self::JSON_REMOVE:
		            case self::JSON_REPLACE:
		            case self::JSON_SCHEMA_VALID:
		            case self::JSON_SCHEMA_VALIDATION_REPORT:
		            case self::JSON_SEARCH:
		            case self::JSON_SET:
		            case self::JSON_STORAGE_FREE:
		            case self::JSON_STORAGE_SIZE:
		            case self::JSON_TABLE:
		            case self::JSON_TYPE:
		            case self::JSON_UNQUOTE:
		            case self::JSON_VALID:
		            case self::JSON_VALUE:
		            case self::NESTED:
		            case self::ORDINALITY:
		            case self::PATH:
		            case self::AVG:
		            case self::BIT_AND:
		            case self::BIT_OR:
		            case self::BIT_XOR:
		            case self::COUNT:
		            case self::CUME_DIST:
		            case self::DENSE_RANK:
		            case self::FIRST_VALUE:
		            case self::GROUP_CONCAT:
		            case self::LAG:
		            case self::LAST_VALUE:
		            case self::LEAD:
		            case self::MAX:
		            case self::MIN:
		            case self::NTILE:
		            case self::NTH_VALUE:
		            case self::PERCENT_RANK:
		            case self::RANK:
		            case self::ROW_NUMBER:
		            case self::STD:
		            case self::STDDEV:
		            case self::STDDEV_POP:
		            case self::STDDEV_SAMP:
		            case self::SUM:
		            case self::VAR_POP:
		            case self::VAR_SAMP:
		            case self::VARIANCE:
		            case self::CURRENT_DATE:
		            case self::CURRENT_TIME:
		            case self::CURRENT_TIMESTAMP:
		            case self::LOCALTIME:
		            case self::CURDATE:
		            case self::CURTIME:
		            case self::DATE_ADD:
		            case self::DATE_SUB:
		            case self::LOCALTIMESTAMP:
		            case self::NOW:
		            case self::POSITION:
		            case self::SUBSTR:
		            case self::SUBSTRING:
		            case self::SYSDATE:
		            case self::TRIM:
		            case self::UTC_DATE:
		            case self::UTC_TIME:
		            case self::UTC_TIMESTAMP:
		            case self::ACCOUNT:
		            case self::ACTION:
		            case self::AFTER:
		            case self::AGGREGATE:
		            case self::ALGORITHM:
		            case self::ANY:
		            case self::AT:
		            case self::AUTHORS:
		            case self::AUTOCOMMIT:
		            case self::AUTOEXTEND_SIZE:
		            case self::AUTO_INCREMENT:
		            case self::AVG_ROW_LENGTH:
		            case self::BEGIN:
		            case self::BINLOG:
		            case self::BIT:
		            case self::BLOCK:
		            case self::BOOL:
		            case self::BOOLEAN:
		            case self::BTREE:
		            case self::CACHE:
		            case self::CASCADED:
		            case self::CHAIN:
		            case self::CHANGED:
		            case self::CHANNEL:
		            case self::CHECKSUM:
		            case self::PAGE_CHECKSUM:
		            case self::CIPHER:
		            case self::CLASS_ORIGIN:
		            case self::CLIENT:
		            case self::CLOSE:
		            case self::CLUSTERING:
		            case self::COALESCE:
		            case self::CODE:
		            case self::COLUMNS:
		            case self::COLUMN_FORMAT:
		            case self::COLUMN_NAME:
		            case self::COMMENT:
		            case self::COMMIT:
		            case self::COMPACT:
		            case self::COMPLETION:
		            case self::COMPRESSED:
		            case self::COMPRESSION:
		            case self::CONCURRENT:
		            case self::CONNECT:
		            case self::CONNECTION:
		            case self::CONSISTENT:
		            case self::CONSTRAINT_CATALOG:
		            case self::CONSTRAINT_SCHEMA:
		            case self::CONSTRAINT_NAME:
		            case self::CONTAINS:
		            case self::CONTEXT:
		            case self::CONTRIBUTORS:
		            case self::COPY:
		            case self::CPU:
		            case self::CURSOR_NAME:
		            case self::DATA:
		            case self::DATAFILE:
		            case self::DEALLOCATE:
		            case self::DEFAULT_AUTH:
		            case self::DEFINER:
		            case self::DELAY_KEY_WRITE:
		            case self::DES_KEY_FILE:
		            case self::DIRECTORY:
		            case self::DISABLE:
		            case self::DISCARD:
		            case self::DISK:
		            case self::DO:
		            case self::DUMPFILE:
		            case self::DUPLICATE:
		            case self::DYNAMIC:
		            case self::ENABLE:
		            case self::ENCRYPTION:
		            case self::END:
		            case self::ENDS:
		            case self::ENGINE:
		            case self::ENGINES:
		            case self::ERROR:
		            case self::ERRORS:
		            case self::ESCAPE:
		            case self::EVEN:
		            case self::EVENT:
		            case self::EVENTS:
		            case self::EVERY:
		            case self::EXCHANGE:
		            case self::EXCLUSIVE:
		            case self::EXPIRE:
		            case self::EXPORT:
		            case self::EXTENDED:
		            case self::EXTENT_SIZE:
		            case self::FAILED_LOGIN_ATTEMPTS:
		            case self::FAST:
		            case self::FAULTS:
		            case self::FIELDS:
		            case self::FILE_BLOCK_SIZE:
		            case self::FILTER:
		            case self::FIRST:
		            case self::FIXED:
		            case self::FLUSH:
		            case self::FOLLOWS:
		            case self::FOUND:
		            case self::FULL:
		            case self::FUNCTION:
		            case self::GENERAL:
		            case self::GLOBAL:
		            case self::GRANTS:
		            case self::GROUP_REPLICATION:
		            case self::HANDLER:
		            case self::HASH:
		            case self::HELP:
		            case self::HISTORY:
		            case self::HOST:
		            case self::HOSTS:
		            case self::IDENTIFIED:
		            case self::IGNORE_SERVER_IDS:
		            case self::IMPORT:
		            case self::INDEXES:
		            case self::INITIAL_SIZE:
		            case self::INPLACE:
		            case self::INSERT_METHOD:
		            case self::INSTALL:
		            case self::INSTANCE:
		            case self::INSTANT:
		            case self::INVISIBLE:
		            case self::INVOKER:
		            case self::IO:
		            case self::IO_THREAD:
		            case self::IPC:
		            case self::ISOLATION:
		            case self::ISSUER:
		            case self::JSON:
		            case self::KEY_BLOCK_SIZE:
		            case self::LANGUAGE:
		            case self::LAST:
		            case self::LEAVES:
		            case self::LESS:
		            case self::LEVEL:
		            case self::LIST:
		            case self::LOCAL:
		            case self::LOGFILE:
		            case self::LOGS:
		            case self::MASTER:
		            case self::MASTER_AUTO_POSITION:
		            case self::MASTER_CONNECT_RETRY:
		            case self::MASTER_DELAY:
		            case self::MASTER_HEARTBEAT_PERIOD:
		            case self::MASTER_HOST:
		            case self::MASTER_LOG_FILE:
		            case self::MASTER_LOG_POS:
		            case self::MASTER_PASSWORD:
		            case self::MASTER_PORT:
		            case self::MASTER_RETRY_COUNT:
		            case self::MASTER_SSL:
		            case self::MASTER_SSL_CA:
		            case self::MASTER_SSL_CAPATH:
		            case self::MASTER_SSL_CERT:
		            case self::MASTER_SSL_CIPHER:
		            case self::MASTER_SSL_CRL:
		            case self::MASTER_SSL_CRLPATH:
		            case self::MASTER_SSL_KEY:
		            case self::MASTER_TLS_VERSION:
		            case self::MASTER_USER:
		            case self::MAX_CONNECTIONS_PER_HOUR:
		            case self::MAX_QUERIES_PER_HOUR:
		            case self::MAX_ROWS:
		            case self::MAX_SIZE:
		            case self::MAX_UPDATES_PER_HOUR:
		            case self::MAX_USER_CONNECTIONS:
		            case self::MEDIUM:
		            case self::MEMBER:
		            case self::MERGE:
		            case self::MESSAGE_TEXT:
		            case self::MID:
		            case self::MIGRATE:
		            case self::MIN_ROWS:
		            case self::MODE:
		            case self::MODIFY:
		            case self::MUTEX:
		            case self::MYSQL:
		            case self::MYSQL_ERRNO:
		            case self::NAME:
		            case self::NAMES:
		            case self::NCHAR:
		            case self::NEVER:
		            case self::NEXT:
		            case self::NO:
		            case self::NOCOPY:
		            case self::NOWAIT:
		            case self::NODEGROUP:
		            case self::NONE:
		            case self::ODBC:
		            case self::OFFLINE:
		            case self::OFFSET:
		            case self::OF:
		            case self::OJ:
		            case self::OLD_PASSWORD:
		            case self::ONE:
		            case self::ONLINE:
		            case self::ONLY:
		            case self::OPEN:
		            case self::OPTIMIZER_COSTS:
		            case self::OPTIONS:
		            case self::OWNER:
		            case self::PACK_KEYS:
		            case self::PAGE:
		            case self::PARSER:
		            case self::PARTIAL:
		            case self::PARTITIONING:
		            case self::PARTITIONS:
		            case self::PASSWORD:
		            case self::PASSWORD_LOCK_TIME:
		            case self::PHASE:
		            case self::PLUGIN:
		            case self::PLUGIN_DIR:
		            case self::PLUGINS:
		            case self::PORT:
		            case self::PRECEDES:
		            case self::PREPARE:
		            case self::PRESERVE:
		            case self::PREV:
		            case self::PROCESSLIST:
		            case self::PROFILE:
		            case self::PROFILES:
		            case self::PROXY:
		            case self::QUERY:
		            case self::QUICK:
		            case self::REBUILD:
		            case self::RECOVER:
		            case self::RECURSIVE:
		            case self::REDO_BUFFER_SIZE:
		            case self::REDUNDANT:
		            case self::RELAY:
		            case self::RELAY_LOG_FILE:
		            case self::RELAY_LOG_POS:
		            case self::RELAYLOG:
		            case self::REMOVE:
		            case self::REORGANIZE:
		            case self::REPAIR:
		            case self::REPLICATE_DO_DB:
		            case self::REPLICATE_DO_TABLE:
		            case self::REPLICATE_IGNORE_DB:
		            case self::REPLICATE_IGNORE_TABLE:
		            case self::REPLICATE_REWRITE_DB:
		            case self::REPLICATE_WILD_DO_TABLE:
		            case self::REPLICATE_WILD_IGNORE_TABLE:
		            case self::REPLICATION:
		            case self::RESET:
		            case self::RESUME:
		            case self::RETURNED_SQLSTATE:
		            case self::RETURNS:
		            case self::REUSE:
		            case self::ROLE:
		            case self::ROLLBACK:
		            case self::ROLLUP:
		            case self::ROTATE:
		            case self::ROW:
		            case self::ROWS:
		            case self::ROW_FORMAT:
		            case self::RTREE:
		            case self::SAVEPOINT:
		            case self::SCHEDULE:
		            case self::SECURITY:
		            case self::SERVER:
		            case self::SESSION:
		            case self::SHARE:
		            case self::SHARED:
		            case self::SIGNED:
		            case self::SIMPLE:
		            case self::SLAVE:
		            case self::SLOW:
		            case self::SNAPSHOT:
		            case self::SOCKET:
		            case self::SOME:
		            case self::SONAME:
		            case self::SOUNDS:
		            case self::SOURCE:
		            case self::SQL_AFTER_GTIDS:
		            case self::SQL_AFTER_MTS_GAPS:
		            case self::SQL_BEFORE_GTIDS:
		            case self::SQL_BUFFER_RESULT:
		            case self::SQL_CACHE:
		            case self::SQL_NO_CACHE:
		            case self::SQL_THREAD:
		            case self::START:
		            case self::STARTS:
		            case self::STATS_AUTO_RECALC:
		            case self::STATS_PERSISTENT:
		            case self::STATS_SAMPLE_PAGES:
		            case self::STATUS:
		            case self::STOP:
		            case self::STORAGE:
		            case self::STRING:
		            case self::SUBCLASS_ORIGIN:
		            case self::SUBJECT:
		            case self::SUBPARTITION:
		            case self::SUBPARTITIONS:
		            case self::SUSPEND:
		            case self::SWAPS:
		            case self::SWITCHES:
		            case self::TABLE_NAME:
		            case self::TABLESPACE:
		            case self::TABLE_TYPE:
		            case self::TEMPORARY:
		            case self::TEMPTABLE:
		            case self::THAN:
		            case self::TRADITIONAL:
		            case self::TRANSACTION:
		            case self::TRANSACTIONAL:
		            case self::TRIGGERS:
		            case self::TRUNCATE:
		            case self::UNBOUNDED:
		            case self::UNDEFINED:
		            case self::UNDOFILE:
		            case self::UNDO_BUFFER_SIZE:
		            case self::UNINSTALL:
		            case self::UNKNOWN:
		            case self::UNTIL:
		            case self::UPGRADE:
		            case self::USER:
		            case self::USE_FRM:
		            case self::USER_RESOURCES:
		            case self::VALIDATION:
		            case self::VALUE:
		            case self::VARIABLES:
		            case self::VIEW:
		            case self::VIRTUAL:
		            case self::VISIBLE:
		            case self::WAIT:
		            case self::WARNINGS:
		            case self::WITHOUT:
		            case self::WORK:
		            case self::WRAPPER:
		            case self::X509:
		            case self::XA:
		            case self::XML:
		            case self::EUR:
		            case self::USA:
		            case self::JIS:
		            case self::ISO:
		            case self::INTERNAL:
		            case self::QUARTER:
		            case self::MONTH:
		            case self::DAY:
		            case self::HOUR:
		            case self::MINUTE:
		            case self::WEEK:
		            case self::SECOND:
		            case self::MICROSECOND:
		            case self::ADMIN:
		            case self::AUDIT_ABORT_EXEMPT:
		            case self::AUDIT_ADMIN:
		            case self::AUTHENTICATION_POLICY_ADMIN:
		            case self::BACKUP_ADMIN:
		            case self::BINLOG_ADMIN:
		            case self::BINLOG_ENCRYPTION_ADMIN:
		            case self::CLONE_ADMIN:
		            case self::CONNECTION_ADMIN:
		            case self::ENCRYPTION_KEY_ADMIN:
		            case self::EXECUTE:
		            case self::FILE:
		            case self::FIREWALL_ADMIN:
		            case self::FIREWALL_EXEMPT:
		            case self::FIREWALL_USER:
		            case self::GROUP_REPLICATION_ADMIN:
		            case self::INNODB_REDO_LOG_ARCHIVE:
		            case self::INVOKE:
		            case self::LAMBDA:
		            case self::NDB_STORED_USER:
		            case self::PASSWORDLESS_USER_ADMIN:
		            case self::PERSIST_RO_VARIABLES_ADMIN:
		            case self::PRIVILEGES:
		            case self::PROCESS:
		            case self::RELOAD:
		            case self::REPLICATION_APPLIER:
		            case self::REPLICATION_SLAVE_ADMIN:
		            case self::RESOURCE_GROUP_ADMIN:
		            case self::RESOURCE_GROUP_USER:
		            case self::ROLE_ADMIN:
		            case self::ROUTINE:
		            case self::S3:
		            case self::SESSION_VARIABLES_ADMIN:
		            case self::SET_USER_ID:
		            case self::SHOW_ROUTINE:
		            case self::SHUTDOWN:
		            case self::SUPER:
		            case self::SYSTEM_VARIABLES_ADMIN:
		            case self::TABLES:
		            case self::TABLE_ENCRYPTION_ADMIN:
		            case self::VERSION_TOKEN_ADMIN:
		            case self::XA_RECOVER_ADMIN:
		            case self::ARMSCII8:
		            case self::ASCII:
		            case self::BIG5:
		            case self::CP1250:
		            case self::CP1251:
		            case self::CP1256:
		            case self::CP1257:
		            case self::CP850:
		            case self::CP852:
		            case self::CP866:
		            case self::CP932:
		            case self::DEC8:
		            case self::EUCJPMS:
		            case self::EUCKR:
		            case self::GB18030:
		            case self::GB2312:
		            case self::GBK:
		            case self::GEOSTD8:
		            case self::GREEK:
		            case self::HEBREW:
		            case self::HP8:
		            case self::KEYBCS2:
		            case self::KOI8R:
		            case self::KOI8U:
		            case self::LATIN1:
		            case self::LATIN2:
		            case self::LATIN5:
		            case self::LATIN7:
		            case self::MACCE:
		            case self::MACROMAN:
		            case self::SJIS:
		            case self::SWE7:
		            case self::TIS620:
		            case self::UCS2:
		            case self::UJIS:
		            case self::UTF16:
		            case self::UTF16LE:
		            case self::UTF32:
		            case self::UTF8:
		            case self::UTF8MB3:
		            case self::UTF8MB4:
		            case self::ARCHIVE:
		            case self::BLACKHOLE:
		            case self::CSV:
		            case self::FEDERATED:
		            case self::INNODB:
		            case self::MEMORY:
		            case self::MRG_MYISAM:
		            case self::MYISAM:
		            case self::NDB:
		            case self::NDBCLUSTER:
		            case self::PERFORMANCE_SCHEMA:
		            case self::TOKUDB:
		            case self::REPEATABLE:
		            case self::COMMITTED:
		            case self::UNCOMMITTED:
		            case self::SERIALIZABLE:
		            case self::GEOMETRYCOLLECTION:
		            case self::LINESTRING:
		            case self::MULTILINESTRING:
		            case self::MULTIPOINT:
		            case self::MULTIPOLYGON:
		            case self::POINT:
		            case self::POLYGON:
		            case self::ABS:
		            case self::ACOS:
		            case self::ADDDATE:
		            case self::ADDTIME:
		            case self::AES_DECRYPT:
		            case self::AES_ENCRYPT:
		            case self::AREA:
		            case self::ASBINARY:
		            case self::ASIN:
		            case self::ASTEXT:
		            case self::ASWKB:
		            case self::ASWKT:
		            case self::ASYMMETRIC_DECRYPT:
		            case self::ASYMMETRIC_DERIVE:
		            case self::ASYMMETRIC_ENCRYPT:
		            case self::ASYMMETRIC_SIGN:
		            case self::ASYMMETRIC_VERIFY:
		            case self::ATAN:
		            case self::ATAN2:
		            case self::BENCHMARK:
		            case self::BIN:
		            case self::BIT_COUNT:
		            case self::BIT_LENGTH:
		            case self::BUFFER:
		            case self::CATALOG_NAME:
		            case self::CEIL:
		            case self::CEILING:
		            case self::CENTROID:
		            case self::CHARACTER_LENGTH:
		            case self::CHARSET:
		            case self::CHAR_LENGTH:
		            case self::COERCIBILITY:
		            case self::COLLATION:
		            case self::COMPRESS:
		            case self::CONCAT:
		            case self::CONCAT_WS:
		            case self::CONNECTION_ID:
		            case self::CONV:
		            case self::CONVERT_TZ:
		            case self::COS:
		            case self::COT:
		            case self::CRC32:
		            case self::CREATE_ASYMMETRIC_PRIV_KEY:
		            case self::CREATE_ASYMMETRIC_PUB_KEY:
		            case self::CREATE_DH_PARAMETERS:
		            case self::CREATE_DIGEST:
		            case self::CROSSES:
		            case self::DATEDIFF:
		            case self::DATE_FORMAT:
		            case self::DAYNAME:
		            case self::DAYOFMONTH:
		            case self::DAYOFWEEK:
		            case self::DAYOFYEAR:
		            case self::DECODE:
		            case self::DEGREES:
		            case self::DES_DECRYPT:
		            case self::DES_ENCRYPT:
		            case self::DIMENSION:
		            case self::DISJOINT:
		            case self::ELT:
		            case self::ENCODE:
		            case self::ENCRYPT:
		            case self::ENDPOINT:
		            case self::ENGINE_ATTRIBUTE:
		            case self::ENVELOPE:
		            case self::EQUALS:
		            case self::EXP:
		            case self::EXPORT_SET:
		            case self::EXTERIORRING:
		            case self::EXTRACTVALUE:
		            case self::FIELD:
		            case self::FIND_IN_SET:
		            case self::FLOOR:
		            case self::FORMAT:
		            case self::FOUND_ROWS:
		            case self::FROM_BASE64:
		            case self::FROM_DAYS:
		            case self::FROM_UNIXTIME:
		            case self::GEOMCOLLFROMTEXT:
		            case self::GEOMCOLLFROMWKB:
		            case self::GEOMETRYCOLLECTIONFROMTEXT:
		            case self::GEOMETRYCOLLECTIONFROMWKB:
		            case self::GEOMETRYFROMTEXT:
		            case self::GEOMETRYFROMWKB:
		            case self::GEOMETRYN:
		            case self::GEOMETRYTYPE:
		            case self::GEOMFROMTEXT:
		            case self::GEOMFROMWKB:
		            case self::GET_FORMAT:
		            case self::GET_LOCK:
		            case self::GLENGTH:
		            case self::GREATEST:
		            case self::GTID_SUBSET:
		            case self::GTID_SUBTRACT:
		            case self::HEX:
		            case self::IFNULL:
		            case self::INET6_ATON:
		            case self::INET6_NTOA:
		            case self::INET_ATON:
		            case self::INET_NTOA:
		            case self::INSTR:
		            case self::INTERIORRINGN:
		            case self::INTERSECTS:
		            case self::ISCLOSED:
		            case self::ISEMPTY:
		            case self::ISNULL:
		            case self::ISSIMPLE:
		            case self::IS_FREE_LOCK:
		            case self::IS_IPV4:
		            case self::IS_IPV4_COMPAT:
		            case self::IS_IPV4_MAPPED:
		            case self::IS_IPV6:
		            case self::IS_USED_LOCK:
		            case self::LAST_INSERT_ID:
		            case self::LCASE:
		            case self::LEAST:
		            case self::LENGTH:
		            case self::LINEFROMTEXT:
		            case self::LINEFROMWKB:
		            case self::LINESTRINGFROMTEXT:
		            case self::LINESTRINGFROMWKB:
		            case self::LN:
		            case self::LOAD_FILE:
		            case self::LOCATE:
		            case self::LOG:
		            case self::LOG10:
		            case self::LOG2:
		            case self::LOWER:
		            case self::LPAD:
		            case self::LTRIM:
		            case self::MAKEDATE:
		            case self::MAKETIME:
		            case self::MAKE_SET:
		            case self::MASTER_POS_WAIT:
		            case self::MBRCONTAINS:
		            case self::MBRDISJOINT:
		            case self::MBREQUAL:
		            case self::MBRINTERSECTS:
		            case self::MBROVERLAPS:
		            case self::MBRTOUCHES:
		            case self::MBRWITHIN:
		            case self::MD5:
		            case self::MLINEFROMTEXT:
		            case self::MLINEFROMWKB:
		            case self::MONTHNAME:
		            case self::MPOINTFROMTEXT:
		            case self::MPOINTFROMWKB:
		            case self::MPOLYFROMTEXT:
		            case self::MPOLYFROMWKB:
		            case self::MULTILINESTRINGFROMTEXT:
		            case self::MULTILINESTRINGFROMWKB:
		            case self::MULTIPOINTFROMTEXT:
		            case self::MULTIPOINTFROMWKB:
		            case self::MULTIPOLYGONFROMTEXT:
		            case self::MULTIPOLYGONFROMWKB:
		            case self::NAME_CONST:
		            case self::NULLIF:
		            case self::NUMGEOMETRIES:
		            case self::NUMINTERIORRINGS:
		            case self::NUMPOINTS:
		            case self::OCT:
		            case self::OCTET_LENGTH:
		            case self::ORD:
		            case self::OVERLAPS:
		            case self::PERIOD_ADD:
		            case self::PERIOD_DIFF:
		            case self::PI:
		            case self::POINTFROMTEXT:
		            case self::POINTFROMWKB:
		            case self::POINTN:
		            case self::POLYFROMTEXT:
		            case self::POLYFROMWKB:
		            case self::POLYGONFROMTEXT:
		            case self::POLYGONFROMWKB:
		            case self::POW:
		            case self::POWER:
		            case self::QUOTE:
		            case self::RADIANS:
		            case self::RAND:
		            case self::RANDOM:
		            case self::RANDOM_BYTES:
		            case self::RELEASE_LOCK:
		            case self::REVERSE:
		            case self::ROUND:
		            case self::ROW_COUNT:
		            case self::RPAD:
		            case self::RTRIM:
		            case self::SEC_TO_TIME:
		            case self::SECONDARY_ENGINE_ATTRIBUTE:
		            case self::SESSION_USER:
		            case self::SHA:
		            case self::SHA1:
		            case self::SHA2:
		            case self::SCHEMA_NAME:
		            case self::SIGN:
		            case self::SIN:
		            case self::SLEEP:
		            case self::SOUNDEX:
		            case self::SQL_THREAD_WAIT_AFTER_GTIDS:
		            case self::SQRT:
		            case self::SRID:
		            case self::STARTPOINT:
		            case self::STRCMP:
		            case self::STR_TO_DATE:
		            case self::ST_AREA:
		            case self::ST_ASBINARY:
		            case self::ST_ASTEXT:
		            case self::ST_ASWKB:
		            case self::ST_ASWKT:
		            case self::ST_BUFFER:
		            case self::ST_CENTROID:
		            case self::ST_CONTAINS:
		            case self::ST_CROSSES:
		            case self::ST_DIFFERENCE:
		            case self::ST_DIMENSION:
		            case self::ST_DISJOINT:
		            case self::ST_DISTANCE:
		            case self::ST_ENDPOINT:
		            case self::ST_ENVELOPE:
		            case self::ST_EQUALS:
		            case self::ST_EXTERIORRING:
		            case self::ST_GEOMCOLLFROMTEXT:
		            case self::ST_GEOMCOLLFROMTXT:
		            case self::ST_GEOMCOLLFROMWKB:
		            case self::ST_GEOMETRYCOLLECTIONFROMTEXT:
		            case self::ST_GEOMETRYCOLLECTIONFROMWKB:
		            case self::ST_GEOMETRYFROMTEXT:
		            case self::ST_GEOMETRYFROMWKB:
		            case self::ST_GEOMETRYN:
		            case self::ST_GEOMETRYTYPE:
		            case self::ST_GEOMFROMTEXT:
		            case self::ST_GEOMFROMWKB:
		            case self::ST_INTERIORRINGN:
		            case self::ST_INTERSECTION:
		            case self::ST_INTERSECTS:
		            case self::ST_ISCLOSED:
		            case self::ST_ISEMPTY:
		            case self::ST_ISSIMPLE:
		            case self::ST_LINEFROMTEXT:
		            case self::ST_LINEFROMWKB:
		            case self::ST_LINESTRINGFROMTEXT:
		            case self::ST_LINESTRINGFROMWKB:
		            case self::ST_NUMGEOMETRIES:
		            case self::ST_NUMINTERIORRING:
		            case self::ST_NUMINTERIORRINGS:
		            case self::ST_NUMPOINTS:
		            case self::ST_OVERLAPS:
		            case self::ST_POINTFROMTEXT:
		            case self::ST_POINTFROMWKB:
		            case self::ST_POINTN:
		            case self::ST_POLYFROMTEXT:
		            case self::ST_POLYFROMWKB:
		            case self::ST_POLYGONFROMTEXT:
		            case self::ST_POLYGONFROMWKB:
		            case self::ST_SRID:
		            case self::ST_STARTPOINT:
		            case self::ST_SYMDIFFERENCE:
		            case self::ST_TOUCHES:
		            case self::ST_UNION:
		            case self::ST_WITHIN:
		            case self::ST_X:
		            case self::ST_Y:
		            case self::SUBDATE:
		            case self::SUBSTRING_INDEX:
		            case self::SUBTIME:
		            case self::SYSTEM_USER:
		            case self::TAN:
		            case self::TIMEDIFF:
		            case self::TIMESTAMPADD:
		            case self::TIMESTAMPDIFF:
		            case self::TIME_FORMAT:
		            case self::TIME_TO_SEC:
		            case self::TOUCHES:
		            case self::TO_BASE64:
		            case self::TO_DAYS:
		            case self::TO_SECONDS:
		            case self::TP_CONNECTION_ADMIN:
		            case self::UCASE:
		            case self::UNCOMPRESS:
		            case self::UNCOMPRESSED_LENGTH:
		            case self::UNHEX:
		            case self::UNIX_TIMESTAMP:
		            case self::UPDATEXML:
		            case self::UPPER:
		            case self::UUID:
		            case self::UUID_SHORT:
		            case self::VALIDATE_PASSWORD_STRENGTH:
		            case self::VERSION:
		            case self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
		            case self::WEEKDAY:
		            case self::WEEKOFYEAR:
		            case self::WEIGHT_STRING:
		            case self::WITHIN:
		            case self::YEARWEEK:
		            case self::Y_FUNCTION:
		            case self::X_FUNCTION:
		            case self::MOD:
		            case self::ID:
		            	$this->setState(6183);
		            	$this->simpleId();
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function withStatement(): Context\WithStatementContext
		{
		    $localContext = new Context\WithStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 540, self::RULE_withStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(6186);
		        $this->match(self::WITH);
		        $this->setState(6188);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 903, $this->ctx)) {
		            case 1:
		        	    $this->setState(6187);
		        	    $this->match(self::RECURSIVE);
		        	break;
		        }
		        $this->setState(6190);
		        $this->commonTableExpressions();
		        $this->setState(6195);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::COMMA) {
		        	$this->setState(6191);
		        	$this->match(self::COMMA);
		        	$this->setState(6192);
		        	$this->commonTableExpressions();
		        	$this->setState(6197);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function tableStatement(): Context\TableStatementContext
		{
		    $localContext = new Context\TableStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 542, self::RULE_tableStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(6198);
		        $this->match(self::TABLE);
		        $this->setState(6199);
		        $this->tableName();
		        $this->setState(6201);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::ORDER) {
		        	$this->setState(6200);
		        	$this->orderByClause();
		        }
		        $this->setState(6204);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::LIMIT) {
		        	$this->setState(6203);
		        	$this->limitClause();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function diagnosticsStatement(): Context\DiagnosticsStatementContext
		{
		    $localContext = new Context\DiagnosticsStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 544, self::RULE_diagnosticsStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(6206);
		        $this->match(self::GET);
		        $this->setState(6208);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::CURRENT || $_la === self::STACKED) {
		        	$this->setState(6207);

		        	$_la = $this->input->LA(1);

		        	if (!($_la === self::CURRENT || $_la === self::STACKED)) {
		        	$this->errorHandler->recoverInline($this);
		        	} else {
		        		if ($this->input->LA(1) === Token::EOF) {
		        		    $this->matchedEOF = true;
		        	    }

		        		$this->errorHandler->reportMatch($this);
		        		$this->consume();
		        	}
		        }
		        $this->setState(6210);
		        $this->match(self::DIAGNOSTICS);
		        $this->setState(6242);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 911, $this->ctx)) {
		        	case 1:
		        	    $this->setState(6211);
		        	    $this->variableClause();
		        	    $this->setState(6212);
		        	    $this->match(self::EQUAL_SYMBOL);
		        	    $this->setState(6213);

		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::NUMBER || $_la === self::ROW_COUNT)) {
		        	    $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	    $this->setState(6221);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::COMMA) {
		        	    	$this->setState(6214);
		        	    	$this->match(self::COMMA);
		        	    	$this->setState(6215);
		        	    	$this->variableClause();
		        	    	$this->setState(6216);
		        	    	$this->match(self::EQUAL_SYMBOL);
		        	    	$this->setState(6217);

		        	    	$_la = $this->input->LA(1);

		        	    	if (!($_la === self::NUMBER || $_la === self::ROW_COUNT)) {
		        	    	$this->errorHandler->recoverInline($this);
		        	    	} else {
		        	    		if ($this->input->LA(1) === Token::EOF) {
		        	    		    $this->matchedEOF = true;
		        	    	    }

		        	    		$this->errorHandler->reportMatch($this);
		        	    		$this->consume();
		        	    	}
		        	    	$this->setState(6223);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	break;

		        	case 2:
		        	    $this->setState(6224);
		        	    $this->match(self::CONDITION);
		        	    $this->setState(6227);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->input->LA(1)) {
		        	        case self::ZERO_DECIMAL:
		        	        case self::ONE_DECIMAL:
		        	        case self::TWO_DECIMAL:
		        	        case self::DECIMAL_LITERAL:
		        	        case self::REAL_LITERAL:
		        	        	$this->setState(6225);
		        	        	$this->decimalLiteral();
		        	        	break;

		        	        case self::ARRAY:
		        	        case self::ATTRIBUTE:
		        	        case self::BUCKETS:
		        	        case self::CONDITION:
		        	        case self::CURRENT:
		        	        case self::CURRENT_USER:
		        	        case self::DATABASE:
		        	        case self::DEFAULT:
		        	        case self::DIAGNOSTICS:
		        	        case self::EMPTY:
		        	        case self::ENFORCED:
		        	        case self::EXCEPT:
		        	        case self::GROUP:
		        	        case self::IF:
		        	        case self::IGNORED:
		        	        case self::INSERT:
		        	        case self::LATERAL:
		        	        case self::LEFT:
		        	        case self::NUMBER:
		        	        case self::OPTIONAL:
		        	        case self::ORDER:
		        	        case self::PRIMARY:
		        	        case self::REPEAT:
		        	        case self::REPLACE:
		        	        case self::RIGHT:
		        	        case self::SCHEMA:
		        	        case self::SKIP_QUERY_REWRITE:
		        	        case self::STACKED:
		        	        case self::DATE:
		        	        case self::TIME:
		        	        case self::TIMESTAMP:
		        	        case self::DATETIME:
		        	        case self::YEAR:
		        	        case self::BINARY:
		        	        case self::TEXT:
		        	        case self::ENUM:
		        	        case self::SERIAL:
		        	        case self::JSON_ARRAY:
		        	        case self::JSON_ARRAYAGG:
		        	        case self::JSON_ARRAY_APPEND:
		        	        case self::JSON_ARRAY_INSERT:
		        	        case self::JSON_CONTAINS:
		        	        case self::JSON_CONTAINS_PATH:
		        	        case self::JSON_DEPTH:
		        	        case self::JSON_EXTRACT:
		        	        case self::JSON_INSERT:
		        	        case self::JSON_KEYS:
		        	        case self::JSON_LENGTH:
		        	        case self::JSON_MERGE:
		        	        case self::JSON_MERGE_PATCH:
		        	        case self::JSON_MERGE_PRESERVE:
		        	        case self::JSON_OBJECT:
		        	        case self::JSON_OBJECTAGG:
		        	        case self::JSON_OVERLAPS:
		        	        case self::JSON_PRETTY:
		        	        case self::JSON_QUOTE:
		        	        case self::JSON_REMOVE:
		        	        case self::JSON_REPLACE:
		        	        case self::JSON_SCHEMA_VALID:
		        	        case self::JSON_SCHEMA_VALIDATION_REPORT:
		        	        case self::JSON_SEARCH:
		        	        case self::JSON_SET:
		        	        case self::JSON_STORAGE_FREE:
		        	        case self::JSON_STORAGE_SIZE:
		        	        case self::JSON_TABLE:
		        	        case self::JSON_TYPE:
		        	        case self::JSON_UNQUOTE:
		        	        case self::JSON_VALID:
		        	        case self::JSON_VALUE:
		        	        case self::NESTED:
		        	        case self::ORDINALITY:
		        	        case self::PATH:
		        	        case self::AVG:
		        	        case self::BIT_AND:
		        	        case self::BIT_OR:
		        	        case self::BIT_XOR:
		        	        case self::COUNT:
		        	        case self::CUME_DIST:
		        	        case self::DENSE_RANK:
		        	        case self::FIRST_VALUE:
		        	        case self::GROUP_CONCAT:
		        	        case self::LAG:
		        	        case self::LAST_VALUE:
		        	        case self::LEAD:
		        	        case self::MAX:
		        	        case self::MIN:
		        	        case self::NTILE:
		        	        case self::NTH_VALUE:
		        	        case self::PERCENT_RANK:
		        	        case self::RANK:
		        	        case self::ROW_NUMBER:
		        	        case self::STD:
		        	        case self::STDDEV:
		        	        case self::STDDEV_POP:
		        	        case self::STDDEV_SAMP:
		        	        case self::SUM:
		        	        case self::VAR_POP:
		        	        case self::VAR_SAMP:
		        	        case self::VARIANCE:
		        	        case self::CURRENT_DATE:
		        	        case self::CURRENT_TIME:
		        	        case self::CURRENT_TIMESTAMP:
		        	        case self::LOCALTIME:
		        	        case self::CURDATE:
		        	        case self::CURTIME:
		        	        case self::DATE_ADD:
		        	        case self::DATE_SUB:
		        	        case self::LOCALTIMESTAMP:
		        	        case self::NOW:
		        	        case self::POSITION:
		        	        case self::SUBSTR:
		        	        case self::SUBSTRING:
		        	        case self::SYSDATE:
		        	        case self::TRIM:
		        	        case self::UTC_DATE:
		        	        case self::UTC_TIME:
		        	        case self::UTC_TIMESTAMP:
		        	        case self::ACCOUNT:
		        	        case self::ACTION:
		        	        case self::AFTER:
		        	        case self::AGGREGATE:
		        	        case self::ALGORITHM:
		        	        case self::ANY:
		        	        case self::AT:
		        	        case self::AUTHORS:
		        	        case self::AUTOCOMMIT:
		        	        case self::AUTOEXTEND_SIZE:
		        	        case self::AUTO_INCREMENT:
		        	        case self::AVG_ROW_LENGTH:
		        	        case self::BEGIN:
		        	        case self::BINLOG:
		        	        case self::BIT:
		        	        case self::BLOCK:
		        	        case self::BOOL:
		        	        case self::BOOLEAN:
		        	        case self::BTREE:
		        	        case self::CACHE:
		        	        case self::CASCADED:
		        	        case self::CHAIN:
		        	        case self::CHANGED:
		        	        case self::CHANNEL:
		        	        case self::CHECKSUM:
		        	        case self::PAGE_CHECKSUM:
		        	        case self::CIPHER:
		        	        case self::CLASS_ORIGIN:
		        	        case self::CLIENT:
		        	        case self::CLOSE:
		        	        case self::CLUSTERING:
		        	        case self::COALESCE:
		        	        case self::CODE:
		        	        case self::COLUMNS:
		        	        case self::COLUMN_FORMAT:
		        	        case self::COLUMN_NAME:
		        	        case self::COMMENT:
		        	        case self::COMMIT:
		        	        case self::COMPACT:
		        	        case self::COMPLETION:
		        	        case self::COMPRESSED:
		        	        case self::COMPRESSION:
		        	        case self::CONCURRENT:
		        	        case self::CONNECT:
		        	        case self::CONNECTION:
		        	        case self::CONSISTENT:
		        	        case self::CONSTRAINT_CATALOG:
		        	        case self::CONSTRAINT_SCHEMA:
		        	        case self::CONSTRAINT_NAME:
		        	        case self::CONTAINS:
		        	        case self::CONTEXT:
		        	        case self::CONTRIBUTORS:
		        	        case self::COPY:
		        	        case self::CPU:
		        	        case self::CURSOR_NAME:
		        	        case self::DATA:
		        	        case self::DATAFILE:
		        	        case self::DEALLOCATE:
		        	        case self::DEFAULT_AUTH:
		        	        case self::DEFINER:
		        	        case self::DELAY_KEY_WRITE:
		        	        case self::DES_KEY_FILE:
		        	        case self::DIRECTORY:
		        	        case self::DISABLE:
		        	        case self::DISCARD:
		        	        case self::DISK:
		        	        case self::DO:
		        	        case self::DUMPFILE:
		        	        case self::DUPLICATE:
		        	        case self::DYNAMIC:
		        	        case self::ENABLE:
		        	        case self::ENCRYPTION:
		        	        case self::END:
		        	        case self::ENDS:
		        	        case self::ENGINE:
		        	        case self::ENGINES:
		        	        case self::ERROR:
		        	        case self::ERRORS:
		        	        case self::ESCAPE:
		        	        case self::EVEN:
		        	        case self::EVENT:
		        	        case self::EVENTS:
		        	        case self::EVERY:
		        	        case self::EXCHANGE:
		        	        case self::EXCLUSIVE:
		        	        case self::EXPIRE:
		        	        case self::EXPORT:
		        	        case self::EXTENDED:
		        	        case self::EXTENT_SIZE:
		        	        case self::FAILED_LOGIN_ATTEMPTS:
		        	        case self::FAST:
		        	        case self::FAULTS:
		        	        case self::FIELDS:
		        	        case self::FILE_BLOCK_SIZE:
		        	        case self::FILTER:
		        	        case self::FIRST:
		        	        case self::FIXED:
		        	        case self::FLUSH:
		        	        case self::FOLLOWS:
		        	        case self::FOUND:
		        	        case self::FULL:
		        	        case self::FUNCTION:
		        	        case self::GENERAL:
		        	        case self::GLOBAL:
		        	        case self::GRANTS:
		        	        case self::GROUP_REPLICATION:
		        	        case self::HANDLER:
		        	        case self::HASH:
		        	        case self::HELP:
		        	        case self::HISTORY:
		        	        case self::HOST:
		        	        case self::HOSTS:
		        	        case self::IDENTIFIED:
		        	        case self::IGNORE_SERVER_IDS:
		        	        case self::IMPORT:
		        	        case self::INDEXES:
		        	        case self::INITIAL_SIZE:
		        	        case self::INPLACE:
		        	        case self::INSERT_METHOD:
		        	        case self::INSTALL:
		        	        case self::INSTANCE:
		        	        case self::INSTANT:
		        	        case self::INVISIBLE:
		        	        case self::INVOKER:
		        	        case self::IO:
		        	        case self::IO_THREAD:
		        	        case self::IPC:
		        	        case self::ISOLATION:
		        	        case self::ISSUER:
		        	        case self::JSON:
		        	        case self::KEY_BLOCK_SIZE:
		        	        case self::LANGUAGE:
		        	        case self::LAST:
		        	        case self::LEAVES:
		        	        case self::LESS:
		        	        case self::LEVEL:
		        	        case self::LIST:
		        	        case self::LOCAL:
		        	        case self::LOGFILE:
		        	        case self::LOGS:
		        	        case self::MASTER:
		        	        case self::MASTER_AUTO_POSITION:
		        	        case self::MASTER_CONNECT_RETRY:
		        	        case self::MASTER_DELAY:
		        	        case self::MASTER_HEARTBEAT_PERIOD:
		        	        case self::MASTER_HOST:
		        	        case self::MASTER_LOG_FILE:
		        	        case self::MASTER_LOG_POS:
		        	        case self::MASTER_PASSWORD:
		        	        case self::MASTER_PORT:
		        	        case self::MASTER_RETRY_COUNT:
		        	        case self::MASTER_SSL:
		        	        case self::MASTER_SSL_CA:
		        	        case self::MASTER_SSL_CAPATH:
		        	        case self::MASTER_SSL_CERT:
		        	        case self::MASTER_SSL_CIPHER:
		        	        case self::MASTER_SSL_CRL:
		        	        case self::MASTER_SSL_CRLPATH:
		        	        case self::MASTER_SSL_KEY:
		        	        case self::MASTER_TLS_VERSION:
		        	        case self::MASTER_USER:
		        	        case self::MAX_CONNECTIONS_PER_HOUR:
		        	        case self::MAX_QUERIES_PER_HOUR:
		        	        case self::MAX_ROWS:
		        	        case self::MAX_SIZE:
		        	        case self::MAX_UPDATES_PER_HOUR:
		        	        case self::MAX_USER_CONNECTIONS:
		        	        case self::MEDIUM:
		        	        case self::MEMBER:
		        	        case self::MERGE:
		        	        case self::MESSAGE_TEXT:
		        	        case self::MID:
		        	        case self::MIGRATE:
		        	        case self::MIN_ROWS:
		        	        case self::MODE:
		        	        case self::MODIFY:
		        	        case self::MUTEX:
		        	        case self::MYSQL:
		        	        case self::MYSQL_ERRNO:
		        	        case self::NAME:
		        	        case self::NAMES:
		        	        case self::NCHAR:
		        	        case self::NEVER:
		        	        case self::NEXT:
		        	        case self::NO:
		        	        case self::NOCOPY:
		        	        case self::NOWAIT:
		        	        case self::NODEGROUP:
		        	        case self::NONE:
		        	        case self::ODBC:
		        	        case self::OFFLINE:
		        	        case self::OFFSET:
		        	        case self::OF:
		        	        case self::OJ:
		        	        case self::OLD_PASSWORD:
		        	        case self::ONE:
		        	        case self::ONLINE:
		        	        case self::ONLY:
		        	        case self::OPEN:
		        	        case self::OPTIMIZER_COSTS:
		        	        case self::OPTIONS:
		        	        case self::OWNER:
		        	        case self::PACK_KEYS:
		        	        case self::PAGE:
		        	        case self::PARSER:
		        	        case self::PARTIAL:
		        	        case self::PARTITIONING:
		        	        case self::PARTITIONS:
		        	        case self::PASSWORD:
		        	        case self::PASSWORD_LOCK_TIME:
		        	        case self::PHASE:
		        	        case self::PLUGIN:
		        	        case self::PLUGIN_DIR:
		        	        case self::PLUGINS:
		        	        case self::PORT:
		        	        case self::PRECEDES:
		        	        case self::PREPARE:
		        	        case self::PRESERVE:
		        	        case self::PREV:
		        	        case self::PROCESSLIST:
		        	        case self::PROFILE:
		        	        case self::PROFILES:
		        	        case self::PROXY:
		        	        case self::QUERY:
		        	        case self::QUICK:
		        	        case self::REBUILD:
		        	        case self::RECOVER:
		        	        case self::RECURSIVE:
		        	        case self::REDO_BUFFER_SIZE:
		        	        case self::REDUNDANT:
		        	        case self::RELAY:
		        	        case self::RELAY_LOG_FILE:
		        	        case self::RELAY_LOG_POS:
		        	        case self::RELAYLOG:
		        	        case self::REMOVE:
		        	        case self::REORGANIZE:
		        	        case self::REPAIR:
		        	        case self::REPLICATE_DO_DB:
		        	        case self::REPLICATE_DO_TABLE:
		        	        case self::REPLICATE_IGNORE_DB:
		        	        case self::REPLICATE_IGNORE_TABLE:
		        	        case self::REPLICATE_REWRITE_DB:
		        	        case self::REPLICATE_WILD_DO_TABLE:
		        	        case self::REPLICATE_WILD_IGNORE_TABLE:
		        	        case self::REPLICATION:
		        	        case self::RESET:
		        	        case self::RESUME:
		        	        case self::RETURNED_SQLSTATE:
		        	        case self::RETURNS:
		        	        case self::REUSE:
		        	        case self::ROLE:
		        	        case self::ROLLBACK:
		        	        case self::ROLLUP:
		        	        case self::ROTATE:
		        	        case self::ROW:
		        	        case self::ROWS:
		        	        case self::ROW_FORMAT:
		        	        case self::RTREE:
		        	        case self::SAVEPOINT:
		        	        case self::SCHEDULE:
		        	        case self::SECURITY:
		        	        case self::SERVER:
		        	        case self::SESSION:
		        	        case self::SHARE:
		        	        case self::SHARED:
		        	        case self::SIGNED:
		        	        case self::SIMPLE:
		        	        case self::SLAVE:
		        	        case self::SLOW:
		        	        case self::SNAPSHOT:
		        	        case self::SOCKET:
		        	        case self::SOME:
		        	        case self::SONAME:
		        	        case self::SOUNDS:
		        	        case self::SOURCE:
		        	        case self::SQL_AFTER_GTIDS:
		        	        case self::SQL_AFTER_MTS_GAPS:
		        	        case self::SQL_BEFORE_GTIDS:
		        	        case self::SQL_BUFFER_RESULT:
		        	        case self::SQL_CACHE:
		        	        case self::SQL_NO_CACHE:
		        	        case self::SQL_THREAD:
		        	        case self::START:
		        	        case self::STARTS:
		        	        case self::STATS_AUTO_RECALC:
		        	        case self::STATS_PERSISTENT:
		        	        case self::STATS_SAMPLE_PAGES:
		        	        case self::STATUS:
		        	        case self::STOP:
		        	        case self::STORAGE:
		        	        case self::STRING:
		        	        case self::SUBCLASS_ORIGIN:
		        	        case self::SUBJECT:
		        	        case self::SUBPARTITION:
		        	        case self::SUBPARTITIONS:
		        	        case self::SUSPEND:
		        	        case self::SWAPS:
		        	        case self::SWITCHES:
		        	        case self::TABLE_NAME:
		        	        case self::TABLESPACE:
		        	        case self::TABLE_TYPE:
		        	        case self::TEMPORARY:
		        	        case self::TEMPTABLE:
		        	        case self::THAN:
		        	        case self::TRADITIONAL:
		        	        case self::TRANSACTION:
		        	        case self::TRANSACTIONAL:
		        	        case self::TRIGGERS:
		        	        case self::TRUNCATE:
		        	        case self::UNBOUNDED:
		        	        case self::UNDEFINED:
		        	        case self::UNDOFILE:
		        	        case self::UNDO_BUFFER_SIZE:
		        	        case self::UNINSTALL:
		        	        case self::UNKNOWN:
		        	        case self::UNTIL:
		        	        case self::UPGRADE:
		        	        case self::USER:
		        	        case self::USE_FRM:
		        	        case self::USER_RESOURCES:
		        	        case self::VALIDATION:
		        	        case self::VALUE:
		        	        case self::VARIABLES:
		        	        case self::VIEW:
		        	        case self::VIRTUAL:
		        	        case self::VISIBLE:
		        	        case self::WAIT:
		        	        case self::WARNINGS:
		        	        case self::WITHOUT:
		        	        case self::WORK:
		        	        case self::WRAPPER:
		        	        case self::X509:
		        	        case self::XA:
		        	        case self::XML:
		        	        case self::EUR:
		        	        case self::USA:
		        	        case self::JIS:
		        	        case self::ISO:
		        	        case self::INTERNAL:
		        	        case self::QUARTER:
		        	        case self::MONTH:
		        	        case self::DAY:
		        	        case self::HOUR:
		        	        case self::MINUTE:
		        	        case self::WEEK:
		        	        case self::SECOND:
		        	        case self::MICROSECOND:
		        	        case self::ADMIN:
		        	        case self::AUDIT_ABORT_EXEMPT:
		        	        case self::AUDIT_ADMIN:
		        	        case self::AUTHENTICATION_POLICY_ADMIN:
		        	        case self::BACKUP_ADMIN:
		        	        case self::BINLOG_ADMIN:
		        	        case self::BINLOG_ENCRYPTION_ADMIN:
		        	        case self::CLONE_ADMIN:
		        	        case self::CONNECTION_ADMIN:
		        	        case self::ENCRYPTION_KEY_ADMIN:
		        	        case self::EXECUTE:
		        	        case self::FILE:
		        	        case self::FIREWALL_ADMIN:
		        	        case self::FIREWALL_EXEMPT:
		        	        case self::FIREWALL_USER:
		        	        case self::GROUP_REPLICATION_ADMIN:
		        	        case self::INNODB_REDO_LOG_ARCHIVE:
		        	        case self::INVOKE:
		        	        case self::LAMBDA:
		        	        case self::NDB_STORED_USER:
		        	        case self::PASSWORDLESS_USER_ADMIN:
		        	        case self::PERSIST_RO_VARIABLES_ADMIN:
		        	        case self::PRIVILEGES:
		        	        case self::PROCESS:
		        	        case self::RELOAD:
		        	        case self::REPLICATION_APPLIER:
		        	        case self::REPLICATION_SLAVE_ADMIN:
		        	        case self::RESOURCE_GROUP_ADMIN:
		        	        case self::RESOURCE_GROUP_USER:
		        	        case self::ROLE_ADMIN:
		        	        case self::ROUTINE:
		        	        case self::S3:
		        	        case self::SESSION_VARIABLES_ADMIN:
		        	        case self::SET_USER_ID:
		        	        case self::SHOW_ROUTINE:
		        	        case self::SHUTDOWN:
		        	        case self::SUPER:
		        	        case self::SYSTEM_VARIABLES_ADMIN:
		        	        case self::TABLES:
		        	        case self::TABLE_ENCRYPTION_ADMIN:
		        	        case self::VERSION_TOKEN_ADMIN:
		        	        case self::XA_RECOVER_ADMIN:
		        	        case self::ARMSCII8:
		        	        case self::ASCII:
		        	        case self::BIG5:
		        	        case self::CP1250:
		        	        case self::CP1251:
		        	        case self::CP1256:
		        	        case self::CP1257:
		        	        case self::CP850:
		        	        case self::CP852:
		        	        case self::CP866:
		        	        case self::CP932:
		        	        case self::DEC8:
		        	        case self::EUCJPMS:
		        	        case self::EUCKR:
		        	        case self::GB18030:
		        	        case self::GB2312:
		        	        case self::GBK:
		        	        case self::GEOSTD8:
		        	        case self::GREEK:
		        	        case self::HEBREW:
		        	        case self::HP8:
		        	        case self::KEYBCS2:
		        	        case self::KOI8R:
		        	        case self::KOI8U:
		        	        case self::LATIN1:
		        	        case self::LATIN2:
		        	        case self::LATIN5:
		        	        case self::LATIN7:
		        	        case self::MACCE:
		        	        case self::MACROMAN:
		        	        case self::SJIS:
		        	        case self::SWE7:
		        	        case self::TIS620:
		        	        case self::UCS2:
		        	        case self::UJIS:
		        	        case self::UTF16:
		        	        case self::UTF16LE:
		        	        case self::UTF32:
		        	        case self::UTF8:
		        	        case self::UTF8MB3:
		        	        case self::UTF8MB4:
		        	        case self::ARCHIVE:
		        	        case self::BLACKHOLE:
		        	        case self::CSV:
		        	        case self::FEDERATED:
		        	        case self::INNODB:
		        	        case self::MEMORY:
		        	        case self::MRG_MYISAM:
		        	        case self::MYISAM:
		        	        case self::NDB:
		        	        case self::NDBCLUSTER:
		        	        case self::PERFORMANCE_SCHEMA:
		        	        case self::TOKUDB:
		        	        case self::REPEATABLE:
		        	        case self::COMMITTED:
		        	        case self::UNCOMMITTED:
		        	        case self::SERIALIZABLE:
		        	        case self::GEOMETRYCOLLECTION:
		        	        case self::LINESTRING:
		        	        case self::MULTILINESTRING:
		        	        case self::MULTIPOINT:
		        	        case self::MULTIPOLYGON:
		        	        case self::POINT:
		        	        case self::POLYGON:
		        	        case self::ABS:
		        	        case self::ACOS:
		        	        case self::ADDDATE:
		        	        case self::ADDTIME:
		        	        case self::AES_DECRYPT:
		        	        case self::AES_ENCRYPT:
		        	        case self::AREA:
		        	        case self::ASBINARY:
		        	        case self::ASIN:
		        	        case self::ASTEXT:
		        	        case self::ASWKB:
		        	        case self::ASWKT:
		        	        case self::ASYMMETRIC_DECRYPT:
		        	        case self::ASYMMETRIC_DERIVE:
		        	        case self::ASYMMETRIC_ENCRYPT:
		        	        case self::ASYMMETRIC_SIGN:
		        	        case self::ASYMMETRIC_VERIFY:
		        	        case self::ATAN:
		        	        case self::ATAN2:
		        	        case self::BENCHMARK:
		        	        case self::BIN:
		        	        case self::BIT_COUNT:
		        	        case self::BIT_LENGTH:
		        	        case self::BUFFER:
		        	        case self::CATALOG_NAME:
		        	        case self::CEIL:
		        	        case self::CEILING:
		        	        case self::CENTROID:
		        	        case self::CHARACTER_LENGTH:
		        	        case self::CHARSET:
		        	        case self::CHAR_LENGTH:
		        	        case self::COERCIBILITY:
		        	        case self::COLLATION:
		        	        case self::COMPRESS:
		        	        case self::CONCAT:
		        	        case self::CONCAT_WS:
		        	        case self::CONNECTION_ID:
		        	        case self::CONV:
		        	        case self::CONVERT_TZ:
		        	        case self::COS:
		        	        case self::COT:
		        	        case self::CRC32:
		        	        case self::CREATE_ASYMMETRIC_PRIV_KEY:
		        	        case self::CREATE_ASYMMETRIC_PUB_KEY:
		        	        case self::CREATE_DH_PARAMETERS:
		        	        case self::CREATE_DIGEST:
		        	        case self::CROSSES:
		        	        case self::DATEDIFF:
		        	        case self::DATE_FORMAT:
		        	        case self::DAYNAME:
		        	        case self::DAYOFMONTH:
		        	        case self::DAYOFWEEK:
		        	        case self::DAYOFYEAR:
		        	        case self::DECODE:
		        	        case self::DEGREES:
		        	        case self::DES_DECRYPT:
		        	        case self::DES_ENCRYPT:
		        	        case self::DIMENSION:
		        	        case self::DISJOINT:
		        	        case self::ELT:
		        	        case self::ENCODE:
		        	        case self::ENCRYPT:
		        	        case self::ENDPOINT:
		        	        case self::ENGINE_ATTRIBUTE:
		        	        case self::ENVELOPE:
		        	        case self::EQUALS:
		        	        case self::EXP:
		        	        case self::EXPORT_SET:
		        	        case self::EXTERIORRING:
		        	        case self::EXTRACTVALUE:
		        	        case self::FIELD:
		        	        case self::FIND_IN_SET:
		        	        case self::FLOOR:
		        	        case self::FORMAT:
		        	        case self::FOUND_ROWS:
		        	        case self::FROM_BASE64:
		        	        case self::FROM_DAYS:
		        	        case self::FROM_UNIXTIME:
		        	        case self::GEOMCOLLFROMTEXT:
		        	        case self::GEOMCOLLFROMWKB:
		        	        case self::GEOMETRYCOLLECTIONFROMTEXT:
		        	        case self::GEOMETRYCOLLECTIONFROMWKB:
		        	        case self::GEOMETRYFROMTEXT:
		        	        case self::GEOMETRYFROMWKB:
		        	        case self::GEOMETRYN:
		        	        case self::GEOMETRYTYPE:
		        	        case self::GEOMFROMTEXT:
		        	        case self::GEOMFROMWKB:
		        	        case self::GET_FORMAT:
		        	        case self::GET_LOCK:
		        	        case self::GLENGTH:
		        	        case self::GREATEST:
		        	        case self::GTID_SUBSET:
		        	        case self::GTID_SUBTRACT:
		        	        case self::HEX:
		        	        case self::IFNULL:
		        	        case self::INET6_ATON:
		        	        case self::INET6_NTOA:
		        	        case self::INET_ATON:
		        	        case self::INET_NTOA:
		        	        case self::INSTR:
		        	        case self::INTERIORRINGN:
		        	        case self::INTERSECTS:
		        	        case self::ISCLOSED:
		        	        case self::ISEMPTY:
		        	        case self::ISNULL:
		        	        case self::ISSIMPLE:
		        	        case self::IS_FREE_LOCK:
		        	        case self::IS_IPV4:
		        	        case self::IS_IPV4_COMPAT:
		        	        case self::IS_IPV4_MAPPED:
		        	        case self::IS_IPV6:
		        	        case self::IS_USED_LOCK:
		        	        case self::LAST_INSERT_ID:
		        	        case self::LCASE:
		        	        case self::LEAST:
		        	        case self::LENGTH:
		        	        case self::LINEFROMTEXT:
		        	        case self::LINEFROMWKB:
		        	        case self::LINESTRINGFROMTEXT:
		        	        case self::LINESTRINGFROMWKB:
		        	        case self::LN:
		        	        case self::LOAD_FILE:
		        	        case self::LOCATE:
		        	        case self::LOG:
		        	        case self::LOG10:
		        	        case self::LOG2:
		        	        case self::LOWER:
		        	        case self::LPAD:
		        	        case self::LTRIM:
		        	        case self::MAKEDATE:
		        	        case self::MAKETIME:
		        	        case self::MAKE_SET:
		        	        case self::MASTER_POS_WAIT:
		        	        case self::MBRCONTAINS:
		        	        case self::MBRDISJOINT:
		        	        case self::MBREQUAL:
		        	        case self::MBRINTERSECTS:
		        	        case self::MBROVERLAPS:
		        	        case self::MBRTOUCHES:
		        	        case self::MBRWITHIN:
		        	        case self::MD5:
		        	        case self::MLINEFROMTEXT:
		        	        case self::MLINEFROMWKB:
		        	        case self::MONTHNAME:
		        	        case self::MPOINTFROMTEXT:
		        	        case self::MPOINTFROMWKB:
		        	        case self::MPOLYFROMTEXT:
		        	        case self::MPOLYFROMWKB:
		        	        case self::MULTILINESTRINGFROMTEXT:
		        	        case self::MULTILINESTRINGFROMWKB:
		        	        case self::MULTIPOINTFROMTEXT:
		        	        case self::MULTIPOINTFROMWKB:
		        	        case self::MULTIPOLYGONFROMTEXT:
		        	        case self::MULTIPOLYGONFROMWKB:
		        	        case self::NAME_CONST:
		        	        case self::NULLIF:
		        	        case self::NUMGEOMETRIES:
		        	        case self::NUMINTERIORRINGS:
		        	        case self::NUMPOINTS:
		        	        case self::OCT:
		        	        case self::OCTET_LENGTH:
		        	        case self::ORD:
		        	        case self::OVERLAPS:
		        	        case self::PERIOD_ADD:
		        	        case self::PERIOD_DIFF:
		        	        case self::PI:
		        	        case self::POINTFROMTEXT:
		        	        case self::POINTFROMWKB:
		        	        case self::POINTN:
		        	        case self::POLYFROMTEXT:
		        	        case self::POLYFROMWKB:
		        	        case self::POLYGONFROMTEXT:
		        	        case self::POLYGONFROMWKB:
		        	        case self::POW:
		        	        case self::POWER:
		        	        case self::QUOTE:
		        	        case self::RADIANS:
		        	        case self::RAND:
		        	        case self::RANDOM:
		        	        case self::RANDOM_BYTES:
		        	        case self::RELEASE_LOCK:
		        	        case self::REVERSE:
		        	        case self::ROUND:
		        	        case self::ROW_COUNT:
		        	        case self::RPAD:
		        	        case self::RTRIM:
		        	        case self::SEC_TO_TIME:
		        	        case self::SECONDARY_ENGINE_ATTRIBUTE:
		        	        case self::SESSION_USER:
		        	        case self::SHA:
		        	        case self::SHA1:
		        	        case self::SHA2:
		        	        case self::SCHEMA_NAME:
		        	        case self::SIGN:
		        	        case self::SIN:
		        	        case self::SLEEP:
		        	        case self::SOUNDEX:
		        	        case self::SQL_THREAD_WAIT_AFTER_GTIDS:
		        	        case self::SQRT:
		        	        case self::SRID:
		        	        case self::STARTPOINT:
		        	        case self::STRCMP:
		        	        case self::STR_TO_DATE:
		        	        case self::ST_AREA:
		        	        case self::ST_ASBINARY:
		        	        case self::ST_ASTEXT:
		        	        case self::ST_ASWKB:
		        	        case self::ST_ASWKT:
		        	        case self::ST_BUFFER:
		        	        case self::ST_CENTROID:
		        	        case self::ST_CONTAINS:
		        	        case self::ST_CROSSES:
		        	        case self::ST_DIFFERENCE:
		        	        case self::ST_DIMENSION:
		        	        case self::ST_DISJOINT:
		        	        case self::ST_DISTANCE:
		        	        case self::ST_ENDPOINT:
		        	        case self::ST_ENVELOPE:
		        	        case self::ST_EQUALS:
		        	        case self::ST_EXTERIORRING:
		        	        case self::ST_GEOMCOLLFROMTEXT:
		        	        case self::ST_GEOMCOLLFROMTXT:
		        	        case self::ST_GEOMCOLLFROMWKB:
		        	        case self::ST_GEOMETRYCOLLECTIONFROMTEXT:
		        	        case self::ST_GEOMETRYCOLLECTIONFROMWKB:
		        	        case self::ST_GEOMETRYFROMTEXT:
		        	        case self::ST_GEOMETRYFROMWKB:
		        	        case self::ST_GEOMETRYN:
		        	        case self::ST_GEOMETRYTYPE:
		        	        case self::ST_GEOMFROMTEXT:
		        	        case self::ST_GEOMFROMWKB:
		        	        case self::ST_INTERIORRINGN:
		        	        case self::ST_INTERSECTION:
		        	        case self::ST_INTERSECTS:
		        	        case self::ST_ISCLOSED:
		        	        case self::ST_ISEMPTY:
		        	        case self::ST_ISSIMPLE:
		        	        case self::ST_LINEFROMTEXT:
		        	        case self::ST_LINEFROMWKB:
		        	        case self::ST_LINESTRINGFROMTEXT:
		        	        case self::ST_LINESTRINGFROMWKB:
		        	        case self::ST_NUMGEOMETRIES:
		        	        case self::ST_NUMINTERIORRING:
		        	        case self::ST_NUMINTERIORRINGS:
		        	        case self::ST_NUMPOINTS:
		        	        case self::ST_OVERLAPS:
		        	        case self::ST_POINTFROMTEXT:
		        	        case self::ST_POINTFROMWKB:
		        	        case self::ST_POINTN:
		        	        case self::ST_POLYFROMTEXT:
		        	        case self::ST_POLYFROMWKB:
		        	        case self::ST_POLYGONFROMTEXT:
		        	        case self::ST_POLYGONFROMWKB:
		        	        case self::ST_SRID:
		        	        case self::ST_STARTPOINT:
		        	        case self::ST_SYMDIFFERENCE:
		        	        case self::ST_TOUCHES:
		        	        case self::ST_UNION:
		        	        case self::ST_WITHIN:
		        	        case self::ST_X:
		        	        case self::ST_Y:
		        	        case self::SUBDATE:
		        	        case self::SUBSTRING_INDEX:
		        	        case self::SUBTIME:
		        	        case self::SYSTEM_USER:
		        	        case self::TAN:
		        	        case self::TIMEDIFF:
		        	        case self::TIMESTAMPADD:
		        	        case self::TIMESTAMPDIFF:
		        	        case self::TIME_FORMAT:
		        	        case self::TIME_TO_SEC:
		        	        case self::TOUCHES:
		        	        case self::TO_BASE64:
		        	        case self::TO_DAYS:
		        	        case self::TO_SECONDS:
		        	        case self::TP_CONNECTION_ADMIN:
		        	        case self::UCASE:
		        	        case self::UNCOMPRESS:
		        	        case self::UNCOMPRESSED_LENGTH:
		        	        case self::UNHEX:
		        	        case self::UNIX_TIMESTAMP:
		        	        case self::UPDATEXML:
		        	        case self::UPPER:
		        	        case self::UUID:
		        	        case self::UUID_SHORT:
		        	        case self::VALIDATE_PASSWORD_STRENGTH:
		        	        case self::VERSION:
		        	        case self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
		        	        case self::WEEKDAY:
		        	        case self::WEEKOFYEAR:
		        	        case self::WEIGHT_STRING:
		        	        case self::WITHIN:
		        	        case self::YEARWEEK:
		        	        case self::Y_FUNCTION:
		        	        case self::X_FUNCTION:
		        	        case self::MOD:
		        	        case self::AT_SIGN:
		        	        case self::CHARSET_REVERSE_QOUTE_STRING:
		        	        case self::STRING_LITERAL:
		        	        case self::ID:
		        	        case self::LOCAL_ID:
		        	        case self::GLOBAL_ID:
		        	        	$this->setState(6226);
		        	        	$this->variableClause();
		        	        	break;

		        	    default:
		        	    	throw new NoViableAltException($this);
		        	    }
		        	    $this->setState(6229);
		        	    $this->variableClause();
		        	    $this->setState(6230);
		        	    $this->match(self::EQUAL_SYMBOL);
		        	    $this->setState(6231);
		        	    $this->diagnosticsConditionInformationName();
		        	    $this->setState(6239);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::COMMA) {
		        	    	$this->setState(6232);
		        	    	$this->match(self::COMMA);
		        	    	$this->setState(6233);
		        	    	$this->variableClause();
		        	    	$this->setState(6234);
		        	    	$this->match(self::EQUAL_SYMBOL);
		        	    	$this->setState(6235);
		        	    	$this->diagnosticsConditionInformationName();
		        	    	$this->setState(6241);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function diagnosticsConditionInformationName(): Context\DiagnosticsConditionInformationNameContext
		{
		    $localContext = new Context\DiagnosticsConditionInformationNameContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 546, self::RULE_diagnosticsConditionInformationName);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(6244);

		        $_la = $this->input->LA(1);

		        if (!((((($_la - 359)) & ~0x3f) === 0 && ((1 << ($_la - 359)) & 272105729) !== 0) || $_la === self::MESSAGE_TEXT || $_la === self::MYSQL_ERRNO || (((($_la - 592)) & ~0x3f) === 0 && ((1 << ($_la - 592)) & 18155135997837313) !== 0) || $_la === self::CATALOG_NAME || $_la === self::SCHEMA_NAME)) {
		        $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function describeObjectClause(): Context\DescribeObjectClauseContext
		{
		    $localContext = new Context\DescribeObjectClauseContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 548, self::RULE_describeObjectClause);

		    try {
		        $this->setState(6256);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::DELETE:
		            case self::INSERT:
		            case self::REPLACE:
		            case self::SELECT:
		            case self::UPDATE:
		            case self::LR_BRACKET:
		            	$localContext = new Context\DescribeStatementsContext($localContext);
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(6251);
		            	$this->errorHandler->sync($this);

		            	switch ($this->input->LA(1)) {
		            	    case self::SELECT:
		            	    case self::LR_BRACKET:
		            	    	$this->setState(6246);
		            	    	$this->selectStatement();
		            	    	break;

		            	    case self::DELETE:
		            	    	$this->setState(6247);
		            	    	$this->deleteStatement();
		            	    	break;

		            	    case self::INSERT:
		            	    	$this->setState(6248);
		            	    	$this->insertStatement();
		            	    	break;

		            	    case self::REPLACE:
		            	    	$this->setState(6249);
		            	    	$this->replaceStatement();
		            	    	break;

		            	    case self::UPDATE:
		            	    	$this->setState(6250);
		            	    	$this->updateStatement();
		            	    	break;

		            	default:
		            		throw new NoViableAltException($this);
		            	}
		            	break;

		            case self::FOR:
		            	$localContext = new Context\DescribeConnectionContext($localContext);
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(6253);
		            	$this->match(self::FOR);
		            	$this->setState(6254);
		            	$this->match(self::CONNECTION);
		            	$this->setState(6255);
		            	$this->uid();
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function fullId(): Context\FullIdContext
		{
		    $localContext = new Context\FullIdContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 550, self::RULE_fullId);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(6258);
		        $this->uid();
		        $this->setState(6262);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 914, $this->ctx)) {
		            case 1:
		        	    $this->setState(6259);
		        	    $this->match(self::DOT_ID);
		        	break;

		            case 2:
		        	    $this->setState(6260);
		        	    $this->match(self::DOT);
		        	    $this->setState(6261);
		        	    $this->uid();
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function tableName(): Context\TableNameContext
		{
		    $localContext = new Context\TableNameContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 552, self::RULE_tableName);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(6264);
		        $this->fullId();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function roleName(): Context\RoleNameContext
		{
		    $localContext = new Context\RoleNameContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 554, self::RULE_roleName);

		    try {
		        $this->setState(6268);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 915, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(6266);
		        	    $this->userName();
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(6267);
		        	    $this->uid();
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function fullColumnName(): Context\FullColumnNameContext
		{
		    $localContext = new Context\FullColumnNameContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 556, self::RULE_fullColumnName);

		    try {
		        $this->setState(6284);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 920, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(6270);
		        	    $this->uid();
		        	    $this->setState(6275);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 917, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(6271);
		        	    	    $this->dottedId();
		        	    	    $this->setState(6273);
		        	    	    $this->errorHandler->sync($this);

		        	    	    switch ($this->getInterpreter()->adaptivePredict($this->input, 916, $this->ctx)) {
		        	    	        case 1:
		        	    	    	    $this->setState(6272);
		        	    	    	    $this->dottedId();
		        	    	    	break;
		        	    	    }
		        	    	break;
		        	    }
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(6278);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 918, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(6277);
		        	    	    $this->matchWildcard();
		        	    	break;
		        	    }
		        	    $this->setState(6280);
		        	    $this->dottedId();
		        	    $this->setState(6282);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 919, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(6281);
		        	    	    $this->dottedId();
		        	    	break;
		        	    }
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function indexColumnName(): Context\IndexColumnNameContext
		{
		    $localContext = new Context\IndexColumnNameContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 558, self::RULE_indexColumnName);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(6297);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 923, $this->ctx)) {
		        	case 1:
		        	    $this->setState(6288);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 921, $this->ctx)) {
		        	    	case 1:
		        	    	    $this->setState(6286);
		        	    	    $this->uid();
		        	    	break;

		        	    	case 2:
		        	    	    $this->setState(6287);
		        	    	    $this->match(self::STRING_LITERAL);
		        	    	break;
		        	    }
		        	    $this->setState(6294);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::LR_BRACKET) {
		        	    	$this->setState(6290);
		        	    	$this->match(self::LR_BRACKET);
		        	    	$this->setState(6291);
		        	    	$this->decimalLiteral();
		        	    	$this->setState(6292);
		        	    	$this->match(self::RR_BRACKET);
		        	    }
		        	break;

		        	case 2:
		        	    $this->setState(6296);
		        	    $this->recursiveExpression(0);
		        	break;
		        }
		        $this->setState(6300);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::ASC || $_la === self::DESC) {
		        	$this->setState(6299);

		        	$localContext->sortType = $this->input->LT(1);
		        	$_la = $this->input->LA(1);

		        	if (!($_la === self::ASC || $_la === self::DESC)) {
		        		    $localContext->sortType = $this->errorHandler->recoverInline($this);
		        	} else {
		        		if ($this->input->LA(1) === Token::EOF) {
		        		    $this->matchedEOF = true;
		        	    }

		        		$this->errorHandler->reportMatch($this);
		        		$this->consume();
		        	}
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function simpleUserName(): Context\SimpleUserNameContext
		{
		    $localContext = new Context\SimpleUserNameContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 560, self::RULE_simpleUserName);

		    try {
		        $this->setState(6306);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 925, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(6302);
		        	    $this->match(self::STRING_LITERAL);
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(6303);
		        	    $this->match(self::ID);
		        	break;

		        	case 3:
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(6304);
		        	    $this->match(self::ADMIN);
		        	break;

		        	case 4:
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(6305);
		        	    $this->keywordsCanBeId();
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function hostName(): Context\HostNameContext
		{
		    $localContext = new Context\HostNameContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 562, self::RULE_hostName);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(6308);

		        $_la = $this->input->LA(1);

		        if (!((((($_la - 1137)) & ~0x3f) === 0 && ((1 << ($_la - 1137)) & 6291457) !== 0))) {
		        $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function userName(): Context\UserNameContext
		{
		    $localContext = new Context\UserNameContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 564, self::RULE_userName);

		    try {
		        $this->setState(6315);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 926, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(6310);
		        	    $this->simpleUserName();
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(6311);
		        	    $this->simpleUserName();
		        	    $this->setState(6312);
		        	    $this->hostName();
		        	break;

		        	case 3:
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(6314);
		        	    $this->currentUserExpression();
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function mysqlVariable(): Context\MysqlVariableContext
		{
		    $localContext = new Context\MysqlVariableContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 566, self::RULE_mysqlVariable);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(6317);

		        $_la = $this->input->LA(1);

		        if (!($_la === self::LOCAL_ID || $_la === self::GLOBAL_ID)) {
		        $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function charsetName(): Context\CharsetNameContext
		{
		    $localContext = new Context\CharsetNameContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 568, self::RULE_charsetName);

		    try {
		        $this->setState(6323);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 927, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(6319);
		        	    $this->match(self::BINARY);
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(6320);
		        	    $this->charsetNameBase();
		        	break;

		        	case 3:
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(6321);
		        	    $this->match(self::STRING_LITERAL);
		        	break;

		        	case 4:
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(6322);
		        	    $this->match(self::CHARSET_REVERSE_QOUTE_STRING);
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function collationName(): Context\CollationNameContext
		{
		    $localContext = new Context\CollationNameContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 570, self::RULE_collationName);

		    try {
		        $this->setState(6327);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 928, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(6325);
		        	    $this->uid();
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(6326);
		        	    $this->match(self::STRING_LITERAL);
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function engineName(): Context\EngineNameContext
		{
		    $localContext = new Context\EngineNameContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 572, self::RULE_engineName);

		    try {
		        $this->setState(6332);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::CONNECT:
		            case self::ARCHIVE:
		            case self::BLACKHOLE:
		            case self::CSV:
		            case self::FEDERATED:
		            case self::INNODB:
		            case self::MEMORY:
		            case self::MRG_MYISAM:
		            case self::MYISAM:
		            case self::NDB:
		            case self::NDBCLUSTER:
		            case self::PERFORMANCE_SCHEMA:
		            case self::TOKUDB:
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(6329);
		            	$this->engineNameBase();
		            	break;

		            case self::ID:
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(6330);
		            	$this->match(self::ID);
		            	break;

		            case self::STRING_LITERAL:
		            	$this->enterOuterAlt($localContext, 3);
		            	$this->setState(6331);
		            	$this->match(self::STRING_LITERAL);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function engineNameBase(): Context\EngineNameBaseContext
		{
		    $localContext = new Context\EngineNameBaseContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 574, self::RULE_engineNameBase);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(6334);

		        $_la = $this->input->LA(1);

		        if (!($_la === self::CONNECT || (((($_la - 787)) & ~0x3f) === 0 && ((1 << ($_la - 787)) & 4095) !== 0))) {
		        $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function uuidSet(): Context\UuidSetContext
		{
		    $localContext = new Context\UuidSetContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 576, self::RULE_uuidSet);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(6336);
		        $this->decimalLiteral();
		        $this->setState(6337);
		        $this->match(self::MINUS);
		        $this->setState(6338);
		        $this->decimalLiteral();
		        $this->setState(6339);
		        $this->match(self::MINUS);
		        $this->setState(6340);
		        $this->decimalLiteral();
		        $this->setState(6341);
		        $this->match(self::MINUS);
		        $this->setState(6342);
		        $this->decimalLiteral();
		        $this->setState(6343);
		        $this->match(self::MINUS);
		        $this->setState(6344);
		        $this->decimalLiteral();
		        $this->setState(6350); 
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        do {
		        	$this->setState(6345);
		        	$this->match(self::COLON_SYMB);
		        	$this->setState(6346);
		        	$this->decimalLiteral();
		        	$this->setState(6347);
		        	$this->match(self::MINUS);
		        	$this->setState(6348);
		        	$this->decimalLiteral();
		        	$this->setState(6352); 
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        } while ($_la === self::COLON_SYMB);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function xid(): Context\XidContext
		{
		    $localContext = new Context\XidContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 578, self::RULE_xid);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(6354);
		        $localContext->globalTableUid = $this->xuidStringId();
		        $this->setState(6361);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::COMMA) {
		        	$this->setState(6355);
		        	$this->match(self::COMMA);
		        	$this->setState(6356);
		        	$localContext->qualifier = $this->xuidStringId();
		        	$this->setState(6359);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);

		        	if ($_la === self::COMMA) {
		        		$this->setState(6357);
		        		$this->match(self::COMMA);
		        		$this->setState(6358);
		        		$localContext->idFormat = $this->decimalLiteral();
		        	}
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function xuidStringId(): Context\XuidStringIdContext
		{
		    $localContext = new Context\XuidStringIdContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 580, self::RULE_xuidStringId);

		    try {
		        $this->setState(6370);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::STRING_LITERAL:
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(6363);
		            	$this->match(self::STRING_LITERAL);
		            	break;

		            case self::BIT_STRING:
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(6364);
		            	$this->match(self::BIT_STRING);
		            	break;

		            case self::HEXADECIMAL_LITERAL:
		            	$this->enterOuterAlt($localContext, 3);
		            	$this->setState(6366); 
		            	$this->errorHandler->sync($this);

		            	$_la = $this->input->LA(1);
		            	do {
		            		$this->setState(6365);
		            		$this->match(self::HEXADECIMAL_LITERAL);
		            		$this->setState(6368); 
		            		$this->errorHandler->sync($this);
		            		$_la = $this->input->LA(1);
		            	} while ($_la === self::HEXADECIMAL_LITERAL);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function authPlugin(): Context\AuthPluginContext
		{
		    $localContext = new Context\AuthPluginContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 582, self::RULE_authPlugin);

		    try {
		        $this->setState(6374);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 935, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(6372);
		        	    $this->uid();
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(6373);
		        	    $this->match(self::STRING_LITERAL);
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function uid(): Context\UidContext
		{
		    $localContext = new Context\UidContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 584, self::RULE_uid);

		    try {
		        $this->setState(6379);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::ARRAY:
		            case self::ATTRIBUTE:
		            case self::BUCKETS:
		            case self::CONDITION:
		            case self::CURRENT:
		            case self::CURRENT_USER:
		            case self::DATABASE:
		            case self::DEFAULT:
		            case self::DIAGNOSTICS:
		            case self::EMPTY:
		            case self::ENFORCED:
		            case self::EXCEPT:
		            case self::GROUP:
		            case self::IF:
		            case self::IGNORED:
		            case self::INSERT:
		            case self::LATERAL:
		            case self::LEFT:
		            case self::NUMBER:
		            case self::OPTIONAL:
		            case self::ORDER:
		            case self::PRIMARY:
		            case self::REPEAT:
		            case self::REPLACE:
		            case self::RIGHT:
		            case self::SCHEMA:
		            case self::SKIP_QUERY_REWRITE:
		            case self::STACKED:
		            case self::DATE:
		            case self::TIME:
		            case self::TIMESTAMP:
		            case self::DATETIME:
		            case self::YEAR:
		            case self::BINARY:
		            case self::TEXT:
		            case self::ENUM:
		            case self::SERIAL:
		            case self::JSON_ARRAY:
		            case self::JSON_ARRAYAGG:
		            case self::JSON_ARRAY_APPEND:
		            case self::JSON_ARRAY_INSERT:
		            case self::JSON_CONTAINS:
		            case self::JSON_CONTAINS_PATH:
		            case self::JSON_DEPTH:
		            case self::JSON_EXTRACT:
		            case self::JSON_INSERT:
		            case self::JSON_KEYS:
		            case self::JSON_LENGTH:
		            case self::JSON_MERGE:
		            case self::JSON_MERGE_PATCH:
		            case self::JSON_MERGE_PRESERVE:
		            case self::JSON_OBJECT:
		            case self::JSON_OBJECTAGG:
		            case self::JSON_OVERLAPS:
		            case self::JSON_PRETTY:
		            case self::JSON_QUOTE:
		            case self::JSON_REMOVE:
		            case self::JSON_REPLACE:
		            case self::JSON_SCHEMA_VALID:
		            case self::JSON_SCHEMA_VALIDATION_REPORT:
		            case self::JSON_SEARCH:
		            case self::JSON_SET:
		            case self::JSON_STORAGE_FREE:
		            case self::JSON_STORAGE_SIZE:
		            case self::JSON_TABLE:
		            case self::JSON_TYPE:
		            case self::JSON_UNQUOTE:
		            case self::JSON_VALID:
		            case self::JSON_VALUE:
		            case self::NESTED:
		            case self::ORDINALITY:
		            case self::PATH:
		            case self::AVG:
		            case self::BIT_AND:
		            case self::BIT_OR:
		            case self::BIT_XOR:
		            case self::COUNT:
		            case self::CUME_DIST:
		            case self::DENSE_RANK:
		            case self::FIRST_VALUE:
		            case self::GROUP_CONCAT:
		            case self::LAG:
		            case self::LAST_VALUE:
		            case self::LEAD:
		            case self::MAX:
		            case self::MIN:
		            case self::NTILE:
		            case self::NTH_VALUE:
		            case self::PERCENT_RANK:
		            case self::RANK:
		            case self::ROW_NUMBER:
		            case self::STD:
		            case self::STDDEV:
		            case self::STDDEV_POP:
		            case self::STDDEV_SAMP:
		            case self::SUM:
		            case self::VAR_POP:
		            case self::VAR_SAMP:
		            case self::VARIANCE:
		            case self::CURRENT_DATE:
		            case self::CURRENT_TIME:
		            case self::CURRENT_TIMESTAMP:
		            case self::LOCALTIME:
		            case self::CURDATE:
		            case self::CURTIME:
		            case self::DATE_ADD:
		            case self::DATE_SUB:
		            case self::LOCALTIMESTAMP:
		            case self::NOW:
		            case self::POSITION:
		            case self::SUBSTR:
		            case self::SUBSTRING:
		            case self::SYSDATE:
		            case self::TRIM:
		            case self::UTC_DATE:
		            case self::UTC_TIME:
		            case self::UTC_TIMESTAMP:
		            case self::ACCOUNT:
		            case self::ACTION:
		            case self::AFTER:
		            case self::AGGREGATE:
		            case self::ALGORITHM:
		            case self::ANY:
		            case self::AT:
		            case self::AUTHORS:
		            case self::AUTOCOMMIT:
		            case self::AUTOEXTEND_SIZE:
		            case self::AUTO_INCREMENT:
		            case self::AVG_ROW_LENGTH:
		            case self::BEGIN:
		            case self::BINLOG:
		            case self::BIT:
		            case self::BLOCK:
		            case self::BOOL:
		            case self::BOOLEAN:
		            case self::BTREE:
		            case self::CACHE:
		            case self::CASCADED:
		            case self::CHAIN:
		            case self::CHANGED:
		            case self::CHANNEL:
		            case self::CHECKSUM:
		            case self::PAGE_CHECKSUM:
		            case self::CIPHER:
		            case self::CLASS_ORIGIN:
		            case self::CLIENT:
		            case self::CLOSE:
		            case self::CLUSTERING:
		            case self::COALESCE:
		            case self::CODE:
		            case self::COLUMNS:
		            case self::COLUMN_FORMAT:
		            case self::COLUMN_NAME:
		            case self::COMMENT:
		            case self::COMMIT:
		            case self::COMPACT:
		            case self::COMPLETION:
		            case self::COMPRESSED:
		            case self::COMPRESSION:
		            case self::CONCURRENT:
		            case self::CONNECT:
		            case self::CONNECTION:
		            case self::CONSISTENT:
		            case self::CONSTRAINT_CATALOG:
		            case self::CONSTRAINT_SCHEMA:
		            case self::CONSTRAINT_NAME:
		            case self::CONTAINS:
		            case self::CONTEXT:
		            case self::CONTRIBUTORS:
		            case self::COPY:
		            case self::CPU:
		            case self::CURSOR_NAME:
		            case self::DATA:
		            case self::DATAFILE:
		            case self::DEALLOCATE:
		            case self::DEFAULT_AUTH:
		            case self::DEFINER:
		            case self::DELAY_KEY_WRITE:
		            case self::DES_KEY_FILE:
		            case self::DIRECTORY:
		            case self::DISABLE:
		            case self::DISCARD:
		            case self::DISK:
		            case self::DO:
		            case self::DUMPFILE:
		            case self::DUPLICATE:
		            case self::DYNAMIC:
		            case self::ENABLE:
		            case self::ENCRYPTION:
		            case self::END:
		            case self::ENDS:
		            case self::ENGINE:
		            case self::ENGINES:
		            case self::ERROR:
		            case self::ERRORS:
		            case self::ESCAPE:
		            case self::EVEN:
		            case self::EVENT:
		            case self::EVENTS:
		            case self::EVERY:
		            case self::EXCHANGE:
		            case self::EXCLUSIVE:
		            case self::EXPIRE:
		            case self::EXPORT:
		            case self::EXTENDED:
		            case self::EXTENT_SIZE:
		            case self::FAILED_LOGIN_ATTEMPTS:
		            case self::FAST:
		            case self::FAULTS:
		            case self::FIELDS:
		            case self::FILE_BLOCK_SIZE:
		            case self::FILTER:
		            case self::FIRST:
		            case self::FIXED:
		            case self::FLUSH:
		            case self::FOLLOWS:
		            case self::FOUND:
		            case self::FULL:
		            case self::FUNCTION:
		            case self::GENERAL:
		            case self::GLOBAL:
		            case self::GRANTS:
		            case self::GROUP_REPLICATION:
		            case self::HANDLER:
		            case self::HASH:
		            case self::HELP:
		            case self::HISTORY:
		            case self::HOST:
		            case self::HOSTS:
		            case self::IDENTIFIED:
		            case self::IGNORE_SERVER_IDS:
		            case self::IMPORT:
		            case self::INDEXES:
		            case self::INITIAL_SIZE:
		            case self::INPLACE:
		            case self::INSERT_METHOD:
		            case self::INSTALL:
		            case self::INSTANCE:
		            case self::INSTANT:
		            case self::INVISIBLE:
		            case self::INVOKER:
		            case self::IO:
		            case self::IO_THREAD:
		            case self::IPC:
		            case self::ISOLATION:
		            case self::ISSUER:
		            case self::JSON:
		            case self::KEY_BLOCK_SIZE:
		            case self::LANGUAGE:
		            case self::LAST:
		            case self::LEAVES:
		            case self::LESS:
		            case self::LEVEL:
		            case self::LIST:
		            case self::LOCAL:
		            case self::LOGFILE:
		            case self::LOGS:
		            case self::MASTER:
		            case self::MASTER_AUTO_POSITION:
		            case self::MASTER_CONNECT_RETRY:
		            case self::MASTER_DELAY:
		            case self::MASTER_HEARTBEAT_PERIOD:
		            case self::MASTER_HOST:
		            case self::MASTER_LOG_FILE:
		            case self::MASTER_LOG_POS:
		            case self::MASTER_PASSWORD:
		            case self::MASTER_PORT:
		            case self::MASTER_RETRY_COUNT:
		            case self::MASTER_SSL:
		            case self::MASTER_SSL_CA:
		            case self::MASTER_SSL_CAPATH:
		            case self::MASTER_SSL_CERT:
		            case self::MASTER_SSL_CIPHER:
		            case self::MASTER_SSL_CRL:
		            case self::MASTER_SSL_CRLPATH:
		            case self::MASTER_SSL_KEY:
		            case self::MASTER_TLS_VERSION:
		            case self::MASTER_USER:
		            case self::MAX_CONNECTIONS_PER_HOUR:
		            case self::MAX_QUERIES_PER_HOUR:
		            case self::MAX_ROWS:
		            case self::MAX_SIZE:
		            case self::MAX_UPDATES_PER_HOUR:
		            case self::MAX_USER_CONNECTIONS:
		            case self::MEDIUM:
		            case self::MEMBER:
		            case self::MERGE:
		            case self::MESSAGE_TEXT:
		            case self::MID:
		            case self::MIGRATE:
		            case self::MIN_ROWS:
		            case self::MODE:
		            case self::MODIFY:
		            case self::MUTEX:
		            case self::MYSQL:
		            case self::MYSQL_ERRNO:
		            case self::NAME:
		            case self::NAMES:
		            case self::NCHAR:
		            case self::NEVER:
		            case self::NEXT:
		            case self::NO:
		            case self::NOCOPY:
		            case self::NOWAIT:
		            case self::NODEGROUP:
		            case self::NONE:
		            case self::ODBC:
		            case self::OFFLINE:
		            case self::OFFSET:
		            case self::OF:
		            case self::OJ:
		            case self::OLD_PASSWORD:
		            case self::ONE:
		            case self::ONLINE:
		            case self::ONLY:
		            case self::OPEN:
		            case self::OPTIMIZER_COSTS:
		            case self::OPTIONS:
		            case self::OWNER:
		            case self::PACK_KEYS:
		            case self::PAGE:
		            case self::PARSER:
		            case self::PARTIAL:
		            case self::PARTITIONING:
		            case self::PARTITIONS:
		            case self::PASSWORD:
		            case self::PASSWORD_LOCK_TIME:
		            case self::PHASE:
		            case self::PLUGIN:
		            case self::PLUGIN_DIR:
		            case self::PLUGINS:
		            case self::PORT:
		            case self::PRECEDES:
		            case self::PREPARE:
		            case self::PRESERVE:
		            case self::PREV:
		            case self::PROCESSLIST:
		            case self::PROFILE:
		            case self::PROFILES:
		            case self::PROXY:
		            case self::QUERY:
		            case self::QUICK:
		            case self::REBUILD:
		            case self::RECOVER:
		            case self::RECURSIVE:
		            case self::REDO_BUFFER_SIZE:
		            case self::REDUNDANT:
		            case self::RELAY:
		            case self::RELAY_LOG_FILE:
		            case self::RELAY_LOG_POS:
		            case self::RELAYLOG:
		            case self::REMOVE:
		            case self::REORGANIZE:
		            case self::REPAIR:
		            case self::REPLICATE_DO_DB:
		            case self::REPLICATE_DO_TABLE:
		            case self::REPLICATE_IGNORE_DB:
		            case self::REPLICATE_IGNORE_TABLE:
		            case self::REPLICATE_REWRITE_DB:
		            case self::REPLICATE_WILD_DO_TABLE:
		            case self::REPLICATE_WILD_IGNORE_TABLE:
		            case self::REPLICATION:
		            case self::RESET:
		            case self::RESUME:
		            case self::RETURNED_SQLSTATE:
		            case self::RETURNS:
		            case self::REUSE:
		            case self::ROLE:
		            case self::ROLLBACK:
		            case self::ROLLUP:
		            case self::ROTATE:
		            case self::ROW:
		            case self::ROWS:
		            case self::ROW_FORMAT:
		            case self::RTREE:
		            case self::SAVEPOINT:
		            case self::SCHEDULE:
		            case self::SECURITY:
		            case self::SERVER:
		            case self::SESSION:
		            case self::SHARE:
		            case self::SHARED:
		            case self::SIGNED:
		            case self::SIMPLE:
		            case self::SLAVE:
		            case self::SLOW:
		            case self::SNAPSHOT:
		            case self::SOCKET:
		            case self::SOME:
		            case self::SONAME:
		            case self::SOUNDS:
		            case self::SOURCE:
		            case self::SQL_AFTER_GTIDS:
		            case self::SQL_AFTER_MTS_GAPS:
		            case self::SQL_BEFORE_GTIDS:
		            case self::SQL_BUFFER_RESULT:
		            case self::SQL_CACHE:
		            case self::SQL_NO_CACHE:
		            case self::SQL_THREAD:
		            case self::START:
		            case self::STARTS:
		            case self::STATS_AUTO_RECALC:
		            case self::STATS_PERSISTENT:
		            case self::STATS_SAMPLE_PAGES:
		            case self::STATUS:
		            case self::STOP:
		            case self::STORAGE:
		            case self::STRING:
		            case self::SUBCLASS_ORIGIN:
		            case self::SUBJECT:
		            case self::SUBPARTITION:
		            case self::SUBPARTITIONS:
		            case self::SUSPEND:
		            case self::SWAPS:
		            case self::SWITCHES:
		            case self::TABLE_NAME:
		            case self::TABLESPACE:
		            case self::TABLE_TYPE:
		            case self::TEMPORARY:
		            case self::TEMPTABLE:
		            case self::THAN:
		            case self::TRADITIONAL:
		            case self::TRANSACTION:
		            case self::TRANSACTIONAL:
		            case self::TRIGGERS:
		            case self::TRUNCATE:
		            case self::UNBOUNDED:
		            case self::UNDEFINED:
		            case self::UNDOFILE:
		            case self::UNDO_BUFFER_SIZE:
		            case self::UNINSTALL:
		            case self::UNKNOWN:
		            case self::UNTIL:
		            case self::UPGRADE:
		            case self::USER:
		            case self::USE_FRM:
		            case self::USER_RESOURCES:
		            case self::VALIDATION:
		            case self::VALUE:
		            case self::VARIABLES:
		            case self::VIEW:
		            case self::VIRTUAL:
		            case self::VISIBLE:
		            case self::WAIT:
		            case self::WARNINGS:
		            case self::WITHOUT:
		            case self::WORK:
		            case self::WRAPPER:
		            case self::X509:
		            case self::XA:
		            case self::XML:
		            case self::EUR:
		            case self::USA:
		            case self::JIS:
		            case self::ISO:
		            case self::INTERNAL:
		            case self::QUARTER:
		            case self::MONTH:
		            case self::DAY:
		            case self::HOUR:
		            case self::MINUTE:
		            case self::WEEK:
		            case self::SECOND:
		            case self::MICROSECOND:
		            case self::ADMIN:
		            case self::AUDIT_ABORT_EXEMPT:
		            case self::AUDIT_ADMIN:
		            case self::AUTHENTICATION_POLICY_ADMIN:
		            case self::BACKUP_ADMIN:
		            case self::BINLOG_ADMIN:
		            case self::BINLOG_ENCRYPTION_ADMIN:
		            case self::CLONE_ADMIN:
		            case self::CONNECTION_ADMIN:
		            case self::ENCRYPTION_KEY_ADMIN:
		            case self::EXECUTE:
		            case self::FILE:
		            case self::FIREWALL_ADMIN:
		            case self::FIREWALL_EXEMPT:
		            case self::FIREWALL_USER:
		            case self::GROUP_REPLICATION_ADMIN:
		            case self::INNODB_REDO_LOG_ARCHIVE:
		            case self::INVOKE:
		            case self::LAMBDA:
		            case self::NDB_STORED_USER:
		            case self::PASSWORDLESS_USER_ADMIN:
		            case self::PERSIST_RO_VARIABLES_ADMIN:
		            case self::PRIVILEGES:
		            case self::PROCESS:
		            case self::RELOAD:
		            case self::REPLICATION_APPLIER:
		            case self::REPLICATION_SLAVE_ADMIN:
		            case self::RESOURCE_GROUP_ADMIN:
		            case self::RESOURCE_GROUP_USER:
		            case self::ROLE_ADMIN:
		            case self::ROUTINE:
		            case self::S3:
		            case self::SESSION_VARIABLES_ADMIN:
		            case self::SET_USER_ID:
		            case self::SHOW_ROUTINE:
		            case self::SHUTDOWN:
		            case self::SUPER:
		            case self::SYSTEM_VARIABLES_ADMIN:
		            case self::TABLES:
		            case self::TABLE_ENCRYPTION_ADMIN:
		            case self::VERSION_TOKEN_ADMIN:
		            case self::XA_RECOVER_ADMIN:
		            case self::ARMSCII8:
		            case self::ASCII:
		            case self::BIG5:
		            case self::CP1250:
		            case self::CP1251:
		            case self::CP1256:
		            case self::CP1257:
		            case self::CP850:
		            case self::CP852:
		            case self::CP866:
		            case self::CP932:
		            case self::DEC8:
		            case self::EUCJPMS:
		            case self::EUCKR:
		            case self::GB18030:
		            case self::GB2312:
		            case self::GBK:
		            case self::GEOSTD8:
		            case self::GREEK:
		            case self::HEBREW:
		            case self::HP8:
		            case self::KEYBCS2:
		            case self::KOI8R:
		            case self::KOI8U:
		            case self::LATIN1:
		            case self::LATIN2:
		            case self::LATIN5:
		            case self::LATIN7:
		            case self::MACCE:
		            case self::MACROMAN:
		            case self::SJIS:
		            case self::SWE7:
		            case self::TIS620:
		            case self::UCS2:
		            case self::UJIS:
		            case self::UTF16:
		            case self::UTF16LE:
		            case self::UTF32:
		            case self::UTF8:
		            case self::UTF8MB3:
		            case self::UTF8MB4:
		            case self::ARCHIVE:
		            case self::BLACKHOLE:
		            case self::CSV:
		            case self::FEDERATED:
		            case self::INNODB:
		            case self::MEMORY:
		            case self::MRG_MYISAM:
		            case self::MYISAM:
		            case self::NDB:
		            case self::NDBCLUSTER:
		            case self::PERFORMANCE_SCHEMA:
		            case self::TOKUDB:
		            case self::REPEATABLE:
		            case self::COMMITTED:
		            case self::UNCOMMITTED:
		            case self::SERIALIZABLE:
		            case self::GEOMETRYCOLLECTION:
		            case self::LINESTRING:
		            case self::MULTILINESTRING:
		            case self::MULTIPOINT:
		            case self::MULTIPOLYGON:
		            case self::POINT:
		            case self::POLYGON:
		            case self::ABS:
		            case self::ACOS:
		            case self::ADDDATE:
		            case self::ADDTIME:
		            case self::AES_DECRYPT:
		            case self::AES_ENCRYPT:
		            case self::AREA:
		            case self::ASBINARY:
		            case self::ASIN:
		            case self::ASTEXT:
		            case self::ASWKB:
		            case self::ASWKT:
		            case self::ASYMMETRIC_DECRYPT:
		            case self::ASYMMETRIC_DERIVE:
		            case self::ASYMMETRIC_ENCRYPT:
		            case self::ASYMMETRIC_SIGN:
		            case self::ASYMMETRIC_VERIFY:
		            case self::ATAN:
		            case self::ATAN2:
		            case self::BENCHMARK:
		            case self::BIN:
		            case self::BIT_COUNT:
		            case self::BIT_LENGTH:
		            case self::BUFFER:
		            case self::CATALOG_NAME:
		            case self::CEIL:
		            case self::CEILING:
		            case self::CENTROID:
		            case self::CHARACTER_LENGTH:
		            case self::CHARSET:
		            case self::CHAR_LENGTH:
		            case self::COERCIBILITY:
		            case self::COLLATION:
		            case self::COMPRESS:
		            case self::CONCAT:
		            case self::CONCAT_WS:
		            case self::CONNECTION_ID:
		            case self::CONV:
		            case self::CONVERT_TZ:
		            case self::COS:
		            case self::COT:
		            case self::CRC32:
		            case self::CREATE_ASYMMETRIC_PRIV_KEY:
		            case self::CREATE_ASYMMETRIC_PUB_KEY:
		            case self::CREATE_DH_PARAMETERS:
		            case self::CREATE_DIGEST:
		            case self::CROSSES:
		            case self::DATEDIFF:
		            case self::DATE_FORMAT:
		            case self::DAYNAME:
		            case self::DAYOFMONTH:
		            case self::DAYOFWEEK:
		            case self::DAYOFYEAR:
		            case self::DECODE:
		            case self::DEGREES:
		            case self::DES_DECRYPT:
		            case self::DES_ENCRYPT:
		            case self::DIMENSION:
		            case self::DISJOINT:
		            case self::ELT:
		            case self::ENCODE:
		            case self::ENCRYPT:
		            case self::ENDPOINT:
		            case self::ENGINE_ATTRIBUTE:
		            case self::ENVELOPE:
		            case self::EQUALS:
		            case self::EXP:
		            case self::EXPORT_SET:
		            case self::EXTERIORRING:
		            case self::EXTRACTVALUE:
		            case self::FIELD:
		            case self::FIND_IN_SET:
		            case self::FLOOR:
		            case self::FORMAT:
		            case self::FOUND_ROWS:
		            case self::FROM_BASE64:
		            case self::FROM_DAYS:
		            case self::FROM_UNIXTIME:
		            case self::GEOMCOLLFROMTEXT:
		            case self::GEOMCOLLFROMWKB:
		            case self::GEOMETRYCOLLECTIONFROMTEXT:
		            case self::GEOMETRYCOLLECTIONFROMWKB:
		            case self::GEOMETRYFROMTEXT:
		            case self::GEOMETRYFROMWKB:
		            case self::GEOMETRYN:
		            case self::GEOMETRYTYPE:
		            case self::GEOMFROMTEXT:
		            case self::GEOMFROMWKB:
		            case self::GET_FORMAT:
		            case self::GET_LOCK:
		            case self::GLENGTH:
		            case self::GREATEST:
		            case self::GTID_SUBSET:
		            case self::GTID_SUBTRACT:
		            case self::HEX:
		            case self::IFNULL:
		            case self::INET6_ATON:
		            case self::INET6_NTOA:
		            case self::INET_ATON:
		            case self::INET_NTOA:
		            case self::INSTR:
		            case self::INTERIORRINGN:
		            case self::INTERSECTS:
		            case self::ISCLOSED:
		            case self::ISEMPTY:
		            case self::ISNULL:
		            case self::ISSIMPLE:
		            case self::IS_FREE_LOCK:
		            case self::IS_IPV4:
		            case self::IS_IPV4_COMPAT:
		            case self::IS_IPV4_MAPPED:
		            case self::IS_IPV6:
		            case self::IS_USED_LOCK:
		            case self::LAST_INSERT_ID:
		            case self::LCASE:
		            case self::LEAST:
		            case self::LENGTH:
		            case self::LINEFROMTEXT:
		            case self::LINEFROMWKB:
		            case self::LINESTRINGFROMTEXT:
		            case self::LINESTRINGFROMWKB:
		            case self::LN:
		            case self::LOAD_FILE:
		            case self::LOCATE:
		            case self::LOG:
		            case self::LOG10:
		            case self::LOG2:
		            case self::LOWER:
		            case self::LPAD:
		            case self::LTRIM:
		            case self::MAKEDATE:
		            case self::MAKETIME:
		            case self::MAKE_SET:
		            case self::MASTER_POS_WAIT:
		            case self::MBRCONTAINS:
		            case self::MBRDISJOINT:
		            case self::MBREQUAL:
		            case self::MBRINTERSECTS:
		            case self::MBROVERLAPS:
		            case self::MBRTOUCHES:
		            case self::MBRWITHIN:
		            case self::MD5:
		            case self::MLINEFROMTEXT:
		            case self::MLINEFROMWKB:
		            case self::MONTHNAME:
		            case self::MPOINTFROMTEXT:
		            case self::MPOINTFROMWKB:
		            case self::MPOLYFROMTEXT:
		            case self::MPOLYFROMWKB:
		            case self::MULTILINESTRINGFROMTEXT:
		            case self::MULTILINESTRINGFROMWKB:
		            case self::MULTIPOINTFROMTEXT:
		            case self::MULTIPOINTFROMWKB:
		            case self::MULTIPOLYGONFROMTEXT:
		            case self::MULTIPOLYGONFROMWKB:
		            case self::NAME_CONST:
		            case self::NULLIF:
		            case self::NUMGEOMETRIES:
		            case self::NUMINTERIORRINGS:
		            case self::NUMPOINTS:
		            case self::OCT:
		            case self::OCTET_LENGTH:
		            case self::ORD:
		            case self::OVERLAPS:
		            case self::PERIOD_ADD:
		            case self::PERIOD_DIFF:
		            case self::PI:
		            case self::POINTFROMTEXT:
		            case self::POINTFROMWKB:
		            case self::POINTN:
		            case self::POLYFROMTEXT:
		            case self::POLYFROMWKB:
		            case self::POLYGONFROMTEXT:
		            case self::POLYGONFROMWKB:
		            case self::POW:
		            case self::POWER:
		            case self::QUOTE:
		            case self::RADIANS:
		            case self::RAND:
		            case self::RANDOM:
		            case self::RANDOM_BYTES:
		            case self::RELEASE_LOCK:
		            case self::REVERSE:
		            case self::ROUND:
		            case self::ROW_COUNT:
		            case self::RPAD:
		            case self::RTRIM:
		            case self::SEC_TO_TIME:
		            case self::SECONDARY_ENGINE_ATTRIBUTE:
		            case self::SESSION_USER:
		            case self::SHA:
		            case self::SHA1:
		            case self::SHA2:
		            case self::SCHEMA_NAME:
		            case self::SIGN:
		            case self::SIN:
		            case self::SLEEP:
		            case self::SOUNDEX:
		            case self::SQL_THREAD_WAIT_AFTER_GTIDS:
		            case self::SQRT:
		            case self::SRID:
		            case self::STARTPOINT:
		            case self::STRCMP:
		            case self::STR_TO_DATE:
		            case self::ST_AREA:
		            case self::ST_ASBINARY:
		            case self::ST_ASTEXT:
		            case self::ST_ASWKB:
		            case self::ST_ASWKT:
		            case self::ST_BUFFER:
		            case self::ST_CENTROID:
		            case self::ST_CONTAINS:
		            case self::ST_CROSSES:
		            case self::ST_DIFFERENCE:
		            case self::ST_DIMENSION:
		            case self::ST_DISJOINT:
		            case self::ST_DISTANCE:
		            case self::ST_ENDPOINT:
		            case self::ST_ENVELOPE:
		            case self::ST_EQUALS:
		            case self::ST_EXTERIORRING:
		            case self::ST_GEOMCOLLFROMTEXT:
		            case self::ST_GEOMCOLLFROMTXT:
		            case self::ST_GEOMCOLLFROMWKB:
		            case self::ST_GEOMETRYCOLLECTIONFROMTEXT:
		            case self::ST_GEOMETRYCOLLECTIONFROMWKB:
		            case self::ST_GEOMETRYFROMTEXT:
		            case self::ST_GEOMETRYFROMWKB:
		            case self::ST_GEOMETRYN:
		            case self::ST_GEOMETRYTYPE:
		            case self::ST_GEOMFROMTEXT:
		            case self::ST_GEOMFROMWKB:
		            case self::ST_INTERIORRINGN:
		            case self::ST_INTERSECTION:
		            case self::ST_INTERSECTS:
		            case self::ST_ISCLOSED:
		            case self::ST_ISEMPTY:
		            case self::ST_ISSIMPLE:
		            case self::ST_LINEFROMTEXT:
		            case self::ST_LINEFROMWKB:
		            case self::ST_LINESTRINGFROMTEXT:
		            case self::ST_LINESTRINGFROMWKB:
		            case self::ST_NUMGEOMETRIES:
		            case self::ST_NUMINTERIORRING:
		            case self::ST_NUMINTERIORRINGS:
		            case self::ST_NUMPOINTS:
		            case self::ST_OVERLAPS:
		            case self::ST_POINTFROMTEXT:
		            case self::ST_POINTFROMWKB:
		            case self::ST_POINTN:
		            case self::ST_POLYFROMTEXT:
		            case self::ST_POLYFROMWKB:
		            case self::ST_POLYGONFROMTEXT:
		            case self::ST_POLYGONFROMWKB:
		            case self::ST_SRID:
		            case self::ST_STARTPOINT:
		            case self::ST_SYMDIFFERENCE:
		            case self::ST_TOUCHES:
		            case self::ST_UNION:
		            case self::ST_WITHIN:
		            case self::ST_X:
		            case self::ST_Y:
		            case self::SUBDATE:
		            case self::SUBSTRING_INDEX:
		            case self::SUBTIME:
		            case self::SYSTEM_USER:
		            case self::TAN:
		            case self::TIMEDIFF:
		            case self::TIMESTAMPADD:
		            case self::TIMESTAMPDIFF:
		            case self::TIME_FORMAT:
		            case self::TIME_TO_SEC:
		            case self::TOUCHES:
		            case self::TO_BASE64:
		            case self::TO_DAYS:
		            case self::TO_SECONDS:
		            case self::TP_CONNECTION_ADMIN:
		            case self::UCASE:
		            case self::UNCOMPRESS:
		            case self::UNCOMPRESSED_LENGTH:
		            case self::UNHEX:
		            case self::UNIX_TIMESTAMP:
		            case self::UPDATEXML:
		            case self::UPPER:
		            case self::UUID:
		            case self::UUID_SHORT:
		            case self::VALIDATE_PASSWORD_STRENGTH:
		            case self::VERSION:
		            case self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
		            case self::WEEKDAY:
		            case self::WEEKOFYEAR:
		            case self::WEIGHT_STRING:
		            case self::WITHIN:
		            case self::YEARWEEK:
		            case self::Y_FUNCTION:
		            case self::X_FUNCTION:
		            case self::MOD:
		            case self::ID:
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(6376);
		            	$this->simpleId();
		            	break;

		            case self::CHARSET_REVERSE_QOUTE_STRING:
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(6377);
		            	$this->match(self::CHARSET_REVERSE_QOUTE_STRING);
		            	break;

		            case self::STRING_LITERAL:
		            	$this->enterOuterAlt($localContext, 3);
		            	$this->setState(6378);
		            	$this->match(self::STRING_LITERAL);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function simpleId(): Context\SimpleIdContext
		{
		    $localContext = new Context\SimpleIdContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 586, self::RULE_simpleId);

		    try {
		        $this->setState(6390);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 937, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(6381);
		        	    $this->match(self::ID);
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(6382);
		        	    $this->charsetNameBase();
		        	break;

		        	case 3:
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(6383);
		        	    $this->transactionLevelBase();
		        	break;

		        	case 4:
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(6384);
		        	    $this->engineNameBase();
		        	break;

		        	case 5:
		        	    $this->enterOuterAlt($localContext, 5);
		        	    $this->setState(6385);
		        	    $this->privilegesBase();
		        	break;

		        	case 6:
		        	    $this->enterOuterAlt($localContext, 6);
		        	    $this->setState(6386);
		        	    $this->intervalTypeBase();
		        	break;

		        	case 7:
		        	    $this->enterOuterAlt($localContext, 7);
		        	    $this->setState(6387);
		        	    $this->dataTypeBase();
		        	break;

		        	case 8:
		        	    $this->enterOuterAlt($localContext, 8);
		        	    $this->setState(6388);
		        	    $this->keywordsCanBeId();
		        	break;

		        	case 9:
		        	    $this->enterOuterAlt($localContext, 9);
		        	    $this->setState(6389);
		        	    $this->scalarFunctionName();
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function dottedId(): Context\DottedIdContext
		{
		    $localContext = new Context\DottedIdContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 588, self::RULE_dottedId);

		    try {
		        $this->setState(6395);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::DOT_ID:
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(6392);
		            	$this->match(self::DOT_ID);
		            	break;

		            case self::DOT:
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(6393);
		            	$this->match(self::DOT);
		            	$this->setState(6394);
		            	$this->uid();
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function decimalLiteral(): Context\DecimalLiteralContext
		{
		    $localContext = new Context\DecimalLiteralContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 590, self::RULE_decimalLiteral);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(6397);

		        $_la = $this->input->LA(1);

		        if (!((((($_la - 1138)) & ~0x3f) === 0 && ((1 << ($_la - 1138)) & 10247) !== 0))) {
		        $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function fileSizeLiteral(): Context\FileSizeLiteralContext
		{
		    $localContext = new Context\FileSizeLiteralContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 592, self::RULE_fileSizeLiteral);

		    try {
		        $this->setState(6401);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::FILESIZE_LITERAL:
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(6399);
		            	$this->match(self::FILESIZE_LITERAL);
		            	break;

		            case self::ZERO_DECIMAL:
		            case self::ONE_DECIMAL:
		            case self::TWO_DECIMAL:
		            case self::DECIMAL_LITERAL:
		            case self::REAL_LITERAL:
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(6400);
		            	$this->decimalLiteral();
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function stringLiteral(): Context\StringLiteralContext
		{
		    $localContext = new Context\StringLiteralContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 594, self::RULE_stringLiteral);

		    try {
		        $this->setState(6426);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 946, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(6408);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->input->LA(1)) {
		        	        case self::STRING_LITERAL:
		        	        case self::STRING_CHARSET_NAME:
		        	        	$this->setState(6404);
		        	        	$this->errorHandler->sync($this);
		        	        	$_la = $this->input->LA(1);

		        	        	if ($_la === self::STRING_CHARSET_NAME) {
		        	        		$this->setState(6403);
		        	        		$this->match(self::STRING_CHARSET_NAME);
		        	        	}
		        	        	$this->setState(6406);
		        	        	$this->match(self::STRING_LITERAL);
		        	        	break;

		        	        case self::START_NATIONAL_STRING_LITERAL:
		        	        	$this->setState(6407);
		        	        	$this->match(self::START_NATIONAL_STRING_LITERAL);
		        	        	break;

		        	    default:
		        	    	throw new NoViableAltException($this);
		        	    }
		        	    $this->setState(6411); 
		        	    $this->errorHandler->sync($this);

		        	    $alt = 1;

		        	    do {
		        	    	switch ($alt) {
		        	    	case 1:
		        	    		$this->setState(6410);
		        	    		$this->match(self::STRING_LITERAL);
		        	    		break;
		        	    	default:
		        	    		throw new NoViableAltException($this);
		        	    	}

		        	    	$this->setState(6413); 
		        	    	$this->errorHandler->sync($this);

		        	    	$alt = $this->getInterpreter()->adaptivePredict($this->input, 942, $this->ctx);
		        	    } while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER);
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(6420);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->input->LA(1)) {
		        	        case self::STRING_LITERAL:
		        	        case self::STRING_CHARSET_NAME:
		        	        	$this->setState(6416);
		        	        	$this->errorHandler->sync($this);
		        	        	$_la = $this->input->LA(1);

		        	        	if ($_la === self::STRING_CHARSET_NAME) {
		        	        		$this->setState(6415);
		        	        		$this->match(self::STRING_CHARSET_NAME);
		        	        	}
		        	        	$this->setState(6418);
		        	        	$this->match(self::STRING_LITERAL);
		        	        	break;

		        	        case self::START_NATIONAL_STRING_LITERAL:
		        	        	$this->setState(6419);
		        	        	$this->match(self::START_NATIONAL_STRING_LITERAL);
		        	        	break;

		        	    default:
		        	    	throw new NoViableAltException($this);
		        	    }
		        	    $this->setState(6424);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 945, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(6422);
		        	    	    $this->match(self::COLLATE);
		        	    	    $this->setState(6423);
		        	    	    $this->collationName();
		        	    	break;
		        	    }
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function booleanLiteral(): Context\BooleanLiteralContext
		{
		    $localContext = new Context\BooleanLiteralContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 596, self::RULE_booleanLiteral);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(6428);

		        $_la = $this->input->LA(1);

		        if (!($_la === self::FALSE || $_la === self::TRUE)) {
		        $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function hexadecimalLiteral(): Context\HexadecimalLiteralContext
		{
		    $localContext = new Context\HexadecimalLiteralContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 598, self::RULE_hexadecimalLiteral);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(6431);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::STRING_CHARSET_NAME) {
		        	$this->setState(6430);
		        	$this->match(self::STRING_CHARSET_NAME);
		        }
		        $this->setState(6433);
		        $this->match(self::HEXADECIMAL_LITERAL);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function nullNotnull(): Context\NullNotnullContext
		{
		    $localContext = new Context\NullNotnullContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 600, self::RULE_nullNotnull);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(6436);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::NOT) {
		        	$this->setState(6435);
		        	$this->match(self::NOT);
		        }
		        $this->setState(6438);

		        $_la = $this->input->LA(1);

		        if (!($_la === self::NULL_LITERAL || $_la === self::NULL_SPEC_LITERAL)) {
		        $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function constant(): Context\ConstantContext
		{
		    $localContext = new Context\ConstantContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 602, self::RULE_constant);

		    try {
		        $this->setState(6452);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 950, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(6440);
		        	    $this->stringLiteral();
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(6441);
		        	    $this->decimalLiteral();
		        	break;

		        	case 3:
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(6442);
		        	    $this->match(self::MINUS);
		        	    $this->setState(6443);
		        	    $this->decimalLiteral();
		        	break;

		        	case 4:
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(6444);
		        	    $this->hexadecimalLiteral();
		        	break;

		        	case 5:
		        	    $this->enterOuterAlt($localContext, 5);
		        	    $this->setState(6445);
		        	    $this->booleanLiteral();
		        	break;

		        	case 6:
		        	    $this->enterOuterAlt($localContext, 6);
		        	    $this->setState(6446);
		        	    $this->match(self::REAL_LITERAL);
		        	break;

		        	case 7:
		        	    $this->enterOuterAlt($localContext, 7);
		        	    $this->setState(6447);
		        	    $this->match(self::BIT_STRING);
		        	break;

		        	case 8:
		        	    $this->enterOuterAlt($localContext, 8);
		        	    $this->setState(6449);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::NOT) {
		        	    	$this->setState(6448);
		        	    	$this->match(self::NOT);
		        	    }
		        	    $this->setState(6451);

		        	    $localContext->nullLiteral = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::NULL_LITERAL || $_la === self::NULL_SPEC_LITERAL)) {
		        	    	    $localContext->nullLiteral = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function dataType(): Context\DataTypeContext
		{
		    $localContext = new Context\DataTypeContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 604, self::RULE_dataType);

		    try {
		        $this->setState(6580);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 979, $this->ctx)) {
		        	case 1:
		        	    $localContext = new Context\StringDataTypeContext($localContext);
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(6454);

		        	    $localContext->typeName = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::CHARACTER || (((($_la - 222)) & ~0x3f) === 0 && ((1 << ($_la - 222)) & 31239) !== 0) || $_la === self::NCHAR)) {
		        	    	    $localContext->typeName = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	    $this->setState(6456);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::VARYING) {
		        	    	$this->setState(6455);
		        	    	$this->match(self::VARYING);
		        	    }
		        	    $this->setState(6459);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 952, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(6458);
		        	    	    $this->lengthOneDimension();
		        	    	break;
		        	    }
		        	    $this->setState(6462);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 953, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(6461);
		        	    	    $this->match(self::BINARY);
		        	    	break;
		        	    }
		        	    $this->setState(6467);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 954, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(6464);
		        	    	    $this->charSet();
		        	    	    $this->setState(6465);
		        	    	    $this->charsetName();
		        	    	break;
		        	    }
		        	    $this->setState(6472);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 955, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(6469);
		        	    	    $this->match(self::COLLATE);
		        	    	    $this->setState(6470);
		        	    	    $this->collationName();
		        	    	break;

		        	        case 2:
		        	    	    $this->setState(6471);
		        	    	    $this->match(self::BINARY);
		        	    	break;
		        	    }
		        	break;

		        	case 2:
		        	    $localContext = new Context\NationalVaryingStringDataTypeContext($localContext);
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(6474);
		        	    $this->match(self::NATIONAL);
		        	    $this->setState(6475);

		        	    $localContext->typeName = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::CHARACTER || $_la === self::CHAR)) {
		        	    	    $localContext->typeName = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	    $this->setState(6476);
		        	    $this->match(self::VARYING);
		        	    $this->setState(6478);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 956, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(6477);
		        	    	    $this->lengthOneDimension();
		        	    	break;
		        	    }
		        	    $this->setState(6481);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 957, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(6480);
		        	    	    $this->match(self::BINARY);
		        	    	break;
		        	    }
		        	break;

		        	case 3:
		        	    $localContext = new Context\NationalStringDataTypeContext($localContext);
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(6483);
		        	    $this->match(self::NATIONAL);
		        	    $this->setState(6484);

		        	    $localContext->typeName = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::CHARACTER || $_la === self::CHAR || $_la === self::VARCHAR)) {
		        	    	    $localContext->typeName = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	    $this->setState(6486);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 958, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(6485);
		        	    	    $this->lengthOneDimension();
		        	    	break;
		        	    }
		        	    $this->setState(6489);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 959, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(6488);
		        	    	    $this->match(self::BINARY);
		        	    	break;
		        	    }
		        	break;

		        	case 4:
		        	    $localContext = new Context\NationalStringDataTypeContext($localContext);
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(6491);
		        	    $this->match(self::NCHAR);
		        	    $this->setState(6492);
		        	    $localContext->typeName = $this->match(self::VARCHAR);
		        	    $this->setState(6494);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 960, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(6493);
		        	    	    $this->lengthOneDimension();
		        	    	break;
		        	    }
		        	    $this->setState(6497);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 961, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(6496);
		        	    	    $this->match(self::BINARY);
		        	    	break;
		        	    }
		        	break;

		        	case 5:
		        	    $localContext = new Context\DimensionDataTypeContext($localContext);
		        	    $this->enterOuterAlt($localContext, 5);
		        	    $this->setState(6499);

		        	    $localContext->typeName = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!((((($_la - 196)) & ~0x3f) === 0 && ((1 << ($_la - 196)) & 4095) !== 0))) {
		        	    	    $localContext->typeName = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	    $this->setState(6501);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 962, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(6500);
		        	    	    $this->lengthOneDimension();
		        	    	break;
		        	    }
		        	    $this->setState(6506);
		        	    $this->errorHandler->sync($this);

		        	    $alt = $this->getInterpreter()->adaptivePredict($this->input, 963, $this->ctx);

		        	    while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
		        	    	if ($alt === 1) {
		        	    		$this->setState(6503);

		        	    		$_la = $this->input->LA(1);

		        	    		if (!($_la === self::UNSIGNED || $_la === self::ZEROFILL || $_la === self::SIGNED)) {
		        	    		$this->errorHandler->recoverInline($this);
		        	    		} else {
		        	    			if ($this->input->LA(1) === Token::EOF) {
		        	    			    $this->matchedEOF = true;
		        	    		    }

		        	    			$this->errorHandler->reportMatch($this);
		        	    			$this->consume();
		        	    		} 
		        	    	}

		        	    	$this->setState(6508);
		        	    	$this->errorHandler->sync($this);

		        	    	$alt = $this->getInterpreter()->adaptivePredict($this->input, 963, $this->ctx);
		        	    }
		        	break;

		        	case 6:
		        	    $localContext = new Context\DimensionDataTypeContext($localContext);
		        	    $this->enterOuterAlt($localContext, 6);
		        	    $this->setState(6509);
		        	    $localContext->typeName = $this->match(self::REAL);
		        	    $this->setState(6511);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 964, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(6510);
		        	    	    $this->lengthTwoDimension();
		        	    	break;
		        	    }
		        	    $this->setState(6516);
		        	    $this->errorHandler->sync($this);

		        	    $alt = $this->getInterpreter()->adaptivePredict($this->input, 965, $this->ctx);

		        	    while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
		        	    	if ($alt === 1) {
		        	    		$this->setState(6513);

		        	    		$_la = $this->input->LA(1);

		        	    		if (!($_la === self::UNSIGNED || $_la === self::ZEROFILL || $_la === self::SIGNED)) {
		        	    		$this->errorHandler->recoverInline($this);
		        	    		} else {
		        	    			if ($this->input->LA(1) === Token::EOF) {
		        	    			    $this->matchedEOF = true;
		        	    		    }

		        	    			$this->errorHandler->reportMatch($this);
		        	    			$this->consume();
		        	    		} 
		        	    	}

		        	    	$this->setState(6518);
		        	    	$this->errorHandler->sync($this);

		        	    	$alt = $this->getInterpreter()->adaptivePredict($this->input, 965, $this->ctx);
		        	    }
		        	break;

		        	case 7:
		        	    $localContext = new Context\DimensionDataTypeContext($localContext);
		        	    $this->enterOuterAlt($localContext, 7);
		        	    $this->setState(6519);
		        	    $localContext->typeName = $this->match(self::DOUBLE);
		        	    $this->setState(6521);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::PRECISION) {
		        	    	$this->setState(6520);
		        	    	$this->match(self::PRECISION);
		        	    }
		        	    $this->setState(6524);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 967, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(6523);
		        	    	    $this->lengthTwoDimension();
		        	    	break;
		        	    }
		        	    $this->setState(6529);
		        	    $this->errorHandler->sync($this);

		        	    $alt = $this->getInterpreter()->adaptivePredict($this->input, 968, $this->ctx);

		        	    while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
		        	    	if ($alt === 1) {
		        	    		$this->setState(6526);

		        	    		$_la = $this->input->LA(1);

		        	    		if (!($_la === self::UNSIGNED || $_la === self::ZEROFILL || $_la === self::SIGNED)) {
		        	    		$this->errorHandler->recoverInline($this);
		        	    		} else {
		        	    			if ($this->input->LA(1) === Token::EOF) {
		        	    			    $this->matchedEOF = true;
		        	    		    }

		        	    			$this->errorHandler->reportMatch($this);
		        	    			$this->consume();
		        	    		} 
		        	    	}

		        	    	$this->setState(6531);
		        	    	$this->errorHandler->sync($this);

		        	    	$alt = $this->getInterpreter()->adaptivePredict($this->input, 968, $this->ctx);
		        	    }
		        	break;

		        	case 8:
		        	    $localContext = new Context\DimensionDataTypeContext($localContext);
		        	    $this->enterOuterAlt($localContext, 8);
		        	    $this->setState(6532);

		        	    $localContext->typeName = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!((((($_la - 211)) & ~0x3f) === 0 && ((1 << ($_la - 211)) & 63) !== 0) || $_la === self::FIXED)) {
		        	    	    $localContext->typeName = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	    $this->setState(6534);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 969, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(6533);
		        	    	    $this->lengthTwoOptionalDimension();
		        	    	break;
		        	    }
		        	    $this->setState(6539);
		        	    $this->errorHandler->sync($this);

		        	    $alt = $this->getInterpreter()->adaptivePredict($this->input, 970, $this->ctx);

		        	    while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
		        	    	if ($alt === 1) {
		        	    		$this->setState(6536);

		        	    		$_la = $this->input->LA(1);

		        	    		if (!($_la === self::UNSIGNED || $_la === self::ZEROFILL || $_la === self::SIGNED)) {
		        	    		$this->errorHandler->recoverInline($this);
		        	    		} else {
		        	    			if ($this->input->LA(1) === Token::EOF) {
		        	    			    $this->matchedEOF = true;
		        	    		    }

		        	    			$this->errorHandler->reportMatch($this);
		        	    			$this->consume();
		        	    		} 
		        	    	}

		        	    	$this->setState(6541);
		        	    	$this->errorHandler->sync($this);

		        	    	$alt = $this->getInterpreter()->adaptivePredict($this->input, 970, $this->ctx);
		        	    }
		        	break;

		        	case 9:
		        	    $localContext = new Context\SimpleDataTypeContext($localContext);
		        	    $this->enterOuterAlt($localContext, 9);
		        	    $this->setState(6542);

		        	    $localContext->typeName = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!((((($_la - 217)) & ~0x3f) === 0 && ((1 << ($_la - 217)) & 4237313) !== 0) || $_la === self::BOOL || $_la === self::BOOLEAN)) {
		        	    	    $localContext->typeName = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	break;

		        	case 10:
		        	    $localContext = new Context\DimensionDataTypeContext($localContext);
		        	    $this->enterOuterAlt($localContext, 10);
		        	    $this->setState(6543);

		        	    $localContext->typeName = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!((((($_la - 218)) & ~0x3f) === 0 && ((1 << ($_la - 218)) & 2831) !== 0) || $_la === self::BIT)) {
		        	    	    $localContext->typeName = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	    $this->setState(6545);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 971, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(6544);
		        	    	    $this->lengthOneDimension();
		        	    	break;
		        	    }
		        	break;

		        	case 11:
		        	    $localContext = new Context\CollectionDataTypeContext($localContext);
		        	    $this->enterOuterAlt($localContext, 11);
		        	    $this->setState(6547);

		        	    $localContext->typeName = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::SET || $_la === self::ENUM)) {
		        	    	    $localContext->typeName = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	    $this->setState(6548);
		        	    $this->collectionOptions();
		        	    $this->setState(6550);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 972, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(6549);
		        	    	    $this->match(self::BINARY);
		        	    	break;
		        	    }
		        	    $this->setState(6555);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 973, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(6552);
		        	    	    $this->charSet();
		        	    	    $this->setState(6553);
		        	    	    $this->charsetName();
		        	    	break;
		        	    }
		        	break;

		        	case 12:
		        	    $localContext = new Context\SpatialDataTypeContext($localContext);
		        	    $this->enterOuterAlt($localContext, 12);
		        	    $this->setState(6557);

		        	    $localContext->typeName = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::JSON || (((($_la - 803)) & ~0x3f) === 0 && ((1 << ($_la - 803)) & 511) !== 0))) {
		        	    	    $localContext->typeName = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	    $this->setState(6560);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 974, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(6558);
		        	    	    $this->match(self::SRID);
		        	    	    $this->setState(6559);
		        	    	    $this->decimalLiteral();
		        	    	break;
		        	    }
		        	break;

		        	case 13:
		        	    $localContext = new Context\LongVarcharDataTypeContext($localContext);
		        	    $this->enterOuterAlt($localContext, 13);
		        	    $this->setState(6562);
		        	    $localContext->typeName = $this->match(self::LONG);
		        	    $this->setState(6564);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::VARCHAR) {
		        	    	$this->setState(6563);
		        	    	$this->match(self::VARCHAR);
		        	    }
		        	    $this->setState(6567);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 976, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(6566);
		        	    	    $this->match(self::BINARY);
		        	    	break;
		        	    }
		        	    $this->setState(6572);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 977, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(6569);
		        	    	    $this->charSet();
		        	    	    $this->setState(6570);
		        	    	    $this->charsetName();
		        	    	break;
		        	    }
		        	    $this->setState(6576);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 978, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(6574);
		        	    	    $this->match(self::COLLATE);
		        	    	    $this->setState(6575);
		        	    	    $this->collationName();
		        	    	break;
		        	    }
		        	break;

		        	case 14:
		        	    $localContext = new Context\LongVarbinaryDataTypeContext($localContext);
		        	    $this->enterOuterAlt($localContext, 14);
		        	    $this->setState(6578);
		        	    $this->match(self::LONG);
		        	    $this->setState(6579);
		        	    $this->match(self::VARBINARY);
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function collectionOptions(): Context\CollectionOptionsContext
		{
		    $localContext = new Context\CollectionOptionsContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 606, self::RULE_collectionOptions);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(6582);
		        $this->match(self::LR_BRACKET);
		        $this->setState(6583);
		        $this->match(self::STRING_LITERAL);
		        $this->setState(6588);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::COMMA) {
		        	$this->setState(6584);
		        	$this->match(self::COMMA);
		        	$this->setState(6585);
		        	$this->match(self::STRING_LITERAL);
		        	$this->setState(6590);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		        $this->setState(6591);
		        $this->match(self::RR_BRACKET);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function convertedDataType(): Context\ConvertedDataTypeContext
		{
		    $localContext = new Context\ConvertedDataTypeContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 608, self::RULE_convertedDataType);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(6615);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::FLOAT:
		            case self::BINARY:
		            case self::NCHAR:
		            	$this->setState(6593);

		            	$localContext->typeName = $this->input->LT(1);
		            	$_la = $this->input->LA(1);

		            	if (!($_la === self::FLOAT || $_la === self::BINARY || $_la === self::NCHAR)) {
		            		    $localContext->typeName = $this->errorHandler->recoverInline($this);
		            	} else {
		            		if ($this->input->LA(1) === Token::EOF) {
		            		    $this->matchedEOF = true;
		            	    }

		            		$this->errorHandler->reportMatch($this);
		            		$this->consume();
		            	}
		            	$this->setState(6595);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::LR_BRACKET) {
		            		$this->setState(6594);
		            		$this->lengthOneDimension();
		            	}
		            	break;

		            case self::CHAR:
		            	$this->setState(6597);
		            	$localContext->typeName = $this->match(self::CHAR);
		            	$this->setState(6599);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::LR_BRACKET) {
		            		$this->setState(6598);
		            		$this->lengthOneDimension();
		            	}
		            	$this->setState(6604);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::CHARACTER || $_la === self::CHAR || $_la === self::CHARSET) {
		            		$this->setState(6601);
		            		$this->charSet();
		            		$this->setState(6602);
		            		$this->charsetName();
		            	}
		            	break;

		            case self::INT:
		            case self::INTEGER:
		            case self::DOUBLE:
		            case self::DATE:
		            case self::TIME:
		            case self::DATETIME:
		            case self::YEAR:
		            case self::JSON:
		            	$this->setState(6606);

		            	$localContext->typeName = $this->input->LT(1);
		            	$_la = $this->input->LA(1);

		            	if (!((((($_la - 200)) & ~0x3f) === 0 && ((1 << ($_la - 200)) & 3539521) !== 0) || $_la === self::JSON)) {
		            		    $localContext->typeName = $this->errorHandler->recoverInline($this);
		            	} else {
		            		if ($this->input->LA(1) === Token::EOF) {
		            		    $this->matchedEOF = true;
		            	    }

		            		$this->errorHandler->reportMatch($this);
		            		$this->consume();
		            	}
		            	break;

		            case self::DECIMAL:
		            case self::DEC:
		            	$this->setState(6607);

		            	$localContext->typeName = $this->input->LT(1);
		            	$_la = $this->input->LA(1);

		            	if (!($_la === self::DECIMAL || $_la === self::DEC)) {
		            		    $localContext->typeName = $this->errorHandler->recoverInline($this);
		            	} else {
		            		if ($this->input->LA(1) === Token::EOF) {
		            		    $this->matchedEOF = true;
		            	    }

		            		$this->errorHandler->reportMatch($this);
		            		$this->consume();
		            	}
		            	$this->setState(6609);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::LR_BRACKET) {
		            		$this->setState(6608);
		            		$this->lengthTwoOptionalDimension();
		            	}
		            	break;

		            case self::UNSIGNED:
		            case self::SIGNED:
		            	$this->setState(6611);

		            	$_la = $this->input->LA(1);

		            	if (!($_la === self::UNSIGNED || $_la === self::SIGNED)) {
		            	$this->errorHandler->recoverInline($this);
		            	} else {
		            		if ($this->input->LA(1) === Token::EOF) {
		            		    $this->matchedEOF = true;
		            	    }

		            		$this->errorHandler->reportMatch($this);
		            		$this->consume();
		            	}
		            	$this->setState(6613);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::INT || $_la === self::INTEGER) {
		            		$this->setState(6612);

		            		$_la = $this->input->LA(1);

		            		if (!($_la === self::INT || $_la === self::INTEGER)) {
		            		$this->errorHandler->recoverInline($this);
		            		} else {
		            			if ($this->input->LA(1) === Token::EOF) {
		            			    $this->matchedEOF = true;
		            		    }

		            			$this->errorHandler->reportMatch($this);
		            			$this->consume();
		            		}
		            	}
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		        $this->setState(6618);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::ARRAY) {
		        	$this->setState(6617);
		        	$this->match(self::ARRAY);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function lengthOneDimension(): Context\LengthOneDimensionContext
		{
		    $localContext = new Context\LengthOneDimensionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 610, self::RULE_lengthOneDimension);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(6620);
		        $this->match(self::LR_BRACKET);
		        $this->setState(6621);
		        $this->decimalLiteral();
		        $this->setState(6622);
		        $this->match(self::RR_BRACKET);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function lengthTwoDimension(): Context\LengthTwoDimensionContext
		{
		    $localContext = new Context\LengthTwoDimensionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 612, self::RULE_lengthTwoDimension);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(6624);
		        $this->match(self::LR_BRACKET);
		        $this->setState(6625);
		        $this->decimalLiteral();
		        $this->setState(6626);
		        $this->match(self::COMMA);
		        $this->setState(6627);
		        $this->decimalLiteral();
		        $this->setState(6628);
		        $this->match(self::RR_BRACKET);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function lengthTwoOptionalDimension(): Context\LengthTwoOptionalDimensionContext
		{
		    $localContext = new Context\LengthTwoOptionalDimensionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 614, self::RULE_lengthTwoOptionalDimension);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(6630);
		        $this->match(self::LR_BRACKET);
		        $this->setState(6631);
		        $this->decimalLiteral();
		        $this->setState(6634);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::COMMA) {
		        	$this->setState(6632);
		        	$this->match(self::COMMA);
		        	$this->setState(6633);
		        	$this->decimalLiteral();
		        }
		        $this->setState(6636);
		        $this->match(self::RR_BRACKET);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function uidList(): Context\UidListContext
		{
		    $localContext = new Context\UidListContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 616, self::RULE_uidList);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(6638);
		        $this->uid();
		        $this->setState(6643);
		        $this->errorHandler->sync($this);

		        $alt = $this->getInterpreter()->adaptivePredict($this->input, 989, $this->ctx);

		        while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
		        	if ($alt === 1) {
		        		$this->setState(6639);
		        		$this->match(self::COMMA);
		        		$this->setState(6640);
		        		$this->uid(); 
		        	}

		        	$this->setState(6645);
		        	$this->errorHandler->sync($this);

		        	$alt = $this->getInterpreter()->adaptivePredict($this->input, 989, $this->ctx);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function fullColumnNameList(): Context\FullColumnNameListContext
		{
		    $localContext = new Context\FullColumnNameListContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 618, self::RULE_fullColumnNameList);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(6646);
		        $this->fullColumnName();
		        $this->setState(6651);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::COMMA) {
		        	$this->setState(6647);
		        	$this->match(self::COMMA);
		        	$this->setState(6648);
		        	$this->fullColumnName();
		        	$this->setState(6653);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function tables(): Context\TablesContext
		{
		    $localContext = new Context\TablesContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 620, self::RULE_tables);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(6654);
		        $this->tableName();
		        $this->setState(6659);
		        $this->errorHandler->sync($this);

		        $alt = $this->getInterpreter()->adaptivePredict($this->input, 991, $this->ctx);

		        while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
		        	if ($alt === 1) {
		        		$this->setState(6655);
		        		$this->match(self::COMMA);
		        		$this->setState(6656);
		        		$this->tableName(); 
		        	}

		        	$this->setState(6661);
		        	$this->errorHandler->sync($this);

		        	$alt = $this->getInterpreter()->adaptivePredict($this->input, 991, $this->ctx);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function indexColumnNames(): Context\IndexColumnNamesContext
		{
		    $localContext = new Context\IndexColumnNamesContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 622, self::RULE_indexColumnNames);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(6662);
		        $this->match(self::LR_BRACKET);
		        $this->setState(6663);
		        $this->indexColumnName();
		        $this->setState(6668);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::COMMA) {
		        	$this->setState(6664);
		        	$this->match(self::COMMA);
		        	$this->setState(6665);
		        	$this->indexColumnName();
		        	$this->setState(6670);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		        $this->setState(6671);
		        $this->match(self::RR_BRACKET);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function expressions(): Context\ExpressionsContext
		{
		    $localContext = new Context\ExpressionsContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 624, self::RULE_expressions);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(6673);
		        $this->recursiveExpression(0);
		        $this->setState(6678);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::COMMA) {
		        	$this->setState(6674);
		        	$this->match(self::COMMA);
		        	$this->setState(6675);
		        	$this->recursiveExpression(0);
		        	$this->setState(6680);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function expressionsWithDefaults(): Context\ExpressionsWithDefaultsContext
		{
		    $localContext = new Context\ExpressionsWithDefaultsContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 626, self::RULE_expressionsWithDefaults);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(6681);
		        $this->expressionOrDefault();
		        $this->setState(6686);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::COMMA) {
		        	$this->setState(6682);
		        	$this->match(self::COMMA);
		        	$this->setState(6683);
		        	$this->expressionOrDefault();
		        	$this->setState(6688);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function constants(): Context\ConstantsContext
		{
		    $localContext = new Context\ConstantsContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 628, self::RULE_constants);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(6689);
		        $this->constant();
		        $this->setState(6694);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::COMMA) {
		        	$this->setState(6690);
		        	$this->match(self::COMMA);
		        	$this->setState(6691);
		        	$this->constant();
		        	$this->setState(6696);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function simpleStrings(): Context\SimpleStringsContext
		{
		    $localContext = new Context\SimpleStringsContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 630, self::RULE_simpleStrings);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(6697);
		        $this->match(self::STRING_LITERAL);
		        $this->setState(6702);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::COMMA) {
		        	$this->setState(6698);
		        	$this->match(self::COMMA);
		        	$this->setState(6699);
		        	$this->match(self::STRING_LITERAL);
		        	$this->setState(6704);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function userVariables(): Context\UserVariablesContext
		{
		    $localContext = new Context\UserVariablesContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 632, self::RULE_userVariables);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(6705);
		        $this->match(self::LOCAL_ID);
		        $this->setState(6710);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::COMMA) {
		        	$this->setState(6706);
		        	$this->match(self::COMMA);
		        	$this->setState(6707);
		        	$this->match(self::LOCAL_ID);
		        	$this->setState(6712);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function defaultValue(): Context\DefaultValueContext
		{
		    $localContext = new Context\DefaultValueContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 634, self::RULE_defaultValue);

		    try {
		        $this->setState(6739);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 1000, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(6713);
		        	    $this->match(self::NULL_LITERAL);
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(6714);
		        	    $this->match(self::CAST);
		        	    $this->setState(6715);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(6716);
		        	    $this->recursiveExpression(0);
		        	    $this->setState(6717);
		        	    $this->match(self::AS);
		        	    $this->setState(6718);
		        	    $this->convertedDataType();
		        	    $this->setState(6719);
		        	    $this->match(self::RR_BRACKET);
		        	break;

		        	case 3:
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(6722);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 998, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(6721);
		        	    	    $this->unaryOperator();
		        	    	break;
		        	    }
		        	    $this->setState(6724);
		        	    $this->constant();
		        	break;

		        	case 4:
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(6725);
		        	    $this->currentTimestamp();
		        	    $this->setState(6729);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 999, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(6726);
		        	    	    $this->match(self::ON);
		        	    	    $this->setState(6727);
		        	    	    $this->match(self::UPDATE);
		        	    	    $this->setState(6728);
		        	    	    $this->currentTimestamp();
		        	    	break;
		        	    }
		        	break;

		        	case 5:
		        	    $this->enterOuterAlt($localContext, 5);
		        	    $this->setState(6731);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(6732);
		        	    $this->recursiveExpression(0);
		        	    $this->setState(6733);
		        	    $this->match(self::RR_BRACKET);
		        	break;

		        	case 6:
		        	    $this->enterOuterAlt($localContext, 6);
		        	    $this->setState(6735);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(6736);
		        	    $this->fullId();
		        	    $this->setState(6737);
		        	    $this->match(self::RR_BRACKET);
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function currentTimestamp(): Context\CurrentTimestampContext
		{
		    $localContext = new Context\CurrentTimestampContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 636, self::RULE_currentTimestamp);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(6755);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::CURRENT_TIMESTAMP:
		            case self::LOCALTIME:
		            case self::LOCALTIMESTAMP:
		            	$this->setState(6741);

		            	$_la = $this->input->LA(1);

		            	if (!((((($_la - 315)) & ~0x3f) === 0 && ((1 << ($_la - 315)) & 131) !== 0))) {
		            	$this->errorHandler->recoverInline($this);
		            	} else {
		            		if ($this->input->LA(1) === Token::EOF) {
		            		    $this->matchedEOF = true;
		            	    }

		            		$this->errorHandler->reportMatch($this);
		            		$this->consume();
		            	}
		            	$this->setState(6747);
		            	$this->errorHandler->sync($this);

		            	switch ($this->getInterpreter()->adaptivePredict($this->input, 1002, $this->ctx)) {
		            	    case 1:
		            		    $this->setState(6742);
		            		    $this->match(self::LR_BRACKET);
		            		    $this->setState(6744);
		            		    $this->errorHandler->sync($this);
		            		    $_la = $this->input->LA(1);

		            		    if ((((($_la - 1138)) & ~0x3f) === 0 && ((1 << ($_la - 1138)) & 10247) !== 0)) {
		            		    	$this->setState(6743);
		            		    	$this->decimalLiteral();
		            		    }
		            		    $this->setState(6746);
		            		    $this->match(self::RR_BRACKET);
		            		break;
		            	}
		            	break;

		            case self::NOW:
		            	$this->setState(6749);
		            	$this->match(self::NOW);
		            	$this->setState(6750);
		            	$this->match(self::LR_BRACKET);
		            	$this->setState(6752);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ((((($_la - 1138)) & ~0x3f) === 0 && ((1 << ($_la - 1138)) & 10247) !== 0)) {
		            		$this->setState(6751);
		            		$this->decimalLiteral();
		            	}
		            	$this->setState(6754);
		            	$this->match(self::RR_BRACKET);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function expressionOrDefault(): Context\ExpressionOrDefaultContext
		{
		    $localContext = new Context\ExpressionOrDefaultContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 638, self::RULE_expressionOrDefault);

		    try {
		        $this->setState(6759);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 1005, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(6757);
		        	    $this->recursiveExpression(0);
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(6758);
		        	    $this->match(self::DEFAULT);
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function ifExists(): Context\IfExistsContext
		{
		    $localContext = new Context\IfExistsContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 640, self::RULE_ifExists);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(6761);
		        $this->match(self::IF);
		        $this->setState(6762);
		        $this->match(self::EXISTS);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function ifNotExists(): Context\IfNotExistsContext
		{
		    $localContext = new Context\IfNotExistsContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 642, self::RULE_ifNotExists);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(6764);
		        $this->match(self::IF);
		        $this->setState(6765);
		        $this->match(self::NOT);
		        $this->setState(6766);
		        $this->match(self::EXISTS);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function orReplace(): Context\OrReplaceContext
		{
		    $localContext = new Context\OrReplaceContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 644, self::RULE_orReplace);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(6768);
		        $this->match(self::OR);
		        $this->setState(6769);
		        $this->match(self::REPLACE);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function waitNowaitClause(): Context\WaitNowaitClauseContext
		{
		    $localContext = new Context\WaitNowaitClauseContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 646, self::RULE_waitNowaitClause);

		    try {
		        $this->setState(6774);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::WAIT:
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(6771);
		            	$this->match(self::WAIT);
		            	$this->setState(6772);
		            	$this->decimalLiteral();
		            	break;

		            case self::NOWAIT:
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(6773);
		            	$this->match(self::NOWAIT);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function functionCall(): Context\FunctionCallContext
		{
		    $localContext = new Context\FunctionCallContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 648, self::RULE_functionCall);

		    try {
		        $this->setState(6794);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 1009, $this->ctx)) {
		        	case 1:
		        	    $localContext = new Context\SpecificFunctionCallContext($localContext);
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(6776);
		        	    $this->specificFunction();
		        	break;

		        	case 2:
		        	    $localContext = new Context\AggregateFunctionCallContext($localContext);
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(6777);
		        	    $this->aggregateWindowedFunction();
		        	break;

		        	case 3:
		        	    $localContext = new Context\NonAggregateFunctionCallContext($localContext);
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(6778);
		        	    $this->nonAggregateWindowedFunction();
		        	break;

		        	case 4:
		        	    $localContext = new Context\ScalarFunctionCallContext($localContext);
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(6779);
		        	    $this->scalarFunctionName();
		        	    $this->setState(6780);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(6782);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 1007, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(6781);
		        	    	    $this->functionArgs();
		        	    	break;
		        	    }
		        	    $this->setState(6784);
		        	    $this->match(self::RR_BRACKET);
		        	break;

		        	case 5:
		        	    $localContext = new Context\UdfFunctionCallContext($localContext);
		        	    $this->enterOuterAlt($localContext, 5);
		        	    $this->setState(6786);
		        	    $this->fullId();
		        	    $this->setState(6787);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(6789);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 1008, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(6788);
		        	    	    $this->functionArgs();
		        	    	break;
		        	    }
		        	    $this->setState(6791);
		        	    $this->match(self::RR_BRACKET);
		        	break;

		        	case 6:
		        	    $localContext = new Context\PasswordFunctionCallContext($localContext);
		        	    $this->enterOuterAlt($localContext, 6);
		        	    $this->setState(6793);
		        	    $this->passwordFunctionClause();
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function specificFunction(): Context\SpecificFunctionContext
		{
		    $localContext = new Context\SpecificFunctionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 650, self::RULE_specificFunction);

		    try {
		        $this->setState(6975);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 1033, $this->ctx)) {
		        	case 1:
		        	    $localContext = new Context\SimpleFunctionCallContext($localContext);
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(6796);

		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::SCHEMA || (((($_la - 313)) & ~0x3f) === 0 && ((1 << ($_la - 313)) & 262159) !== 0))) {
		        	    $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	    $this->setState(6799);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 1010, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(6797);
		        	    	    $this->match(self::LR_BRACKET);
		        	    	    $this->setState(6798);
		        	    	    $this->match(self::RR_BRACKET);
		        	    	break;
		        	    }
		        	break;

		        	case 2:
		        	    $localContext = new Context\CurrentUserContext($localContext);
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(6801);
		        	    $this->currentUserExpression();
		        	break;

		        	case 3:
		        	    $localContext = new Context\DataTypeFunctionCallContext($localContext);
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(6802);
		        	    $this->match(self::CONVERT);
		        	    $this->setState(6803);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(6804);
		        	    $this->recursiveExpression(0);
		        	    $this->setState(6805);
		        	    $localContext->separator = $this->match(self::COMMA);
		        	    $this->setState(6806);
		        	    $this->convertedDataType();
		        	    $this->setState(6807);
		        	    $this->match(self::RR_BRACKET);
		        	break;

		        	case 4:
		        	    $localContext = new Context\DataTypeFunctionCallContext($localContext);
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(6809);
		        	    $this->match(self::CONVERT);
		        	    $this->setState(6810);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(6811);
		        	    $this->recursiveExpression(0);
		        	    $this->setState(6812);
		        	    $this->match(self::USING);
		        	    $this->setState(6813);
		        	    $this->charsetName();
		        	    $this->setState(6814);
		        	    $this->match(self::RR_BRACKET);
		        	break;

		        	case 5:
		        	    $localContext = new Context\DataTypeFunctionCallContext($localContext);
		        	    $this->enterOuterAlt($localContext, 5);
		        	    $this->setState(6816);
		        	    $this->match(self::CAST);
		        	    $this->setState(6817);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(6818);
		        	    $this->recursiveExpression(0);
		        	    $this->setState(6819);
		        	    $this->match(self::AS);
		        	    $this->setState(6820);
		        	    $this->convertedDataType();
		        	    $this->setState(6821);
		        	    $this->match(self::RR_BRACKET);
		        	break;

		        	case 6:
		        	    $localContext = new Context\ValuesFunctionCallContext($localContext);
		        	    $this->enterOuterAlt($localContext, 6);
		        	    $this->setState(6823);
		        	    $this->match(self::VALUES);
		        	    $this->setState(6824);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(6825);
		        	    $this->fullColumnName();
		        	    $this->setState(6826);
		        	    $this->match(self::RR_BRACKET);
		        	break;

		        	case 7:
		        	    $localContext = new Context\CaseExpressionFunctionCallContext($localContext);
		        	    $this->enterOuterAlt($localContext, 7);
		        	    $this->setState(6828);
		        	    $this->match(self::CASE);
		        	    $this->setState(6829);
		        	    $this->recursiveExpression(0);
		        	    $this->setState(6831); 
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    do {
		        	    	$this->setState(6830);
		        	    	$this->caseFuncAlternative();
		        	    	$this->setState(6833); 
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    } while ($_la === self::WHEN);
		        	    $this->setState(6837);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::ELSE) {
		        	    	$this->setState(6835);
		        	    	$this->match(self::ELSE);
		        	    	$this->setState(6836);
		        	    	$localContext->elseArg = $this->functionArg();
		        	    }
		        	    $this->setState(6839);
		        	    $this->match(self::END);
		        	break;

		        	case 8:
		        	    $localContext = new Context\CaseFunctionCallContext($localContext);
		        	    $this->enterOuterAlt($localContext, 8);
		        	    $this->setState(6841);
		        	    $this->match(self::CASE);
		        	    $this->setState(6843); 
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    do {
		        	    	$this->setState(6842);
		        	    	$this->caseFuncAlternative();
		        	    	$this->setState(6845); 
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    } while ($_la === self::WHEN);
		        	    $this->setState(6849);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::ELSE) {
		        	    	$this->setState(6847);
		        	    	$this->match(self::ELSE);
		        	    	$this->setState(6848);
		        	    	$localContext->elseArg = $this->functionArg();
		        	    }
		        	    $this->setState(6851);
		        	    $this->match(self::END);
		        	break;

		        	case 9:
		        	    $localContext = new Context\CharFunctionCallContext($localContext);
		        	    $this->enterOuterAlt($localContext, 9);
		        	    $this->setState(6853);
		        	    $this->match(self::CHAR);
		        	    $this->setState(6854);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(6855);
		        	    $this->functionArgs();
		        	    $this->setState(6858);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::USING) {
		        	    	$this->setState(6856);
		        	    	$this->match(self::USING);
		        	    	$this->setState(6857);
		        	    	$this->charsetName();
		        	    }
		        	    $this->setState(6860);
		        	    $this->match(self::RR_BRACKET);
		        	break;

		        	case 10:
		        	    $localContext = new Context\PositionFunctionCallContext($localContext);
		        	    $this->enterOuterAlt($localContext, 10);
		        	    $this->setState(6862);
		        	    $this->match(self::POSITION);
		        	    $this->setState(6863);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(6866);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 1016, $this->ctx)) {
		        	    	case 1:
		        	    	    $this->setState(6864);
		        	    	    $localContext->positionString = $this->stringLiteral();
		        	    	break;

		        	    	case 2:
		        	    	    $this->setState(6865);
		        	    	    $localContext->positionExpression = $this->recursiveExpression(0);
		        	    	break;
		        	    }
		        	    $this->setState(6868);
		        	    $this->match(self::IN);
		        	    $this->setState(6871);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 1017, $this->ctx)) {
		        	    	case 1:
		        	    	    $this->setState(6869);
		        	    	    $localContext->inString = $this->stringLiteral();
		        	    	break;

		        	    	case 2:
		        	    	    $this->setState(6870);
		        	    	    $localContext->inExpression = $this->recursiveExpression(0);
		        	    	break;
		        	    }
		        	    $this->setState(6873);
		        	    $this->match(self::RR_BRACKET);
		        	break;

		        	case 11:
		        	    $localContext = new Context\SubstrFunctionCallContext($localContext);
		        	    $this->enterOuterAlt($localContext, 11);
		        	    $this->setState(6875);

		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::SUBSTR || $_la === self::SUBSTRING)) {
		        	    $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	    $this->setState(6876);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(6879);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 1018, $this->ctx)) {
		        	    	case 1:
		        	    	    $this->setState(6877);
		        	    	    $localContext->sourceString = $this->stringLiteral();
		        	    	break;

		        	    	case 2:
		        	    	    $this->setState(6878);
		        	    	    $localContext->sourceExpression = $this->recursiveExpression(0);
		        	    	break;
		        	    }
		        	    $this->setState(6881);
		        	    $this->match(self::FROM);
		        	    $this->setState(6884);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 1019, $this->ctx)) {
		        	    	case 1:
		        	    	    $this->setState(6882);
		        	    	    $localContext->fromDecimal = $this->decimalLiteral();
		        	    	break;

		        	    	case 2:
		        	    	    $this->setState(6883);
		        	    	    $localContext->fromExpression = $this->recursiveExpression(0);
		        	    	break;
		        	    }
		        	    $this->setState(6891);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::FOR) {
		        	    	$this->setState(6886);
		        	    	$this->match(self::FOR);
		        	    	$this->setState(6889);
		        	    	$this->errorHandler->sync($this);

		        	    	switch ($this->getInterpreter()->adaptivePredict($this->input, 1020, $this->ctx)) {
		        	    		case 1:
		        	    		    $this->setState(6887);
		        	    		    $localContext->forDecimal = $this->decimalLiteral();
		        	    		break;

		        	    		case 2:
		        	    		    $this->setState(6888);
		        	    		    $localContext->forExpression = $this->recursiveExpression(0);
		        	    		break;
		        	    	}
		        	    }
		        	    $this->setState(6893);
		        	    $this->match(self::RR_BRACKET);
		        	break;

		        	case 12:
		        	    $localContext = new Context\TrimFunctionCallContext($localContext);
		        	    $this->enterOuterAlt($localContext, 12);
		        	    $this->setState(6895);
		        	    $this->match(self::TRIM);
		        	    $this->setState(6896);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(6897);

		        	    $localContext->positioinForm = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::BOTH || $_la === self::LEADING || $_la === self::TRAILING)) {
		        	    	    $localContext->positioinForm = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	    $this->setState(6900);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 1022, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(6898);
		        	    	    $localContext->sourceString = $this->stringLiteral();
		        	    	break;

		        	        case 2:
		        	    	    $this->setState(6899);
		        	    	    $localContext->sourceExpression = $this->recursiveExpression(0);
		        	    	break;
		        	    }
		        	    $this->setState(6902);
		        	    $this->match(self::FROM);
		        	    $this->setState(6905);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 1023, $this->ctx)) {
		        	    	case 1:
		        	    	    $this->setState(6903);
		        	    	    $localContext->fromString = $this->stringLiteral();
		        	    	break;

		        	    	case 2:
		        	    	    $this->setState(6904);
		        	    	    $localContext->fromExpression = $this->recursiveExpression(0);
		        	    	break;
		        	    }
		        	    $this->setState(6907);
		        	    $this->match(self::RR_BRACKET);
		        	break;

		        	case 13:
		        	    $localContext = new Context\TrimFunctionCallContext($localContext);
		        	    $this->enterOuterAlt($localContext, 13);
		        	    $this->setState(6909);
		        	    $this->match(self::TRIM);
		        	    $this->setState(6910);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(6913);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 1024, $this->ctx)) {
		        	    	case 1:
		        	    	    $this->setState(6911);
		        	    	    $localContext->sourceString = $this->stringLiteral();
		        	    	break;

		        	    	case 2:
		        	    	    $this->setState(6912);
		        	    	    $localContext->sourceExpression = $this->recursiveExpression(0);
		        	    	break;
		        	    }
		        	    $this->setState(6915);
		        	    $this->match(self::FROM);
		        	    $this->setState(6918);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 1025, $this->ctx)) {
		        	    	case 1:
		        	    	    $this->setState(6916);
		        	    	    $localContext->fromString = $this->stringLiteral();
		        	    	break;

		        	    	case 2:
		        	    	    $this->setState(6917);
		        	    	    $localContext->fromExpression = $this->recursiveExpression(0);
		        	    	break;
		        	    }
		        	    $this->setState(6920);
		        	    $this->match(self::RR_BRACKET);
		        	break;

		        	case 14:
		        	    $localContext = new Context\WeightFunctionCallContext($localContext);
		        	    $this->enterOuterAlt($localContext, 14);
		        	    $this->setState(6922);
		        	    $this->match(self::WEIGHT_STRING);
		        	    $this->setState(6923);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(6926);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 1026, $this->ctx)) {
		        	    	case 1:
		        	    	    $this->setState(6924);
		        	    	    $this->stringLiteral();
		        	    	break;

		        	    	case 2:
		        	    	    $this->setState(6925);
		        	    	    $this->recursiveExpression(0);
		        	    	break;
		        	    }
		        	    $this->setState(6934);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::AS) {
		        	    	$this->setState(6928);
		        	    	$this->match(self::AS);
		        	    	$this->setState(6929);

		        	    	$localContext->stringFormat = $this->input->LT(1);
		        	    	$_la = $this->input->LA(1);

		        	    	if (!($_la === self::CHAR || $_la === self::BINARY)) {
		        	    		    $localContext->stringFormat = $this->errorHandler->recoverInline($this);
		        	    	} else {
		        	    		if ($this->input->LA(1) === Token::EOF) {
		        	    		    $this->matchedEOF = true;
		        	    	    }

		        	    		$this->errorHandler->reportMatch($this);
		        	    		$this->consume();
		        	    	}
		        	    	$this->setState(6930);
		        	    	$this->match(self::LR_BRACKET);
		        	    	$this->setState(6931);
		        	    	$this->decimalLiteral();
		        	    	$this->setState(6932);
		        	    	$this->match(self::RR_BRACKET);
		        	    }
		        	    $this->setState(6937);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::LEVEL) {
		        	    	$this->setState(6936);
		        	    	$this->levelsInWeightString();
		        	    }
		        	    $this->setState(6939);
		        	    $this->match(self::RR_BRACKET);
		        	break;

		        	case 15:
		        	    $localContext = new Context\ExtractFunctionCallContext($localContext);
		        	    $this->enterOuterAlt($localContext, 15);
		        	    $this->setState(6941);
		        	    $this->match(self::EXTRACT);
		        	    $this->setState(6942);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(6943);
		        	    $this->intervalType();
		        	    $this->setState(6944);
		        	    $this->match(self::FROM);
		        	    $this->setState(6947);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 1029, $this->ctx)) {
		        	    	case 1:
		        	    	    $this->setState(6945);
		        	    	    $localContext->sourceString = $this->stringLiteral();
		        	    	break;

		        	    	case 2:
		        	    	    $this->setState(6946);
		        	    	    $localContext->sourceExpression = $this->recursiveExpression(0);
		        	    	break;
		        	    }
		        	    $this->setState(6949);
		        	    $this->match(self::RR_BRACKET);
		        	break;

		        	case 16:
		        	    $localContext = new Context\GetFormatFunctionCallContext($localContext);
		        	    $this->enterOuterAlt($localContext, 16);
		        	    $this->setState(6951);
		        	    $this->match(self::GET_FORMAT);
		        	    $this->setState(6952);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(6953);

		        	    $localContext->datetimeFormat = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!((((($_la - 217)) & ~0x3f) === 0 && ((1 << ($_la - 217)) & 11) !== 0))) {
		        	    	    $localContext->datetimeFormat = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	    $this->setState(6954);
		        	    $this->match(self::COMMA);
		        	    $this->setState(6955);
		        	    $this->stringLiteral();
		        	    $this->setState(6956);
		        	    $this->match(self::RR_BRACKET);
		        	break;

		        	case 17:
		        	    $localContext = new Context\JsonValueFunctionCallContext($localContext);
		        	    $this->enterOuterAlt($localContext, 17);
		        	    $this->setState(6958);
		        	    $this->match(self::JSON_VALUE);
		        	    $this->setState(6959);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(6960);
		        	    $this->recursiveExpression(0);
		        	    $this->setState(6961);
		        	    $this->match(self::COMMA);
		        	    $this->setState(6962);
		        	    $this->recursiveExpression(0);
		        	    $this->setState(6965);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::RETURNING) {
		        	    	$this->setState(6963);
		        	    	$this->match(self::RETURNING);
		        	    	$this->setState(6964);
		        	    	$this->convertedDataType();
		        	    }
		        	    $this->setState(6968);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 1031, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(6967);
		        	    	    $this->jsonOnEmpty();
		        	    	break;
		        	    }
		        	    $this->setState(6971);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::DEFAULT || $_la === self::NULL_LITERAL || $_la === self::ERROR) {
		        	    	$this->setState(6970);
		        	    	$this->jsonOnError();
		        	    }
		        	    $this->setState(6973);
		        	    $this->match(self::RR_BRACKET);
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function caseFuncAlternative(): Context\CaseFuncAlternativeContext
		{
		    $localContext = new Context\CaseFuncAlternativeContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 652, self::RULE_caseFuncAlternative);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(6977);
		        $this->match(self::WHEN);
		        $this->setState(6978);
		        $localContext->condition = $this->functionArg();
		        $this->setState(6979);
		        $this->match(self::THEN);
		        $this->setState(6980);
		        $localContext->consequent = $this->functionArg();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function levelsInWeightString(): Context\LevelsInWeightStringContext
		{
		    $localContext = new Context\LevelsInWeightStringContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 654, self::RULE_levelsInWeightString);

		    try {
		        $this->setState(6996);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 1035, $this->ctx)) {
		        	case 1:
		        	    $localContext = new Context\LevelWeightListContext($localContext);
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(6982);
		        	    $this->match(self::LEVEL);
		        	    $this->setState(6983);
		        	    $this->levelInWeightListElement();
		        	    $this->setState(6988);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::COMMA) {
		        	    	$this->setState(6984);
		        	    	$this->match(self::COMMA);
		        	    	$this->setState(6985);
		        	    	$this->levelInWeightListElement();
		        	    	$this->setState(6990);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	break;

		        	case 2:
		        	    $localContext = new Context\LevelWeightRangeContext($localContext);
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(6991);
		        	    $this->match(self::LEVEL);
		        	    $this->setState(6992);
		        	    $localContext->firstLevel = $this->decimalLiteral();
		        	    $this->setState(6993);
		        	    $this->match(self::MINUS);
		        	    $this->setState(6994);
		        	    $localContext->lastLevel = $this->decimalLiteral();
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function levelInWeightListElement(): Context\LevelInWeightListElementContext
		{
		    $localContext = new Context\LevelInWeightListElementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 656, self::RULE_levelInWeightListElement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(6998);
		        $this->decimalLiteral();
		        $this->setState(7000);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::ASC || $_la === self::DESC || $_la === self::REVERSE) {
		        	$this->setState(6999);

		        	$localContext->orderType = $this->input->LT(1);
		        	$_la = $this->input->LA(1);

		        	if (!($_la === self::ASC || $_la === self::DESC || $_la === self::REVERSE)) {
		        		    $localContext->orderType = $this->errorHandler->recoverInline($this);
		        	} else {
		        		if ($this->input->LA(1) === Token::EOF) {
		        		    $this->matchedEOF = true;
		        	    }

		        		$this->errorHandler->reportMatch($this);
		        		$this->consume();
		        	}
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function aggregateWindowedFunction(): Context\AggregateWindowedFunctionContext
		{
		    $localContext = new Context\AggregateWindowedFunctionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 658, self::RULE_aggregateWindowedFunction);

		    try {
		        $this->setState(7061);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::AVG:
		            case self::MAX:
		            case self::MIN:
		            case self::SUM:
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(7002);

		            	$_la = $this->input->LA(1);

		            	if (!((((($_la - 286)) & ~0x3f) === 0 && ((1 << ($_la - 286)) & 8400897) !== 0))) {
		            	$this->errorHandler->recoverInline($this);
		            	} else {
		            		if ($this->input->LA(1) === Token::EOF) {
		            		    $this->matchedEOF = true;
		            	    }

		            		$this->errorHandler->reportMatch($this);
		            		$this->consume();
		            	}
		            	$this->setState(7003);
		            	$this->match(self::LR_BRACKET);
		            	$this->setState(7005);
		            	$this->errorHandler->sync($this);

		            	switch ($this->getInterpreter()->adaptivePredict($this->input, 1037, $this->ctx)) {
		            	    case 1:
		            		    $this->setState(7004);

		            		    $localContext->aggregator = $this->input->LT(1);
		            		    $_la = $this->input->LA(1);

		            		    if (!($_la === self::ALL || $_la === self::DISTINCT)) {
		            		    	    $localContext->aggregator = $this->errorHandler->recoverInline($this);
		            		    } else {
		            		    	if ($this->input->LA(1) === Token::EOF) {
		            		    	    $this->matchedEOF = true;
		            		        }

		            		    	$this->errorHandler->reportMatch($this);
		            		    	$this->consume();
		            		    }
		            		break;
		            	}
		            	$this->setState(7007);
		            	$this->functionArg();
		            	$this->setState(7008);
		            	$this->match(self::RR_BRACKET);
		            	$this->setState(7010);
		            	$this->errorHandler->sync($this);

		            	switch ($this->getInterpreter()->adaptivePredict($this->input, 1038, $this->ctx)) {
		            	    case 1:
		            		    $this->setState(7009);
		            		    $this->overClause();
		            		break;
		            	}
		            	break;

		            case self::COUNT:
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(7012);
		            	$this->match(self::COUNT);
		            	$this->setState(7013);
		            	$this->match(self::LR_BRACKET);
		            	$this->setState(7021);
		            	$this->errorHandler->sync($this);

		            	switch ($this->getInterpreter()->adaptivePredict($this->input, 1040, $this->ctx)) {
		            		case 1:
		            		    $this->setState(7014);
		            		    $localContext->starArg = $this->match(self::STAR);
		            		break;

		            		case 2:
		            		    $this->setState(7016);
		            		    $this->errorHandler->sync($this);

		            		    switch ($this->getInterpreter()->adaptivePredict($this->input, 1039, $this->ctx)) {
		            		        case 1:
		            		    	    $this->setState(7015);
		            		    	    $localContext->aggregator = $this->match(self::ALL);
		            		    	break;
		            		    }
		            		    $this->setState(7018);
		            		    $this->functionArg();
		            		break;

		            		case 3:
		            		    $this->setState(7019);
		            		    $localContext->aggregator = $this->match(self::DISTINCT);
		            		    $this->setState(7020);
		            		    $this->functionArgs();
		            		break;
		            	}
		            	$this->setState(7023);
		            	$this->match(self::RR_BRACKET);
		            	$this->setState(7025);
		            	$this->errorHandler->sync($this);

		            	switch ($this->getInterpreter()->adaptivePredict($this->input, 1041, $this->ctx)) {
		            	    case 1:
		            		    $this->setState(7024);
		            		    $this->overClause();
		            		break;
		            	}
		            	break;

		            case self::BIT_AND:
		            case self::BIT_OR:
		            case self::BIT_XOR:
		            case self::STD:
		            case self::STDDEV:
		            case self::STDDEV_POP:
		            case self::STDDEV_SAMP:
		            case self::VAR_POP:
		            case self::VAR_SAMP:
		            case self::VARIANCE:
		            	$this->enterOuterAlt($localContext, 3);
		            	$this->setState(7027);

		            	$_la = $this->input->LA(1);

		            	if (!((((($_la - 287)) & ~0x3f) === 0 && ((1 << ($_la - 287)) & 62652423) !== 0))) {
		            	$this->errorHandler->recoverInline($this);
		            	} else {
		            		if ($this->input->LA(1) === Token::EOF) {
		            		    $this->matchedEOF = true;
		            	    }

		            		$this->errorHandler->reportMatch($this);
		            		$this->consume();
		            	}
		            	$this->setState(7028);
		            	$this->match(self::LR_BRACKET);
		            	$this->setState(7030);
		            	$this->errorHandler->sync($this);

		            	switch ($this->getInterpreter()->adaptivePredict($this->input, 1042, $this->ctx)) {
		            	    case 1:
		            		    $this->setState(7029);
		            		    $localContext->aggregator = $this->match(self::ALL);
		            		break;
		            	}
		            	$this->setState(7032);
		            	$this->functionArg();
		            	$this->setState(7033);
		            	$this->match(self::RR_BRACKET);
		            	$this->setState(7035);
		            	$this->errorHandler->sync($this);

		            	switch ($this->getInterpreter()->adaptivePredict($this->input, 1043, $this->ctx)) {
		            	    case 1:
		            		    $this->setState(7034);
		            		    $this->overClause();
		            		break;
		            	}
		            	break;

		            case self::GROUP_CONCAT:
		            	$this->enterOuterAlt($localContext, 4);
		            	$this->setState(7037);
		            	$this->match(self::GROUP_CONCAT);
		            	$this->setState(7038);
		            	$this->match(self::LR_BRACKET);
		            	$this->setState(7040);
		            	$this->errorHandler->sync($this);

		            	switch ($this->getInterpreter()->adaptivePredict($this->input, 1044, $this->ctx)) {
		            	    case 1:
		            		    $this->setState(7039);
		            		    $localContext->aggregator = $this->match(self::DISTINCT);
		            		break;
		            	}
		            	$this->setState(7042);
		            	$this->functionArgs();
		            	$this->setState(7053);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::ORDER) {
		            		$this->setState(7043);
		            		$this->match(self::ORDER);
		            		$this->setState(7044);
		            		$this->match(self::BY);
		            		$this->setState(7045);
		            		$this->orderByExpression();
		            		$this->setState(7050);
		            		$this->errorHandler->sync($this);

		            		$_la = $this->input->LA(1);
		            		while ($_la === self::COMMA) {
		            			$this->setState(7046);
		            			$this->match(self::COMMA);
		            			$this->setState(7047);
		            			$this->orderByExpression();
		            			$this->setState(7052);
		            			$this->errorHandler->sync($this);
		            			$_la = $this->input->LA(1);
		            		}
		            	}
		            	$this->setState(7057);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::SEPARATOR) {
		            		$this->setState(7055);
		            		$this->match(self::SEPARATOR);
		            		$this->setState(7056);
		            		$localContext->separator = $this->match(self::STRING_LITERAL);
		            	}
		            	$this->setState(7059);
		            	$this->match(self::RR_BRACKET);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function nonAggregateWindowedFunction(): Context\NonAggregateWindowedFunctionContext
		{
		    $localContext = new Context\NonAggregateWindowedFunctionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 660, self::RULE_nonAggregateWindowedFunction);

		    try {
		        $this->setState(7101);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::LAG:
		            case self::LEAD:
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(7063);

		            	$_la = $this->input->LA(1);

		            	if (!($_la === self::LAG || $_la === self::LEAD)) {
		            	$this->errorHandler->recoverInline($this);
		            	} else {
		            		if ($this->input->LA(1) === Token::EOF) {
		            		    $this->matchedEOF = true;
		            	    }

		            		$this->errorHandler->reportMatch($this);
		            		$this->consume();
		            	}
		            	$this->setState(7064);
		            	$this->match(self::LR_BRACKET);
		            	$this->setState(7065);
		            	$this->recursiveExpression(0);
		            	$this->setState(7068);
		            	$this->errorHandler->sync($this);

		            	switch ($this->getInterpreter()->adaptivePredict($this->input, 1049, $this->ctx)) {
		            	    case 1:
		            		    $this->setState(7066);
		            		    $this->match(self::COMMA);
		            		    $this->setState(7067);
		            		    $this->decimalLiteral();
		            		break;
		            	}
		            	$this->setState(7072);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::COMMA) {
		            		$this->setState(7070);
		            		$this->match(self::COMMA);
		            		$this->setState(7071);
		            		$this->decimalLiteral();
		            	}
		            	$this->setState(7074);
		            	$this->match(self::RR_BRACKET);
		            	$this->setState(7075);
		            	$this->overClause();
		            	break;

		            case self::FIRST_VALUE:
		            case self::LAST_VALUE:
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(7077);

		            	$_la = $this->input->LA(1);

		            	if (!($_la === self::FIRST_VALUE || $_la === self::LAST_VALUE)) {
		            	$this->errorHandler->recoverInline($this);
		            	} else {
		            		if ($this->input->LA(1) === Token::EOF) {
		            		    $this->matchedEOF = true;
		            	    }

		            		$this->errorHandler->reportMatch($this);
		            		$this->consume();
		            	}
		            	$this->setState(7078);
		            	$this->match(self::LR_BRACKET);
		            	$this->setState(7079);
		            	$this->recursiveExpression(0);
		            	$this->setState(7080);
		            	$this->match(self::RR_BRACKET);
		            	$this->setState(7081);
		            	$this->overClause();
		            	break;

		            case self::CUME_DIST:
		            case self::DENSE_RANK:
		            case self::PERCENT_RANK:
		            case self::RANK:
		            case self::ROW_NUMBER:
		            	$this->enterOuterAlt($localContext, 3);
		            	$this->setState(7083);

		            	$_la = $this->input->LA(1);

		            	if (!((((($_la - 291)) & ~0x3f) === 0 && ((1 << ($_la - 291)) & 14339) !== 0))) {
		            	$this->errorHandler->recoverInline($this);
		            	} else {
		            		if ($this->input->LA(1) === Token::EOF) {
		            		    $this->matchedEOF = true;
		            	    }

		            		$this->errorHandler->reportMatch($this);
		            		$this->consume();
		            	}
		            	$this->setState(7084);
		            	$this->match(self::LR_BRACKET);
		            	$this->setState(7085);
		            	$this->match(self::RR_BRACKET);
		            	$this->setState(7086);
		            	$this->overClause();
		            	break;

		            case self::NTH_VALUE:
		            	$this->enterOuterAlt($localContext, 4);
		            	$this->setState(7087);
		            	$this->match(self::NTH_VALUE);
		            	$this->setState(7088);
		            	$this->match(self::LR_BRACKET);
		            	$this->setState(7089);
		            	$this->recursiveExpression(0);
		            	$this->setState(7090);
		            	$this->match(self::COMMA);
		            	$this->setState(7091);
		            	$this->decimalLiteral();
		            	$this->setState(7092);
		            	$this->match(self::RR_BRACKET);
		            	$this->setState(7093);
		            	$this->overClause();
		            	break;

		            case self::NTILE:
		            	$this->enterOuterAlt($localContext, 5);
		            	$this->setState(7095);
		            	$this->match(self::NTILE);
		            	$this->setState(7096);
		            	$this->match(self::LR_BRACKET);
		            	$this->setState(7097);
		            	$this->decimalLiteral();
		            	$this->setState(7098);
		            	$this->match(self::RR_BRACKET);
		            	$this->setState(7099);
		            	$this->overClause();
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function overClause(): Context\OverClauseContext
		{
		    $localContext = new Context\OverClauseContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 662, self::RULE_overClause);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(7103);
		        $this->match(self::OVER);
		        $this->setState(7109);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::LR_BRACKET:
		            	$this->setState(7104);
		            	$this->match(self::LR_BRACKET);
		            	$this->setState(7105);
		            	$this->windowSpec();
		            	$this->setState(7106);
		            	$this->match(self::RR_BRACKET);
		            	break;

		            case self::ARRAY:
		            case self::ATTRIBUTE:
		            case self::BUCKETS:
		            case self::CONDITION:
		            case self::CURRENT:
		            case self::CURRENT_USER:
		            case self::DATABASE:
		            case self::DEFAULT:
		            case self::DIAGNOSTICS:
		            case self::EMPTY:
		            case self::ENFORCED:
		            case self::EXCEPT:
		            case self::GROUP:
		            case self::IF:
		            case self::IGNORED:
		            case self::INSERT:
		            case self::LATERAL:
		            case self::LEFT:
		            case self::NUMBER:
		            case self::OPTIONAL:
		            case self::ORDER:
		            case self::PRIMARY:
		            case self::REPEAT:
		            case self::REPLACE:
		            case self::RIGHT:
		            case self::SCHEMA:
		            case self::SKIP_QUERY_REWRITE:
		            case self::STACKED:
		            case self::DATE:
		            case self::TIME:
		            case self::TIMESTAMP:
		            case self::DATETIME:
		            case self::YEAR:
		            case self::BINARY:
		            case self::TEXT:
		            case self::ENUM:
		            case self::SERIAL:
		            case self::JSON_ARRAY:
		            case self::JSON_ARRAYAGG:
		            case self::JSON_ARRAY_APPEND:
		            case self::JSON_ARRAY_INSERT:
		            case self::JSON_CONTAINS:
		            case self::JSON_CONTAINS_PATH:
		            case self::JSON_DEPTH:
		            case self::JSON_EXTRACT:
		            case self::JSON_INSERT:
		            case self::JSON_KEYS:
		            case self::JSON_LENGTH:
		            case self::JSON_MERGE:
		            case self::JSON_MERGE_PATCH:
		            case self::JSON_MERGE_PRESERVE:
		            case self::JSON_OBJECT:
		            case self::JSON_OBJECTAGG:
		            case self::JSON_OVERLAPS:
		            case self::JSON_PRETTY:
		            case self::JSON_QUOTE:
		            case self::JSON_REMOVE:
		            case self::JSON_REPLACE:
		            case self::JSON_SCHEMA_VALID:
		            case self::JSON_SCHEMA_VALIDATION_REPORT:
		            case self::JSON_SEARCH:
		            case self::JSON_SET:
		            case self::JSON_STORAGE_FREE:
		            case self::JSON_STORAGE_SIZE:
		            case self::JSON_TABLE:
		            case self::JSON_TYPE:
		            case self::JSON_UNQUOTE:
		            case self::JSON_VALID:
		            case self::JSON_VALUE:
		            case self::NESTED:
		            case self::ORDINALITY:
		            case self::PATH:
		            case self::AVG:
		            case self::BIT_AND:
		            case self::BIT_OR:
		            case self::BIT_XOR:
		            case self::COUNT:
		            case self::CUME_DIST:
		            case self::DENSE_RANK:
		            case self::FIRST_VALUE:
		            case self::GROUP_CONCAT:
		            case self::LAG:
		            case self::LAST_VALUE:
		            case self::LEAD:
		            case self::MAX:
		            case self::MIN:
		            case self::NTILE:
		            case self::NTH_VALUE:
		            case self::PERCENT_RANK:
		            case self::RANK:
		            case self::ROW_NUMBER:
		            case self::STD:
		            case self::STDDEV:
		            case self::STDDEV_POP:
		            case self::STDDEV_SAMP:
		            case self::SUM:
		            case self::VAR_POP:
		            case self::VAR_SAMP:
		            case self::VARIANCE:
		            case self::CURRENT_DATE:
		            case self::CURRENT_TIME:
		            case self::CURRENT_TIMESTAMP:
		            case self::LOCALTIME:
		            case self::CURDATE:
		            case self::CURTIME:
		            case self::DATE_ADD:
		            case self::DATE_SUB:
		            case self::LOCALTIMESTAMP:
		            case self::NOW:
		            case self::POSITION:
		            case self::SUBSTR:
		            case self::SUBSTRING:
		            case self::SYSDATE:
		            case self::TRIM:
		            case self::UTC_DATE:
		            case self::UTC_TIME:
		            case self::UTC_TIMESTAMP:
		            case self::ACCOUNT:
		            case self::ACTION:
		            case self::AFTER:
		            case self::AGGREGATE:
		            case self::ALGORITHM:
		            case self::ANY:
		            case self::AT:
		            case self::AUTHORS:
		            case self::AUTOCOMMIT:
		            case self::AUTOEXTEND_SIZE:
		            case self::AUTO_INCREMENT:
		            case self::AVG_ROW_LENGTH:
		            case self::BEGIN:
		            case self::BINLOG:
		            case self::BIT:
		            case self::BLOCK:
		            case self::BOOL:
		            case self::BOOLEAN:
		            case self::BTREE:
		            case self::CACHE:
		            case self::CASCADED:
		            case self::CHAIN:
		            case self::CHANGED:
		            case self::CHANNEL:
		            case self::CHECKSUM:
		            case self::PAGE_CHECKSUM:
		            case self::CIPHER:
		            case self::CLASS_ORIGIN:
		            case self::CLIENT:
		            case self::CLOSE:
		            case self::CLUSTERING:
		            case self::COALESCE:
		            case self::CODE:
		            case self::COLUMNS:
		            case self::COLUMN_FORMAT:
		            case self::COLUMN_NAME:
		            case self::COMMENT:
		            case self::COMMIT:
		            case self::COMPACT:
		            case self::COMPLETION:
		            case self::COMPRESSED:
		            case self::COMPRESSION:
		            case self::CONCURRENT:
		            case self::CONNECT:
		            case self::CONNECTION:
		            case self::CONSISTENT:
		            case self::CONSTRAINT_CATALOG:
		            case self::CONSTRAINT_SCHEMA:
		            case self::CONSTRAINT_NAME:
		            case self::CONTAINS:
		            case self::CONTEXT:
		            case self::CONTRIBUTORS:
		            case self::COPY:
		            case self::CPU:
		            case self::CURSOR_NAME:
		            case self::DATA:
		            case self::DATAFILE:
		            case self::DEALLOCATE:
		            case self::DEFAULT_AUTH:
		            case self::DEFINER:
		            case self::DELAY_KEY_WRITE:
		            case self::DES_KEY_FILE:
		            case self::DIRECTORY:
		            case self::DISABLE:
		            case self::DISCARD:
		            case self::DISK:
		            case self::DO:
		            case self::DUMPFILE:
		            case self::DUPLICATE:
		            case self::DYNAMIC:
		            case self::ENABLE:
		            case self::ENCRYPTION:
		            case self::END:
		            case self::ENDS:
		            case self::ENGINE:
		            case self::ENGINES:
		            case self::ERROR:
		            case self::ERRORS:
		            case self::ESCAPE:
		            case self::EVEN:
		            case self::EVENT:
		            case self::EVENTS:
		            case self::EVERY:
		            case self::EXCHANGE:
		            case self::EXCLUSIVE:
		            case self::EXPIRE:
		            case self::EXPORT:
		            case self::EXTENDED:
		            case self::EXTENT_SIZE:
		            case self::FAILED_LOGIN_ATTEMPTS:
		            case self::FAST:
		            case self::FAULTS:
		            case self::FIELDS:
		            case self::FILE_BLOCK_SIZE:
		            case self::FILTER:
		            case self::FIRST:
		            case self::FIXED:
		            case self::FLUSH:
		            case self::FOLLOWS:
		            case self::FOUND:
		            case self::FULL:
		            case self::FUNCTION:
		            case self::GENERAL:
		            case self::GLOBAL:
		            case self::GRANTS:
		            case self::GROUP_REPLICATION:
		            case self::HANDLER:
		            case self::HASH:
		            case self::HELP:
		            case self::HISTORY:
		            case self::HOST:
		            case self::HOSTS:
		            case self::IDENTIFIED:
		            case self::IGNORE_SERVER_IDS:
		            case self::IMPORT:
		            case self::INDEXES:
		            case self::INITIAL_SIZE:
		            case self::INPLACE:
		            case self::INSERT_METHOD:
		            case self::INSTALL:
		            case self::INSTANCE:
		            case self::INSTANT:
		            case self::INVISIBLE:
		            case self::INVOKER:
		            case self::IO:
		            case self::IO_THREAD:
		            case self::IPC:
		            case self::ISOLATION:
		            case self::ISSUER:
		            case self::JSON:
		            case self::KEY_BLOCK_SIZE:
		            case self::LANGUAGE:
		            case self::LAST:
		            case self::LEAVES:
		            case self::LESS:
		            case self::LEVEL:
		            case self::LIST:
		            case self::LOCAL:
		            case self::LOGFILE:
		            case self::LOGS:
		            case self::MASTER:
		            case self::MASTER_AUTO_POSITION:
		            case self::MASTER_CONNECT_RETRY:
		            case self::MASTER_DELAY:
		            case self::MASTER_HEARTBEAT_PERIOD:
		            case self::MASTER_HOST:
		            case self::MASTER_LOG_FILE:
		            case self::MASTER_LOG_POS:
		            case self::MASTER_PASSWORD:
		            case self::MASTER_PORT:
		            case self::MASTER_RETRY_COUNT:
		            case self::MASTER_SSL:
		            case self::MASTER_SSL_CA:
		            case self::MASTER_SSL_CAPATH:
		            case self::MASTER_SSL_CERT:
		            case self::MASTER_SSL_CIPHER:
		            case self::MASTER_SSL_CRL:
		            case self::MASTER_SSL_CRLPATH:
		            case self::MASTER_SSL_KEY:
		            case self::MASTER_TLS_VERSION:
		            case self::MASTER_USER:
		            case self::MAX_CONNECTIONS_PER_HOUR:
		            case self::MAX_QUERIES_PER_HOUR:
		            case self::MAX_ROWS:
		            case self::MAX_SIZE:
		            case self::MAX_UPDATES_PER_HOUR:
		            case self::MAX_USER_CONNECTIONS:
		            case self::MEDIUM:
		            case self::MEMBER:
		            case self::MERGE:
		            case self::MESSAGE_TEXT:
		            case self::MID:
		            case self::MIGRATE:
		            case self::MIN_ROWS:
		            case self::MODE:
		            case self::MODIFY:
		            case self::MUTEX:
		            case self::MYSQL:
		            case self::MYSQL_ERRNO:
		            case self::NAME:
		            case self::NAMES:
		            case self::NCHAR:
		            case self::NEVER:
		            case self::NEXT:
		            case self::NO:
		            case self::NOCOPY:
		            case self::NOWAIT:
		            case self::NODEGROUP:
		            case self::NONE:
		            case self::ODBC:
		            case self::OFFLINE:
		            case self::OFFSET:
		            case self::OF:
		            case self::OJ:
		            case self::OLD_PASSWORD:
		            case self::ONE:
		            case self::ONLINE:
		            case self::ONLY:
		            case self::OPEN:
		            case self::OPTIMIZER_COSTS:
		            case self::OPTIONS:
		            case self::OWNER:
		            case self::PACK_KEYS:
		            case self::PAGE:
		            case self::PARSER:
		            case self::PARTIAL:
		            case self::PARTITIONING:
		            case self::PARTITIONS:
		            case self::PASSWORD:
		            case self::PASSWORD_LOCK_TIME:
		            case self::PHASE:
		            case self::PLUGIN:
		            case self::PLUGIN_DIR:
		            case self::PLUGINS:
		            case self::PORT:
		            case self::PRECEDES:
		            case self::PREPARE:
		            case self::PRESERVE:
		            case self::PREV:
		            case self::PROCESSLIST:
		            case self::PROFILE:
		            case self::PROFILES:
		            case self::PROXY:
		            case self::QUERY:
		            case self::QUICK:
		            case self::REBUILD:
		            case self::RECOVER:
		            case self::RECURSIVE:
		            case self::REDO_BUFFER_SIZE:
		            case self::REDUNDANT:
		            case self::RELAY:
		            case self::RELAY_LOG_FILE:
		            case self::RELAY_LOG_POS:
		            case self::RELAYLOG:
		            case self::REMOVE:
		            case self::REORGANIZE:
		            case self::REPAIR:
		            case self::REPLICATE_DO_DB:
		            case self::REPLICATE_DO_TABLE:
		            case self::REPLICATE_IGNORE_DB:
		            case self::REPLICATE_IGNORE_TABLE:
		            case self::REPLICATE_REWRITE_DB:
		            case self::REPLICATE_WILD_DO_TABLE:
		            case self::REPLICATE_WILD_IGNORE_TABLE:
		            case self::REPLICATION:
		            case self::RESET:
		            case self::RESUME:
		            case self::RETURNED_SQLSTATE:
		            case self::RETURNS:
		            case self::REUSE:
		            case self::ROLE:
		            case self::ROLLBACK:
		            case self::ROLLUP:
		            case self::ROTATE:
		            case self::ROW:
		            case self::ROWS:
		            case self::ROW_FORMAT:
		            case self::RTREE:
		            case self::SAVEPOINT:
		            case self::SCHEDULE:
		            case self::SECURITY:
		            case self::SERVER:
		            case self::SESSION:
		            case self::SHARE:
		            case self::SHARED:
		            case self::SIGNED:
		            case self::SIMPLE:
		            case self::SLAVE:
		            case self::SLOW:
		            case self::SNAPSHOT:
		            case self::SOCKET:
		            case self::SOME:
		            case self::SONAME:
		            case self::SOUNDS:
		            case self::SOURCE:
		            case self::SQL_AFTER_GTIDS:
		            case self::SQL_AFTER_MTS_GAPS:
		            case self::SQL_BEFORE_GTIDS:
		            case self::SQL_BUFFER_RESULT:
		            case self::SQL_CACHE:
		            case self::SQL_NO_CACHE:
		            case self::SQL_THREAD:
		            case self::START:
		            case self::STARTS:
		            case self::STATS_AUTO_RECALC:
		            case self::STATS_PERSISTENT:
		            case self::STATS_SAMPLE_PAGES:
		            case self::STATUS:
		            case self::STOP:
		            case self::STORAGE:
		            case self::STRING:
		            case self::SUBCLASS_ORIGIN:
		            case self::SUBJECT:
		            case self::SUBPARTITION:
		            case self::SUBPARTITIONS:
		            case self::SUSPEND:
		            case self::SWAPS:
		            case self::SWITCHES:
		            case self::TABLE_NAME:
		            case self::TABLESPACE:
		            case self::TABLE_TYPE:
		            case self::TEMPORARY:
		            case self::TEMPTABLE:
		            case self::THAN:
		            case self::TRADITIONAL:
		            case self::TRANSACTION:
		            case self::TRANSACTIONAL:
		            case self::TRIGGERS:
		            case self::TRUNCATE:
		            case self::UNBOUNDED:
		            case self::UNDEFINED:
		            case self::UNDOFILE:
		            case self::UNDO_BUFFER_SIZE:
		            case self::UNINSTALL:
		            case self::UNKNOWN:
		            case self::UNTIL:
		            case self::UPGRADE:
		            case self::USER:
		            case self::USE_FRM:
		            case self::USER_RESOURCES:
		            case self::VALIDATION:
		            case self::VALUE:
		            case self::VARIABLES:
		            case self::VIEW:
		            case self::VIRTUAL:
		            case self::VISIBLE:
		            case self::WAIT:
		            case self::WARNINGS:
		            case self::WITHOUT:
		            case self::WORK:
		            case self::WRAPPER:
		            case self::X509:
		            case self::XA:
		            case self::XML:
		            case self::EUR:
		            case self::USA:
		            case self::JIS:
		            case self::ISO:
		            case self::INTERNAL:
		            case self::QUARTER:
		            case self::MONTH:
		            case self::DAY:
		            case self::HOUR:
		            case self::MINUTE:
		            case self::WEEK:
		            case self::SECOND:
		            case self::MICROSECOND:
		            case self::ADMIN:
		            case self::AUDIT_ABORT_EXEMPT:
		            case self::AUDIT_ADMIN:
		            case self::AUTHENTICATION_POLICY_ADMIN:
		            case self::BACKUP_ADMIN:
		            case self::BINLOG_ADMIN:
		            case self::BINLOG_ENCRYPTION_ADMIN:
		            case self::CLONE_ADMIN:
		            case self::CONNECTION_ADMIN:
		            case self::ENCRYPTION_KEY_ADMIN:
		            case self::EXECUTE:
		            case self::FILE:
		            case self::FIREWALL_ADMIN:
		            case self::FIREWALL_EXEMPT:
		            case self::FIREWALL_USER:
		            case self::GROUP_REPLICATION_ADMIN:
		            case self::INNODB_REDO_LOG_ARCHIVE:
		            case self::INVOKE:
		            case self::LAMBDA:
		            case self::NDB_STORED_USER:
		            case self::PASSWORDLESS_USER_ADMIN:
		            case self::PERSIST_RO_VARIABLES_ADMIN:
		            case self::PRIVILEGES:
		            case self::PROCESS:
		            case self::RELOAD:
		            case self::REPLICATION_APPLIER:
		            case self::REPLICATION_SLAVE_ADMIN:
		            case self::RESOURCE_GROUP_ADMIN:
		            case self::RESOURCE_GROUP_USER:
		            case self::ROLE_ADMIN:
		            case self::ROUTINE:
		            case self::S3:
		            case self::SESSION_VARIABLES_ADMIN:
		            case self::SET_USER_ID:
		            case self::SHOW_ROUTINE:
		            case self::SHUTDOWN:
		            case self::SUPER:
		            case self::SYSTEM_VARIABLES_ADMIN:
		            case self::TABLES:
		            case self::TABLE_ENCRYPTION_ADMIN:
		            case self::VERSION_TOKEN_ADMIN:
		            case self::XA_RECOVER_ADMIN:
		            case self::ARMSCII8:
		            case self::ASCII:
		            case self::BIG5:
		            case self::CP1250:
		            case self::CP1251:
		            case self::CP1256:
		            case self::CP1257:
		            case self::CP850:
		            case self::CP852:
		            case self::CP866:
		            case self::CP932:
		            case self::DEC8:
		            case self::EUCJPMS:
		            case self::EUCKR:
		            case self::GB18030:
		            case self::GB2312:
		            case self::GBK:
		            case self::GEOSTD8:
		            case self::GREEK:
		            case self::HEBREW:
		            case self::HP8:
		            case self::KEYBCS2:
		            case self::KOI8R:
		            case self::KOI8U:
		            case self::LATIN1:
		            case self::LATIN2:
		            case self::LATIN5:
		            case self::LATIN7:
		            case self::MACCE:
		            case self::MACROMAN:
		            case self::SJIS:
		            case self::SWE7:
		            case self::TIS620:
		            case self::UCS2:
		            case self::UJIS:
		            case self::UTF16:
		            case self::UTF16LE:
		            case self::UTF32:
		            case self::UTF8:
		            case self::UTF8MB3:
		            case self::UTF8MB4:
		            case self::ARCHIVE:
		            case self::BLACKHOLE:
		            case self::CSV:
		            case self::FEDERATED:
		            case self::INNODB:
		            case self::MEMORY:
		            case self::MRG_MYISAM:
		            case self::MYISAM:
		            case self::NDB:
		            case self::NDBCLUSTER:
		            case self::PERFORMANCE_SCHEMA:
		            case self::TOKUDB:
		            case self::REPEATABLE:
		            case self::COMMITTED:
		            case self::UNCOMMITTED:
		            case self::SERIALIZABLE:
		            case self::GEOMETRYCOLLECTION:
		            case self::LINESTRING:
		            case self::MULTILINESTRING:
		            case self::MULTIPOINT:
		            case self::MULTIPOLYGON:
		            case self::POINT:
		            case self::POLYGON:
		            case self::ABS:
		            case self::ACOS:
		            case self::ADDDATE:
		            case self::ADDTIME:
		            case self::AES_DECRYPT:
		            case self::AES_ENCRYPT:
		            case self::AREA:
		            case self::ASBINARY:
		            case self::ASIN:
		            case self::ASTEXT:
		            case self::ASWKB:
		            case self::ASWKT:
		            case self::ASYMMETRIC_DECRYPT:
		            case self::ASYMMETRIC_DERIVE:
		            case self::ASYMMETRIC_ENCRYPT:
		            case self::ASYMMETRIC_SIGN:
		            case self::ASYMMETRIC_VERIFY:
		            case self::ATAN:
		            case self::ATAN2:
		            case self::BENCHMARK:
		            case self::BIN:
		            case self::BIT_COUNT:
		            case self::BIT_LENGTH:
		            case self::BUFFER:
		            case self::CATALOG_NAME:
		            case self::CEIL:
		            case self::CEILING:
		            case self::CENTROID:
		            case self::CHARACTER_LENGTH:
		            case self::CHARSET:
		            case self::CHAR_LENGTH:
		            case self::COERCIBILITY:
		            case self::COLLATION:
		            case self::COMPRESS:
		            case self::CONCAT:
		            case self::CONCAT_WS:
		            case self::CONNECTION_ID:
		            case self::CONV:
		            case self::CONVERT_TZ:
		            case self::COS:
		            case self::COT:
		            case self::CRC32:
		            case self::CREATE_ASYMMETRIC_PRIV_KEY:
		            case self::CREATE_ASYMMETRIC_PUB_KEY:
		            case self::CREATE_DH_PARAMETERS:
		            case self::CREATE_DIGEST:
		            case self::CROSSES:
		            case self::DATEDIFF:
		            case self::DATE_FORMAT:
		            case self::DAYNAME:
		            case self::DAYOFMONTH:
		            case self::DAYOFWEEK:
		            case self::DAYOFYEAR:
		            case self::DECODE:
		            case self::DEGREES:
		            case self::DES_DECRYPT:
		            case self::DES_ENCRYPT:
		            case self::DIMENSION:
		            case self::DISJOINT:
		            case self::ELT:
		            case self::ENCODE:
		            case self::ENCRYPT:
		            case self::ENDPOINT:
		            case self::ENGINE_ATTRIBUTE:
		            case self::ENVELOPE:
		            case self::EQUALS:
		            case self::EXP:
		            case self::EXPORT_SET:
		            case self::EXTERIORRING:
		            case self::EXTRACTVALUE:
		            case self::FIELD:
		            case self::FIND_IN_SET:
		            case self::FLOOR:
		            case self::FORMAT:
		            case self::FOUND_ROWS:
		            case self::FROM_BASE64:
		            case self::FROM_DAYS:
		            case self::FROM_UNIXTIME:
		            case self::GEOMCOLLFROMTEXT:
		            case self::GEOMCOLLFROMWKB:
		            case self::GEOMETRYCOLLECTIONFROMTEXT:
		            case self::GEOMETRYCOLLECTIONFROMWKB:
		            case self::GEOMETRYFROMTEXT:
		            case self::GEOMETRYFROMWKB:
		            case self::GEOMETRYN:
		            case self::GEOMETRYTYPE:
		            case self::GEOMFROMTEXT:
		            case self::GEOMFROMWKB:
		            case self::GET_FORMAT:
		            case self::GET_LOCK:
		            case self::GLENGTH:
		            case self::GREATEST:
		            case self::GTID_SUBSET:
		            case self::GTID_SUBTRACT:
		            case self::HEX:
		            case self::IFNULL:
		            case self::INET6_ATON:
		            case self::INET6_NTOA:
		            case self::INET_ATON:
		            case self::INET_NTOA:
		            case self::INSTR:
		            case self::INTERIORRINGN:
		            case self::INTERSECTS:
		            case self::ISCLOSED:
		            case self::ISEMPTY:
		            case self::ISNULL:
		            case self::ISSIMPLE:
		            case self::IS_FREE_LOCK:
		            case self::IS_IPV4:
		            case self::IS_IPV4_COMPAT:
		            case self::IS_IPV4_MAPPED:
		            case self::IS_IPV6:
		            case self::IS_USED_LOCK:
		            case self::LAST_INSERT_ID:
		            case self::LCASE:
		            case self::LEAST:
		            case self::LENGTH:
		            case self::LINEFROMTEXT:
		            case self::LINEFROMWKB:
		            case self::LINESTRINGFROMTEXT:
		            case self::LINESTRINGFROMWKB:
		            case self::LN:
		            case self::LOAD_FILE:
		            case self::LOCATE:
		            case self::LOG:
		            case self::LOG10:
		            case self::LOG2:
		            case self::LOWER:
		            case self::LPAD:
		            case self::LTRIM:
		            case self::MAKEDATE:
		            case self::MAKETIME:
		            case self::MAKE_SET:
		            case self::MASTER_POS_WAIT:
		            case self::MBRCONTAINS:
		            case self::MBRDISJOINT:
		            case self::MBREQUAL:
		            case self::MBRINTERSECTS:
		            case self::MBROVERLAPS:
		            case self::MBRTOUCHES:
		            case self::MBRWITHIN:
		            case self::MD5:
		            case self::MLINEFROMTEXT:
		            case self::MLINEFROMWKB:
		            case self::MONTHNAME:
		            case self::MPOINTFROMTEXT:
		            case self::MPOINTFROMWKB:
		            case self::MPOLYFROMTEXT:
		            case self::MPOLYFROMWKB:
		            case self::MULTILINESTRINGFROMTEXT:
		            case self::MULTILINESTRINGFROMWKB:
		            case self::MULTIPOINTFROMTEXT:
		            case self::MULTIPOINTFROMWKB:
		            case self::MULTIPOLYGONFROMTEXT:
		            case self::MULTIPOLYGONFROMWKB:
		            case self::NAME_CONST:
		            case self::NULLIF:
		            case self::NUMGEOMETRIES:
		            case self::NUMINTERIORRINGS:
		            case self::NUMPOINTS:
		            case self::OCT:
		            case self::OCTET_LENGTH:
		            case self::ORD:
		            case self::OVERLAPS:
		            case self::PERIOD_ADD:
		            case self::PERIOD_DIFF:
		            case self::PI:
		            case self::POINTFROMTEXT:
		            case self::POINTFROMWKB:
		            case self::POINTN:
		            case self::POLYFROMTEXT:
		            case self::POLYFROMWKB:
		            case self::POLYGONFROMTEXT:
		            case self::POLYGONFROMWKB:
		            case self::POW:
		            case self::POWER:
		            case self::QUOTE:
		            case self::RADIANS:
		            case self::RAND:
		            case self::RANDOM:
		            case self::RANDOM_BYTES:
		            case self::RELEASE_LOCK:
		            case self::REVERSE:
		            case self::ROUND:
		            case self::ROW_COUNT:
		            case self::RPAD:
		            case self::RTRIM:
		            case self::SEC_TO_TIME:
		            case self::SECONDARY_ENGINE_ATTRIBUTE:
		            case self::SESSION_USER:
		            case self::SHA:
		            case self::SHA1:
		            case self::SHA2:
		            case self::SCHEMA_NAME:
		            case self::SIGN:
		            case self::SIN:
		            case self::SLEEP:
		            case self::SOUNDEX:
		            case self::SQL_THREAD_WAIT_AFTER_GTIDS:
		            case self::SQRT:
		            case self::SRID:
		            case self::STARTPOINT:
		            case self::STRCMP:
		            case self::STR_TO_DATE:
		            case self::ST_AREA:
		            case self::ST_ASBINARY:
		            case self::ST_ASTEXT:
		            case self::ST_ASWKB:
		            case self::ST_ASWKT:
		            case self::ST_BUFFER:
		            case self::ST_CENTROID:
		            case self::ST_CONTAINS:
		            case self::ST_CROSSES:
		            case self::ST_DIFFERENCE:
		            case self::ST_DIMENSION:
		            case self::ST_DISJOINT:
		            case self::ST_DISTANCE:
		            case self::ST_ENDPOINT:
		            case self::ST_ENVELOPE:
		            case self::ST_EQUALS:
		            case self::ST_EXTERIORRING:
		            case self::ST_GEOMCOLLFROMTEXT:
		            case self::ST_GEOMCOLLFROMTXT:
		            case self::ST_GEOMCOLLFROMWKB:
		            case self::ST_GEOMETRYCOLLECTIONFROMTEXT:
		            case self::ST_GEOMETRYCOLLECTIONFROMWKB:
		            case self::ST_GEOMETRYFROMTEXT:
		            case self::ST_GEOMETRYFROMWKB:
		            case self::ST_GEOMETRYN:
		            case self::ST_GEOMETRYTYPE:
		            case self::ST_GEOMFROMTEXT:
		            case self::ST_GEOMFROMWKB:
		            case self::ST_INTERIORRINGN:
		            case self::ST_INTERSECTION:
		            case self::ST_INTERSECTS:
		            case self::ST_ISCLOSED:
		            case self::ST_ISEMPTY:
		            case self::ST_ISSIMPLE:
		            case self::ST_LINEFROMTEXT:
		            case self::ST_LINEFROMWKB:
		            case self::ST_LINESTRINGFROMTEXT:
		            case self::ST_LINESTRINGFROMWKB:
		            case self::ST_NUMGEOMETRIES:
		            case self::ST_NUMINTERIORRING:
		            case self::ST_NUMINTERIORRINGS:
		            case self::ST_NUMPOINTS:
		            case self::ST_OVERLAPS:
		            case self::ST_POINTFROMTEXT:
		            case self::ST_POINTFROMWKB:
		            case self::ST_POINTN:
		            case self::ST_POLYFROMTEXT:
		            case self::ST_POLYFROMWKB:
		            case self::ST_POLYGONFROMTEXT:
		            case self::ST_POLYGONFROMWKB:
		            case self::ST_SRID:
		            case self::ST_STARTPOINT:
		            case self::ST_SYMDIFFERENCE:
		            case self::ST_TOUCHES:
		            case self::ST_UNION:
		            case self::ST_WITHIN:
		            case self::ST_X:
		            case self::ST_Y:
		            case self::SUBDATE:
		            case self::SUBSTRING_INDEX:
		            case self::SUBTIME:
		            case self::SYSTEM_USER:
		            case self::TAN:
		            case self::TIMEDIFF:
		            case self::TIMESTAMPADD:
		            case self::TIMESTAMPDIFF:
		            case self::TIME_FORMAT:
		            case self::TIME_TO_SEC:
		            case self::TOUCHES:
		            case self::TO_BASE64:
		            case self::TO_DAYS:
		            case self::TO_SECONDS:
		            case self::TP_CONNECTION_ADMIN:
		            case self::UCASE:
		            case self::UNCOMPRESS:
		            case self::UNCOMPRESSED_LENGTH:
		            case self::UNHEX:
		            case self::UNIX_TIMESTAMP:
		            case self::UPDATEXML:
		            case self::UPPER:
		            case self::UUID:
		            case self::UUID_SHORT:
		            case self::VALIDATE_PASSWORD_STRENGTH:
		            case self::VERSION:
		            case self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
		            case self::WEEKDAY:
		            case self::WEEKOFYEAR:
		            case self::WEIGHT_STRING:
		            case self::WITHIN:
		            case self::YEARWEEK:
		            case self::Y_FUNCTION:
		            case self::X_FUNCTION:
		            case self::MOD:
		            case self::CHARSET_REVERSE_QOUTE_STRING:
		            case self::STRING_LITERAL:
		            case self::ID:
		            	$this->setState(7108);
		            	$this->windowName();
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function windowSpec(): Context\WindowSpecContext
		{
		    $localContext = new Context\WindowSpecContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 664, self::RULE_windowSpec);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(7112);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 1053, $this->ctx)) {
		            case 1:
		        	    $this->setState(7111);
		        	    $this->windowName();
		        	break;
		        }
		        $this->setState(7115);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::PARTITION) {
		        	$this->setState(7114);
		        	$this->partitionClause();
		        }
		        $this->setState(7118);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::ORDER) {
		        	$this->setState(7117);
		        	$this->orderByClause();
		        }
		        $this->setState(7121);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::RANGE || $_la === self::ROWS) {
		        	$this->setState(7120);
		        	$this->frameClause();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function windowName(): Context\WindowNameContext
		{
		    $localContext = new Context\WindowNameContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 666, self::RULE_windowName);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(7123);
		        $this->uid();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function frameClause(): Context\FrameClauseContext
		{
		    $localContext = new Context\FrameClauseContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 668, self::RULE_frameClause);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(7125);
		        $this->frameUnits();
		        $this->setState(7126);
		        $this->frameExtent();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function frameUnits(): Context\FrameUnitsContext
		{
		    $localContext = new Context\FrameUnitsContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 670, self::RULE_frameUnits);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(7128);

		        $_la = $this->input->LA(1);

		        if (!($_la === self::RANGE || $_la === self::ROWS)) {
		        $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function frameExtent(): Context\FrameExtentContext
		{
		    $localContext = new Context\FrameExtentContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 672, self::RULE_frameExtent);

		    try {
		        $this->setState(7132);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 1057, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(7130);
		        	    $this->frameRange();
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(7131);
		        	    $this->frameBetween();
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function frameBetween(): Context\FrameBetweenContext
		{
		    $localContext = new Context\FrameBetweenContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 674, self::RULE_frameBetween);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(7134);
		        $this->match(self::BETWEEN);
		        $this->setState(7135);
		        $this->frameRange();
		        $this->setState(7136);
		        $this->match(self::AND);
		        $this->setState(7137);
		        $this->frameRange();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function frameRange(): Context\FrameRangeContext
		{
		    $localContext = new Context\FrameRangeContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 676, self::RULE_frameRange);

		    try {
		        $this->setState(7146);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 1058, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(7139);
		        	    $this->match(self::CURRENT);
		        	    $this->setState(7140);
		        	    $this->match(self::ROW);
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(7141);
		        	    $this->match(self::UNBOUNDED);
		        	    $this->setState(7142);

		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::FOLLOWING || $_la === self::PRECEDING)) {
		        	    $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	break;

		        	case 3:
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(7143);
		        	    $this->recursiveExpression(0);
		        	    $this->setState(7144);

		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::FOLLOWING || $_la === self::PRECEDING)) {
		        	    $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function partitionClause(): Context\PartitionClauseContext
		{
		    $localContext = new Context\PartitionClauseContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 678, self::RULE_partitionClause);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(7148);
		        $this->match(self::PARTITION);
		        $this->setState(7149);
		        $this->match(self::BY);
		        $this->setState(7150);
		        $this->recursiveExpression(0);
		        $this->setState(7155);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::COMMA) {
		        	$this->setState(7151);
		        	$this->match(self::COMMA);
		        	$this->setState(7152);
		        	$this->recursiveExpression(0);
		        	$this->setState(7157);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function scalarFunctionName(): Context\ScalarFunctionNameContext
		{
		    $localContext = new Context\ScalarFunctionNameContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 680, self::RULE_scalarFunctionName);

		    try {
		        $this->setState(7182);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::DATABASE:
		            case self::LEFT:
		            case self::RIGHT:
		            case self::SCHEMA:
		            case self::DATE:
		            case self::TIME:
		            case self::TIMESTAMP:
		            case self::YEAR:
		            case self::JSON_ARRAY:
		            case self::JSON_ARRAYAGG:
		            case self::JSON_ARRAY_APPEND:
		            case self::JSON_ARRAY_INSERT:
		            case self::JSON_CONTAINS:
		            case self::JSON_CONTAINS_PATH:
		            case self::JSON_DEPTH:
		            case self::JSON_EXTRACT:
		            case self::JSON_INSERT:
		            case self::JSON_KEYS:
		            case self::JSON_LENGTH:
		            case self::JSON_MERGE:
		            case self::JSON_MERGE_PATCH:
		            case self::JSON_MERGE_PRESERVE:
		            case self::JSON_OBJECT:
		            case self::JSON_OBJECTAGG:
		            case self::JSON_OVERLAPS:
		            case self::JSON_PRETTY:
		            case self::JSON_QUOTE:
		            case self::JSON_REMOVE:
		            case self::JSON_REPLACE:
		            case self::JSON_SCHEMA_VALID:
		            case self::JSON_SCHEMA_VALIDATION_REPORT:
		            case self::JSON_SEARCH:
		            case self::JSON_SET:
		            case self::JSON_STORAGE_FREE:
		            case self::JSON_STORAGE_SIZE:
		            case self::JSON_TABLE:
		            case self::JSON_TYPE:
		            case self::JSON_UNQUOTE:
		            case self::JSON_VALID:
		            case self::JSON_VALUE:
		            case self::COUNT:
		            case self::CUME_DIST:
		            case self::DENSE_RANK:
		            case self::FIRST_VALUE:
		            case self::LAG:
		            case self::LAST_VALUE:
		            case self::LEAD:
		            case self::NTILE:
		            case self::NTH_VALUE:
		            case self::PERCENT_RANK:
		            case self::RANK:
		            case self::ROW_NUMBER:
		            case self::POSITION:
		            case self::INVISIBLE:
		            case self::VISIBLE:
		            case self::QUARTER:
		            case self::MONTH:
		            case self::DAY:
		            case self::HOUR:
		            case self::MINUTE:
		            case self::WEEK:
		            case self::SECOND:
		            case self::MICROSECOND:
		            case self::SESSION_VARIABLES_ADMIN:
		            case self::GEOMETRYCOLLECTION:
		            case self::LINESTRING:
		            case self::MULTILINESTRING:
		            case self::MULTIPOINT:
		            case self::MULTIPOLYGON:
		            case self::POINT:
		            case self::POLYGON:
		            case self::ABS:
		            case self::ACOS:
		            case self::ADDDATE:
		            case self::ADDTIME:
		            case self::AES_DECRYPT:
		            case self::AES_ENCRYPT:
		            case self::AREA:
		            case self::ASBINARY:
		            case self::ASIN:
		            case self::ASTEXT:
		            case self::ASWKB:
		            case self::ASWKT:
		            case self::ASYMMETRIC_DECRYPT:
		            case self::ASYMMETRIC_DERIVE:
		            case self::ASYMMETRIC_ENCRYPT:
		            case self::ASYMMETRIC_SIGN:
		            case self::ASYMMETRIC_VERIFY:
		            case self::ATAN:
		            case self::ATAN2:
		            case self::BENCHMARK:
		            case self::BIN:
		            case self::BIT_COUNT:
		            case self::BIT_LENGTH:
		            case self::BUFFER:
		            case self::CEIL:
		            case self::CEILING:
		            case self::CENTROID:
		            case self::CHARACTER_LENGTH:
		            case self::CHARSET:
		            case self::CHAR_LENGTH:
		            case self::COERCIBILITY:
		            case self::COLLATION:
		            case self::COMPRESS:
		            case self::CONCAT:
		            case self::CONCAT_WS:
		            case self::CONNECTION_ID:
		            case self::CONV:
		            case self::CONVERT_TZ:
		            case self::COS:
		            case self::COT:
		            case self::CRC32:
		            case self::CREATE_ASYMMETRIC_PRIV_KEY:
		            case self::CREATE_ASYMMETRIC_PUB_KEY:
		            case self::CREATE_DH_PARAMETERS:
		            case self::CREATE_DIGEST:
		            case self::CROSSES:
		            case self::DATEDIFF:
		            case self::DATE_FORMAT:
		            case self::DAYNAME:
		            case self::DAYOFMONTH:
		            case self::DAYOFWEEK:
		            case self::DAYOFYEAR:
		            case self::DECODE:
		            case self::DEGREES:
		            case self::DES_DECRYPT:
		            case self::DES_ENCRYPT:
		            case self::DIMENSION:
		            case self::DISJOINT:
		            case self::ELT:
		            case self::ENCODE:
		            case self::ENCRYPT:
		            case self::ENDPOINT:
		            case self::ENVELOPE:
		            case self::EQUALS:
		            case self::EXP:
		            case self::EXPORT_SET:
		            case self::EXTERIORRING:
		            case self::EXTRACTVALUE:
		            case self::FIELD:
		            case self::FIND_IN_SET:
		            case self::FLOOR:
		            case self::FORMAT:
		            case self::FOUND_ROWS:
		            case self::FROM_BASE64:
		            case self::FROM_DAYS:
		            case self::FROM_UNIXTIME:
		            case self::GEOMCOLLFROMTEXT:
		            case self::GEOMCOLLFROMWKB:
		            case self::GEOMETRYCOLLECTIONFROMTEXT:
		            case self::GEOMETRYCOLLECTIONFROMWKB:
		            case self::GEOMETRYFROMTEXT:
		            case self::GEOMETRYFROMWKB:
		            case self::GEOMETRYN:
		            case self::GEOMETRYTYPE:
		            case self::GEOMFROMTEXT:
		            case self::GEOMFROMWKB:
		            case self::GET_FORMAT:
		            case self::GET_LOCK:
		            case self::GLENGTH:
		            case self::GREATEST:
		            case self::GTID_SUBSET:
		            case self::GTID_SUBTRACT:
		            case self::HEX:
		            case self::IFNULL:
		            case self::INET6_ATON:
		            case self::INET6_NTOA:
		            case self::INET_ATON:
		            case self::INET_NTOA:
		            case self::INSTR:
		            case self::INTERIORRINGN:
		            case self::INTERSECTS:
		            case self::ISCLOSED:
		            case self::ISEMPTY:
		            case self::ISNULL:
		            case self::ISSIMPLE:
		            case self::IS_FREE_LOCK:
		            case self::IS_IPV4:
		            case self::IS_IPV4_COMPAT:
		            case self::IS_IPV4_MAPPED:
		            case self::IS_IPV6:
		            case self::IS_USED_LOCK:
		            case self::LAST_INSERT_ID:
		            case self::LCASE:
		            case self::LEAST:
		            case self::LENGTH:
		            case self::LINEFROMTEXT:
		            case self::LINEFROMWKB:
		            case self::LINESTRINGFROMTEXT:
		            case self::LINESTRINGFROMWKB:
		            case self::LN:
		            case self::LOAD_FILE:
		            case self::LOCATE:
		            case self::LOG:
		            case self::LOG10:
		            case self::LOG2:
		            case self::LOWER:
		            case self::LPAD:
		            case self::LTRIM:
		            case self::MAKEDATE:
		            case self::MAKETIME:
		            case self::MAKE_SET:
		            case self::MASTER_POS_WAIT:
		            case self::MBRCONTAINS:
		            case self::MBRDISJOINT:
		            case self::MBREQUAL:
		            case self::MBRINTERSECTS:
		            case self::MBROVERLAPS:
		            case self::MBRTOUCHES:
		            case self::MBRWITHIN:
		            case self::MD5:
		            case self::MLINEFROMTEXT:
		            case self::MLINEFROMWKB:
		            case self::MONTHNAME:
		            case self::MPOINTFROMTEXT:
		            case self::MPOINTFROMWKB:
		            case self::MPOLYFROMTEXT:
		            case self::MPOLYFROMWKB:
		            case self::MULTILINESTRINGFROMTEXT:
		            case self::MULTILINESTRINGFROMWKB:
		            case self::MULTIPOINTFROMTEXT:
		            case self::MULTIPOINTFROMWKB:
		            case self::MULTIPOLYGONFROMTEXT:
		            case self::MULTIPOLYGONFROMWKB:
		            case self::NAME_CONST:
		            case self::NULLIF:
		            case self::NUMGEOMETRIES:
		            case self::NUMINTERIORRINGS:
		            case self::NUMPOINTS:
		            case self::OCT:
		            case self::OCTET_LENGTH:
		            case self::ORD:
		            case self::OVERLAPS:
		            case self::PERIOD_ADD:
		            case self::PERIOD_DIFF:
		            case self::PI:
		            case self::POINTFROMTEXT:
		            case self::POINTFROMWKB:
		            case self::POINTN:
		            case self::POLYFROMTEXT:
		            case self::POLYFROMWKB:
		            case self::POLYGONFROMTEXT:
		            case self::POLYGONFROMWKB:
		            case self::POW:
		            case self::POWER:
		            case self::QUOTE:
		            case self::RADIANS:
		            case self::RAND:
		            case self::RANDOM:
		            case self::RANDOM_BYTES:
		            case self::RELEASE_LOCK:
		            case self::REVERSE:
		            case self::ROUND:
		            case self::ROW_COUNT:
		            case self::RPAD:
		            case self::RTRIM:
		            case self::SEC_TO_TIME:
		            case self::SESSION_USER:
		            case self::SHA:
		            case self::SHA1:
		            case self::SHA2:
		            case self::SIGN:
		            case self::SIN:
		            case self::SLEEP:
		            case self::SOUNDEX:
		            case self::SQL_THREAD_WAIT_AFTER_GTIDS:
		            case self::SQRT:
		            case self::SRID:
		            case self::STARTPOINT:
		            case self::STRCMP:
		            case self::STR_TO_DATE:
		            case self::ST_AREA:
		            case self::ST_ASBINARY:
		            case self::ST_ASTEXT:
		            case self::ST_ASWKB:
		            case self::ST_ASWKT:
		            case self::ST_BUFFER:
		            case self::ST_CENTROID:
		            case self::ST_CONTAINS:
		            case self::ST_CROSSES:
		            case self::ST_DIFFERENCE:
		            case self::ST_DIMENSION:
		            case self::ST_DISJOINT:
		            case self::ST_DISTANCE:
		            case self::ST_ENDPOINT:
		            case self::ST_ENVELOPE:
		            case self::ST_EQUALS:
		            case self::ST_EXTERIORRING:
		            case self::ST_GEOMCOLLFROMTEXT:
		            case self::ST_GEOMCOLLFROMTXT:
		            case self::ST_GEOMCOLLFROMWKB:
		            case self::ST_GEOMETRYCOLLECTIONFROMTEXT:
		            case self::ST_GEOMETRYCOLLECTIONFROMWKB:
		            case self::ST_GEOMETRYFROMTEXT:
		            case self::ST_GEOMETRYFROMWKB:
		            case self::ST_GEOMETRYN:
		            case self::ST_GEOMETRYTYPE:
		            case self::ST_GEOMFROMTEXT:
		            case self::ST_GEOMFROMWKB:
		            case self::ST_INTERIORRINGN:
		            case self::ST_INTERSECTION:
		            case self::ST_INTERSECTS:
		            case self::ST_ISCLOSED:
		            case self::ST_ISEMPTY:
		            case self::ST_ISSIMPLE:
		            case self::ST_LINEFROMTEXT:
		            case self::ST_LINEFROMWKB:
		            case self::ST_LINESTRINGFROMTEXT:
		            case self::ST_LINESTRINGFROMWKB:
		            case self::ST_NUMGEOMETRIES:
		            case self::ST_NUMINTERIORRING:
		            case self::ST_NUMINTERIORRINGS:
		            case self::ST_NUMPOINTS:
		            case self::ST_OVERLAPS:
		            case self::ST_POINTFROMTEXT:
		            case self::ST_POINTFROMWKB:
		            case self::ST_POINTN:
		            case self::ST_POLYFROMTEXT:
		            case self::ST_POLYFROMWKB:
		            case self::ST_POLYGONFROMTEXT:
		            case self::ST_POLYGONFROMWKB:
		            case self::ST_SRID:
		            case self::ST_STARTPOINT:
		            case self::ST_SYMDIFFERENCE:
		            case self::ST_TOUCHES:
		            case self::ST_UNION:
		            case self::ST_WITHIN:
		            case self::ST_X:
		            case self::ST_Y:
		            case self::SUBDATE:
		            case self::SUBSTRING_INDEX:
		            case self::SUBTIME:
		            case self::SYSTEM_USER:
		            case self::TAN:
		            case self::TIMEDIFF:
		            case self::TIMESTAMPADD:
		            case self::TIMESTAMPDIFF:
		            case self::TIME_FORMAT:
		            case self::TIME_TO_SEC:
		            case self::TOUCHES:
		            case self::TO_BASE64:
		            case self::TO_DAYS:
		            case self::TO_SECONDS:
		            case self::UCASE:
		            case self::UNCOMPRESS:
		            case self::UNCOMPRESSED_LENGTH:
		            case self::UNHEX:
		            case self::UNIX_TIMESTAMP:
		            case self::UPDATEXML:
		            case self::UPPER:
		            case self::UUID:
		            case self::UUID_SHORT:
		            case self::VALIDATE_PASSWORD_STRENGTH:
		            case self::VERSION:
		            case self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
		            case self::WEEKDAY:
		            case self::WEEKOFYEAR:
		            case self::WEIGHT_STRING:
		            case self::WITHIN:
		            case self::YEARWEEK:
		            case self::Y_FUNCTION:
		            case self::X_FUNCTION:
		            case self::MOD:
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(7158);
		            	$this->functionNameBase();
		            	break;

		            case self::ASCII:
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(7159);
		            	$this->match(self::ASCII);
		            	break;

		            case self::CURDATE:
		            	$this->enterOuterAlt($localContext, 3);
		            	$this->setState(7160);
		            	$this->match(self::CURDATE);
		            	break;

		            case self::CURRENT_DATE:
		            	$this->enterOuterAlt($localContext, 4);
		            	$this->setState(7161);
		            	$this->match(self::CURRENT_DATE);
		            	break;

		            case self::CURRENT_TIME:
		            	$this->enterOuterAlt($localContext, 5);
		            	$this->setState(7162);
		            	$this->match(self::CURRENT_TIME);
		            	break;

		            case self::CURRENT_TIMESTAMP:
		            	$this->enterOuterAlt($localContext, 6);
		            	$this->setState(7163);
		            	$this->match(self::CURRENT_TIMESTAMP);
		            	break;

		            case self::CURTIME:
		            	$this->enterOuterAlt($localContext, 7);
		            	$this->setState(7164);
		            	$this->match(self::CURTIME);
		            	break;

		            case self::DATE_ADD:
		            	$this->enterOuterAlt($localContext, 8);
		            	$this->setState(7165);
		            	$this->match(self::DATE_ADD);
		            	break;

		            case self::DATE_SUB:
		            	$this->enterOuterAlt($localContext, 9);
		            	$this->setState(7166);
		            	$this->match(self::DATE_SUB);
		            	break;

		            case self::IF:
		            	$this->enterOuterAlt($localContext, 10);
		            	$this->setState(7167);
		            	$this->match(self::IF);
		            	break;

		            case self::INSERT:
		            	$this->enterOuterAlt($localContext, 11);
		            	$this->setState(7168);
		            	$this->match(self::INSERT);
		            	break;

		            case self::LOCALTIME:
		            	$this->enterOuterAlt($localContext, 12);
		            	$this->setState(7169);
		            	$this->match(self::LOCALTIME);
		            	break;

		            case self::LOCALTIMESTAMP:
		            	$this->enterOuterAlt($localContext, 13);
		            	$this->setState(7170);
		            	$this->match(self::LOCALTIMESTAMP);
		            	break;

		            case self::MID:
		            	$this->enterOuterAlt($localContext, 14);
		            	$this->setState(7171);
		            	$this->match(self::MID);
		            	break;

		            case self::NOW:
		            	$this->enterOuterAlt($localContext, 15);
		            	$this->setState(7172);
		            	$this->match(self::NOW);
		            	break;

		            case self::REPEAT:
		            	$this->enterOuterAlt($localContext, 16);
		            	$this->setState(7173);
		            	$this->match(self::REPEAT);
		            	break;

		            case self::REPLACE:
		            	$this->enterOuterAlt($localContext, 17);
		            	$this->setState(7174);
		            	$this->match(self::REPLACE);
		            	break;

		            case self::SUBSTR:
		            	$this->enterOuterAlt($localContext, 18);
		            	$this->setState(7175);
		            	$this->match(self::SUBSTR);
		            	break;

		            case self::SUBSTRING:
		            	$this->enterOuterAlt($localContext, 19);
		            	$this->setState(7176);
		            	$this->match(self::SUBSTRING);
		            	break;

		            case self::SYSDATE:
		            	$this->enterOuterAlt($localContext, 20);
		            	$this->setState(7177);
		            	$this->match(self::SYSDATE);
		            	break;

		            case self::TRIM:
		            	$this->enterOuterAlt($localContext, 21);
		            	$this->setState(7178);
		            	$this->match(self::TRIM);
		            	break;

		            case self::UTC_DATE:
		            	$this->enterOuterAlt($localContext, 22);
		            	$this->setState(7179);
		            	$this->match(self::UTC_DATE);
		            	break;

		            case self::UTC_TIME:
		            	$this->enterOuterAlt($localContext, 23);
		            	$this->setState(7180);
		            	$this->match(self::UTC_TIME);
		            	break;

		            case self::UTC_TIMESTAMP:
		            	$this->enterOuterAlt($localContext, 24);
		            	$this->setState(7181);
		            	$this->match(self::UTC_TIMESTAMP);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function passwordFunctionClause(): Context\PasswordFunctionClauseContext
		{
		    $localContext = new Context\PasswordFunctionClauseContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 682, self::RULE_passwordFunctionClause);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(7184);

		        $localContext->functionName = $this->input->LT(1);
		        $_la = $this->input->LA(1);

		        if (!($_la === self::OLD_PASSWORD || $_la === self::PASSWORD)) {
		        	    $localContext->functionName = $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		        $this->setState(7185);
		        $this->match(self::LR_BRACKET);
		        $this->setState(7186);
		        $this->functionArg();
		        $this->setState(7187);
		        $this->match(self::RR_BRACKET);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function functionArgs(): Context\FunctionArgsContext
		{
		    $localContext = new Context\FunctionArgsContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 684, self::RULE_functionArgs);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(7193);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 1061, $this->ctx)) {
		        	case 1:
		        	    $this->setState(7189);
		        	    $this->constant();
		        	break;

		        	case 2:
		        	    $this->setState(7190);
		        	    $this->fullColumnName();
		        	break;

		        	case 3:
		        	    $this->setState(7191);
		        	    $this->functionCall();
		        	break;

		        	case 4:
		        	    $this->setState(7192);
		        	    $this->recursiveExpression(0);
		        	break;
		        }
		        $this->setState(7204);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::COMMA) {
		        	$this->setState(7195);
		        	$this->match(self::COMMA);
		        	$this->setState(7200);
		        	$this->errorHandler->sync($this);

		        	switch ($this->getInterpreter()->adaptivePredict($this->input, 1062, $this->ctx)) {
		        		case 1:
		        		    $this->setState(7196);
		        		    $this->constant();
		        		break;

		        		case 2:
		        		    $this->setState(7197);
		        		    $this->fullColumnName();
		        		break;

		        		case 3:
		        		    $this->setState(7198);
		        		    $this->functionCall();
		        		break;

		        		case 4:
		        		    $this->setState(7199);
		        		    $this->recursiveExpression(0);
		        		break;
		        	}
		        	$this->setState(7206);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function functionArg(): Context\FunctionArgContext
		{
		    $localContext = new Context\FunctionArgContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 686, self::RULE_functionArg);

		    try {
		        $this->setState(7211);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 1064, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(7207);
		        	    $this->constant();
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(7208);
		        	    $this->fullColumnName();
		        	break;

		        	case 3:
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(7209);
		        	    $this->functionCall();
		        	break;

		        	case 4:
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(7210);
		        	    $this->recursiveExpression(0);
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function expression(): Context\ExpressionContext
		{
			return $this->recursiveExpression(0);
		}

		/**
		 * @throws RecognitionException
		 */
		private function recursiveExpression(int $precedence): Context\ExpressionContext
		{
			$parentContext = $this->ctx;
			$parentState = $this->getState();
			$localContext = new Context\ExpressionContext($this->ctx, $parentState);
			$previousContext = $localContext;
			$startState = 688;
			$this->enterRecursionRule($localContext, 688, self::RULE_expression, $precedence);

			try {
				$this->enterOuterAlt($localContext, 1);
				$this->setState(7224);
				$this->errorHandler->sync($this);

				switch ($this->getInterpreter()->adaptivePredict($this->input, 1066, $this->ctx)) {
					case 1:
					    $localContext = new Context\NotExpressionContext($localContext);
					    $this->ctx = $localContext;
					    $previousContext = $localContext;

					    $this->setState(7214);

					    $localContext->notOperator = $this->input->LT(1);
					    $_la = $this->input->LA(1);

					    if (!($_la === self::NOT || $_la === self::EXCLAMATION_SYMBOL)) {
					    	    $localContext->notOperator = $this->errorHandler->recoverInline($this);
					    } else {
					    	if ($this->input->LA(1) === Token::EOF) {
					    	    $this->matchedEOF = true;
					        }

					    	$this->errorHandler->reportMatch($this);
					    	$this->consume();
					    }
					    $this->setState(7215);
					    $this->recursiveExpression(4);
					break;

					case 2:
					    $localContext = new Context\IsExpressionContext($localContext);
					    $this->ctx = $localContext;
					    $previousContext = $localContext;
					    $this->setState(7216);
					    $this->recursivePredicate(0);
					    $this->setState(7217);
					    $this->match(self::IS);
					    $this->setState(7219);
					    $this->errorHandler->sync($this);
					    $_la = $this->input->LA(1);

					    if ($_la === self::NOT) {
					    	$this->setState(7218);
					    	$this->match(self::NOT);
					    }
					    $this->setState(7221);

					    $localContext->testValue = $this->input->LT(1);
					    $_la = $this->input->LA(1);

					    if (!($_la === self::FALSE || $_la === self::TRUE || $_la === self::UNKNOWN)) {
					    	    $localContext->testValue = $this->errorHandler->recoverInline($this);
					    } else {
					    	if ($this->input->LA(1) === Token::EOF) {
					    	    $this->matchedEOF = true;
					        }

					    	$this->errorHandler->reportMatch($this);
					    	$this->consume();
					    }
					break;

					case 3:
					    $localContext = new Context\PredicateExpressionContext($localContext);
					    $this->ctx = $localContext;
					    $previousContext = $localContext;
					    $this->setState(7223);
					    $this->recursivePredicate(0);
					break;
				}
				$this->ctx->stop = $this->input->LT(-1);
				$this->setState(7232);
				$this->errorHandler->sync($this);

				$alt = $this->getInterpreter()->adaptivePredict($this->input, 1067, $this->ctx);

				while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
					if ($alt === 1) {
						if ($this->getParseListeners() !== null) {
						    $this->triggerExitRuleEvent();
						}

						$previousContext = $localContext;
						$localContext = new Context\LogicalExpressionContext(new Context\ExpressionContext($parentContext, $parentState));
						$this->pushNewRecursionContext($localContext, $startState, self::RULE_expression);
						$this->setState(7226);

						if (!($this->precpred($this->ctx, 3))) {
						    throw new FailedPredicateException($this, "\\\$this->precpred(\\\$this->ctx, 3)");
						}
						$this->setState(7227);
						$this->logicalOperator();
						$this->setState(7228);
						$this->recursiveExpression(4); 
					}

					$this->setState(7234);
					$this->errorHandler->sync($this);

					$alt = $this->getInterpreter()->adaptivePredict($this->input, 1067, $this->ctx);
				}
			} catch (RecognitionException $exception) {
				$localContext->exception = $exception;
				$this->errorHandler->reportError($this, $exception);
				$this->errorHandler->recover($this, $exception);
			} finally {
				$this->unrollRecursionContexts($parentContext);
			}

			return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function predicate(): Context\PredicateContext
		{
			return $this->recursivePredicate(0);
		}

		/**
		 * @throws RecognitionException
		 */
		private function recursivePredicate(int $precedence): Context\PredicateContext
		{
			$parentContext = $this->ctx;
			$parentState = $this->getState();
			$localContext = new Context\PredicateContext($this->ctx, $parentState);
			$previousContext = $localContext;
			$startState = 690;
			$this->enterRecursionRule($localContext, 690, self::RULE_predicate, $precedence);

			try {
				$this->enterOuterAlt($localContext, 1);
				$localContext = new Context\ExpressionAtomPredicateContext($localContext);
				$this->ctx = $localContext;
				$previousContext = $localContext;

				$this->setState(7236);
				$this->recursiveExpressionAtom(0);
				$this->ctx->stop = $this->input->LT(-1);
				$this->setState(7302);
				$this->errorHandler->sync($this);

				$alt = $this->getInterpreter()->adaptivePredict($this->input, 1075, $this->ctx);

				while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
					if ($alt === 1) {
						if ($this->getParseListeners() !== null) {
						    $this->triggerExitRuleEvent();
						}

						$previousContext = $localContext;
						$this->setState(7300);
						$this->errorHandler->sync($this);

						switch ($this->getInterpreter()->adaptivePredict($this->input, 1074, $this->ctx)) {
							case 1:
							    $localContext = new Context\BinaryComparisonPredicateContext(new Context\PredicateContext($parentContext, $parentState));
							    $localContext->left = $previousContext;

							    $this->pushNewRecursionContext($localContext, $startState, self::RULE_predicate);
							    $this->setState(7238);

							    if (!($this->precpred($this->ctx, 8))) {
							        throw new FailedPredicateException($this, "\\\$this->precpred(\\\$this->ctx, 8)");
							    }
							    $this->setState(7239);
							    $this->comparisonOperator();
							    $this->setState(7240);
							    $localContext->right = $this->recursivePredicate(9);
							break;

							case 2:
							    $localContext = new Context\BetweenPredicateContext(new Context\PredicateContext($parentContext, $parentState));
							    $this->pushNewRecursionContext($localContext, $startState, self::RULE_predicate);
							    $this->setState(7242);

							    if (!($this->precpred($this->ctx, 6))) {
							        throw new FailedPredicateException($this, "\\\$this->precpred(\\\$this->ctx, 6)");
							    }
							    $this->setState(7244);
							    $this->errorHandler->sync($this);
							    $_la = $this->input->LA(1);

							    if ($_la === self::NOT) {
							    	$this->setState(7243);
							    	$this->match(self::NOT);
							    }
							    $this->setState(7246);
							    $this->match(self::BETWEEN);
							    $this->setState(7247);
							    $this->recursivePredicate(0);
							    $this->setState(7248);
							    $this->match(self::AND);
							    $this->setState(7249);
							    $this->recursivePredicate(7);
							break;

							case 3:
							    $localContext = new Context\SoundsLikePredicateContext(new Context\PredicateContext($parentContext, $parentState));
							    $this->pushNewRecursionContext($localContext, $startState, self::RULE_predicate);
							    $this->setState(7251);

							    if (!($this->precpred($this->ctx, 5))) {
							        throw new FailedPredicateException($this, "\\\$this->precpred(\\\$this->ctx, 5)");
							    }
							    $this->setState(7252);
							    $this->match(self::SOUNDS);
							    $this->setState(7253);
							    $this->match(self::LIKE);
							    $this->setState(7254);
							    $this->recursivePredicate(6);
							break;

							case 4:
							    $localContext = new Context\RegexpPredicateContext(new Context\PredicateContext($parentContext, $parentState));
							    $this->pushNewRecursionContext($localContext, $startState, self::RULE_predicate);
							    $this->setState(7255);

							    if (!($this->precpred($this->ctx, 3))) {
							        throw new FailedPredicateException($this, "\\\$this->precpred(\\\$this->ctx, 3)");
							    }
							    $this->setState(7257);
							    $this->errorHandler->sync($this);
							    $_la = $this->input->LA(1);

							    if ($_la === self::NOT) {
							    	$this->setState(7256);
							    	$this->match(self::NOT);
							    }
							    $this->setState(7259);

							    $localContext->regex = $this->input->LT(1);
							    $_la = $this->input->LA(1);

							    if (!($_la === self::REGEXP || $_la === self::RLIKE)) {
							    	    $localContext->regex = $this->errorHandler->recoverInline($this);
							    } else {
							    	if ($this->input->LA(1) === Token::EOF) {
							    	    $this->matchedEOF = true;
							        }

							    	$this->errorHandler->reportMatch($this);
							    	$this->consume();
							    }
							    $this->setState(7260);
							    $this->recursivePredicate(4);
							break;

							case 5:
							    $localContext = new Context\InPredicateContext(new Context\PredicateContext($parentContext, $parentState));
							    $this->pushNewRecursionContext($localContext, $startState, self::RULE_predicate);
							    $this->setState(7261);

							    if (!($this->precpred($this->ctx, 10))) {
							        throw new FailedPredicateException($this, "\\\$this->precpred(\\\$this->ctx, 10)");
							    }
							    $this->setState(7263);
							    $this->errorHandler->sync($this);
							    $_la = $this->input->LA(1);

							    if ($_la === self::NOT) {
							    	$this->setState(7262);
							    	$this->match(self::NOT);
							    }
							    $this->setState(7265);
							    $this->match(self::IN);
							    $this->setState(7266);
							    $this->match(self::LR_BRACKET);
							    $this->setState(7269);
							    $this->errorHandler->sync($this);

							    switch ($this->getInterpreter()->adaptivePredict($this->input, 1071, $this->ctx)) {
							    	case 1:
							    	    $this->setState(7267);
							    	    $this->selectStatement();
							    	break;

							    	case 2:
							    	    $this->setState(7268);
							    	    $this->expressions();
							    	break;
							    }
							    $this->setState(7271);
							    $this->match(self::RR_BRACKET);
							break;

							case 6:
							    $localContext = new Context\IsNullPredicateContext(new Context\PredicateContext($parentContext, $parentState));
							    $this->pushNewRecursionContext($localContext, $startState, self::RULE_predicate);
							    $this->setState(7273);

							    if (!($this->precpred($this->ctx, 9))) {
							        throw new FailedPredicateException($this, "\\\$this->precpred(\\\$this->ctx, 9)");
							    }
							    $this->setState(7274);
							    $this->match(self::IS);
							    $this->setState(7275);
							    $this->nullNotnull();
							break;

							case 7:
							    $localContext = new Context\SubqueryComparisonPredicateContext(new Context\PredicateContext($parentContext, $parentState));
							    $this->pushNewRecursionContext($localContext, $startState, self::RULE_predicate);
							    $this->setState(7276);

							    if (!($this->precpred($this->ctx, 7))) {
							        throw new FailedPredicateException($this, "\\\$this->precpred(\\\$this->ctx, 7)");
							    }
							    $this->setState(7277);
							    $this->comparisonOperator();
							    $this->setState(7278);

							    $localContext->quantifier = $this->input->LT(1);
							    $_la = $this->input->LA(1);

							    if (!($_la === self::ALL || $_la === self::ANY || $_la === self::SOME)) {
							    	    $localContext->quantifier = $this->errorHandler->recoverInline($this);
							    } else {
							    	if ($this->input->LA(1) === Token::EOF) {
							    	    $this->matchedEOF = true;
							        }

							    	$this->errorHandler->reportMatch($this);
							    	$this->consume();
							    }
							    $this->setState(7279);
							    $this->match(self::LR_BRACKET);
							    $this->setState(7280);
							    $this->selectStatement();
							    $this->setState(7281);
							    $this->match(self::RR_BRACKET);
							break;

							case 8:
							    $localContext = new Context\LikePredicateContext(new Context\PredicateContext($parentContext, $parentState));
							    $this->pushNewRecursionContext($localContext, $startState, self::RULE_predicate);
							    $this->setState(7283);

							    if (!($this->precpred($this->ctx, 4))) {
							        throw new FailedPredicateException($this, "\\\$this->precpred(\\\$this->ctx, 4)");
							    }
							    $this->setState(7285);
							    $this->errorHandler->sync($this);
							    $_la = $this->input->LA(1);

							    if ($_la === self::NOT) {
							    	$this->setState(7284);
							    	$this->match(self::NOT);
							    }
							    $this->setState(7287);
							    $this->match(self::LIKE);
							    $this->setState(7288);
							    $this->recursivePredicate(0);
							    $this->setState(7291);
							    $this->errorHandler->sync($this);

							    switch ($this->getInterpreter()->adaptivePredict($this->input, 1073, $this->ctx)) {
							        case 1:
							    	    $this->setState(7289);
							    	    $this->match(self::ESCAPE);
							    	    $this->setState(7290);
							    	    $this->match(self::STRING_LITERAL);
							    	break;
							    }
							break;

							case 9:
							    $localContext = new Context\JsonMemberOfPredicateContext(new Context\PredicateContext($parentContext, $parentState));
							    $this->pushNewRecursionContext($localContext, $startState, self::RULE_predicate);
							    $this->setState(7293);

							    if (!($this->precpred($this->ctx, 2))) {
							        throw new FailedPredicateException($this, "\\\$this->precpred(\\\$this->ctx, 2)");
							    }
							    $this->setState(7294);
							    $this->match(self::MEMBER);
							    $this->setState(7295);
							    $this->match(self::OF);
							    $this->setState(7296);
							    $this->match(self::LR_BRACKET);
							    $this->setState(7297);
							    $this->recursivePredicate(0);
							    $this->setState(7298);
							    $this->match(self::RR_BRACKET);
							break;
						} 
					}

					$this->setState(7304);
					$this->errorHandler->sync($this);

					$alt = $this->getInterpreter()->adaptivePredict($this->input, 1075, $this->ctx);
				}
			} catch (RecognitionException $exception) {
				$localContext->exception = $exception;
				$this->errorHandler->reportError($this, $exception);
				$this->errorHandler->recover($this, $exception);
			} finally {
				$this->unrollRecursionContexts($parentContext);
			}

			return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function expressionAtom(): Context\ExpressionAtomContext
		{
			return $this->recursiveExpressionAtom(0);
		}

		/**
		 * @throws RecognitionException
		 */
		private function recursiveExpressionAtom(int $precedence): Context\ExpressionAtomContext
		{
			$parentContext = $this->ctx;
			$parentState = $this->getState();
			$localContext = new Context\ExpressionAtomContext($this->ctx, $parentState);
			$previousContext = $localContext;
			$startState = 692;
			$this->enterRecursionRule($localContext, 692, self::RULE_expressionAtom, $precedence);

			try {
				$this->enterOuterAlt($localContext, 1);
				$this->setState(7353);
				$this->errorHandler->sync($this);

				switch ($this->getInterpreter()->adaptivePredict($this->input, 1078, $this->ctx)) {
					case 1:
					    $localContext = new Context\ConstantExpressionAtomContext($localContext);
					    $this->ctx = $localContext;
					    $previousContext = $localContext;

					    $this->setState(7306);
					    $this->constant();
					break;

					case 2:
					    $localContext = new Context\FullColumnNameExpressionAtomContext($localContext);
					    $this->ctx = $localContext;
					    $previousContext = $localContext;
					    $this->setState(7307);
					    $this->fullColumnName();
					break;

					case 3:
					    $localContext = new Context\FunctionCallExpressionAtomContext($localContext);
					    $this->ctx = $localContext;
					    $previousContext = $localContext;
					    $this->setState(7308);
					    $this->functionCall();
					break;

					case 4:
					    $localContext = new Context\MysqlVariableExpressionAtomContext($localContext);
					    $this->ctx = $localContext;
					    $previousContext = $localContext;
					    $this->setState(7309);
					    $this->mysqlVariable();
					break;

					case 5:
					    $localContext = new Context\UnaryExpressionAtomContext($localContext);
					    $this->ctx = $localContext;
					    $previousContext = $localContext;
					    $this->setState(7310);
					    $this->unaryOperator();
					    $this->setState(7311);
					    $this->recursiveExpressionAtom(12);
					break;

					case 6:
					    $localContext = new Context\BinaryExpressionAtomContext($localContext);
					    $this->ctx = $localContext;
					    $previousContext = $localContext;
					    $this->setState(7313);
					    $this->match(self::BINARY);
					    $this->setState(7314);
					    $this->recursiveExpressionAtom(11);
					break;

					case 7:
					    $localContext = new Context\VariableAssignExpressionAtomContext($localContext);
					    $this->ctx = $localContext;
					    $previousContext = $localContext;
					    $this->setState(7315);
					    $this->match(self::LOCAL_ID);
					    $this->setState(7316);
					    $this->match(self::VAR_ASSIGN);
					    $this->setState(7317);
					    $this->recursiveExpressionAtom(10);
					break;

					case 8:
					    $localContext = new Context\NestedExpressionAtomContext($localContext);
					    $this->ctx = $localContext;
					    $previousContext = $localContext;
					    $this->setState(7318);
					    $this->match(self::LR_BRACKET);
					    $this->setState(7319);
					    $this->recursiveExpression(0);
					    $this->setState(7324);
					    $this->errorHandler->sync($this);

					    $_la = $this->input->LA(1);
					    while ($_la === self::COMMA) {
					    	$this->setState(7320);
					    	$this->match(self::COMMA);
					    	$this->setState(7321);
					    	$this->recursiveExpression(0);
					    	$this->setState(7326);
					    	$this->errorHandler->sync($this);
					    	$_la = $this->input->LA(1);
					    }
					    $this->setState(7327);
					    $this->match(self::RR_BRACKET);
					break;

					case 9:
					    $localContext = new Context\NestedRowExpressionAtomContext($localContext);
					    $this->ctx = $localContext;
					    $previousContext = $localContext;
					    $this->setState(7329);
					    $this->match(self::ROW);
					    $this->setState(7330);
					    $this->match(self::LR_BRACKET);
					    $this->setState(7331);
					    $this->recursiveExpression(0);
					    $this->setState(7334); 
					    $this->errorHandler->sync($this);

					    $_la = $this->input->LA(1);
					    do {
					    	$this->setState(7332);
					    	$this->match(self::COMMA);
					    	$this->setState(7333);
					    	$this->recursiveExpression(0);
					    	$this->setState(7336); 
					    	$this->errorHandler->sync($this);
					    	$_la = $this->input->LA(1);
					    } while ($_la === self::COMMA);
					    $this->setState(7338);
					    $this->match(self::RR_BRACKET);
					break;

					case 10:
					    $localContext = new Context\ExistsExpressionAtomContext($localContext);
					    $this->ctx = $localContext;
					    $previousContext = $localContext;
					    $this->setState(7340);
					    $this->match(self::EXISTS);
					    $this->setState(7341);
					    $this->match(self::LR_BRACKET);
					    $this->setState(7342);
					    $this->selectStatement();
					    $this->setState(7343);
					    $this->match(self::RR_BRACKET);
					break;

					case 11:
					    $localContext = new Context\SubqueryExpressionAtomContext($localContext);
					    $this->ctx = $localContext;
					    $previousContext = $localContext;
					    $this->setState(7345);
					    $this->match(self::LR_BRACKET);
					    $this->setState(7346);
					    $this->selectStatement();
					    $this->setState(7347);
					    $this->match(self::RR_BRACKET);
					break;

					case 12:
					    $localContext = new Context\IntervalExpressionAtomContext($localContext);
					    $this->ctx = $localContext;
					    $previousContext = $localContext;
					    $this->setState(7349);
					    $this->match(self::INTERVAL);
					    $this->setState(7350);
					    $this->recursiveExpression(0);
					    $this->setState(7351);
					    $this->intervalType();
					break;
				}
				$this->ctx->stop = $this->input->LT(-1);
				$this->setState(7376);
				$this->errorHandler->sync($this);

				$alt = $this->getInterpreter()->adaptivePredict($this->input, 1080, $this->ctx);

				while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
					if ($alt === 1) {
						if ($this->getParseListeners() !== null) {
						    $this->triggerExitRuleEvent();
						}

						$previousContext = $localContext;
						$this->setState(7374);
						$this->errorHandler->sync($this);

						switch ($this->getInterpreter()->adaptivePredict($this->input, 1079, $this->ctx)) {
							case 1:
							    $localContext = new Context\BitExpressionAtomContext(new Context\ExpressionAtomContext($parentContext, $parentState));
							    $localContext->left = $previousContext;

							    $this->pushNewRecursionContext($localContext, $startState, self::RULE_expressionAtom);
							    $this->setState(7355);

							    if (!($this->precpred($this->ctx, 4))) {
							        throw new FailedPredicateException($this, "\\\$this->precpred(\\\$this->ctx, 4)");
							    }
							    $this->setState(7356);
							    $this->bitOperator();
							    $this->setState(7357);
							    $localContext->right = $this->recursiveExpressionAtom(5);
							break;

							case 2:
							    $localContext = new Context\MathExpressionAtomContext(new Context\ExpressionAtomContext($parentContext, $parentState));
							    $localContext->left = $previousContext;

							    $this->pushNewRecursionContext($localContext, $startState, self::RULE_expressionAtom);
							    $this->setState(7359);

							    if (!($this->precpred($this->ctx, 3))) {
							        throw new FailedPredicateException($this, "\\\$this->precpred(\\\$this->ctx, 3)");
							    }
							    $this->setState(7360);
							    $this->multOperator();
							    $this->setState(7361);
							    $localContext->right = $this->recursiveExpressionAtom(4);
							break;

							case 3:
							    $localContext = new Context\MathExpressionAtomContext(new Context\ExpressionAtomContext($parentContext, $parentState));
							    $localContext->left = $previousContext;

							    $this->pushNewRecursionContext($localContext, $startState, self::RULE_expressionAtom);
							    $this->setState(7363);

							    if (!($this->precpred($this->ctx, 2))) {
							        throw new FailedPredicateException($this, "\\\$this->precpred(\\\$this->ctx, 2)");
							    }
							    $this->setState(7364);
							    $this->addOperator();
							    $this->setState(7365);
							    $localContext->right = $this->recursiveExpressionAtom(3);
							break;

							case 4:
							    $localContext = new Context\JsonExpressionAtomContext(new Context\ExpressionAtomContext($parentContext, $parentState));
							    $localContext->left = $previousContext;

							    $this->pushNewRecursionContext($localContext, $startState, self::RULE_expressionAtom);
							    $this->setState(7367);

							    if (!($this->precpred($this->ctx, 1))) {
							        throw new FailedPredicateException($this, "\\\$this->precpred(\\\$this->ctx, 1)");
							    }
							    $this->setState(7368);
							    $this->jsonOperator();
							    $this->setState(7369);
							    $localContext->right = $this->recursiveExpressionAtom(2);
							break;

							case 5:
							    $localContext = new Context\CollateExpressionAtomContext(new Context\ExpressionAtomContext($parentContext, $parentState));
							    $this->pushNewRecursionContext($localContext, $startState, self::RULE_expressionAtom);
							    $this->setState(7371);

							    if (!($this->precpred($this->ctx, 14))) {
							        throw new FailedPredicateException($this, "\\\$this->precpred(\\\$this->ctx, 14)");
							    }
							    $this->setState(7372);
							    $this->match(self::COLLATE);
							    $this->setState(7373);
							    $this->collationName();
							break;
						} 
					}

					$this->setState(7378);
					$this->errorHandler->sync($this);

					$alt = $this->getInterpreter()->adaptivePredict($this->input, 1080, $this->ctx);
				}
			} catch (RecognitionException $exception) {
				$localContext->exception = $exception;
				$this->errorHandler->reportError($this, $exception);
				$this->errorHandler->recover($this, $exception);
			} finally {
				$this->unrollRecursionContexts($parentContext);
			}

			return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function unaryOperator(): Context\UnaryOperatorContext
		{
		    $localContext = new Context\UnaryOperatorContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 694, self::RULE_unaryOperator);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(7379);

		        $_la = $this->input->LA(1);

		        if (!($_la === self::NOT || (((($_la - 1120)) & ~0x3f) === 0 && ((1 << ($_la - 1120)) & 387) !== 0))) {
		        $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function comparisonOperator(): Context\ComparisonOperatorContext
		{
		    $localContext = new Context\ComparisonOperatorContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 696, self::RULE_comparisonOperator);

		    try {
		        $this->setState(7395);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 1081, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(7381);
		        	    $this->match(self::EQUAL_SYMBOL);
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(7382);
		        	    $this->match(self::GREATER_SYMBOL);
		        	break;

		        	case 3:
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(7383);
		        	    $this->match(self::LESS_SYMBOL);
		        	break;

		        	case 4:
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(7384);
		        	    $this->match(self::LESS_SYMBOL);
		        	    $this->setState(7385);
		        	    $this->match(self::EQUAL_SYMBOL);
		        	break;

		        	case 5:
		        	    $this->enterOuterAlt($localContext, 5);
		        	    $this->setState(7386);
		        	    $this->match(self::GREATER_SYMBOL);
		        	    $this->setState(7387);
		        	    $this->match(self::EQUAL_SYMBOL);
		        	break;

		        	case 6:
		        	    $this->enterOuterAlt($localContext, 6);
		        	    $this->setState(7388);
		        	    $this->match(self::LESS_SYMBOL);
		        	    $this->setState(7389);
		        	    $this->match(self::GREATER_SYMBOL);
		        	break;

		        	case 7:
		        	    $this->enterOuterAlt($localContext, 7);
		        	    $this->setState(7390);
		        	    $this->match(self::EXCLAMATION_SYMBOL);
		        	    $this->setState(7391);
		        	    $this->match(self::EQUAL_SYMBOL);
		        	break;

		        	case 8:
		        	    $this->enterOuterAlt($localContext, 8);
		        	    $this->setState(7392);
		        	    $this->match(self::LESS_SYMBOL);
		        	    $this->setState(7393);
		        	    $this->match(self::EQUAL_SYMBOL);
		        	    $this->setState(7394);
		        	    $this->match(self::GREATER_SYMBOL);
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function logicalOperator(): Context\LogicalOperatorContext
		{
		    $localContext = new Context\LogicalOperatorContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 698, self::RULE_logicalOperator);

		    try {
		        $this->setState(7404);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::AND:
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(7397);
		            	$this->match(self::AND);
		            	break;

		            case self::BIT_AND_OP:
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(7398);
		            	$this->match(self::BIT_AND_OP);
		            	$this->setState(7399);
		            	$this->match(self::BIT_AND_OP);
		            	break;

		            case self::XOR:
		            	$this->enterOuterAlt($localContext, 3);
		            	$this->setState(7400);
		            	$this->match(self::XOR);
		            	break;

		            case self::OR:
		            	$this->enterOuterAlt($localContext, 4);
		            	$this->setState(7401);
		            	$this->match(self::OR);
		            	break;

		            case self::BIT_OR_OP:
		            	$this->enterOuterAlt($localContext, 5);
		            	$this->setState(7402);
		            	$this->match(self::BIT_OR_OP);
		            	$this->setState(7403);
		            	$this->match(self::BIT_OR_OP);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function bitOperator(): Context\BitOperatorContext
		{
		    $localContext = new Context\BitOperatorContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 700, self::RULE_bitOperator);

		    try {
		        $this->setState(7413);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::LESS_SYMBOL:
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(7406);
		            	$this->match(self::LESS_SYMBOL);
		            	$this->setState(7407);
		            	$this->match(self::LESS_SYMBOL);
		            	break;

		            case self::GREATER_SYMBOL:
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(7408);
		            	$this->match(self::GREATER_SYMBOL);
		            	$this->setState(7409);
		            	$this->match(self::GREATER_SYMBOL);
		            	break;

		            case self::BIT_AND_OP:
		            	$this->enterOuterAlt($localContext, 3);
		            	$this->setState(7410);
		            	$this->match(self::BIT_AND_OP);
		            	break;

		            case self::BIT_XOR_OP:
		            	$this->enterOuterAlt($localContext, 4);
		            	$this->setState(7411);
		            	$this->match(self::BIT_XOR_OP);
		            	break;

		            case self::BIT_OR_OP:
		            	$this->enterOuterAlt($localContext, 5);
		            	$this->setState(7412);
		            	$this->match(self::BIT_OR_OP);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function multOperator(): Context\MultOperatorContext
		{
		    $localContext = new Context\MultOperatorContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 702, self::RULE_multOperator);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(7415);

		        $_la = $this->input->LA(1);

		        if (!((((($_la - 1117)) & ~0x3f) === 0 && ((1 << ($_la - 1117)) & 103) !== 0))) {
		        $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function addOperator(): Context\AddOperatorContext
		{
		    $localContext = new Context\AddOperatorContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 704, self::RULE_addOperator);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(7417);

		        $_la = $this->input->LA(1);

		        if (!($_la === self::PLUS || $_la === self::MINUS)) {
		        $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function jsonOperator(): Context\JsonOperatorContext
		{
		    $localContext = new Context\JsonOperatorContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 706, self::RULE_jsonOperator);

		    try {
		        $this->setState(7424);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 1084, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(7419);
		        	    $this->match(self::MINUS);
		        	    $this->setState(7420);
		        	    $this->match(self::GREATER_SYMBOL);
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(7421);
		        	    $this->match(self::MINUS);
		        	    $this->setState(7422);
		        	    $this->match(self::GREATER_SYMBOL);
		        	    $this->setState(7423);
		        	    $this->match(self::GREATER_SYMBOL);
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function charsetNameBase(): Context\CharsetNameBaseContext
		{
		    $localContext = new Context\CharsetNameBaseContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 708, self::RULE_charsetNameBase);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(7426);

		        $_la = $this->input->LA(1);

		        if (!($_la === self::BINARY || (((($_la - 746)) & ~0x3f) === 0 && ((1 << ($_la - 746)) & 2199023255551) !== 0))) {
		        $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function transactionLevelBase(): Context\TransactionLevelBaseContext
		{
		    $localContext = new Context\TransactionLevelBaseContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 710, self::RULE_transactionLevelBase);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(7428);

		        $_la = $this->input->LA(1);

		        if (!((((($_la - 799)) & ~0x3f) === 0 && ((1 << ($_la - 799)) & 15) !== 0))) {
		        $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function privilegesBase(): Context\PrivilegesBaseContext
		{
		    $localContext = new Context\PrivilegesBaseContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 712, self::RULE_privilegesBase);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(7430);

		        $_la = $this->input->LA(1);

		        if (!((((($_la - 708)) & ~0x3f) === 0 && ((1 << ($_la - 708)) & 23656792067) !== 0))) {
		        $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function intervalTypeBase(): Context\IntervalTypeBaseContext
		{
		    $localContext = new Context\IntervalTypeBaseContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 714, self::RULE_intervalTypeBase);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(7432);

		        $_la = $this->input->LA(1);

		        if (!((((($_la - 689)) & ~0x3f) === 0 && ((1 << ($_la - 689)) & 255) !== 0))) {
		        $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function dataTypeBase(): Context\DataTypeBaseContext
		{
		    $localContext = new Context\DataTypeBaseContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 716, self::RULE_dataTypeBase);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(7434);

		        $_la = $this->input->LA(1);

		        if (!((((($_la - 217)) & ~0x3f) === 0 && ((1 << ($_la - 217)) & 1179679) !== 0))) {
		        $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function keywordsCanBeId(): Context\KeywordsCanBeIdContext
		{
		    $localContext = new Context\KeywordsCanBeIdContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 718, self::RULE_keywordsCanBeId);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(7436);

		        $_la = $this->input->LA(1);

		        if (!(((($_la) & ~0x3f) === 0 && ((1 << $_la) & 756890782757308416) !== 0) || (((($_la - 73)) & ~0x3f) === 0 && ((1 << ($_la - 73)) & 146666055054393409) !== 0) || $_la === self::SKIP_QUERY_REWRITE || $_la === self::STACKED || (((($_la - 239)) & ~0x3f) === 0 && ((1 << ($_la - 239)) & 1769897061370560513) !== 0) || (((($_la - 305)) & ~0x3f) === 0 && ((1 << ($_la - 305)) & -134217473) !== 0) || (((($_la - 369)) & ~0x3f) === 0 && ((1 << ($_la - 369)) & -171798822913) !== 0) || (((($_la - 434)) & ~0x3f) === 0 && ((1 << ($_la - 434)) & -33685505) !== 0) || (((($_la - 498)) & ~0x3f) === 0 && ((1 << ($_la - 498)) & -2306265222165299201) !== 0) || (((($_la - 562)) & ~0x3f) === 0 && ((1 << ($_la - 562)) & -35186788007937) !== 0) || (((($_la - 626)) & ~0x3f) === 0 && ((1 << ($_la - 626)) & 9077990211383719935) !== 0) || (((($_la - 697)) & ~0x3f) === 0 && ((1 << ($_la - 697)) & 514225960183805) !== 0) || $_la === self::MEMORY || $_la === self::CATALOG_NAME || $_la === self::ENGINE_ATTRIBUTE || $_la === self::SECONDARY_ENGINE_ATTRIBUTE || $_la === self::SCHEMA_NAME || $_la === self::TP_CONNECTION_ADMIN)) {
		        $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function functionNameBase(): Context\FunctionNameBaseContext
		{
		    $localContext = new Context\FunctionNameBaseContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 720, self::RULE_functionNameBase);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(7438);

		        $_la = $this->input->LA(1);

		        if (!($_la === self::DATABASE || (((($_la - 97)) & ~0x3f) === 0 && ((1 << ($_la - 97)) & 11258999068426241) !== 0) || (((($_la - 217)) & ~0x3f) === 0 && ((1 << ($_la - 217)) & -17179869161) !== 0) || (((($_la - 281)) & ~0x3f) === 0 && ((1 << ($_la - 281)) & 8796109397507) !== 0) || $_la === self::INVISIBLE || (((($_la - 673)) & ~0x3f) === 0 && ((1 << ($_la - 673)) & -9223372036838064127) !== 0) || (((($_la - 803)) & ~0x3f) === 0 && ((1 << ($_la - 803)) & -8589934599) !== 0) || (((($_la - 867)) & ~0x3f) === 0 && ((1 << ($_la - 867)) & -257) !== 0) || (((($_la - 931)) & ~0x3f) === 0 && ((1 << ($_la - 931)) & -1) !== 0) || (((($_la - 995)) & ~0x3f) === 0 && ((1 << ($_la - 995)) & -1057) !== 0) || (((($_la - 1059)) & ~0x3f) === 0 && ((1 << ($_la - 1059)) & 562949416550399) !== 0) || $_la === self::MOD)) {
		        $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		public function sempred(?RuleContext $localContext, int $ruleIndex, int $predicateIndex): bool
		{
			switch ($ruleIndex) {
					case 344:
						return $this->sempredExpression($localContext, $predicateIndex);

					case 345:
						return $this->sempredPredicate($localContext, $predicateIndex);

					case 346:
						return $this->sempredExpressionAtom($localContext, $predicateIndex);

				default:
					return true;
				}
		}

		private function sempredExpression(?Context\ExpressionContext $localContext, int $predicateIndex): bool
		{
			switch ($predicateIndex) {
			    case 0:
			        return $this->precpred($this->ctx, 3);
			}

			return true;
		}

		private function sempredPredicate(?Context\PredicateContext $localContext, int $predicateIndex): bool
		{
			switch ($predicateIndex) {
			    case 1:
			        return $this->precpred($this->ctx, 8);

			    case 2:
			        return $this->precpred($this->ctx, 6);

			    case 3:
			        return $this->precpred($this->ctx, 5);

			    case 4:
			        return $this->precpred($this->ctx, 3);

			    case 5:
			        return $this->precpred($this->ctx, 10);

			    case 6:
			        return $this->precpred($this->ctx, 9);

			    case 7:
			        return $this->precpred($this->ctx, 7);

			    case 8:
			        return $this->precpred($this->ctx, 4);

			    case 9:
			        return $this->precpred($this->ctx, 2);
			}

			return true;
		}

		private function sempredExpressionAtom(?Context\ExpressionAtomContext $localContext, int $predicateIndex): bool
		{
			switch ($predicateIndex) {
			    case 10:
			        return $this->precpred($this->ctx, 4);

			    case 11:
			        return $this->precpred($this->ctx, 3);

			    case 12:
			        return $this->precpred($this->ctx, 2);

			    case 13:
			        return $this->precpred($this->ctx, 1);

			    case 14:
			        return $this->precpred($this->ctx, 14);
			}

			return true;
		}
	}
}

